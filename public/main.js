!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";function r(){}n.r(e),n.d(e,"WebGLRenderTargetCube",(function(){return dn})),n.d(e,"WebGLRenderTarget",(function(){return ln})),n.d(e,"WebGLRenderer",(function(){return xo})),n.d(e,"ShaderLib",(function(){return An})),n.d(e,"UniformsLib",(function(){return Tn})),n.d(e,"UniformsUtils",(function(){return _n})),n.d(e,"ShaderChunk",(function(){return wn})),n.d(e,"FogExp2",(function(){return bo})),n.d(e,"Fog",(function(){return wo})),n.d(e,"Scene",(function(){return _o})),n.d(e,"Sprite",(function(){return To})),n.d(e,"LOD",(function(){return Ao})),n.d(e,"SkinnedMesh",(function(){return Po})),n.d(e,"Skeleton",(function(){return Lo})),n.d(e,"Bone",(function(){return Co})),n.d(e,"Mesh",(function(){return Sr})),n.d(e,"LineSegments",(function(){return Io})),n.d(e,"LineLoop",(function(){return Do})),n.d(e,"Line",(function(){return Oo})),n.d(e,"Points",(function(){return No})),n.d(e,"Group",(function(){return ro})),n.d(e,"VideoTexture",(function(){return Bo})),n.d(e,"DataTexture",(function(){return pn})),n.d(e,"DataTexture3D",(function(){return Ur})),n.d(e,"CompressedTexture",(function(){return Uo})),n.d(e,"CubeTexture",(function(){return Br})),n.d(e,"CanvasTexture",(function(){return Fo})),n.d(e,"DepthTexture",(function(){return Go})),n.d(e,"Texture",(function(){return hn})),n.d(e,"AnimationLoader",(function(){return Rs})),n.d(e,"CompressedTextureLoader",(function(){return Os})),n.d(e,"DataTextureLoader",(function(){return Is})),n.d(e,"CubeTextureLoader",(function(){return zs})),n.d(e,"TextureLoader",(function(){return Ns})),n.d(e,"ObjectLoader",(function(){return Ac})),n.d(e,"MaterialLoader",(function(){return gc})),n.d(e,"BufferGeometryLoader",(function(){return xc})),n.d(e,"DefaultLoadingManager",(function(){return Ls})),n.d(e,"LoadingManager",(function(){return As})),n.d(e,"JSONLoader",(function(){return Tc})),n.d(e,"ImageLoader",(function(){return Ds})),n.d(e,"ImageBitmapLoader",(function(){return Oc})),n.d(e,"FontLoader",(function(){return Nc})),n.d(e,"FileLoader",(function(){return Ps})),n.d(e,"Loader",(function(){return Sc})),n.d(e,"LoaderUtils",(function(){return yc})),n.d(e,"Cache",(function(){return Ts})),n.d(e,"AudioLoader",(function(){return Yc})),n.d(e,"SpotLightShadow",(function(){return hc})),n.d(e,"SpotLight",(function(){return uc})),n.d(e,"PointLight",(function(){return lc})),n.d(e,"RectAreaLight",(function(){return vc})),n.d(e,"HemisphereLight",(function(){return sc})),n.d(e,"DirectionalLightShadow",(function(){return pc})),n.d(e,"DirectionalLight",(function(){return fc})),n.d(e,"AmbientLight",(function(){return mc})),n.d(e,"LightShadow",(function(){return cc})),n.d(e,"Light",(function(){return ac})),n.d(e,"StereoCamera",(function(){return Jc})),n.d(e,"PerspectiveCamera",(function(){return oo})),n.d(e,"OrthographicCamera",(function(){return dc})),n.d(e,"CubeCamera",(function(){return Zc})),n.d(e,"ArrayCamera",(function(){return ao})),n.d(e,"Camera",(function(){return io})),n.d(e,"AudioListener",(function(){return Kc})),n.d(e,"PositionalAudio",(function(){return th})),n.d(e,"AudioContext",(function(){return Xc})),n.d(e,"AudioAnalyser",(function(){return eh})),n.d(e,"Audio",(function(){return $c})),n.d(e,"VectorKeyframeTrack",(function(){return Ms})),n.d(e,"StringKeyframeTrack",(function(){return _s})),n.d(e,"QuaternionKeyframeTrack",(function(){return ws})),n.d(e,"NumberKeyframeTrack",(function(){return xs})),n.d(e,"ColorKeyframeTrack",(function(){return ys})),n.d(e,"BooleanKeyframeTrack",(function(){return gs})),n.d(e,"PropertyMixer",(function(){return nh})),n.d(e,"PropertyBinding",(function(){return yh})),n.d(e,"KeyframeTrack",(function(){return vs})),n.d(e,"AnimationUtils",(function(){return ls})),n.d(e,"AnimationObjectGroup",(function(){return xh})),n.d(e,"AnimationMixer",(function(){return wh})),n.d(e,"AnimationClip",(function(){return Es})),n.d(e,"Uniform",(function(){return _h})),n.d(e,"InstancedBufferGeometry",(function(){return Mh})),n.d(e,"BufferGeometry",(function(){return nr})),n.d(e,"Geometry",(function(){return kn})),n.d(e,"InterleavedBufferAttribute",(function(){return Eo})),n.d(e,"InstancedInterleavedBuffer",(function(){return Eh})),n.d(e,"InterleavedBuffer",(function(){return Mo})),n.d(e,"InstancedBufferAttribute",(function(){return Sh})),n.d(e,"Face3",(function(){return Pn})),n.d(e,"Object3D",(function(){return Un})),n.d(e,"Raycaster",(function(){return Th})),n.d(e,"Layers",(function(){return On})),n.d(e,"EventDispatcher",(function(){return r})),n.d(e,"Clock",(function(){return Qc})),n.d(e,"QuaternionLinearInterpolant",(function(){return bs})),n.d(e,"LinearInterpolant",(function(){return fs})),n.d(e,"DiscreteInterpolant",(function(){return ms})),n.d(e,"CubicInterpolant",(function(){return ps})),n.d(e,"Interpolant",(function(){return ds})),n.d(e,"Triangle",(function(){return Mr})),n.d(e,"Math",(function(){return Je})),n.d(e,"Spherical",(function(){return Ch})),n.d(e,"Cylindrical",(function(){return Ph})),n.d(e,"Plane",(function(){return vn})),n.d(e,"Frustum",(function(){return gn})),n.d(e,"Sphere",(function(){return mn})),n.d(e,"Ray",(function(){return _r})),n.d(e,"Matrix4",(function(){return Qe})),n.d(e,"Matrix3",(function(){return tn})),n.d(e,"Box3",(function(){return fn})),n.d(e,"Box2",(function(){return Rh})),n.d(e,"Line3",(function(){return Oh})),n.d(e,"Euler",(function(){return Rn})),n.d(e,"Vector4",(function(){return un})),n.d(e,"Vector3",(function(){return $e})),n.d(e,"Vector2",(function(){return Ze})),n.d(e,"Quaternion",(function(){return Ke})),n.d(e,"Color",(function(){return En})),n.d(e,"ImmediateRenderObject",(function(){return Ih})),n.d(e,"VertexNormalsHelper",(function(){return Dh})),n.d(e,"SpotLightHelper",(function(){return zh})),n.d(e,"SkeletonHelper",(function(){return Nh})),n.d(e,"PointLightHelper",(function(){return Bh})),n.d(e,"RectAreaLightHelper",(function(){return Uh})),n.d(e,"HemisphereLightHelper",(function(){return Fh})),n.d(e,"GridHelper",(function(){return Gh})),n.d(e,"PolarGridHelper",(function(){return Hh})),n.d(e,"FaceNormalsHelper",(function(){return kh})),n.d(e,"DirectionalLightHelper",(function(){return Vh})),n.d(e,"CameraHelper",(function(){return jh})),n.d(e,"BoxHelper",(function(){return Wh})),n.d(e,"Box3Helper",(function(){return qh})),n.d(e,"PlaneHelper",(function(){return Xh})),n.d(e,"ArrowHelper",(function(){return Yh})),n.d(e,"AxesHelper",(function(){return Jh})),n.d(e,"Shape",(function(){return oc})),n.d(e,"Path",(function(){return ic})),n.d(e,"ShapePath",(function(){return Ic})),n.d(e,"Font",(function(){return Dc})),n.d(e,"CurvePath",(function(){return rc})),n.d(e,"Curve",(function(){return Bs})),n.d(e,"ImageUtils",(function(){return sn})),n.d(e,"ShapeUtils",(function(){return La})),n.d(e,"WebGLUtils",(function(){return no})),n.d(e,"WireframeGeometry",(function(){return Ho})),n.d(e,"ParametricGeometry",(function(){return ko})),n.d(e,"ParametricBufferGeometry",(function(){return Vo})),n.d(e,"TetrahedronGeometry",(function(){return qo})),n.d(e,"TetrahedronBufferGeometry",(function(){return Xo})),n.d(e,"OctahedronGeometry",(function(){return Yo})),n.d(e,"OctahedronBufferGeometry",(function(){return Jo})),n.d(e,"IcosahedronGeometry",(function(){return Zo})),n.d(e,"IcosahedronBufferGeometry",(function(){return Qo})),n.d(e,"DodecahedronGeometry",(function(){return Ko})),n.d(e,"DodecahedronBufferGeometry",(function(){return $o})),n.d(e,"PolyhedronGeometry",(function(){return jo})),n.d(e,"PolyhedronBufferGeometry",(function(){return Wo})),n.d(e,"TubeGeometry",(function(){return ta})),n.d(e,"TubeBufferGeometry",(function(){return ea})),n.d(e,"TorusKnotGeometry",(function(){return na})),n.d(e,"TorusKnotBufferGeometry",(function(){return ra})),n.d(e,"TorusGeometry",(function(){return ia})),n.d(e,"TorusBufferGeometry",(function(){return oa})),n.d(e,"TextGeometry",(function(){return za})),n.d(e,"TextBufferGeometry",(function(){return Na})),n.d(e,"SphereGeometry",(function(){return Ba})),n.d(e,"SphereBufferGeometry",(function(){return Ua})),n.d(e,"RingGeometry",(function(){return Fa})),n.d(e,"RingBufferGeometry",(function(){return Ga})),n.d(e,"PlaneGeometry",(function(){return or})),n.d(e,"PlaneBufferGeometry",(function(){return ar})),n.d(e,"LatheGeometry",(function(){return Ha})),n.d(e,"LatheBufferGeometry",(function(){return ka})),n.d(e,"ShapeGeometry",(function(){return Va})),n.d(e,"ShapeBufferGeometry",(function(){return ja})),n.d(e,"ExtrudeGeometry",(function(){return Ra})),n.d(e,"ExtrudeBufferGeometry",(function(){return Oa})),n.d(e,"EdgesGeometry",(function(){return qa})),n.d(e,"ConeGeometry",(function(){return Ja})),n.d(e,"ConeBufferGeometry",(function(){return Za})),n.d(e,"CylinderGeometry",(function(){return Xa})),n.d(e,"CylinderBufferGeometry",(function(){return Ya})),n.d(e,"CircleGeometry",(function(){return Qa})),n.d(e,"CircleBufferGeometry",(function(){return Ka})),n.d(e,"BoxGeometry",(function(){return rr})),n.d(e,"BoxBufferGeometry",(function(){return ir})),n.d(e,"ShadowMaterial",(function(){return ts})),n.d(e,"SpriteMaterial",(function(){return So})),n.d(e,"RawShaderMaterial",(function(){return es})),n.d(e,"ShaderMaterial",(function(){return wr})),n.d(e,"PointsMaterial",(function(){return zo})),n.d(e,"MeshPhysicalMaterial",(function(){return rs})),n.d(e,"MeshStandardMaterial",(function(){return ns})),n.d(e,"MeshPhongMaterial",(function(){return is})),n.d(e,"MeshToonMaterial",(function(){return os})),n.d(e,"MeshNormalMaterial",(function(){return as})),n.d(e,"MeshLambertMaterial",(function(){return ss})),n.d(e,"MeshDepthMaterial",(function(){return Qi})),n.d(e,"MeshDistanceMaterial",(function(){return Ki})),n.d(e,"MeshBasicMaterial",(function(){return Er})),n.d(e,"MeshMatcapMaterial",(function(){return cs})),n.d(e,"LineDashedMaterial",(function(){return hs})),n.d(e,"LineBasicMaterial",(function(){return Ro})),n.d(e,"Material",(function(){return br})),n.d(e,"Float64BufferAttribute",(function(){return Kn})),n.d(e,"Float32BufferAttribute",(function(){return Qn})),n.d(e,"Uint32BufferAttribute",(function(){return Zn})),n.d(e,"Int32BufferAttribute",(function(){return Jn})),n.d(e,"Uint16BufferAttribute",(function(){return Yn})),n.d(e,"Int16BufferAttribute",(function(){return Xn})),n.d(e,"Uint8ClampedBufferAttribute",(function(){return qn})),n.d(e,"Uint8BufferAttribute",(function(){return Wn})),n.d(e,"Int8BufferAttribute",(function(){return jn})),n.d(e,"BufferAttribute",(function(){return Vn})),n.d(e,"ArcCurve",(function(){return Fs})),n.d(e,"CatmullRomCurve3",(function(){return Ws})),n.d(e,"CubicBezierCurve",(function(){return Js})),n.d(e,"CubicBezierCurve3",(function(){return Zs})),n.d(e,"EllipseCurve",(function(){return Us})),n.d(e,"LineCurve",(function(){return Qs})),n.d(e,"LineCurve3",(function(){return Ks})),n.d(e,"QuadraticBezierCurve",(function(){return $s})),n.d(e,"QuadraticBezierCurve3",(function(){return tc})),n.d(e,"SplineCurve",(function(){return ec})),n.d(e,"REVISION",(function(){return m})),n.d(e,"MOUSE",(function(){return v})),n.d(e,"CullFaceNone",(function(){return g})),n.d(e,"CullFaceBack",(function(){return y})),n.d(e,"CullFaceFront",(function(){return x})),n.d(e,"CullFaceFrontBack",(function(){return b})),n.d(e,"FrontFaceDirectionCW",(function(){return w})),n.d(e,"FrontFaceDirectionCCW",(function(){return _})),n.d(e,"BasicShadowMap",(function(){return M})),n.d(e,"PCFShadowMap",(function(){return E})),n.d(e,"PCFSoftShadowMap",(function(){return S})),n.d(e,"FrontSide",(function(){return T})),n.d(e,"BackSide",(function(){return A})),n.d(e,"DoubleSide",(function(){return L})),n.d(e,"FlatShading",(function(){return C})),n.d(e,"SmoothShading",(function(){return P})),n.d(e,"NoColors",(function(){return R})),n.d(e,"FaceColors",(function(){return O})),n.d(e,"VertexColors",(function(){return I})),n.d(e,"NoBlending",(function(){return D})),n.d(e,"NormalBlending",(function(){return z})),n.d(e,"AdditiveBlending",(function(){return N})),n.d(e,"SubtractiveBlending",(function(){return B})),n.d(e,"MultiplyBlending",(function(){return U})),n.d(e,"CustomBlending",(function(){return F})),n.d(e,"AddEquation",(function(){return G})),n.d(e,"SubtractEquation",(function(){return H})),n.d(e,"ReverseSubtractEquation",(function(){return k})),n.d(e,"MinEquation",(function(){return V})),n.d(e,"MaxEquation",(function(){return j})),n.d(e,"ZeroFactor",(function(){return W})),n.d(e,"OneFactor",(function(){return q})),n.d(e,"SrcColorFactor",(function(){return X})),n.d(e,"OneMinusSrcColorFactor",(function(){return Y})),n.d(e,"SrcAlphaFactor",(function(){return J})),n.d(e,"OneMinusSrcAlphaFactor",(function(){return Z})),n.d(e,"DstAlphaFactor",(function(){return Q})),n.d(e,"OneMinusDstAlphaFactor",(function(){return K})),n.d(e,"DstColorFactor",(function(){return $})),n.d(e,"OneMinusDstColorFactor",(function(){return tt})),n.d(e,"SrcAlphaSaturateFactor",(function(){return et})),n.d(e,"NeverDepth",(function(){return nt})),n.d(e,"AlwaysDepth",(function(){return rt})),n.d(e,"LessDepth",(function(){return it})),n.d(e,"LessEqualDepth",(function(){return ot})),n.d(e,"EqualDepth",(function(){return at})),n.d(e,"GreaterEqualDepth",(function(){return st})),n.d(e,"GreaterDepth",(function(){return ct})),n.d(e,"NotEqualDepth",(function(){return ht})),n.d(e,"MultiplyOperation",(function(){return ut})),n.d(e,"MixOperation",(function(){return lt})),n.d(e,"AddOperation",(function(){return dt})),n.d(e,"NoToneMapping",(function(){return pt})),n.d(e,"LinearToneMapping",(function(){return ft})),n.d(e,"ReinhardToneMapping",(function(){return mt})),n.d(e,"Uncharted2ToneMapping",(function(){return vt})),n.d(e,"CineonToneMapping",(function(){return gt})),n.d(e,"UVMapping",(function(){return yt})),n.d(e,"CubeReflectionMapping",(function(){return xt})),n.d(e,"CubeRefractionMapping",(function(){return bt})),n.d(e,"EquirectangularReflectionMapping",(function(){return wt})),n.d(e,"EquirectangularRefractionMapping",(function(){return _t})),n.d(e,"SphericalReflectionMapping",(function(){return Mt})),n.d(e,"CubeUVReflectionMapping",(function(){return Et})),n.d(e,"CubeUVRefractionMapping",(function(){return St})),n.d(e,"RepeatWrapping",(function(){return Tt})),n.d(e,"ClampToEdgeWrapping",(function(){return At})),n.d(e,"MirroredRepeatWrapping",(function(){return Lt})),n.d(e,"NearestFilter",(function(){return Ct})),n.d(e,"NearestMipMapNearestFilter",(function(){return Pt})),n.d(e,"NearestMipMapLinearFilter",(function(){return Rt})),n.d(e,"LinearFilter",(function(){return Ot})),n.d(e,"LinearMipMapNearestFilter",(function(){return It})),n.d(e,"LinearMipMapLinearFilter",(function(){return Dt})),n.d(e,"UnsignedByteType",(function(){return zt})),n.d(e,"ByteType",(function(){return Nt})),n.d(e,"ShortType",(function(){return Bt})),n.d(e,"UnsignedShortType",(function(){return Ut})),n.d(e,"IntType",(function(){return Ft})),n.d(e,"UnsignedIntType",(function(){return Gt})),n.d(e,"FloatType",(function(){return Ht})),n.d(e,"HalfFloatType",(function(){return kt})),n.d(e,"UnsignedShort4444Type",(function(){return Vt})),n.d(e,"UnsignedShort5551Type",(function(){return jt})),n.d(e,"UnsignedShort565Type",(function(){return Wt})),n.d(e,"UnsignedInt248Type",(function(){return qt})),n.d(e,"AlphaFormat",(function(){return Xt})),n.d(e,"RGBFormat",(function(){return Yt})),n.d(e,"RGBAFormat",(function(){return Jt})),n.d(e,"LuminanceFormat",(function(){return Zt})),n.d(e,"LuminanceAlphaFormat",(function(){return Qt})),n.d(e,"RGBEFormat",(function(){return Kt})),n.d(e,"DepthFormat",(function(){return $t})),n.d(e,"DepthStencilFormat",(function(){return te})),n.d(e,"RedFormat",(function(){return ee})),n.d(e,"RGB_S3TC_DXT1_Format",(function(){return ne})),n.d(e,"RGBA_S3TC_DXT1_Format",(function(){return re})),n.d(e,"RGBA_S3TC_DXT3_Format",(function(){return ie})),n.d(e,"RGBA_S3TC_DXT5_Format",(function(){return oe})),n.d(e,"RGB_PVRTC_4BPPV1_Format",(function(){return ae})),n.d(e,"RGB_PVRTC_2BPPV1_Format",(function(){return se})),n.d(e,"RGBA_PVRTC_4BPPV1_Format",(function(){return ce})),n.d(e,"RGBA_PVRTC_2BPPV1_Format",(function(){return he})),n.d(e,"RGB_ETC1_Format",(function(){return ue})),n.d(e,"RGBA_ASTC_4x4_Format",(function(){return le})),n.d(e,"RGBA_ASTC_5x4_Format",(function(){return de})),n.d(e,"RGBA_ASTC_5x5_Format",(function(){return pe})),n.d(e,"RGBA_ASTC_6x5_Format",(function(){return fe})),n.d(e,"RGBA_ASTC_6x6_Format",(function(){return me})),n.d(e,"RGBA_ASTC_8x5_Format",(function(){return ve})),n.d(e,"RGBA_ASTC_8x6_Format",(function(){return ge})),n.d(e,"RGBA_ASTC_8x8_Format",(function(){return ye})),n.d(e,"RGBA_ASTC_10x5_Format",(function(){return xe})),n.d(e,"RGBA_ASTC_10x6_Format",(function(){return be})),n.d(e,"RGBA_ASTC_10x8_Format",(function(){return we})),n.d(e,"RGBA_ASTC_10x10_Format",(function(){return _e})),n.d(e,"RGBA_ASTC_12x10_Format",(function(){return Me})),n.d(e,"RGBA_ASTC_12x12_Format",(function(){return Ee})),n.d(e,"LoopOnce",(function(){return Se})),n.d(e,"LoopRepeat",(function(){return Te})),n.d(e,"LoopPingPong",(function(){return Ae})),n.d(e,"InterpolateDiscrete",(function(){return Le})),n.d(e,"InterpolateLinear",(function(){return Ce})),n.d(e,"InterpolateSmooth",(function(){return Pe})),n.d(e,"ZeroCurvatureEnding",(function(){return Re})),n.d(e,"ZeroSlopeEnding",(function(){return Oe})),n.d(e,"WrapAroundEnding",(function(){return Ie})),n.d(e,"TrianglesDrawMode",(function(){return De})),n.d(e,"TriangleStripDrawMode",(function(){return ze})),n.d(e,"TriangleFanDrawMode",(function(){return Ne})),n.d(e,"LinearEncoding",(function(){return Be})),n.d(e,"sRGBEncoding",(function(){return Ue})),n.d(e,"GammaEncoding",(function(){return Fe})),n.d(e,"RGBEEncoding",(function(){return Ge})),n.d(e,"LogLuvEncoding",(function(){return He})),n.d(e,"RGBM7Encoding",(function(){return ke})),n.d(e,"RGBM16Encoding",(function(){return Ve})),n.d(e,"RGBDEncoding",(function(){return je})),n.d(e,"BasicDepthPacking",(function(){return We})),n.d(e,"RGBADepthPacking",(function(){return qe})),n.d(e,"TangentSpaceNormalMap",(function(){return Xe})),n.d(e,"ObjectSpaceNormalMap",(function(){return Ye})),n.d(e,"CubeGeometry",(function(){return rr})),n.d(e,"Face4",(function(){return Zh})),n.d(e,"LineStrip",(function(){return Qh})),n.d(e,"LinePieces",(function(){return Kh})),n.d(e,"MeshFaceMaterial",(function(){return $h})),n.d(e,"MultiMaterial",(function(){return tu})),n.d(e,"PointCloud",(function(){return eu})),n.d(e,"Particle",(function(){return nu})),n.d(e,"ParticleSystem",(function(){return ru})),n.d(e,"PointCloudMaterial",(function(){return iu})),n.d(e,"ParticleBasicMaterial",(function(){return ou})),n.d(e,"ParticleSystemMaterial",(function(){return au})),n.d(e,"Vertex",(function(){return su})),n.d(e,"DynamicBufferAttribute",(function(){return cu})),n.d(e,"Int8Attribute",(function(){return hu})),n.d(e,"Uint8Attribute",(function(){return uu})),n.d(e,"Uint8ClampedAttribute",(function(){return lu})),n.d(e,"Int16Attribute",(function(){return du})),n.d(e,"Uint16Attribute",(function(){return pu})),n.d(e,"Int32Attribute",(function(){return fu})),n.d(e,"Uint32Attribute",(function(){return mu})),n.d(e,"Float32Attribute",(function(){return vu})),n.d(e,"Float64Attribute",(function(){return gu})),n.d(e,"ClosedSplineCurve3",(function(){return yu})),n.d(e,"SplineCurve3",(function(){return xu})),n.d(e,"Spline",(function(){return bu})),n.d(e,"AxisHelper",(function(){return wu})),n.d(e,"BoundingBoxHelper",(function(){return _u})),n.d(e,"EdgesHelper",(function(){return Mu})),n.d(e,"WireframeHelper",(function(){return Eu})),n.d(e,"XHRLoader",(function(){return Su})),n.d(e,"BinaryTextureLoader",(function(){return Tu})),n.d(e,"GeometryUtils",(function(){return Au})),n.d(e,"Projector",(function(){return Lu})),n.d(e,"CanvasRenderer",(function(){return Cu})),n.d(e,"SceneUtils",(function(){return Pu})),n.d(e,"LensFlare",(function(){return Ru})),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var r=arguments[n];if(null!=r)for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e}),Object.assign(r.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),r=0,i=n.length;r<i;r++)n[r].call(this,t)}}}});var i,o,a,s,c,h,u,l,d,p,f,m="98",v={LEFT:0,MIDDLE:1,RIGHT:2},g=0,y=1,x=2,b=3,w=0,_=1,M=0,E=1,S=2,T=0,A=1,L=2,C=1,P=2,R=0,O=1,I=2,D=0,z=1,N=2,B=3,U=4,F=5,G=100,H=101,k=102,V=103,j=104,W=200,q=201,X=202,Y=203,J=204,Z=205,Q=206,K=207,$=208,tt=209,et=210,nt=0,rt=1,it=2,ot=3,at=4,st=5,ct=6,ht=7,ut=0,lt=1,dt=2,pt=0,ft=1,mt=2,vt=3,gt=4,yt=300,xt=301,bt=302,wt=303,_t=304,Mt=305,Et=306,St=307,Tt=1e3,At=1001,Lt=1002,Ct=1003,Pt=1004,Rt=1005,Ot=1006,It=1007,Dt=1008,zt=1009,Nt=1010,Bt=1011,Ut=1012,Ft=1013,Gt=1014,Ht=1015,kt=1016,Vt=1017,jt=1018,Wt=1019,qt=1020,Xt=1021,Yt=1022,Jt=1023,Zt=1024,Qt=1025,Kt=Jt,$t=1026,te=1027,ee=1028,ne=33776,re=33777,ie=33778,oe=33779,ae=35840,se=35841,ce=35842,he=35843,ue=36196,le=37808,de=37809,pe=37810,fe=37811,me=37812,ve=37813,ge=37814,ye=37815,xe=37816,be=37817,we=37818,_e=37819,Me=37820,Ee=37821,Se=2200,Te=2201,Ae=2202,Le=2300,Ce=2301,Pe=2302,Re=2400,Oe=2401,Ie=2402,De=0,ze=1,Ne=2,Be=3e3,Ue=3001,Fe=3007,Ge=3002,He=3003,ke=3004,Ve=3005,je=3006,We=3200,qe=3201,Xe=0,Ye=1,Je={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);return function(){var e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&n]+t[n>>8&255]+"-"+t[n>>16&15|64]+t[n>>24&255]+"-"+t[63&r|128]+t[r>>8&255]+"-"+t[r>>16&255]+t[r>>24&255]+t[255&i]+t[i>>8&255]+t[i>>16&255]+t[i>>24&255]).toUpperCase()}}(),clamp:function(t,e,n){return Math.max(e,Math.min(n,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,n,r,i){return r+(t-e)*(i-r)/(n-e)},lerp:function(t,e,n){return(1-n)*t+n*e},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*Je.DEG2RAD},radToDeg:function(t){return t*Je.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}};function Ze(t,e){this.x=t||0,this.y=e||0}function Qe(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function Ke(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._w=void 0!==r?r:1}function $e(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0}function tn(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(Ze.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(Ze.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:(i=new Ze,o=new Ze,function(t,e){return i.set(t,t),o.set(e,e),this.clamp(i,o)}),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y;return e*e+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var n=Math.cos(e),r=Math.sin(e),i=this.x-t.x,o=this.y-t.y;return this.x=i*n-o*r+t.x,this.y=i*r+o*n+t.y,this}}),Object.assign(Qe.prototype,{isMatrix4:!0,set:function(t,e,n,r,i,o,a,s,c,h,u,l,d,p,f,m){var v=this.elements;return v[0]=t,v[4]=e,v[8]=n,v[12]=r,v[1]=i,v[5]=o,v[9]=a,v[13]=s,v[2]=c,v[6]=h,v[10]=u,v[14]=l,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Qe).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this},copyPosition:function(t){var e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this},extractBasis:function(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this},extractRotation:(p=new $e,function(t){var e=this.elements,n=t.elements,r=1/p.setFromMatrixColumn(t,0).length(),i=1/p.setFromMatrixColumn(t,1).length(),o=1/p.setFromMatrixColumn(t,2).length();return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=0,e[4]=n[4]*i,e[5]=n[5]*i,e[6]=n[6]*i,e[7]=0,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}),makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,n=t.x,r=t.y,i=t.z,o=Math.cos(n),a=Math.sin(n),s=Math.cos(r),c=Math.sin(r),h=Math.cos(i),u=Math.sin(i);if("XYZ"===t.order){var l=o*h,d=o*u,p=a*h,f=a*u;e[0]=s*h,e[4]=-s*u,e[8]=c,e[1]=d+p*c,e[5]=l-f*c,e[9]=-a*s,e[2]=f-l*c,e[6]=p+d*c,e[10]=o*s}else if("YXZ"===t.order){var m=s*h,v=s*u,g=c*h,y=c*u;e[0]=m+y*a,e[4]=g*a-v,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=v*a-g,e[6]=y+m*a,e[10]=o*s}else if("ZXY"===t.order){m=s*h,v=s*u,g=c*h,y=c*u;e[0]=m-y*a,e[4]=-o*u,e[8]=g+v*a,e[1]=v+g*a,e[5]=o*h,e[9]=y-m*a,e[2]=-o*c,e[6]=a,e[10]=o*s}else if("ZYX"===t.order){l=o*h,d=o*u,p=a*h,f=a*u;e[0]=s*h,e[4]=p*c-d,e[8]=l*c+f,e[1]=s*u,e[5]=f*c+l,e[9]=d*c-p,e[2]=-c,e[6]=a*s,e[10]=o*s}else if("YZX"===t.order){var x=o*s,b=o*c,w=a*s,_=a*c;e[0]=s*h,e[4]=_-x*u,e[8]=w*u+b,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=b*u+w,e[10]=x-_*u}else if("XZY"===t.order){x=o*s,b=o*c,w=a*s,_=a*c;e[0]=s*h,e[4]=-u,e[8]=c*h,e[1]=x*u+_,e[5]=o*h,e[9]=b*u-w,e[2]=w*u-b,e[6]=a*h,e[10]=_*u+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:(l=new $e(0,0,0),d=new $e(1,1,1),function(t){return this.compose(l,t,d)}),lookAt:(c=new $e,h=new $e,u=new $e,function(t,e,n){var r=this.elements;return u.subVectors(t,e),0===u.lengthSq()&&(u.z=1),u.normalize(),c.crossVectors(n,u),0===c.lengthSq()&&(1===Math.abs(n.z)?u.x+=1e-4:u.z+=1e-4,u.normalize(),c.crossVectors(n,u)),c.normalize(),h.crossVectors(u,c),r[0]=c.x,r[4]=h.x,r[8]=u.x,r[1]=c.y,r[5]=h.y,r[9]=u.y,r[2]=c.z,r[6]=h.z,r[10]=u.z,this}),multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,r=e.elements,i=this.elements,o=n[0],a=n[4],s=n[8],c=n[12],h=n[1],u=n[5],l=n[9],d=n[13],p=n[2],f=n[6],m=n[10],v=n[14],g=n[3],y=n[7],x=n[11],b=n[15],w=r[0],_=r[4],M=r[8],E=r[12],S=r[1],T=r[5],A=r[9],L=r[13],C=r[2],P=r[6],R=r[10],O=r[14],I=r[3],D=r[7],z=r[11],N=r[15];return i[0]=o*w+a*S+s*C+c*I,i[4]=o*_+a*T+s*P+c*D,i[8]=o*M+a*A+s*R+c*z,i[12]=o*E+a*L+s*O+c*N,i[1]=h*w+u*S+l*C+d*I,i[5]=h*_+u*T+l*P+d*D,i[9]=h*M+u*A+l*R+d*z,i[13]=h*E+u*L+l*O+d*N,i[2]=p*w+f*S+m*C+v*I,i[6]=p*_+f*T+m*P+v*D,i[10]=p*M+f*A+m*R+v*z,i[14]=p*E+f*L+m*O+v*N,i[3]=g*w+y*S+x*C+b*I,i[7]=g*_+y*T+x*P+b*D,i[11]=g*M+y*A+x*R+b*z,i[15]=g*E+y*L+x*O+b*N,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},applyToBufferAttribute:function(){var t=new $e;return function(e){for(var n=0,r=e.count;n<r;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.applyMatrix4(this),e.setXYZ(n,t.x,t.y,t.z);return e}}(),determinant:function(){var t=this.elements,e=t[0],n=t[4],r=t[8],i=t[12],o=t[1],a=t[5],s=t[9],c=t[13],h=t[2],u=t[6],l=t[10],d=t[14];return t[3]*(+i*s*u-r*c*u-i*a*l+n*c*l+r*a*d-n*s*d)+t[7]*(+e*s*d-e*c*l+i*o*l-r*o*d+r*c*h-i*s*h)+t[11]*(+e*c*u-e*a*d-i*o*u+n*o*d+i*a*h-n*c*h)+t[15]*(-r*a*h-e*s*u+e*a*l+r*o*u-n*o*l+n*s*h)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t){var e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this},getInverse:function(t,e){var n=this.elements,r=t.elements,i=r[0],o=r[1],a=r[2],s=r[3],c=r[4],h=r[5],u=r[6],l=r[7],d=r[8],p=r[9],f=r[10],m=r[11],v=r[12],g=r[13],y=r[14],x=r[15],b=p*y*l-g*f*l+g*u*m-h*y*m-p*u*x+h*f*x,w=v*f*l-d*y*l-v*u*m+c*y*m+d*u*x-c*f*x,_=d*g*l-v*p*l+v*h*m-c*g*m-d*h*x+c*p*x,M=v*p*u-d*g*u-v*h*f+c*g*f+d*h*y-c*p*y,E=i*b+o*w+a*_+s*M;if(0===E){var S="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(S);return console.warn(S),this.identity()}var T=1/E;return n[0]=b*T,n[1]=(g*f*s-p*y*s-g*a*m+o*y*m+p*a*x-o*f*x)*T,n[2]=(h*y*s-g*u*s+g*a*l-o*y*l-h*a*x+o*u*x)*T,n[3]=(p*u*s-h*f*s-p*a*l+o*f*l+h*a*m-o*u*m)*T,n[4]=w*T,n[5]=(d*y*s-v*f*s+v*a*m-i*y*m-d*a*x+i*f*x)*T,n[6]=(v*u*s-c*y*s-v*a*l+i*y*l+c*a*x-i*u*x)*T,n[7]=(c*f*s-d*u*s+d*a*l-i*f*l-c*a*m+i*u*m)*T,n[8]=_*T,n[9]=(v*p*s-d*g*s-v*o*m+i*g*m+d*o*x-i*p*x)*T,n[10]=(c*g*s-v*h*s+v*o*l-i*g*l-c*o*x+i*h*x)*T,n[11]=(d*h*s-c*p*s-d*o*l+i*p*l+c*o*m-i*h*m)*T,n[12]=M*T,n[13]=(d*g*a-v*p*a+v*o*f-i*g*f-d*o*y+i*p*y)*T,n[14]=(v*h*a-c*g*a-v*o*u+i*g*u+c*o*y-i*h*y)*T,n[15]=(c*p*a-d*h*a+d*o*u-i*p*u-c*o*f+i*h*f)*T,this},scale:function(t){var e=this.elements,n=t.x,r=t.y,i=t.z;return e[0]*=n,e[4]*=r,e[8]*=i,e[1]*=n,e[5]*=r,e[9]*=i,e[2]*=n,e[6]*=r,e[10]*=i,e[3]*=n,e[7]*=r,e[11]*=i,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))},makeTranslation:function(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var n=Math.cos(e),r=Math.sin(e),i=1-n,o=t.x,a=t.y,s=t.z,c=i*o,h=i*a;return this.set(c*o+n,c*a-r*s,c*s+r*a,0,c*a+r*s,h*a+n,h*s-r*o,0,c*s-r*a,h*s+r*o,i*s*s+n,0,0,0,0,1),this},makeScale:function(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,n){var r=this.elements,i=e._x,o=e._y,a=e._z,s=e._w,c=i+i,h=o+o,u=a+a,l=i*c,d=i*h,p=i*u,f=o*h,m=o*u,v=a*u,g=s*c,y=s*h,x=s*u,b=n.x,w=n.y,_=n.z;return r[0]=(1-(f+v))*b,r[1]=(d+x)*b,r[2]=(p-y)*b,r[3]=0,r[4]=(d-x)*w,r[5]=(1-(l+v))*w,r[6]=(m+g)*w,r[7]=0,r[8]=(p+y)*_,r[9]=(m-g)*_,r[10]=(1-(l+f))*_,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this},decompose:(a=new $e,s=new Qe,function(t,e,n){var r=this.elements,i=a.set(r[0],r[1],r[2]).length(),o=a.set(r[4],r[5],r[6]).length(),c=a.set(r[8],r[9],r[10]).length();this.determinant()<0&&(i=-i),t.x=r[12],t.y=r[13],t.z=r[14],s.copy(this);var h=1/i,u=1/o,l=1/c;return s.elements[0]*=h,s.elements[1]*=h,s.elements[2]*=h,s.elements[4]*=u,s.elements[5]*=u,s.elements[6]*=u,s.elements[8]*=l,s.elements[9]*=l,s.elements[10]*=l,e.setFromRotationMatrix(s),n.x=i,n.y=o,n.z=c,this}),makePerspective:function(t,e,n,r,i,o){void 0===o&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var a=this.elements,s=2*i/(e-t),c=2*i/(n-r),h=(e+t)/(e-t),u=(n+r)/(n-r),l=-(o+i)/(o-i),d=-2*o*i/(o-i);return a[0]=s,a[4]=0,a[8]=h,a[12]=0,a[1]=0,a[5]=c,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=l,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makeOrthographic:function(t,e,n,r,i,o){var a=this.elements,s=1/(e-t),c=1/(n-r),h=1/(o-i),u=(e+t)*s,l=(n+r)*c,d=(o+i)*h;return a[0]=2*s,a[4]=0,a[8]=0,a[12]=-u,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-l,a[2]=0,a[6]=0,a[10]=-2*h,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(t){for(var e=this.elements,n=t.elements,r=0;r<16;r++)if(e[r]!==n[r])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<16;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}),Object.assign(Ke,{slerp:function(t,e,n,r){return n.copy(t).slerp(e,r)},slerpFlat:function(t,e,n,r,i,o,a){var s=n[r+0],c=n[r+1],h=n[r+2],u=n[r+3],l=i[o+0],d=i[o+1],p=i[o+2],f=i[o+3];if(u!==f||s!==l||c!==d||h!==p){var m=1-a,v=s*l+c*d+h*p+u*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,a=Math.sin(a*b)/x}var w=a*g;if(s=s*m+l*w,c=c*m+d*w,h=h*m+p*w,u=u*m+f*w,m===1-a){var _=1/Math.sqrt(s*s+c*c+h*h+u*u);s*=_,c*=_,h*=_,u*=_}}t[e]=s,t[e+1]=c,t[e+2]=h,t[e+3]=u}}),Object.defineProperties(Ke.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this.onChangeCallback()}}}),Object.assign(Ke.prototype,{isQuaternion:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=t._x,r=t._y,i=t._z,o=t.order,a=Math.cos,s=Math.sin,c=a(n/2),h=a(r/2),u=a(i/2),l=s(n/2),d=s(r/2),p=s(i/2);return"XYZ"===o?(this._x=l*h*u+c*d*p,this._y=c*d*u-l*h*p,this._z=c*h*p+l*d*u,this._w=c*h*u-l*d*p):"YXZ"===o?(this._x=l*h*u+c*d*p,this._y=c*d*u-l*h*p,this._z=c*h*p-l*d*u,this._w=c*h*u+l*d*p):"ZXY"===o?(this._x=l*h*u-c*d*p,this._y=c*d*u+l*h*p,this._z=c*h*p+l*d*u,this._w=c*h*u-l*d*p):"ZYX"===o?(this._x=l*h*u-c*d*p,this._y=c*d*u+l*h*p,this._z=c*h*p-l*d*u,this._w=c*h*u+l*d*p):"YZX"===o?(this._x=l*h*u+c*d*p,this._y=c*d*u+l*h*p,this._z=c*h*p-l*d*u,this._w=c*h*u-l*d*p):"XZY"===o&&(this._x=l*h*u-c*d*p,this._y=c*d*u-l*h*p,this._z=c*h*p+l*d*u,this._w=c*h*u+l*d*p),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var n=e/2,r=Math.sin(n);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(n),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var e,n=t.elements,r=n[0],i=n[4],o=n[8],a=n[1],s=n[5],c=n[9],h=n[2],u=n[6],l=n[10],d=r+s+l;return d>0?(e=.5/Math.sqrt(d+1),this._w=.25/e,this._x=(u-c)*e,this._y=(o-h)*e,this._z=(a-i)*e):r>s&&r>l?(e=2*Math.sqrt(1+r-s-l),this._w=(u-c)/e,this._x=.25*e,this._y=(i+a)/e,this._z=(o+h)/e):s>l?(e=2*Math.sqrt(1+s-r-l),this._w=(o-h)/e,this._x=(i+a)/e,this._y=.25*e,this._z=(c+u)/e):(e=2*Math.sqrt(1+l-r-s),this._w=(a-i)/e,this._x=(o+h)/e,this._y=(c+u)/e,this._z=.25*e),this.onChangeCallback(),this},setFromUnitVectors:function(){var t,e=new $e;return function(n,r){return void 0===e&&(e=new $e),(t=n.dot(r)+1)<1e-6?(t=0,Math.abs(n.x)>Math.abs(n.z)?e.set(-n.y,n.x,0):e.set(0,-n.z,n.y)):e.crossVectors(n,r),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),angleTo:function(t){return 2*Math.acos(Math.abs(Je.clamp(this.dot(t),-1,1)))},rotateTowards:function(t,e){var n=this.angleTo(t);if(0===n)return this;var r=Math.min(1,e/n);return this.slerp(t,r),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this.onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var n=t._x,r=t._y,i=t._z,o=t._w,a=e._x,s=e._y,c=e._z,h=e._w;return this._x=n*h+o*a+r*c-i*s,this._y=r*h+o*s+i*a-n*c,this._z=i*h+o*c+n*s-r*a,this._w=o*h-n*a-r*s-i*c,this.onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this._x,r=this._y,i=this._z,o=this._w,a=o*t._w+n*t._x+r*t._y+i*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=r,this._z=i,this;var s=1-a*a;if(s<=Number.EPSILON){var c=1-e;return this._w=c*o+e*this._w,this._x=c*n+e*this._x,this._y=c*r+e*this._y,this._z=c*i+e*this._z,this.normalize()}var h=Math.sqrt(s),u=Math.atan2(h,a),l=Math.sin((1-e)*u)/h,d=Math.sin(e*u)/h;return this._w=o*l+this._w*d,this._x=n*l+this._x*d,this._y=r*l+this._y*d,this._z=i*l+this._z*d,this.onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign($e.prototype,{isVector3:!0,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:(f=new Ke,function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(f.setFromEuler(t))}),applyAxisAngle:function(){var t=new Ke;return function(e,n){return this.applyQuaternion(t.setFromAxisAngle(e,n))}}(),applyMatrix3:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6]*r,this.y=i[1]*e+i[4]*n+i[7]*r,this.z=i[2]*e+i[5]*n+i[8]*r,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements,o=1/(i[3]*e+i[7]*n+i[11]*r+i[15]);return this.x=(i[0]*e+i[4]*n+i[8]*r+i[12])*o,this.y=(i[1]*e+i[5]*n+i[9]*r+i[13])*o,this.z=(i[2]*e+i[6]*n+i[10]*r+i[14])*o,this},applyQuaternion:function(t){var e=this.x,n=this.y,r=this.z,i=t.x,o=t.y,a=t.z,s=t.w,c=s*e+o*r-a*n,h=s*n+a*e-i*r,u=s*r+i*n-o*e,l=-i*e-o*n-a*r;return this.x=c*s+l*-i+h*-a-u*-o,this.y=h*s+l*-o+u*-i-c*-a,this.z=u*s+l*-a+c*-o-h*-i,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(){var t=new Qe;return function(e){return this.applyMatrix4(t.getInverse(e.projectionMatrix)).applyMatrix4(e.matrixWorld)}}(),transformDirection:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements;return this.x=i[0]*e+i[4]*n+i[8]*r,this.y=i[1]*e+i[5]*n+i[9]*r,this.z=i[2]*e+i[6]*n+i[10]*r,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(){var t=new $e,e=new $e;return function(n,r){return t.set(n,n,n),e.set(r,r,r),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var n=t.x,r=t.y,i=t.z,o=e.x,a=e.y,s=e.z;return this.x=r*s-i*a,this.y=i*o-n*s,this.z=n*a-r*o,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:function(){var t=new $e;return function(e){return t.copy(this).projectOnVector(e),this.sub(t)}}(),reflect:function(){var t=new $e;return function(e){return this.sub(t.copy(e).multiplyScalar(2*this.dot(e)))}}(),angleTo:function(t){var e=this.dot(t)/Math.sqrt(this.lengthSq()*t.lengthSq());return Math.acos(Je.clamp(e,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)},setFromSphericalCoords:function(t,e,n){var r=Math.sin(e)*t;return this.x=r*Math.sin(n),this.y=Math.cos(e)*t,this.z=r*Math.cos(n),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}}),Object.assign(tn.prototype,{isMatrix3:!0,set:function(t,e,n,r,i,o,a,s,c){var h=this.elements;return h[0]=t,h[1]=r,h[2]=a,h[3]=e,h[4]=i,h[5]=s,h[6]=n,h[7]=o,h[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:function(){var t=new $e;return function(e){for(var n=0,r=e.count;n<r;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.applyMatrix3(this),e.setXYZ(n,t.x,t.y,t.z);return e}}(),multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,r=e.elements,i=this.elements,o=n[0],a=n[3],s=n[6],c=n[1],h=n[4],u=n[7],l=n[2],d=n[5],p=n[8],f=r[0],m=r[3],v=r[6],g=r[1],y=r[4],x=r[7],b=r[2],w=r[5],_=r[8];return i[0]=o*f+a*g+s*b,i[3]=o*m+a*y+s*w,i[6]=o*v+a*x+s*_,i[1]=c*f+h*g+u*b,i[4]=c*m+h*y+u*w,i[7]=c*v+h*x+u*_,i[2]=l*f+d*g+p*b,i[5]=l*m+d*y+p*w,i[8]=l*v+d*x+p*_,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],n=t[1],r=t[2],i=t[3],o=t[4],a=t[5],s=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-n*i*h+n*a*s+r*i*c-r*o*s},getInverse:function(t,e){t&&t.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=t.elements,r=this.elements,i=n[0],o=n[1],a=n[2],s=n[3],c=n[4],h=n[5],u=n[6],l=n[7],d=n[8],p=d*c-h*l,f=h*u-d*s,m=l*s-c*u,v=i*p+o*f+a*m;if(0===v){var g="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return r[0]=p*y,r[1]=(a*l-d*o)*y,r[2]=(h*o-a*c)*y,r[3]=f*y,r[4]=(d*i-a*u)*y,r[5]=(a*s-h*i)*y,r[6]=m*y,r[7]=(o*u-l*i)*y,r[8]=(c*i-o*s)*y,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,n,r,i,o,a){var s=Math.cos(i),c=Math.sin(i);this.set(n*s,n*c,-n*(s*o+c*a)+o+t,-r*c,r*s,-r*(-c*o+s*a)+a+e,0,0,1)},scale:function(t,e){var n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this},rotate:function(t){var e=Math.cos(t),n=Math.sin(t),r=this.elements,i=r[0],o=r[3],a=r[6],s=r[1],c=r[4],h=r[7];return r[0]=e*i+n*s,r[3]=e*o+n*c,r[6]=e*a+n*h,r[1]=-n*i+e*s,r[4]=-n*o+e*c,r[7]=-n*a+e*h,this},translate:function(t,e){var n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this},equals:function(t){for(var e=this.elements,n=t.elements,r=0;r<9;r++)if(e[r]!==n[r])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<9;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}});var en,nn,rn,on,an,sn={getDataURL:function(t){var e;if("undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)e=t;else{(e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")).width=t.width,e.height=t.height;var n=e.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height)}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}},cn=0;function hn(t,e,n,r,i,o,a,s,c,h){Object.defineProperty(this,"id",{value:cn++}),this.uuid=Je.generateUUID(),this.name="",this.image=void 0!==t?t:hn.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:hn.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:At,this.wrapT=void 0!==r?r:At,this.magFilter=void 0!==i?i:Ot,this.minFilter=void 0!==o?o:Dt,this.anisotropy=void 0!==c?c:1,this.format=void 0!==a?a:Jt,this.type=void 0!==s?s:zt,this.offset=new Ze(0,0),this.repeat=new Ze(1,1),this.center=new Ze(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new tn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==h?h:Be,this.version=0,this.onUpdate=null}function un(t,e,n,r){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==r?r:1}function ln(t,e,n){this.width=t,this.height=e,this.scissor=new un(0,0,t,e),this.scissorTest=!1,this.viewport=new un(0,0,t,e),void 0===(n=n||{}).minFilter&&(n.minFilter=Ot),this.texture=new hn(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.generateMipmaps=void 0===n.generateMipmaps||n.generateMipmaps,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function dn(t,e,n){ln.call(this,t,e,n),this.activeCubeFace=0,this.activeMipMapLevel=0}function pn(t,e,n,r,i,o,a,s,c,h,u,l){hn.call(this,null,o,a,s,c,h,r,i,u,l),this.image={data:t,width:e,height:n},this.magFilter=void 0!==c?c:Ct,this.minFilter=void 0!==h?h:Ct,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function fn(t,e){this.min=void 0!==t?t:new $e(1/0,1/0,1/0),this.max=void 0!==e?e:new $e(-1/0,-1/0,-1/0)}function mn(t,e){this.center=void 0!==t?t:new $e,this.radius=void 0!==e?e:0}function vn(t,e){this.normal=void 0!==t?t:new $e(1,0,0),this.constant=void 0!==e?e:0}function gn(t,e,n,r,i,o){this.planes=[void 0!==t?t:new vn,void 0!==e?e:new vn,void 0!==n?n:new vn,void 0!==r?r:new vn,void 0!==i?i:new vn,void 0!==o?o:new vn]}hn.DEFAULT_IMAGE=void 0,hn.DEFAULT_MAPPING=yt,hn.prototype=Object.assign(Object.create(r.prototype),{constructor:hn,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var r=this.image;if(void 0===r.uuid&&(r.uuid=Je.generateUUID()),!e&&void 0===t.images[r.uuid]){var i;if(Array.isArray(r)){i=[];for(var o=0,a=r.length;o<a;o++)i.push(sn.getDataURL(r[o]))}else i=sn.getDataURL(r);t.images[r.uuid]={uuid:r.uuid,url:i}}n.image=r.uuid}return e||(t.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(this.mapping!==yt)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Tt:t.x=t.x-Math.floor(t.x);break;case At:t.x=t.x<0?0:1;break;case Lt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case Tt:t.y=t.y-Math.floor(t.y);break;case At:t.y=t.y<0?0:1;break;case Lt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(hn.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(un.prototype,{isVector4:!0,set:function(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,i=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*r+o[12]*i,this.y=o[1]*e+o[5]*n+o[9]*r+o[13]*i,this.z=o[2]*e+o[6]*n+o[10]*r+o[14]*i,this.w=o[3]*e+o[7]*n+o[11]*r+o[15]*i,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,n,r,i,o=t.elements,a=o[0],s=o[4],c=o[8],h=o[1],u=o[5],l=o[9],d=o[2],p=o[6],f=o[10];if(Math.abs(s-h)<.01&&Math.abs(c-d)<.01&&Math.abs(l-p)<.01){if(Math.abs(s+h)<.1&&Math.abs(c+d)<.1&&Math.abs(l+p)<.1&&Math.abs(a+u+f-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var m=(a+1)/2,v=(u+1)/2,g=(f+1)/2,y=(s+h)/4,x=(c+d)/4,b=(l+p)/4;return m>v&&m>g?m<.01?(n=0,r=.707106781,i=.707106781):(r=y/(n=Math.sqrt(m)),i=x/n):v>g?v<.01?(n=.707106781,r=0,i=.707106781):(n=y/(r=Math.sqrt(v)),i=b/r):g<.01?(n=.707106781,r=.707106781,i=0):(n=x/(i=Math.sqrt(g)),r=b/i),this.set(n,r,i,e),this}var w=Math.sqrt((p-l)*(p-l)+(c-d)*(c-d)+(h-s)*(h-s));return Math.abs(w)<.001&&(w=1),this.x=(p-l)/w,this.y=(c-d)/w,this.z=(h-s)/w,this.w=Math.acos((a+u+f-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(){var t,e;return function(n,r){return void 0===t&&(t=new un,e=new un),t.set(n,n,n,n),e.set(r,r,r,r),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),ln.prototype=Object.assign(Object.create(r.prototype),{constructor:ln,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),dn.prototype=Object.create(ln.prototype),dn.prototype.constructor=dn,dn.prototype.isWebGLRenderTargetCube=!0,pn.prototype=Object.create(hn.prototype),pn.prototype.constructor=pn,pn.prototype.isDataTexture=!0,Object.assign(fn.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,n=1/0,r=1/0,i=-1/0,o=-1/0,a=-1/0,s=0,c=t.length;s<c;s+=3){var h=t[s],u=t[s+1],l=t[s+2];h<e&&(e=h),u<n&&(n=u),l<r&&(r=l),h>i&&(i=h),u>o&&(o=u),l>a&&(a=l)}return this.min.set(e,n,r),this.max.set(i,o,a),this},setFromBufferAttribute:function(t){for(var e=1/0,n=1/0,r=1/0,i=-1/0,o=-1/0,a=-1/0,s=0,c=t.count;s<c;s++){var h=t.getX(s),u=t.getY(s),l=t.getZ(s);h<e&&(e=h),u<n&&(n=u),l<r&&(r=l),h>i&&(i=h),u>o&&(o=u),l>a&&(a=l)}return this.min.set(e,n,r),this.max.set(i,o,a),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new $e;return function(e,n){var r=t.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this}}(),setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new $e),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new $e),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(){var t,e,n,r=new $e;function i(i){var o=i.geometry;if(void 0!==o)if(o.isGeometry){var a=o.vertices;for(e=0,n=a.length;e<n;e++)r.copy(a[e]),r.applyMatrix4(i.matrixWorld),t.expandByPoint(r)}else if(o.isBufferGeometry){var s=o.attributes.position;if(void 0!==s)for(e=0,n=s.count;e<n;e++)r.fromBufferAttribute(s,e).applyMatrix4(i.matrixWorld),t.expandByPoint(r)}}return function(e){return t=this,e.updateMatrixWorld(!0),e.traverse(i),this}}(),containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new $e),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:(nn=new $e,function(t){return this.clampPoint(t.center,nn),nn.distanceToSquared(t.center)<=t.radius*t.radius}),intersectsPlane:function(t){var e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant},intersectsTriangle:function(){var t=new $e,e=new $e,n=new $e,r=new $e,i=new $e,o=new $e,a=new $e,s=new $e,c=new $e,h=new $e;function u(r){var i,o;for(i=0,o=r.length-3;i<=o;i+=3){a.fromArray(r,i);var s=c.x*Math.abs(a.x)+c.y*Math.abs(a.y)+c.z*Math.abs(a.z),h=t.dot(a),u=e.dot(a),l=n.dot(a);if(Math.max(-Math.max(h,u,l),Math.min(h,u,l))>s)return!1}return!0}return function(a){if(this.isEmpty())return!1;this.getCenter(s),c.subVectors(this.max,s),t.subVectors(a.a,s),e.subVectors(a.b,s),n.subVectors(a.c,s),r.subVectors(e,t),i.subVectors(n,e),o.subVectors(t,n);var l=[0,-r.z,r.y,0,-i.z,i.y,0,-o.z,o.y,r.z,0,-r.x,i.z,0,-i.x,o.z,0,-o.x,-r.y,r.x,0,-i.y,i.x,0,-o.y,o.x,0];return!!u(l)&&(!!u(l=[1,0,0,0,1,0,0,0,1])&&(h.crossVectors(r,i),u(l=[h.x,h.y,h.z])))}}(),clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new $e),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new $e;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),getBoundingSphere:function(){var t=new $e;return function(e){return void 0===e&&(console.warn("THREE.Box3: .getBoundingSphere() target is now required"),e=new mn),this.getCenter(e.center),e.radius=.5*this.getSize(t).length(),e}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:(en=[new $e,new $e,new $e,new $e,new $e,new $e,new $e,new $e],function(t){return this.isEmpty()||(en[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),en[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),en[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),en[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),en[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),en[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),en[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),en[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(en)),this}),translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(mn.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:(rn=new fn,function(t,e){var n=this.center;void 0!==e?n.copy(e):rn.setFromPoints(t).getCenter(n);for(var r=0,i=0,o=t.length;i<o;i++)r=Math.max(r,n.distanceToSquared(t[i]));return this.radius=Math.sqrt(r),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var n=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new $e),e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new fn),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}}),Object.assign(vn.prototype,{set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(){var t=new $e,e=new $e;return function(n,r,i){var o=t.subVectors(i,r).cross(e.subVectors(n,r)).normalize();return this.setFromNormalAndCoplanarPoint(o,n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new $e),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(){var t=new $e;return function(e,n){void 0===n&&(console.warn("THREE.Plane: .intersectLine() target is now required"),n=new $e);var r=e.delta(t),i=this.normal.dot(r);if(0===i)return 0===this.distanceToPoint(e.start)?n.copy(e.start):void 0;var o=-(e.start.dot(this.normal)+this.constant)/i;return o<0||o>1?void 0:n.copy(r).multiplyScalar(o).add(e.start)}}(),intersectsLine:function(t){var e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new $e),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var t=new $e,e=new tn;return function(n,r){var i=r||e.getNormalMatrix(n),o=this.coplanarPoint(t).applyMatrix4(n),a=this.normal.applyMatrix3(i).normalize();return this.constant=-o.dot(a),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),Object.assign(gn.prototype,{set:function(t,e,n,r,i,o){var a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(r),a[4].copy(i),a[5].copy(o),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,n=0;n<6;n++)e[n].copy(t.planes[n]);return this},setFromMatrix:function(t){var e=this.planes,n=t.elements,r=n[0],i=n[1],o=n[2],a=n[3],s=n[4],c=n[5],h=n[6],u=n[7],l=n[8],d=n[9],p=n[10],f=n[11],m=n[12],v=n[13],g=n[14],y=n[15];return e[0].setComponents(a-r,u-s,f-l,y-m).normalize(),e[1].setComponents(a+r,u+s,f+l,y+m).normalize(),e[2].setComponents(a+i,u+c,f+d,y+v).normalize(),e[3].setComponents(a-i,u-c,f-d,y-v).normalize(),e[4].setComponents(a-o,u-h,f-p,y-g).normalize(),e[5].setComponents(a+o,u+h,f+p,y+g).normalize(),this},intersectsObject:(an=new mn,function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),an.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(an)}),intersectsSprite:function(){var t=new mn;return function(e){return t.center.set(0,0,0),t.radius=.7071067811865476,t.applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSphere:function(t){for(var e=this.planes,n=t.center,r=-t.radius,i=0;i<6;i++){if(e[i].distanceToPoint(n)<r)return!1}return!0},intersectsBox:(on=new $e,function(t){for(var e=this.planes,n=0;n<6;n++){var r=e[n];if(on.x=r.normal.x>0?t.max.x:t.min.x,on.y=r.normal.y>0?t.max.y:t.min.y,on.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(on)<0)return!1}return!0}),containsPoint:function(t){for(var e=this.planes,n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}});var yn,xn,bn,wn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif\n",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",lights_pars_begin:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif\n",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n",normal_fragment_maps:"#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n}\n",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position, 1.0 );\n\tgl_Position.z = 1.0;\n}\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\tvec4 matcapColor = texture2D( matcap, uv );\n\tmatcapColor = matcapTexelToLinear( matcapColor );\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}\n",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"},_n={merge:function(t){for(var e={},n=0;n<t.length;n++){var r=this.clone(t[n]);for(var i in r)e[i]=r[i]}return e},clone:function(t){var e={};for(var n in t)for(var r in e[n]={},t[n]){var i=t[n][r];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?e[n][r]=i.clone():Array.isArray(i)?e[n][r]=i.slice():e[n][r]=i}return e}},Mn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function En(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}Object.assign(En.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,n){return this.r=t,this.g=e,this.b=n,this},setHSL:function(){function t(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}return function(e,n,r){if(e=Je.euclideanModulo(e,1),n=Je.clamp(n,0,1),r=Je.clamp(r,0,1),0===n)this.r=this.g=this.b=r;else{var i=r<=.5?r*(1+n):r+n-r*n,o=2*r-i;this.r=t(o,i,e+1/3),this.g=t(o,i,e),this.b=t(o,i,e-1/3)}return this}}(),setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var r,i=n[1],o=n[2];switch(i){case"rgb":case"rgba":if(r=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,e(r[5]),this;if(r=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,e(r[5]),this;break;case"hsl":case"hsla":if(r=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)){var a=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return e(r[5]),this.setHSL(a,s,c)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(t)){var h,u=(h=n[1]).length;if(3===u)return this.r=parseInt(h.charAt(0)+h.charAt(0),16)/255,this.g=parseInt(h.charAt(1)+h.charAt(1),16)/255,this.b=parseInt(h.charAt(2)+h.charAt(2),16)/255,this;if(6===u)return this.r=parseInt(h.charAt(0)+h.charAt(1),16)/255,this.g=parseInt(h.charAt(2)+h.charAt(3),16)/255,this.b=parseInt(h.charAt(4)+h.charAt(5),16)/255,this}t&&t.length>0&&(void 0!==(h=Mn[t])?this.setHex(h):console.warn("THREE.Color: Unknown color "+t));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(){function t(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),copyLinearToSRGB:function(){function t(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,n,r=this.r,i=this.g,o=this.b,a=Math.max(r,i,o),s=Math.min(r,i,o),c=(s+a)/2;if(s===a)e=0,n=0;else{var h=a-s;switch(n=c<=.5?h/(a+s):h/(2-a-s),a){case r:e=(i-o)/h+(i<o?6:0);break;case i:e=(o-r)/h+2;break;case o:e=(r-i)/h+4}e/=6}return t.h=e,t.s=n,t.l=c,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:(bn={},function(t,e,n){return this.getHSL(bn),bn.h+=t,bn.s+=e,bn.l+=n,this.setHSL(bn.h,bn.s,bn.l),this}),add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:(yn={h:0,s:0,l:0},xn={h:0,s:0,l:0},function(t,e){this.getHSL(yn),t.getHSL(xn);var n=Je.lerp(yn.h,xn.h,e),r=Je.lerp(yn.s,xn.s,e),i=Je.lerp(yn.l,xn.l,e);return this.setHSL(n,r,i),this}),equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}});var Sn,Tn={common:{diffuse:{value:new En(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new tn},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Ze(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new En(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new En(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new tn}},sprite:{diffuse:{value:new En(15658734)},opacity:{value:1},center:{value:new Ze(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new tn}}},An={basic:{uniforms:_n.merge([Tn.common,Tn.specularmap,Tn.envmap,Tn.aomap,Tn.lightmap,Tn.fog]),vertexShader:wn.meshbasic_vert,fragmentShader:wn.meshbasic_frag},lambert:{uniforms:_n.merge([Tn.common,Tn.specularmap,Tn.envmap,Tn.aomap,Tn.lightmap,Tn.emissivemap,Tn.fog,Tn.lights,{emissive:{value:new En(0)}}]),vertexShader:wn.meshlambert_vert,fragmentShader:wn.meshlambert_frag},phong:{uniforms:_n.merge([Tn.common,Tn.specularmap,Tn.envmap,Tn.aomap,Tn.lightmap,Tn.emissivemap,Tn.bumpmap,Tn.normalmap,Tn.displacementmap,Tn.gradientmap,Tn.fog,Tn.lights,{emissive:{value:new En(0)},specular:{value:new En(1118481)},shininess:{value:30}}]),vertexShader:wn.meshphong_vert,fragmentShader:wn.meshphong_frag},standard:{uniforms:_n.merge([Tn.common,Tn.envmap,Tn.aomap,Tn.lightmap,Tn.emissivemap,Tn.bumpmap,Tn.normalmap,Tn.displacementmap,Tn.roughnessmap,Tn.metalnessmap,Tn.fog,Tn.lights,{emissive:{value:new En(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:wn.meshphysical_vert,fragmentShader:wn.meshphysical_frag},matcap:{uniforms:_n.merge([Tn.common,Tn.bumpmap,Tn.normalmap,Tn.displacementmap,Tn.fog,{matcap:{value:null}}]),vertexShader:wn.meshmatcap_vert,fragmentShader:wn.meshmatcap_frag},points:{uniforms:_n.merge([Tn.points,Tn.fog]),vertexShader:wn.points_vert,fragmentShader:wn.points_frag},dashed:{uniforms:_n.merge([Tn.common,Tn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:wn.linedashed_vert,fragmentShader:wn.linedashed_frag},depth:{uniforms:_n.merge([Tn.common,Tn.displacementmap]),vertexShader:wn.depth_vert,fragmentShader:wn.depth_frag},normal:{uniforms:_n.merge([Tn.common,Tn.bumpmap,Tn.normalmap,Tn.displacementmap,{opacity:{value:1}}]),vertexShader:wn.normal_vert,fragmentShader:wn.normal_frag},sprite:{uniforms:_n.merge([Tn.sprite,Tn.fog]),vertexShader:wn.sprite_vert,fragmentShader:wn.sprite_frag},background:{uniforms:{uvTransform:{value:new tn},t2D:{value:null}},vertexShader:wn.background_vert,fragmentShader:wn.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:wn.cube_vert,fragmentShader:wn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:wn.equirect_vert,fragmentShader:wn.equirect_frag},distanceRGBA:{uniforms:_n.merge([Tn.common,Tn.displacementmap,{referencePosition:{value:new $e},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:wn.distanceRGBA_vert,fragmentShader:wn.distanceRGBA_frag},shadow:{uniforms:_n.merge([Tn.lights,Tn.fog,{color:{value:new En(0)},opacity:{value:1}}]),vertexShader:wn.shadow_vert,fragmentShader:wn.shadow_frag}};function Ln(){var t=null,e=!1,n=null;function r(i,o){!1!==e&&(n(i,o),t.requestAnimationFrame(r))}return{start:function(){!0!==e&&null!==n&&(t.requestAnimationFrame(r),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function Cn(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var r=e.get(n);r&&(t.deleteBuffer(r.buffer),e.delete(n))},update:function(n,r){n.isInterleavedBufferAttribute&&(n=n.data);var i=e.get(n);void 0===i?e.set(n,function(e,n){var r=e.array,i=e.dynamic?35048:35044,o=t.createBuffer();t.bindBuffer(n,o),t.bufferData(n,r,i),e.onUploadCallback();var a=5126;return r instanceof Float32Array?a=5126:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?a=5123:r instanceof Int16Array?a=5122:r instanceof Uint32Array?a=5125:r instanceof Int32Array?a=5124:r instanceof Int8Array?a=5120:r instanceof Uint8Array&&(a=5121),{buffer:o,type:a,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(n,r)):i.version<n.version&&(!function(e,n,r){var i=n.array,o=n.updateRange;t.bindBuffer(r,e),!1===n.dynamic?t.bufferData(r,i,35044):-1===o.count?t.bufferSubData(r,0,i):0===o.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(t.bufferSubData(r,o.offset*i.BYTES_PER_ELEMENT,i.subarray(o.offset,o.offset+o.count)),o.count=-1)}(i.buffer,n,r),i.version=n.version)}}}function Pn(t,e,n,r,i,o){this.a=t,this.b=e,this.c=n,this.normal=r&&r.isVector3?r:new $e,this.vertexNormals=Array.isArray(r)?r:[],this.color=i&&i.isColor?i:new En,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==o?o:0}function Rn(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._order=r||Rn.DefaultOrder}function On(){this.mask=1}An.physical={uniforms:_n.merge([An.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:wn.meshphysical_vert,fragmentShader:wn.meshphysical_frag},Object.assign(Pn.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,n=t.vertexNormals.length;e<n;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,n=t.vertexColors.length;e<n;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}}),Rn.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],Rn.DefaultOrder="XYZ",Object.defineProperties(Rn.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this.onChangeCallback()}}}),Object.assign(Rn.prototype,{isEuler:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._order=r||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,n){var r=Je.clamp,i=t.elements,o=i[0],a=i[4],s=i[8],c=i[1],h=i[5],u=i[9],l=i[2],d=i[6],p=i[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-u,p),this._z=Math.atan2(-a,o)):(this._x=Math.atan2(d,h),this._z=0)):"YXZ"===e?(this._x=Math.asin(-r(u,-1,1)),Math.abs(u)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,h)):(this._y=Math.atan2(-l,o),this._z=0)):"ZXY"===e?(this._x=Math.asin(r(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-l,p),this._z=Math.atan2(-a,h)):(this._y=0,this._z=Math.atan2(c,o))):"ZYX"===e?(this._y=Math.asin(-r(l,-1,1)),Math.abs(l)<.99999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,o)):(this._x=0,this._z=Math.atan2(-a,h))):"YZX"===e?(this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-u,h),this._y=Math.atan2(-l,o)):(this._x=0,this._y=Math.atan2(s,p))):"XZY"===e?(this._z=Math.asin(-r(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(d,h),this._y=Math.atan2(s,o)):(this._x=Math.atan2(-u,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==n&&this.onChangeCallback(),this},setFromQuaternion:function(){var t=new Qe;return function(e,n,r){return t.makeRotationFromQuaternion(e),this.setFromRotationMatrix(t,n,r)}}(),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:(Sn=new Ke,function(t){return Sn.setFromEuler(this),this.setFromQuaternion(Sn,t)}),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new $e(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(On.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},test:function(t){return 0!=(this.mask&t.mask)}});var In,Dn,zn,Nn,Bn=0;function Un(){Object.defineProperty(this,"id",{value:Bn++}),this.uuid=Je.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Un.DefaultUp.clone();var t=new $e,e=new Rn,n=new Ke,r=new $e(1,1,1);e.onChange((function(){n.setFromEuler(e,!1)})),n.onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new Qe},normalMatrix:{value:new tn}}),this.matrix=new Qe,this.matrixWorld=new Qe,this.matrixAutoUpdate=Un.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new On,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}Un.DefaultUp=new $e(0,1,0),Un.DefaultMatrixAutoUpdate=!0,Un.prototype=Object.assign(Object.create(r.prototype),{constructor:Un,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:(Nn=new Ke,function(t,e){return Nn.setFromAxisAngle(t,e),this.quaternion.multiply(Nn),this}),rotateOnWorldAxis:function(){var t=new Ke;return function(e,n){return t.setFromAxisAngle(e,n),this.quaternion.premultiply(t),this}}(),rotateX:function(){var t=new $e(1,0,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateY:function(){var t=new $e(0,1,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateZ:function(){var t=new $e(0,0,1);return function(e){return this.rotateOnAxis(t,e)}}(),translateOnAxis:function(){var t=new $e;return function(e,n){return t.copy(e).applyQuaternion(this.quaternion),this.position.add(t.multiplyScalar(n)),this}}(),translateX:function(){var t=new $e(1,0,0);return function(e){return this.translateOnAxis(t,e)}}(),translateY:function(){var t=new $e(0,1,0);return function(e){return this.translateOnAxis(t,e)}}(),translateZ:function(){var t=new $e(0,0,1);return function(e){return this.translateOnAxis(t,e)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:(zn=new Qe,function(t){return t.applyMatrix4(zn.getInverse(this.matrixWorld))}),lookAt:function(){var t=new Ke,e=new Qe,n=new $e,r=new $e;return function(i,o,a){i.isVector3?n.copy(i):n.set(i,o,a);var s=this.parent;this.updateWorldMatrix(!0,!1),r.setFromMatrixPosition(this.matrixWorld),this.isCamera?e.lookAt(r,n,this.up):e.lookAt(n,r,this.up),this.quaternion.setFromRotationMatrix(e),s&&(e.extractRotation(s.matrixWorld),t.setFromRotationMatrix(e),this.quaternion.premultiply(t.inverse()))}}(),add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:"added"}),this.children.push(t)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var n=this.children.indexOf(t);return-1!==n&&(t.parent=null,t.dispatchEvent({type:"removed"}),this.children.splice(n,1)),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var n=0,r=this.children.length;n<r;n++){var i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new $e),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(In=new $e,Dn=new $e,function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new Ke),this.updateMatrixWorld(!0),this.matrixWorld.decompose(In,t,Dn),t}),getWorldScale:function(){var t=new $e,e=new Ke;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),n=new $e),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,n),n}}(),getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new $e),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var r=this.children,i=0,o=r.length;i<o;i++)r[i].updateWorldMatrix(!1,!0)},toJSON:function(t){var e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var r={};function i(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),!0===this.castShadow&&(r.castShadow=!0),!0===this.receiveShadow&&(r.receiveShadow=!0),!1===this.visible&&(r.visible=!1),!1===this.frustumCulled&&(r.frustumCulled=!1),0!==this.renderOrder&&(r.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(r.matrixAutoUpdate=!1),this.isMesh||this.isLine||this.isPoints){r.geometry=i(t.geometries,this.geometry);var o=this.geometry.parameters;if(void 0!==o&&void 0!==o.shapes){var a=o.shapes;if(Array.isArray(a))for(var s=0,c=a.length;s<c;s++){var h=a[s];i(t.shapes,h)}else i(t.shapes,a)}}if(void 0!==this.material)if(Array.isArray(this.material)){var u=[];for(s=0,c=this.material.length;s<c;s++)u.push(i(t.materials,this.material[s]));r.material=u}else r.material=i(t.materials,this.material);if(this.children.length>0){r.children=[];for(s=0;s<this.children.length;s++)r.children.push(this.children[s].toJSON(t).object)}if(e){var l=m(t.geometries),d=m(t.materials),p=m(t.textures),f=m(t.images);a=m(t.shapes);l.length>0&&(n.geometries=l),d.length>0&&(n.materials=d),p.length>0&&(n.textures=p),f.length>0&&(n.images=f),a.length>0&&(n.shapes=a)}return n.object=r,n;function m(t){var e=[];for(var n in t){var r=t[n];delete r.metadata,e.push(r)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var n=0;n<t.children.length;n++){var r=t.children[n];this.add(r.clone())}return this}});var Fn,Gn,Hn=0;function kn(){Object.defineProperty(this,"id",{value:Hn+=2}),this.uuid=Je.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function Vn(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function jn(t,e,n){Vn.call(this,new Int8Array(t),e,n)}function Wn(t,e,n){Vn.call(this,new Uint8Array(t),e,n)}function qn(t,e,n){Vn.call(this,new Uint8ClampedArray(t),e,n)}function Xn(t,e,n){Vn.call(this,new Int16Array(t),e,n)}function Yn(t,e,n){Vn.call(this,new Uint16Array(t),e,n)}function Jn(t,e,n){Vn.call(this,new Int32Array(t),e,n)}function Zn(t,e,n){Vn.call(this,new Uint32Array(t),e,n)}function Qn(t,e,n){Vn.call(this,new Float32Array(t),e,n)}function Kn(t,e,n){Vn.call(this,new Float64Array(t),e,n)}function $n(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function tr(t){if(0===t.length)return-1/0;for(var e=t[0],n=1,r=t.length;n<r;++n)t[n]>e&&(e=t[n]);return e}kn.prototype=Object.assign(Object.create(r.prototype),{constructor:kn,isGeometry:!0,applyMatrix:function(t){for(var e=(new tn).getNormalMatrix(t),n=0,r=this.vertices.length;n<r;n++){this.vertices[n].applyMatrix4(t)}for(n=0,r=this.faces.length;n<r;n++){var i=this.faces[n];i.normal.applyMatrix3(e).normalize();for(var o=0,a=i.vertexNormals.length;o<a;o++)i.vertexNormals[o].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var t=new Qe;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new Qe;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new Qe;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new Qe;return function(e,n,r){return t.makeTranslation(e,n,r),this.applyMatrix(t),this}}(),scale:function(){var t=new Qe;return function(e,n,r){return t.makeScale(e,n,r),this.applyMatrix(t),this}}(),lookAt:(Gn=new Un,function(t){Gn.lookAt(t),Gn.updateMatrix(),this.applyMatrix(Gn.matrix)}),fromBufferGeometry:function(t){var e=this,n=null!==t.index?t.index.array:void 0,r=t.attributes,i=r.position.array,o=void 0!==r.normal?r.normal.array:void 0,a=void 0!==r.color?r.color.array:void 0,s=void 0!==r.uv?r.uv.array:void 0,c=void 0!==r.uv2?r.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var h=0,u=0;h<i.length;h+=3,u+=2)e.vertices.push((new $e).fromArray(i,h)),void 0!==a&&e.colors.push((new En).fromArray(a,h));function l(t,n,r,i){var h=void 0===a?[]:[e.colors[t].clone(),e.colors[n].clone(),e.colors[r].clone()],u=new Pn(t,n,r,void 0===o?[]:[(new $e).fromArray(o,3*t),(new $e).fromArray(o,3*n),(new $e).fromArray(o,3*r)],h,i);e.faces.push(u),void 0!==s&&e.faceVertexUvs[0].push([(new Ze).fromArray(s,2*t),(new Ze).fromArray(s,2*n),(new Ze).fromArray(s,2*r)]),void 0!==c&&e.faceVertexUvs[1].push([(new Ze).fromArray(c,2*t),(new Ze).fromArray(c,2*n),(new Ze).fromArray(c,2*r)])}var d=t.groups;if(d.length>0)for(h=0;h<d.length;h++)for(var p=d[h],f=p.start,m=(u=f,f+p.count);u<m;u+=3)void 0!==n?l(n[u],n[u+1],n[u+2],p.materialIndex):l(u,u+1,u+2,p.materialIndex);else if(void 0!==n)for(h=0;h<n.length;h+=3)l(n[h],n[h+1],n[h+2]);else for(h=0;h<i.length/3;h+=3)l(h,h+1,h+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:(Fn=new $e,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Fn).negate(),this.translate(Fn.x,Fn.y,Fn.z),this}),normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,n=0===e?1:1/e,r=new Qe;return r.set(n,0,0,-n*t.x,0,n,0,-n*t.y,0,0,n,-n*t.z,0,0,0,1),this.applyMatrix(r),this},computeFaceNormals:function(){for(var t=new $e,e=new $e,n=0,r=this.faces.length;n<r;n++){var i=this.faces[n],o=this.vertices[i.a],a=this.vertices[i.b],s=this.vertices[i.c];t.subVectors(s,a),e.subVectors(o,a),t.cross(e),t.normalize(),i.normal.copy(t)}},computeVertexNormals:function(t){var e,n,r,i,o,a;for(void 0===t&&(t=!0),a=new Array(this.vertices.length),e=0,n=this.vertices.length;e<n;e++)a[e]=new $e;if(t){var s,c,h,u=new $e,l=new $e;for(r=0,i=this.faces.length;r<i;r++)o=this.faces[r],s=this.vertices[o.a],c=this.vertices[o.b],h=this.vertices[o.c],u.subVectors(h,c),l.subVectors(s,c),u.cross(l),a[o.a].add(u),a[o.b].add(u),a[o.c].add(u)}else for(this.computeFaceNormals(),r=0,i=this.faces.length;r<i;r++)a[(o=this.faces[r]).a].add(o.normal),a[o.b].add(o.normal),a[o.c].add(o.normal);for(e=0,n=this.vertices.length;e<n;e++)a[e].normalize();for(r=0,i=this.faces.length;r<i;r++){var d=(o=this.faces[r]).vertexNormals;3===d.length?(d[0].copy(a[o.a]),d[1].copy(a[o.b]),d[2].copy(a[o.c])):(d[0]=a[o.a].clone(),d[1]=a[o.b].clone(),d[2]=a[o.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,n;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var r=(n=this.faces[t]).vertexNormals;3===r.length?(r[0].copy(n.normal),r[1].copy(n.normal),r[2].copy(n.normal)):(r[0]=n.normal.clone(),r[1]=n.normal.clone(),r[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,n,r,i;for(n=0,r=this.faces.length;n<r;n++)for((i=this.faces[n]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),t=0,e=i.vertexNormals.length;t<e;t++)i.__originalVertexNormals[t]?i.__originalVertexNormals[t].copy(i.vertexNormals[t]):i.__originalVertexNormals[t]=i.vertexNormals[t].clone();var o=new kn;for(o.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var a=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(n=0,r=this.faces.length;n<r;n++)c=new $e,h={a:new $e,b:new $e,c:new $e},a.push(c),s.push(h)}var c,h,u=this.morphNormals[t];for(o.vertices=this.morphTargets[t].vertices,o.computeFaceNormals(),o.computeVertexNormals(),n=0,r=this.faces.length;n<r;n++)i=this.faces[n],c=u.faceNormals[n],h=u.vertexNormals[n],c.copy(i.normal),h.a.copy(i.vertexNormals[0]),h.b.copy(i.vertexNormals[1]),h.c.copy(i.vertexNormals[2])}for(n=0,r=this.faces.length;n<r;n++)(i=this.faces[n]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new fn),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new mn),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,n){if(t&&t.isGeometry){var r,i=this.vertices.length,o=this.vertices,a=t.vertices,s=this.faces,c=t.faces,h=this.faceVertexUvs[0],u=t.faceVertexUvs[0],l=this.colors,d=t.colors;void 0===n&&(n=0),void 0!==e&&(r=(new tn).getNormalMatrix(e));for(var p=0,f=a.length;p<f;p++){var m=a[p].clone();void 0!==e&&m.applyMatrix4(e),o.push(m)}for(p=0,f=d.length;p<f;p++)l.push(d[p].clone());for(p=0,f=c.length;p<f;p++){var v,g,y,x=c[p],b=x.vertexNormals,w=x.vertexColors;(v=new Pn(x.a+i,x.b+i,x.c+i)).normal.copy(x.normal),void 0!==r&&v.normal.applyMatrix3(r).normalize();for(var _=0,M=b.length;_<M;_++)g=b[_].clone(),void 0!==r&&g.applyMatrix3(r).normalize(),v.vertexNormals.push(g);v.color.copy(x.color);for(_=0,M=w.length;_<M;_++)y=w[_],v.vertexColors.push(y.clone());v.materialIndex=x.materialIndex+n,s.push(v)}for(p=0,f=u.length;p<f;p++){var E=u[p],S=[];if(void 0!==E){for(_=0,M=E.length;_<M;_++)S.push(E[_].clone());h.push(S)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,n,r,i,o,a,s,c={},h=[],u=[],l=Math.pow(10,4);for(n=0,r=this.vertices.length;n<r;n++)t=this.vertices[n],void 0===c[e=Math.round(t.x*l)+"_"+Math.round(t.y*l)+"_"+Math.round(t.z*l)]?(c[e]=n,h.push(this.vertices[n]),u[n]=h.length-1):u[n]=u[c[e]];var d=[];for(n=0,r=this.faces.length;n<r;n++){(i=this.faces[n]).a=u[i.a],i.b=u[i.b],i.c=u[i.c],o=[i.a,i.b,i.c];for(var p=0;p<3;p++)if(o[p]===o[(p+1)%3]){d.push(n);break}}for(n=d.length-1;n>=0;n--){var f=d[n];for(this.faces.splice(f,1),a=0,s=this.faceVertexUvs.length;a<s;a++)this.faceVertexUvs[a].splice(f,1)}var m=this.vertices.length-h.length;return this.vertices=h,m},setFromPoints:function(t){this.vertices=[];for(var e=0,n=t.length;e<n;e++){var r=t[e];this.vertices.push(new $e(r.x,r.y,r.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,n=0;n<e;n++)t[n]._id=n;t.sort((function(t,e){return t.materialIndex-e.materialIndex}));var r,i,o=this.faceVertexUvs[0],a=this.faceVertexUvs[1];o&&o.length===e&&(r=[]),a&&a.length===e&&(i=[]);for(n=0;n<e;n++){var s=t[n]._id;r&&r.push(o[s]),i&&i.push(a[s])}r&&(this.faceVertexUvs[0]=r),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}for(var r=[],i=0;i<this.vertices.length;i++){var o=this.vertices[i];r.push(o.x,o.y,o.z)}var a=[],s=[],c={},h=[],u={},l=[],d={};for(i=0;i<this.faces.length;i++){var p=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=p.normal.length()>0,v=p.vertexNormals.length>0,g=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,f),x=M(x,4,m),x=M(x,5,v),x=M(x,6,g),x=M(x,7,y),a.push(x),a.push(p.a,p.b,p.c),a.push(p.materialIndex),f){var b=this.faceVertexUvs[0][i];a.push(T(b[0]),T(b[1]),T(b[2]))}if(m&&a.push(E(p.normal)),v){var w=p.vertexNormals;a.push(E(w[0]),E(w[1]),E(w[2]))}if(g&&a.push(S(p.color)),y){var _=p.vertexColors;a.push(S(_[0]),S(_[1]),S(_[2]))}}function M(t,e,n){return n?t|1<<e:t&~(1<<e)}function E(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==c[e]||(c[e]=s.length/3,s.push(t.x,t.y,t.z)),c[e]}function S(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==u[e]||(u[e]=h.length,h.push(t.getHex())),u[e]}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==d[e]||(d[e]=l.length/2,l.push(t.x,t.y)),d[e]}return t.data={},t.data.vertices=r,t.data.normals=s,h.length>0&&(t.data.colors=h),l.length>0&&(t.data.uvs=[l]),t.data.faces=a,t},clone:function(){return(new kn).copy(this)},copy:function(t){var e,n,r,i,o,a;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var s=t.vertices;for(e=0,n=s.length;e<n;e++)this.vertices.push(s[e].clone());var c=t.colors;for(e=0,n=c.length;e<n;e++)this.colors.push(c[e].clone());var h=t.faces;for(e=0,n=h.length;e<n;e++)this.faces.push(h[e].clone());for(e=0,n=t.faceVertexUvs.length;e<n;e++){var u=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),r=0,i=u.length;r<i;r++){var l=u[r],d=[];for(o=0,a=l.length;o<a;o++){var p=l[o];d.push(p.clone())}this.faceVertexUvs[e].push(d)}}var f=t.morphTargets;for(e=0,n=f.length;e<n;e++){var m={};if(m.name=f[e].name,void 0!==f[e].vertices)for(m.vertices=[],r=0,i=f[e].vertices.length;r<i;r++)m.vertices.push(f[e].vertices[r].clone());if(void 0!==f[e].normals)for(m.normals=[],r=0,i=f[e].normals.length;r<i;r++)m.normals.push(f[e].normals[r].clone());this.morphTargets.push(m)}var v=t.morphNormals;for(e=0,n=v.length;e<n;e++){var g={};if(void 0!==v[e].vertexNormals)for(g.vertexNormals=[],r=0,i=v[e].vertexNormals.length;r<i;r++){var y=v[e].vertexNormals[r],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[e].faceNormals)for(g.faceNormals=[],r=0,i=v[e].faceNormals.length;r<i;r++)g.faceNormals.push(v[e].faceNormals[r].clone());this.morphNormals.push(g)}var b=t.skinWeights;for(e=0,n=b.length;e<n;e++)this.skinWeights.push(b[e].clone());var w=t.skinIndices;for(e=0,n=w.length;e<n;e++)this.skinIndices.push(w[e].clone());var _=t.lineDistances;for(e=0,n=_.length;e<n;e++)this.lineDistances.push(_[e]);var M=t.boundingBox;null!==M&&(this.boundingBox=M.clone());var E=t.boundingSphere;return null!==E&&(this.boundingSphere=E.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(Vn.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Vn.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.dynamic=t.dynamic,this},copyAt:function(t,e,n){t*=this.itemSize,n*=e.itemSize;for(var r=0,i=this.itemSize;r<i;r++)this.array[t+r]=e.array[n+r];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r),o=new En),e[n++]=o.r,e[n++]=o.g,e[n++]=o.b}return this},copyVector2sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r),o=new Ze),e[n++]=o.x,e[n++]=o.y}return this},copyVector3sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r),o=new $e),e[n++]=o.x,e[n++]=o.y,e[n++]=o.z}return this},copyVector4sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r),o=new un),e[n++]=o.x,e[n++]=o.y,e[n++]=o.z,e[n++]=o.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this},setXYZW:function(t,e,n,r,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=i,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),jn.prototype=Object.create(Vn.prototype),jn.prototype.constructor=jn,Wn.prototype=Object.create(Vn.prototype),Wn.prototype.constructor=Wn,qn.prototype=Object.create(Vn.prototype),qn.prototype.constructor=qn,Xn.prototype=Object.create(Vn.prototype),Xn.prototype.constructor=Xn,Yn.prototype=Object.create(Vn.prototype),Yn.prototype.constructor=Yn,Jn.prototype=Object.create(Vn.prototype),Jn.prototype.constructor=Jn,Zn.prototype=Object.create(Vn.prototype),Zn.prototype.constructor=Zn,Qn.prototype=Object.create(Vn.prototype),Qn.prototype.constructor=Qn,Kn.prototype=Object.create(Vn.prototype),Kn.prototype.constructor=Kn,Object.assign($n.prototype,{computeGroups:function(t){for(var e,n=[],r=void 0,i=t.faces,o=0;o<i.length;o++){var a=i[o];a.materialIndex!==r&&(r=a.materialIndex,void 0!==e&&(e.count=3*o-e.start,n.push(e)),e={start:3*o,materialIndex:r})}void 0!==e&&(e.count=3*o-e.start,n.push(e)),this.groups=n},fromGeometry:function(t){var e,n=t.faces,r=t.vertices,i=t.faceVertexUvs,o=i[0]&&i[0].length>0,a=i[1]&&i[1].length>0,s=t.morphTargets,c=s.length;if(c>0){e=[];for(var h=0;h<c;h++)e[h]={name:s[h].name,data:[]};this.morphTargets.position=e}var u,l=t.morphNormals,d=l.length;if(d>0){u=[];for(h=0;h<d;h++)u[h]={name:l[h].name,data:[]};this.morphTargets.normal=u}var p=t.skinIndices,f=t.skinWeights,m=p.length===r.length,v=f.length===r.length;r.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(h=0;h<n.length;h++){var g=n[h];this.vertices.push(r[g.a],r[g.b],r[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=g.normal;this.normals.push(x,x,x)}var b,w=g.vertexColors;if(3===w.length)this.colors.push(w[0],w[1],w[2]);else{var _=g.color;this.colors.push(_,_,_)}if(!0===o)void 0!==(b=i[0][h])?this.uvs.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",h),this.uvs.push(new Ze,new Ze,new Ze));if(!0===a)void 0!==(b=i[1][h])?this.uvs2.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",h),this.uvs2.push(new Ze,new Ze,new Ze));for(var M=0;M<c;M++){var E=s[M].vertices;e[M].data.push(E[g.a],E[g.b],E[g.c])}for(M=0;M<d;M++){var S=l[M].vertexNormals[h];u[M].data.push(S.a,S.b,S.c)}m&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),v&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}});var er=1;function nr(){Object.defineProperty(this,"id",{value:er+=2}),this.uuid=Je.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}function rr(t,e,n,r,i,o){kn.call(this),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:i,depthSegments:o},this.fromBufferGeometry(new ir(t,e,n,r,i,o)),this.mergeVertices()}function ir(t,e,n,r,i,o){nr.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:i,depthSegments:o};var a=this;t=t||1,e=e||1,n=n||1,r=Math.floor(r)||1,i=Math.floor(i)||1,o=Math.floor(o)||1;var s=[],c=[],h=[],u=[],l=0,d=0;function p(t,e,n,r,i,o,p,f,m,v,g){var y,x,b=o/m,w=p/v,_=o/2,M=p/2,E=f/2,S=m+1,T=v+1,A=0,L=0,C=new $e;for(x=0;x<T;x++){var P=x*w-M;for(y=0;y<S;y++){var R=y*b-_;C[t]=R*r,C[e]=P*i,C[n]=E,c.push(C.x,C.y,C.z),C[t]=0,C[e]=0,C[n]=f>0?1:-1,h.push(C.x,C.y,C.z),u.push(y/m),u.push(1-x/v),A+=1}}for(x=0;x<v;x++)for(y=0;y<m;y++){var O=l+y+S*x,I=l+y+S*(x+1),D=l+(y+1)+S*(x+1),z=l+(y+1)+S*x;s.push(O,I,z),s.push(I,D,z),L+=6}a.addGroup(d,L,g),d+=L,l+=A}p("z","y","x",-1,-1,n,e,t,o,i,0),p("z","y","x",1,-1,n,e,-t,o,i,1),p("x","z","y",1,1,t,n,e,r,o,2),p("x","z","y",1,-1,t,n,-e,r,o,3),p("x","y","z",1,-1,t,e,n,r,i,4),p("x","y","z",-1,-1,t,e,-n,r,i,5),this.setIndex(s),this.addAttribute("position",new Qn(c,3)),this.addAttribute("normal",new Qn(h,3)),this.addAttribute("uv",new Qn(u,2))}function or(t,e,n,r){kn.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r},this.fromBufferGeometry(new ar(t,e,n,r)),this.mergeVertices()}function ar(t,e,n,r){nr.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};var i,o,a=(t=t||1)/2,s=(e=e||1)/2,c=Math.floor(n)||1,h=Math.floor(r)||1,u=c+1,l=h+1,d=t/c,p=e/h,f=[],m=[],v=[],g=[];for(o=0;o<l;o++){var y=o*p-s;for(i=0;i<u;i++){var x=i*d-a;m.push(x,-y,0),v.push(0,0,1),g.push(i/c),g.push(1-o/h)}}for(o=0;o<h;o++)for(i=0;i<c;i++){var b=i+u*o,w=i+u*(o+1),_=i+1+u*(o+1),M=i+1+u*o;f.push(b,w,M),f.push(w,_,M)}this.setIndex(f),this.addAttribute("position",new Qn(m,3)),this.addAttribute("normal",new Qn(v,3)),this.addAttribute("uv",new Qn(g,2))}nr.prototype=Object.assign(Object.create(r.prototype),{constructor:nr,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(tr(t)>65535?Zn:Yn)(t,1):this.index=t},addAttribute:function(t,e){return e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):(this.attributes[t]=e,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(t,new Vn(arguments[1],arguments[2])))},getAttribute:function(t){return this.attributes[t]},removeAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,n){this.groups.push({start:t,count:e,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new tn).getNormalMatrix(t).applyToBufferAttribute(n),n.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var t=new Qe;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new Qe;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new Qe;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new Qe;return function(e,n,r){return t.makeTranslation(e,n,r),this.applyMatrix(t),this}}(),scale:function(){var t=new Qe;return function(e,n,r){return t.makeScale(e,n,r),this.applyMatrix(t),this}}(),lookAt:function(){var t=new Un;return function(e){t.lookAt(e),t.updateMatrix(),this.applyMatrix(t.matrix)}}(),center:function(){var t=new $e;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(t).negate(),this.translate(t.x,t.y,t.z),this}}(),setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var n=new Qn(3*e.vertices.length,3),r=new Qn(3*e.colors.length,3);if(this.addAttribute("position",n.copyVector3sArray(e.vertices)),this.addAttribute("color",r.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var i=new Qn(e.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];e.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new Qn(e,3)),this},updateFromObject:function(t){var e,n=t.geometry;if(t.isMesh){var r=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(r=void 0,n.elementsNeedUpdate=!1),void 0===r)return this.fromGeometry(n);r.verticesNeedUpdate=n.verticesNeedUpdate,r.normalsNeedUpdate=n.normalsNeedUpdate,r.colorsNeedUpdate=n.colorsNeedUpdate,r.uvsNeedUpdate=n.uvsNeedUpdate,r.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=r}return!0===n.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(n.vertices),e.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(n.normals),e.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(n.colors),e.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(n.uvs),e.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(n.lineDistances),e.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(t.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new $n).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.addAttribute("position",new Vn(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var n=new Float32Array(3*t.normals.length);this.addAttribute("normal",new Vn(n,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var r=new Float32Array(3*t.colors.length);this.addAttribute("color",new Vn(r,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var i=new Float32Array(2*t.uvs.length);this.addAttribute("uv",new Vn(i,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var o=new Float32Array(2*t.uvs2.length);this.addAttribute("uv2",new Vn(o,2).copyVector2sArray(t.uvs2))}for(var a in this.groups=t.groups,t.morphTargets){for(var s=[],c=t.morphTargets[a],h=0,u=c.length;h<u;h++){var l=c[h],d=new Qn(3*l.data.length,3);d.name=l.name,s.push(d.copyVector3sArray(l.data))}this.morphAttributes[a]=s}if(t.skinIndices.length>0){var p=new Qn(4*t.skinIndices.length,4);this.addAttribute("skinIndex",p.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var f=new Qn(4*t.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new fn);var t=this.attributes.position;void 0!==t?this.boundingBox.setFromBufferAttribute(t):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var t=new fn,e=new $e;return function(){null===this.boundingSphere&&(this.boundingSphere=new mn);var n=this.attributes.position;if(n){var r=this.boundingSphere.center;t.setFromBufferAttribute(n),t.getCenter(r);for(var i=0,o=0,a=n.count;o<a;o++)e.x=n.getX(o),e.y=n.getY(o),e.z=n.getZ(o),i=Math.max(i,r.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var n=e.position.array;if(void 0===e.normal)this.addAttribute("normal",new Vn(new Float32Array(n.length),3));else for(var r=e.normal.array,i=0,o=r.length;i<o;i++)r[i]=0;var a,s,c,h=e.normal.array,u=new $e,l=new $e,d=new $e,p=new $e,f=new $e;if(t){var m=t.array;for(i=0,o=t.count;i<o;i+=3)a=3*m[i+0],s=3*m[i+1],c=3*m[i+2],u.fromArray(n,a),l.fromArray(n,s),d.fromArray(n,c),p.subVectors(d,l),f.subVectors(u,l),p.cross(f),h[a]+=p.x,h[a+1]+=p.y,h[a+2]+=p.z,h[s]+=p.x,h[s+1]+=p.y,h[s+2]+=p.z,h[c]+=p.x,h[c+1]+=p.y,h[c+2]+=p.z}else for(i=0,o=n.length;i<o;i+=9)u.fromArray(n,i),l.fromArray(n,i+3),d.fromArray(n,i+6),p.subVectors(d,l),f.subVectors(u,l),p.cross(f),h[i]=p.x,h[i+1]=p.y,h[i+2]=p.z,h[i+3]=p.x,h[i+4]=p.y,h[i+5]=p.z,h[i+6]=p.x,h[i+7]=p.y,h[i+8]=p.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var r in n)if(void 0!==t.attributes[r])for(var i=n[r].array,o=t.attributes[r],a=o.array,s=0,c=o.itemSize*e;s<a.length;s++,c++)i[c]=a[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){var t=new $e;return function(){for(var e=this.attributes.normal,n=0,r=e.count;n<r;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.normalize(),e.setXYZ(n,t.x,t.y,t.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new nr,e=this.index.array,n=this.attributes;for(var r in n){for(var i=n[r],o=i.array,a=i.itemSize,s=new o.constructor(e.length*a),c=0,h=0,u=0,l=e.length;u<l;u++){c=e[u]*a;for(var d=0;d<a;d++)s[h++]=o[c++]}t.addAttribute(r,new Vn(s,a))}var p=this.groups;for(u=0,l=p.length;u<l;u++){var f=p[u];t.addGroup(f.start,f.count,f.materialIndex)}return t},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};var r=this.index;if(null!==r){var i=Array.prototype.slice.call(r.array);t.data.index={type:r.array.constructor.name,array:i}}var o=this.attributes;for(var n in o){var a=o[n];i=Array.prototype.slice.call(a.array);t.data.attributes[n]={itemSize:a.itemSize,type:a.array.constructor.name,array:i,normalized:a.normalized}}var s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(t.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),t},clone:function(){return(new nr).copy(this)},copy:function(t){var e,n,r;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var i=t.index;null!==i&&this.setIndex(i.clone());var o=t.attributes;for(e in o){var a=o[e];this.addAttribute(e,a.clone())}var s=t.morphAttributes;for(e in s){var c=[],h=s[e];for(n=0,r=h.length;n<r;n++)c.push(h[n].clone());this.morphAttributes[e]=c}var u=t.groups;for(n=0,r=u.length;n<r;n++){var l=u[n];this.addGroup(l.start,l.count,l.materialIndex)}var d=t.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=t.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),rr.prototype=Object.create(kn.prototype),rr.prototype.constructor=rr,ir.prototype=Object.create(nr.prototype),ir.prototype.constructor=ir,or.prototype=Object.create(kn.prototype),or.prototype.constructor=or,ar.prototype=Object.create(nr.prototype),ar.prototype.constructor=ar;var sr,cr,hr,ur,lr,dr,pr,fr,mr,vr,gr,yr,xr=0;function br(){Object.defineProperty(this,"id",{value:xr++}),this.uuid=Je.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=z,this.side=T,this.flatShading=!1,this.vertexColors=R,this.opacity=1,this.transparent=!1,this.blendSrc=J,this.blendDst=Z,this.blendEquation=G,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=ot,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.userData={},this.needsUpdate=!0}function wr(t){br.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function _r(t,e){this.origin=void 0!==t?t:new $e,this.direction=void 0!==e?e:new $e}function Mr(t,e,n){this.a=void 0!==t?t:new $e,this.b=void 0!==e?e:new $e,this.c=void 0!==n?n:new $e}function Er(t){br.call(this),this.type="MeshBasicMaterial",this.color=new En(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ut,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function Sr(t,e){Un.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new nr,this.material=void 0!==e?e:new Er({color:16777215*Math.random()}),this.drawMode=De,this.updateMorphTargets()}function Tr(t,e,n,r){var i,o,a=new En(0),s=0;function c(t,n){e.buffers.color.setClear(t.r,t.g,t.b,n,r)}return{getClearColor:function(){return a},setClearColor:function(t,e){a.set(t),c(a,s=void 0!==e?e:1)},getClearAlpha:function(){return s},setClearAlpha:function(t){c(a,s=t)},render:function(e,r,h,u){var l=r.background;null===l?c(a,s):l&&l.isColor&&(c(l,1),u=!0),(t.autoClear||u)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),l&&(l.isCubeTexture||l.isWebGLRenderTargetCube)?(void 0===o&&((o=new Sr(new ir(1,1,1),new wr({type:"BackgroundCubeMaterial",uniforms:_n.clone(An.cube.uniforms),vertexShader:An.cube.vertexShader,fragmentShader:An.cube.fragmentShader,side:A,depthTest:!0,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),o.geometry.removeAttribute("uv"),o.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},n.update(o)),o.material.uniforms.tCube.value=l.isWebGLRenderTargetCube?l.texture:l,o.material.uniforms.tFlip.value=l.isWebGLRenderTargetCube?1:-1,e.push(o,o.geometry,o.material,0,null)):l&&l.isTexture&&(void 0===i&&((i=new Sr(new ar(2,2),new wr({type:"BackgroundMaterial",uniforms:_n.clone(An.background.uniforms),vertexShader:An.background.vertexShader,fragmentShader:An.background.fragmentShader,side:T,depthTest:!0,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),n.update(i)),i.material.uniforms.t2D.value=l,!0===l.matrixAutoUpdate&&l.updateMatrix(),i.material.uniforms.uvTransform.value.copy(l.matrix),e.push(i,i.geometry,i.material,0,null))}}}function Ar(t,e,n,r){var i;this.setMode=function(t){i=t},this.render=function(e,r){t.drawArrays(i,e,r),n.update(r,i)},this.renderInstances=function(o,a,s){var c;if(r.isWebGL2)c=t;else if(null===(c=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[r.isWebGL2?"drawArraysInstanced":"drawArraysInstancedANGLE"](i,a,s,o.maxInstancedCount),n.update(s,i,o.maxInstancedCount)}}function Lr(t,e,n){var r;function i(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var o="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,a=void 0!==n.precision?n.precision:"highp",s=i(a);s!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",s,"instead."),a=s);var c=!0===n.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),l=t.getParameter(3379),d=t.getParameter(34076),p=t.getParameter(34921),f=t.getParameter(36347),m=t.getParameter(36348),v=t.getParameter(36349),g=u>0,y=o||!!e.get("OES_texture_float");return{isWebGL2:o,getMaxAnisotropy:function(){if(void 0!==r)return r;var n=e.get("EXT_texture_filter_anisotropic");return r=null!==n?t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:l,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y}}function Cr(){var t=this,e=null,n=0,r=!1,i=!1,o=new vn,a=new tn,s={value:null,needsUpdate:!1};function c(){s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function h(e,n,r,i){var c=null!==e?e.length:0,h=null;if(0!==c){if(h=s.value,!0!==i||null===h){var u=r+4*c,l=n.matrixWorldInverse;a.getNormalMatrix(l),(null===h||h.length<u)&&(h=new Float32Array(u));for(var d=0,p=r;d!==c;++d,p+=4)o.copy(e[d]).applyMatrix4(l,a),o.normal.toArray(h,p),h[p+3]=o.constant}s.value=h,s.needsUpdate=!0}return t.numPlanes=c,h}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,i,o){var a=0!==t.length||i||0!==n||r;return r=i,e=h(t,o,0),n=t.length,a},this.beginShadows=function(){i=!0,h(null)},this.endShadows=function(){i=!1,c()},this.setState=function(t,o,a,u,l,d){if(!r||null===t||0===t.length||i&&!a)i?h(null):c();else{var p=i?0:n,f=4*p,m=l.clippingState||null;s.value=m,m=h(t,u,f,d);for(var v=0;v!==f;++v)m[v]=e[v];l.clippingState=m,this.numIntersection=o?this.numPlanes:0,this.numPlanes+=p}}}function Pr(t){var e={};return{get:function(n){if(void 0!==e[n])return e[n];var r;switch(n){case"WEBGL_depth_texture":r=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=t.getExtension(n)}return null===r&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),e[n]=r,r}}}function Rr(t,e,n){var r={},i={};function o(t){var a=t.target,s=r[a.id];for(var c in null!==s.index&&e.remove(s.index),s.attributes)e.remove(s.attributes[c]);a.removeEventListener("dispose",o),delete r[a.id];var h=i[s.id];h&&(e.remove(h),delete i[s.id]),n.memory.geometries--}return{get:function(t,e){var i=r[e.id];return i||(e.addEventListener("dispose",o),e.isBufferGeometry?i=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new nr).setFromObject(t)),i=e._bufferGeometry),r[e.id]=i,n.memory.geometries++,i)},update:function(t){var n=t.index,r=t.attributes;for(var i in null!==n&&e.update(n,34963),r)e.update(r[i],34962);var o=t.morphAttributes;for(var i in o)for(var a=o[i],s=0,c=a.length;s<c;s++)e.update(a[s],34962)},getWireframeAttribute:function(t){var n=i[t.id];if(n)return n;var r,o=[],a=t.index,s=t.attributes;if(null!==a)for(var c=0,h=(r=a.array).length;c<h;c+=3){var u=r[c+0],l=r[c+1],d=r[c+2];o.push(u,l,l,d,d,u)}else for(c=0,h=(r=s.position.array).length/3-1;c<h;c+=3){u=c+0,l=c+1,d=c+2;o.push(u,l,l,d,d,u)}return n=new(tr(o)>65535?Zn:Yn)(o,1),e.update(n,34963),i[t.id]=n,n}}}function Or(t,e,n,r){var i,o,a;this.setMode=function(t){i=t},this.setIndex=function(t){o=t.type,a=t.bytesPerElement},this.render=function(e,r){t.drawElements(i,r,o,e*a),n.update(r,i)},this.renderInstances=function(s,c,h){var u;if(r.isWebGL2)u=t;else if(null===(u=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");u[r.isWebGL2?"drawElementsInstanced":"drawElementsInstancedANGLE"](i,h,o,c*a,s.maxInstancedCount),n.update(h,i,s.maxInstancedCount)}}function Ir(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,r){switch(r=r||1,e.calls++,n){case 4:e.triangles+=r*(t/3);break;case 5:case 6:e.triangles+=r*(t-2);break;case 1:e.lines+=r*(t/2);break;case 3:e.lines+=r*(t-1);break;case 2:e.lines+=r*t;break;case 0:e.points+=r*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function Dr(t,e){return Math.abs(e[1])-Math.abs(t[1])}function zr(t){var e={},n=new Float32Array(8);return{update:function(r,i,o,a){var s=r.morphTargetInfluences,c=s.length,h=e[i.id];if(void 0===h){h=[];for(var u=0;u<c;u++)h[u]=[u,0];e[i.id]=h}var l=o.morphTargets&&i.morphAttributes.position,d=o.morphNormals&&i.morphAttributes.normal;for(u=0;u<c;u++){0!==(p=h[u])[1]&&(l&&i.removeAttribute("morphTarget"+u),d&&i.removeAttribute("morphNormal"+u))}for(u=0;u<c;u++){(p=h[u])[0]=u,p[1]=s[u]}for(h.sort(Dr),u=0;u<8;u++){var p;if(p=h[u]){var f=p[0],m=p[1];if(m){l&&i.addAttribute("morphTarget"+u,l[f]),d&&i.addAttribute("morphNormal"+u,d[f]),n[u]=m;continue}}n[u]=0}a.getUniforms().setValue(t,"morphTargetInfluences",n)}}}function Nr(t,e){var n={};return{update:function(r){var i=e.render.frame,o=r.geometry,a=t.get(r,o);return n[a.id]!==i&&(o.isGeometry&&a.updateFromObject(r),t.update(a),n[a.id]=i),a},dispose:function(){n={}}}}function Br(t,e,n,r,i,o,a,s,c,h){t=void 0!==t?t:[],e=void 0!==e?e:xt,hn.call(this,t,e,n,r,i,o,a,s,c,h),this.flipY=!1}function Ur(t,e,n,r){hn.call(this,null),this.image={data:t,width:e,height:n,depth:r},this.magFilter=Ct,this.minFilter=Ct,this.generateMipmaps=!1,this.flipY=!1}br.prototype=Object.assign(Object.create(r.prototype),{constructor:br,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var n=t[e];if(void 0!==n)if("shading"!==e){var r=this[e];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===C;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function r(t){var e=[];for(var n in t){var r=t[n];delete r.metadata,e.push(r)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearCoat&&(n.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(n.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,n.reflectivity=this.reflectivity,void 0!==this.combine&&(n.combine=this.combine),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==z&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==T&&(n.side=this.side),this.vertexColors!==R&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){var i=r(t.textures),o=r(t.images);i.length>0&&(n.textures=i),o.length>0&&(n.images=o)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.lights=t.lights,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.userData=JSON.parse(JSON.stringify(t.userData)),this.clipShadows=t.clipShadows,this.clipIntersection=t.clipIntersection;var e=t.clippingPlanes,n=null;if(null!==e){var r=e.length;n=new Array(r);for(var i=0;i!==r;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.shadowSide=t.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),wr.prototype=Object.create(br.prototype),wr.prototype.constructor=wr,wr.prototype.isShaderMaterial=!0,wr.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=_n.clone(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},wr.prototype.toJSON=function(t){var e=br.prototype.toJSON.call(this,t);for(var n in e.uniforms={},this.uniforms){var r=this.uniforms[n].value;r.isTexture?e.uniforms[n]={type:"t",value:r.toJSON(t).uuid}:r.isColor?e.uniforms[n]={type:"c",value:r.getHex()}:r.isVector2?e.uniforms[n]={type:"v2",value:r.toArray()}:r.isVector3?e.uniforms[n]={type:"v3",value:r.toArray()}:r.isVector4?e.uniforms[n]={type:"v4",value:r.toArray()}:r.isMatrix4?e.uniforms[n]={type:"m4",value:r.toArray()}:e.uniforms[n]={value:r}}return Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e},Object.assign(_r.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new $e),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(){var t=new $e;return function(e){return this.origin.copy(this.at(e,t)),this}}(),closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new $e),e.subVectors(t,this.origin);var n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(){var t=new $e;return function(e){var n=t.subVectors(e,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(e):(t.copy(this.direction).multiplyScalar(n).add(this.origin),t.distanceToSquared(e))}}(),distanceSqToSegment:(cr=new $e,hr=new $e,ur=new $e,function(t,e,n,r){cr.copy(t).add(e).multiplyScalar(.5),hr.copy(e).sub(t).normalize(),ur.copy(this.origin).sub(cr);var i,o,a,s,c=.5*t.distanceTo(e),h=-this.direction.dot(hr),u=ur.dot(this.direction),l=-ur.dot(hr),d=ur.lengthSq(),p=Math.abs(1-h*h);if(p>0)if(o=h*u-l,s=c*p,(i=h*l-u)>=0)if(o>=-s)if(o<=s){var f=1/p;a=(i*=f)*(i+h*(o*=f)+2*u)+o*(h*i+o+2*l)+d}else o=c,a=-(i=Math.max(0,-(h*o+u)))*i+o*(o+2*l)+d;else o=-c,a=-(i=Math.max(0,-(h*o+u)))*i+o*(o+2*l)+d;else o<=-s?a=-(i=Math.max(0,-(-h*c+u)))*i+(o=i>0?-c:Math.min(Math.max(-c,-l),c))*(o+2*l)+d:o<=s?(i=0,a=(o=Math.min(Math.max(-c,-l),c))*(o+2*l)+d):a=-(i=Math.max(0,-(h*c+u)))*i+(o=i>0?c:Math.min(Math.max(-c,-l),c))*(o+2*l)+d;else o=h>0?-c:c,a=-(i=Math.max(0,-(h*o+u)))*i+o*(o+2*l)+d;return n&&n.copy(this.direction).multiplyScalar(i).add(this.origin),r&&r.copy(hr).multiplyScalar(o).add(cr),a}),intersectSphere:function(){var t=new $e;return function(e,n){t.subVectors(e.center,this.origin);var r=t.dot(this.direction),i=t.dot(t)-r*r,o=e.radius*e.radius;if(i>o)return null;var a=Math.sqrt(o-i),s=r-a,c=r+a;return s<0&&c<0?null:s<0?this.at(c,n):this.at(s,n)}}(),intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null},intersectPlane:function(t,e){var n=this.distanceToPlane(t);return null===n?null:this.at(n,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var n,r,i,o,a,s,c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,l=this.origin;return c>=0?(n=(t.min.x-l.x)*c,r=(t.max.x-l.x)*c):(n=(t.max.x-l.x)*c,r=(t.min.x-l.x)*c),h>=0?(i=(t.min.y-l.y)*h,o=(t.max.y-l.y)*h):(i=(t.max.y-l.y)*h,o=(t.min.y-l.y)*h),n>o||i>r?null:((i>n||n!=n)&&(n=i),(o<r||r!=r)&&(r=o),u>=0?(a=(t.min.z-l.z)*u,s=(t.max.z-l.z)*u):(a=(t.max.z-l.z)*u,s=(t.min.z-l.z)*u),n>s||a>r?null:((a>n||n!=n)&&(n=a),(s<r||r!=r)&&(r=s),r<0?null:this.at(n>=0?n:r,e)))},intersectsBox:(sr=new $e,function(t){return null!==this.intersectBox(t,sr)}),intersectTriangle:function(){var t=new $e,e=new $e,n=new $e,r=new $e;return function(i,o,a,s,c){e.subVectors(o,i),n.subVectors(a,i),r.crossVectors(e,n);var h,u=this.direction.dot(r);if(u>0){if(s)return null;h=1}else{if(!(u<0))return null;h=-1,u=-u}t.subVectors(this.origin,i);var l=h*this.direction.dot(n.crossVectors(t,n));if(l<0)return null;var d=h*this.direction.dot(e.cross(t));if(d<0)return null;if(l+d>u)return null;var p=-h*t.dot(r);return p<0?null:this.at(p/u,c)}}(),applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}),Object.assign(Mr,{getNormal:(dr=new $e,function(t,e,n,r){void 0===r&&(console.warn("THREE.Triangle: .getNormal() target is now required"),r=new $e),r.subVectors(n,e),dr.subVectors(t,e),r.cross(dr);var i=r.lengthSq();return i>0?r.multiplyScalar(1/Math.sqrt(i)):r.set(0,0,0)}),getBarycoord:function(){var t=new $e,e=new $e,n=new $e;return function(r,i,o,a,s){t.subVectors(a,i),e.subVectors(o,i),n.subVectors(r,i);var c=t.dot(t),h=t.dot(e),u=t.dot(n),l=e.dot(e),d=e.dot(n),p=c*l-h*h;if(void 0===s&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new $e),0===p)return s.set(-2,-1,-1);var f=1/p,m=(l*u-h*d)*f,v=(c*d-h*u)*f;return s.set(1-m-v,v,m)}}(),containsPoint:function(){var t=new $e;return function(e,n,r,i){return Mr.getBarycoord(e,n,r,i,t),t.x>=0&&t.y>=0&&t.x+t.y<=1}}(),getUV:(lr=new $e,function(t,e,n,r,i,o,a,s){return this.getBarycoord(t,e,n,r,lr),s.set(0,0),s.addScaledVector(i,lr.x),s.addScaledVector(o,lr.y),s.addScaledVector(a,lr.z),s})}),Object.assign(Mr.prototype,{set:function(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this},setFromPointsAndIndices:function(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){var t=new $e,e=new $e;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new $e),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return Mr.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new $e),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return Mr.getBarycoord(t,this.a,this.b,this.c,e)},containsPoint:function(t){return Mr.containsPoint(t,this.a,this.b,this.c)},getUV:function(t,e,n,r,i){return Mr.getUV(t,this.a,this.b,this.c,e,n,r,i)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:(pr=new $e,fr=new $e,mr=new $e,vr=new $e,gr=new $e,yr=new $e,function(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new $e);var n,r,i=this.a,o=this.b,a=this.c;pr.subVectors(o,i),fr.subVectors(a,i),vr.subVectors(t,i);var s=pr.dot(vr),c=fr.dot(vr);if(s<=0&&c<=0)return e.copy(i);gr.subVectors(t,o);var h=pr.dot(gr),u=fr.dot(gr);if(h>=0&&u<=h)return e.copy(o);var l=s*u-h*c;if(l<=0&&s>=0&&h<=0)return n=s/(s-h),e.copy(i).addScaledVector(pr,n);yr.subVectors(t,a);var d=pr.dot(yr),p=fr.dot(yr);if(p>=0&&d<=p)return e.copy(a);var f=d*c-s*p;if(f<=0&&c>=0&&p<=0)return r=c/(c-p),e.copy(i).addScaledVector(fr,r);var m=h*p-d*u;if(m<=0&&u-h>=0&&d-p>=0)return mr.subVectors(a,o),r=(u-h)/(u-h+(d-p)),e.copy(o).addScaledVector(mr,r);var v=1/(m+f+l);return n=f*v,r=l*v,e.copy(i).addScaledVector(pr,n).addScaledVector(fr,r)}),equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}),Er.prototype=Object.create(br.prototype),Er.prototype.constructor=Er,Er.prototype.isMeshBasicMaterial=!0,Er.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this},Sr.prototype=Object.assign(Object.create(Un.prototype),{constructor:Sr,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(t){return Un.prototype.copy.call(this,t),this.drawMode=t.drawMode,void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,o=Object.keys(i);if(o.length>0){var a=i[o[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=a.length;t<e;t++)n=a[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=r.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=s.length;t<e;t++)n=s[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}},raycast:function(){var t=new Qe,e=new _r,n=new mn,r=new $e,i=new $e,o=new $e,a=new $e,s=new $e,c=new $e,h=new Ze,u=new Ze,l=new Ze,d=new $e,p=new $e;function f(t,e,n,r,i,o,a,s){if(null===(e.side===A?r.intersectTriangle(a,o,i,!0,s):r.intersectTriangle(i,o,a,e.side!==L,s)))return null;p.copy(s),p.applyMatrix4(t.matrixWorld);var c=n.ray.origin.distanceTo(p);return c<n.near||c>n.far?null:{distance:c,point:p.clone(),object:t}}function m(t,e,n,a,s,c,p,m,v){r.fromBufferAttribute(s,p),i.fromBufferAttribute(s,m),o.fromBufferAttribute(s,v);var g=f(t,e,n,a,r,i,o,d);if(g){c&&(h.fromBufferAttribute(c,p),u.fromBufferAttribute(c,m),l.fromBufferAttribute(c,v),g.uv=Mr.getUV(d,r,i,o,h,u,l,new Ze));var y=new Pn(p,m,v);Mr.getNormal(r,i,o,y.normal),g.face=y}return g}return function(p,v){var g,y=this.geometry,x=this.material,b=this.matrixWorld;if(void 0!==x&&(null===y.boundingSphere&&y.computeBoundingSphere(),n.copy(y.boundingSphere),n.applyMatrix4(b),!1!==p.ray.intersectsSphere(n)&&(t.getInverse(b),e.copy(p.ray).applyMatrix4(t),null===y.boundingBox||!1!==e.intersectsBox(y.boundingBox))))if(y.isBufferGeometry){var w,_,M,E,S,T,A,L,C,P=y.index,R=y.attributes.position,O=y.attributes.uv,I=y.groups,D=y.drawRange;if(null!==P)if(Array.isArray(x))for(E=0,T=I.length;E<T;E++)for(C=x[(L=I[E]).materialIndex],S=Math.max(L.start,D.start),A=Math.min(L.start+L.count,D.start+D.count);S<A;S+=3)w=P.getX(S),_=P.getX(S+1),M=P.getX(S+2),(g=m(this,C,p,e,R,O,w,_,M))&&(g.faceIndex=Math.floor(S/3),v.push(g));else for(E=Math.max(0,D.start),T=Math.min(P.count,D.start+D.count);E<T;E+=3)w=P.getX(E),_=P.getX(E+1),M=P.getX(E+2),(g=m(this,x,p,e,R,O,w,_,M))&&(g.faceIndex=Math.floor(E/3),v.push(g));else if(void 0!==R)if(Array.isArray(x))for(E=0,T=I.length;E<T;E++)for(C=x[(L=I[E]).materialIndex],S=Math.max(L.start,D.start),A=Math.min(L.start+L.count,D.start+D.count);S<A;S+=3)(g=m(this,C,p,e,R,O,w=S,_=S+1,M=S+2))&&(g.faceIndex=Math.floor(S/3),v.push(g));else for(E=Math.max(0,D.start),T=Math.min(R.count,D.start+D.count);E<T;E+=3)(g=m(this,x,p,e,R,O,w=E,_=E+1,M=E+2))&&(g.faceIndex=Math.floor(E/3),v.push(g))}else if(y.isGeometry){var z,N,B,U,F=Array.isArray(x),G=y.vertices,H=y.faces,k=y.faceVertexUvs[0];k.length>0&&(U=k);for(var V=0,j=H.length;V<j;V++){var W=H[V],q=F?x[W.materialIndex]:x;if(void 0!==q){if(z=G[W.a],N=G[W.b],B=G[W.c],!0===q.morphTargets){var X=y.morphTargets,Y=this.morphTargetInfluences;r.set(0,0,0),i.set(0,0,0),o.set(0,0,0);for(var J=0,Z=X.length;J<Z;J++){var Q=Y[J];if(0!==Q){var K=X[J].vertices;r.addScaledVector(a.subVectors(K[W.a],z),Q),i.addScaledVector(s.subVectors(K[W.b],N),Q),o.addScaledVector(c.subVectors(K[W.c],B),Q)}}r.add(z),i.add(N),o.add(B),z=r,N=i,B=o}if(g=f(this,q,p,e,z,N,B,d)){if(U&&U[V]){var $=U[V];h.copy($[0]),u.copy($[1]),l.copy($[2]),g.uv=Mr.getUV(d,z,N,B,h,u,l,new Ze)}g.face=W,g.faceIndex=V,v.push(g)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Br.prototype=Object.create(hn.prototype),Br.prototype.constructor=Br,Br.prototype.isCubeTexture=!0,Object.defineProperty(Br.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}}),Ur.prototype=Object.create(hn.prototype),Ur.prototype.constructor=Ur,Ur.prototype.isDataTexture3D=!0;var Fr=new hn,Gr=new Ur,Hr=new Br;function kr(){this.seq=[],this.map={}}var Vr=[],jr=[],Wr=new Float32Array(16),qr=new Float32Array(9),Xr=new Float32Array(4);function Yr(t,e,n){var r=t[0];if(r<=0||r>0)return t;var i=e*n,o=Vr[i];if(void 0===o&&(o=new Float32Array(i),Vr[i]=o),0!==e){r.toArray(o,0);for(var a=1,s=0;a!==e;++a)s+=n,t[a].toArray(o,s)}return o}function Jr(t,e){if(t.length!==e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(t[n]!==e[n])return!1;return!0}function Zr(t,e){for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}function Qr(t,e){var n=jr[e];void 0===n&&(n=new Int32Array(e),jr[e]=n);for(var r=0;r!==e;++r)n[r]=t.allocTextureUnit();return n}function Kr(t,e){var n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function $r(t,e){var n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function ti(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Jr(n,e))return;t.uniform2fv(this.addr,e),Zr(n,e)}}function ei(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Jr(n,e))return;t.uniform3fv(this.addr,e),Zr(n,e)}}function ni(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Jr(n,e))return;t.uniform4fv(this.addr,e),Zr(n,e)}}function ri(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(Jr(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),Zr(n,e)}else{if(Jr(n,r))return;Xr.set(r),t.uniformMatrix2fv(this.addr,!1,Xr),Zr(n,r)}}function ii(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(Jr(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),Zr(n,e)}else{if(Jr(n,r))return;qr.set(r),t.uniformMatrix3fv(this.addr,!1,qr),Zr(n,r)}}function oi(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(Jr(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),Zr(n,e)}else{if(Jr(n,r))return;Wr.set(r),t.uniformMatrix4fv(this.addr,!1,Wr),Zr(n,r)}}function ai(t,e,n){var r=this.cache,i=n.allocTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTexture2D(e||Fr,i)}function si(t,e,n){var r=this.cache,i=n.allocTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTexture3D(e||Gr,i)}function ci(t,e,n){var r=this.cache,i=n.allocTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTextureCube(e||Hr,i)}function hi(t,e){var n=this.cache;Jr(n,e)||(t.uniform2iv(this.addr,e),Zr(n,e))}function ui(t,e){var n=this.cache;Jr(n,e)||(t.uniform3iv(this.addr,e),Zr(n,e))}function li(t,e){var n=this.cache;Jr(n,e)||(t.uniform4iv(this.addr,e),Zr(n,e))}function di(t,e){var n=this.cache;Jr(n,e)||(t.uniform1fv(this.addr,e),Zr(n,e))}function pi(t,e){var n=this.cache;Jr(n,e)||(t.uniform1iv(this.addr,e),Zr(n,e))}function fi(t,e){var n=this.cache,r=Yr(e,this.size,2);Jr(n,r)||(t.uniform2fv(this.addr,r),this.updateCache(r))}function mi(t,e){var n=this.cache,r=Yr(e,this.size,3);Jr(n,r)||(t.uniform3fv(this.addr,r),this.updateCache(r))}function vi(t,e){var n=this.cache,r=Yr(e,this.size,4);Jr(n,r)||(t.uniform4fv(this.addr,r),this.updateCache(r))}function gi(t,e){var n=this.cache,r=Yr(e,this.size,4);Jr(n,r)||(t.uniformMatrix2fv(this.addr,!1,r),this.updateCache(r))}function yi(t,e){var n=this.cache,r=Yr(e,this.size,9);Jr(n,r)||(t.uniformMatrix3fv(this.addr,!1,r),this.updateCache(r))}function xi(t,e){var n=this.cache,r=Yr(e,this.size,16);Jr(n,r)||(t.uniformMatrix4fv(this.addr,!1,r),this.updateCache(r))}function bi(t,e,n){var r=this.cache,i=e.length,o=Qr(n,i);!1===Jr(r,o)&&(t.uniform1iv(this.addr,o),Zr(r,o));for(var a=0;a!==i;++a)n.setTexture2D(e[a]||Fr,o[a])}function wi(t,e,n){var r=this.cache,i=e.length,o=Qr(n,i);!1===Jr(r,o)&&(t.uniform1iv(this.addr,o),Zr(r,o));for(var a=0;a!==i;++a)n.setTextureCube(e[a]||Hr,o[a])}function _i(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Kr;case 35664:return ti;case 35665:return ei;case 35666:return ni;case 35674:return ri;case 35675:return ii;case 35676:return oi;case 35678:case 36198:return ai;case 35679:return si;case 35680:return ci;case 5124:case 35670:return $r;case 35667:case 35671:return hi;case 35668:case 35672:return ui;case 35669:case 35673:return li}}(e.type)}function Mi(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return di;case 35664:return fi;case 35665:return mi;case 35666:return vi;case 35674:return gi;case 35675:return yi;case 35676:return xi;case 35678:return bi;case 35680:return wi;case 5124:case 35670:return pi;case 35667:case 35671:return hi;case 35668:case 35672:return ui;case 35669:case 35673:return li}}(e.type)}function Ei(t){this.id=t,kr.call(this)}Mi.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),Zr(e,t)},Ei.prototype.setValue=function(t,e,n){for(var r=this.seq,i=0,o=r.length;i!==o;++i){var a=r[i];a.setValue(t,e[a.id],n)}};var Si=/([\w\d_]+)(\])?(\[|\.)?/g;function Ti(t,e){t.seq.push(e),t.map[e.id]=e}function Ai(t,e,n){var r=t.name,i=r.length;for(Si.lastIndex=0;;){var o=Si.exec(r),a=Si.lastIndex,s=o[1],c="]"===o[2],h=o[3];if(c&&(s|=0),void 0===h||"["===h&&a+2===i){Ti(n,void 0===h?new _i(s,t,e):new Mi(s,t,e));break}var u=n.map[s];void 0===u&&Ti(n,u=new Ei(s)),n=u}}function Li(t,e,n){kr.call(this),this.renderer=n;for(var r=t.getProgramParameter(e,35718),i=0;i<r;++i){var o=t.getActiveUniform(e,i);Ai(o,t.getUniformLocation(e,o.name),this)}}function Ci(t,e,n){var r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),!1===t.getShaderParameter(r,35713)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(r)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",35633===e?"vertex":"fragment",t.getShaderInfoLog(r),function(t){for(var e=t.split("\n"),n=0;n<e.length;n++)e[n]=n+1+": "+e[n];return e.join("\n")}(n)),r}Li.prototype.setValue=function(t,e,n){var r=this.map[e];void 0!==r&&r.setValue(t,n,this.renderer)},Li.prototype.setOptional=function(t,e,n){var r=e[n];void 0!==r&&this.setValue(t,n,r)},Li.upload=function(t,e,n,r){for(var i=0,o=e.length;i!==o;++i){var a=e[i],s=n[a.id];!1!==s.needsUpdate&&a.setValue(t,s.value,r)}},Li.seqWithValue=function(t,e){for(var n=[],r=0,i=t.length;r!==i;++r){var o=t[r];o.id in e&&n.push(o)}return n};var Pi=0;function Ri(t){switch(t){case Be:return["Linear","( value )"];case Ue:return["sRGB","( value )"];case Ge:return["RGBE","( value )"];case ke:return["RGBM","( value, 7.0 )"];case Ve:return["RGBM","( value, 16.0 )"];case je:return["RGBD","( value, 256.0 )"];case Fe:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+t)}}function Oi(t,e){var n=Ri(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function Ii(t,e){var n;switch(e){case ft:n="Linear";break;case mt:n="Reinhard";break;case vt:n="Uncharted2";break;case gt:n="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Di(t){return""!==t}function zi(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights)}function Ni(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}function Bi(t){return t.replace(/^[ \t]*#include +<([\w\d./]+)>/gm,(function(t,e){var n=wn[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return Bi(n)}))}function Ui(t){return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,(function(t,e,n,r){for(var i="",o=parseInt(e);o<parseInt(n);o++)i+=r.replace(/\[ i \]/g,"[ "+o+" ]");return i}))}function Fi(t,e,n,r,i,o,a){var s=t.context,c=r.defines,h=i.vertexShader,u=i.fragmentShader,l="SHADOWMAP_TYPE_BASIC";o.shadowMapType===E?l="SHADOWMAP_TYPE_PCF":o.shadowMapType===S&&(l="SHADOWMAP_TYPE_PCF_SOFT");var d="ENVMAP_TYPE_CUBE",p="ENVMAP_MODE_REFLECTION",f="ENVMAP_BLENDING_MULTIPLY";if(o.envMap){switch(r.envMap.mapping){case xt:case bt:d="ENVMAP_TYPE_CUBE";break;case Et:case St:d="ENVMAP_TYPE_CUBE_UV";break;case wt:case _t:d="ENVMAP_TYPE_EQUIREC";break;case Mt:d="ENVMAP_TYPE_SPHERE"}switch(r.envMap.mapping){case bt:case _t:p="ENVMAP_MODE_REFRACTION"}switch(r.combine){case ut:f="ENVMAP_BLENDING_MULTIPLY";break;case lt:f="ENVMAP_BLENDING_MIX";break;case dt:f="ENVMAP_BLENDING_ADD"}}var m,v,g,y,x,b=t.gammaFactor>0?t.gammaFactor:1,w=a.isWebGL2?"":function(t,e,n){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.normalMap&&!e.objectSpaceNormalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(t.fragDepth||e.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",t.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(t.shaderTextureLOD||e.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Di).join("\n")}(r.extensions,o,e),_=function(t){var e=[];for(var n in t){var r=t[n];!1!==r&&e.push("#define "+n+" "+r)}return e.join("\n")}(c),M=s.createProgram();if(r.isRawShaderMaterial?((m=[_].filter(Di).join("\n")).length>0&&(m+="\n"),(v=[w,_].filter(Di).join("\n")).length>0&&(v+="\n")):(m=["precision "+o.precision+" float;","precision "+o.precision+" int;","#define SHADER_NAME "+i.name,_,o.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+b,"#define MAX_BONES "+o.maxBones,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+p:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMap&&o.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",o.displacementMap&&o.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.vertexColors?"#define USE_COLOR":"",o.flatShading?"#define FLAT_SHADED":"",o.skinning?"#define USE_SKINNING":"",o.useVertexTexture?"#define BONE_TEXTURE":"",o.morphTargets?"#define USE_MORPHTARGETS":"",o.morphNormals&&!1===o.flatShading?"#define USE_MORPHNORMALS":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+l:"",o.sizeAttenuation?"#define USE_SIZEATTENUATION":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&(a.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Di).join("\n"),v=[w,"precision "+o.precision+" float;","precision "+o.precision+" int;","#define SHADER_NAME "+i.name,_,o.alphaTest?"#define ALPHATEST "+o.alphaTest+(o.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+b,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+d:"",o.envMap?"#define "+p:"",o.envMap?"#define "+f:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMap&&o.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.vertexColors?"#define USE_COLOR":"",o.gradientMap?"#define USE_GRADIENTMAP":"",o.flatShading?"#define FLAT_SHADED":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+l:"",o.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",o.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&(a.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",o.envMap&&(a.isWebGL2||e.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",o.toneMapping!==pt?"#define TONE_MAPPING":"",o.toneMapping!==pt?wn.tonemapping_pars_fragment:"",o.toneMapping!==pt?Ii("toneMapping",o.toneMapping):"",o.dithering?"#define DITHERING":"",o.outputEncoding||o.mapEncoding||o.matcapEncoding||o.envMapEncoding||o.emissiveMapEncoding?wn.encodings_pars_fragment:"",o.mapEncoding?Oi("mapTexelToLinear",o.mapEncoding):"",o.matcapEncoding?Oi("matcapTexelToLinear",o.matcapEncoding):"",o.envMapEncoding?Oi("envMapTexelToLinear",o.envMapEncoding):"",o.emissiveMapEncoding?Oi("emissiveMapTexelToLinear",o.emissiveMapEncoding):"",o.outputEncoding?(g="linearToOutputTexel",y=o.outputEncoding,x=Ri(y),"vec4 "+g+"( vec4 value ) { return LinearTo"+x[0]+x[1]+"; }"):"",o.depthPacking?"#define DEPTH_PACKING "+r.depthPacking:"","\n"].filter(Di).join("\n")),h=Ni(h=zi(h=Bi(h),o),o),u=Ni(u=zi(u=Bi(u),o),o),h=Ui(h),u=Ui(u),a.isWebGL2&&!r.isRawShaderMaterial){var T=!1,A=/^\s*#version\s+300\s+es\s*\n/;r.isShaderMaterial&&null!==h.match(A)&&null!==u.match(A)&&(T=!0,h=h.replace(A,""),u=u.replace(A,"")),m=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+m,v=["#version 300 es\n","#define varying in",T?"":"out highp vec4 pc_fragColor;",T?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+v}var L=v+u,C=Ci(s,35633,m+h),P=Ci(s,35632,L);s.attachShader(M,C),s.attachShader(M,P),void 0!==r.index0AttributeName?s.bindAttribLocation(M,0,r.index0AttributeName):!0===o.morphTargets&&s.bindAttribLocation(M,0,"position"),s.linkProgram(M);var R,O,I=s.getProgramInfoLog(M).trim(),D=s.getShaderInfoLog(C).trim(),z=s.getShaderInfoLog(P).trim(),N=!0,B=!0;return!1===s.getProgramParameter(M,35714)?(N=!1,console.error("THREE.WebGLProgram: shader error: ",s.getError(),"35715",s.getProgramParameter(M,35715),"gl.getProgramInfoLog",I,D,z)):""!==I?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",I):""!==D&&""!==z||(B=!1),B&&(this.diagnostics={runnable:N,material:r,programLog:I,vertexShader:{log:D,prefix:m},fragmentShader:{log:z,prefix:v}}),s.deleteShader(C),s.deleteShader(P),this.getUniforms=function(){return void 0===R&&(R=new Li(s,M,t)),R},this.getAttributes=function(){return void 0===O&&(O=function(t,e){for(var n={},r=t.getProgramParameter(e,35721),i=0;i<r;i++){var o=t.getActiveAttrib(e,i).name;n[o]=t.getAttribLocation(e,o)}return n}(s,M)),O},this.destroy=function(){s.deleteProgram(M),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.name=i.name,this.id=Pi++,this.code=n,this.usedTimes=1,this.program=M,this.vertexShader=C,this.fragmentShader=P,this}function Gi(t,e,n){var r=[],i={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},o=["precision","supportsVertexTextures","map","mapEncoding","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function a(t,e){var n;return t?t.isTexture?n=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=t.texture.encoding):n=Be,n===Be&&e&&(n=Fe),n}this.getParameters=function(e,r,o,s,c,h,u){var l=i[e.type],d=u.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(n.floatVertexTextures)return 1024;var r=n.maxVertexUniforms,i=Math.floor((r-20)/4),o=Math.min(i,e.length);return o<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+o+"."),0):o}(u):0,p=n.precision;null!==e.precision&&(p=n.getMaxPrecision(e.precision))!==e.precision&&console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",p,"instead.");var f=t.getRenderTarget();return{shaderID:l,precision:p,supportsVertexTextures:n.vertexTextures,outputEncoding:a(f?f.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:a(e.map,t.gammaInput),matcap:!!e.matcap,matcapEncoding:a(e.matcap,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:a(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===Et||e.envMap.mapping===St),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:a(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===Ye,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexColors:e.vertexColors,fog:!!s,useFog:e.fog,fogExp:s&&s.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:n.logarithmicDepthBuffer,skinning:e.skinning&&d>0,maxBones:d,useVertexTexture:n.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numClippingPlanes:c,numClipIntersection:h,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&u.receiveShadow&&o.length>0,shadowMapType:t.shadowMap.type,toneMapping:t.toneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===L,flipSided:e.side===A,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCode=function(e,n){var r=[];if(n.shaderID?r.push(n.shaderID):(r.push(e.fragmentShader),r.push(e.vertexShader)),void 0!==e.defines)for(var i in e.defines)r.push(i),r.push(e.defines[i]);for(var a=0;a<o.length;a++)r.push(n[o[a]]);return r.push(e.onBeforeCompile.toString()),r.push(t.gammaOutput),r.push(t.gammaFactor),r.join()},this.acquireProgram=function(i,o,a,s){for(var c,h=0,u=r.length;h<u;h++){var l=r[h];if(l.code===s){++(c=l).usedTimes;break}}return void 0===c&&(c=new Fi(t,e,s,i,o,a,n),r.push(c)),c},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=r.indexOf(t);r[e]=r[r.length-1],r.pop(),t.destroy()}},this.programs=r}function Hi(){var t=new WeakMap;return{get:function(e){var n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,r){t.get(e)[n]=r},dispose:function(){t=new WeakMap}}}function ki(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program&&e.program&&t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Vi(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function ji(){var t=[],e=0,n=[],r=[];return{opaque:n,transparent:r,init:function(){e=0,n.length=0,r.length=0},push:function(i,o,a,s,c){var h=t[e];void 0===h?(h={id:i.id,object:i,geometry:o,material:a,program:a.program,renderOrder:i.renderOrder,z:s,group:c},t[e]=h):(h.id=i.id,h.object=i,h.geometry=o,h.material=a,h.program=a.program,h.renderOrder=i.renderOrder,h.z=s,h.group=c),(!0===a.transparent?r:n).push(h),e++},sort:function(){n.length>1&&n.sort(ki),r.length>1&&r.sort(Vi)}}}function Wi(){var t={};return{get:function(e,n){var r=e.id+","+n.id,i=t[r];return void 0===i&&(i=new ji,t[r]=i),i},dispose:function(){t={}}}}function qi(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":n={direction:new $e,color:new En,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ze};break;case"SpotLight":n={position:new $e,direction:new $e,color:new En,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ze};break;case"PointLight":n={position:new $e,color:new En,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Ze,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new $e,skyColor:new En,groundColor:new En};break;case"RectAreaLight":n={color:new En,position:new $e,halfWidth:new $e,halfHeight:new $e}}return t[e.id]=n,n}}}var Xi=0;function Yi(){var t=new qi,e={id:Xi++,hash:{stateID:-1,directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},n=new $e,r=new Qe,i=new Qe;return{setup:function(o,a,s){for(var c=0,h=0,u=0,l=0,d=0,p=0,f=0,m=0,v=s.matrixWorldInverse,g=0,y=o.length;g<y;g++){var x=o[g],b=x.color,w=x.intensity,_=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)c+=b.r*w,h+=b.g*w,u+=b.b*w;else if(x.isDirectionalLight){if((S=t.get(x)).color.copy(x.color).multiplyScalar(x.intensity),S.direction.setFromMatrixPosition(x.matrixWorld),n.setFromMatrixPosition(x.target.matrixWorld),S.direction.sub(n),S.direction.transformDirection(v),S.shadow=x.castShadow,x.castShadow){var E=x.shadow;S.shadowBias=E.bias,S.shadowRadius=E.radius,S.shadowMapSize=E.mapSize}e.directionalShadowMap[l]=M,e.directionalShadowMatrix[l]=x.shadow.matrix,e.directional[l]=S,l++}else if(x.isSpotLight){if((S=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),S.position.applyMatrix4(v),S.color.copy(b).multiplyScalar(w),S.distance=_,S.direction.setFromMatrixPosition(x.matrixWorld),n.setFromMatrixPosition(x.target.matrixWorld),S.direction.sub(n),S.direction.transformDirection(v),S.coneCos=Math.cos(x.angle),S.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),S.decay=x.decay,S.shadow=x.castShadow,x.castShadow){E=x.shadow;S.shadowBias=E.bias,S.shadowRadius=E.radius,S.shadowMapSize=E.mapSize}e.spotShadowMap[p]=M,e.spotShadowMatrix[p]=x.shadow.matrix,e.spot[p]=S,p++}else if(x.isRectAreaLight){(S=t.get(x)).color.copy(b).multiplyScalar(w),S.position.setFromMatrixPosition(x.matrixWorld),S.position.applyMatrix4(v),i.identity(),r.copy(x.matrixWorld),r.premultiply(v),i.extractRotation(r),S.halfWidth.set(.5*x.width,0,0),S.halfHeight.set(0,.5*x.height,0),S.halfWidth.applyMatrix4(i),S.halfHeight.applyMatrix4(i),e.rectArea[f]=S,f++}else if(x.isPointLight){if((S=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),S.position.applyMatrix4(v),S.color.copy(x.color).multiplyScalar(x.intensity),S.distance=x.distance,S.decay=x.decay,S.shadow=x.castShadow,x.castShadow){E=x.shadow;S.shadowBias=E.bias,S.shadowRadius=E.radius,S.shadowMapSize=E.mapSize,S.shadowCameraNear=E.camera.near,S.shadowCameraFar=E.camera.far}e.pointShadowMap[d]=M,e.pointShadowMatrix[d]=x.shadow.matrix,e.point[d]=S,d++}else if(x.isHemisphereLight){var S;(S=t.get(x)).direction.setFromMatrixPosition(x.matrixWorld),S.direction.transformDirection(v),S.direction.normalize(),S.skyColor.copy(x.color).multiplyScalar(w),S.groundColor.copy(x.groundColor).multiplyScalar(w),e.hemi[m]=S,m++}}e.ambient[0]=c,e.ambient[1]=h,e.ambient[2]=u,e.directional.length=l,e.spot.length=p,e.rectArea.length=f,e.point.length=d,e.hemi.length=m,e.hash.stateID=e.id,e.hash.directionalLength=l,e.hash.pointLength=d,e.hash.spotLength=p,e.hash.rectAreaLength=f,e.hash.hemiLength=m,e.hash.shadowsLength=a.length},state:e}}function Ji(){var t=new Yi,e=[],n=[];return{init:function(){e.length=0,n.length=0},state:{lightsArray:e,shadowsArray:n,lights:t},setupLights:function(r){t.setup(e,n,r)},pushLight:function(t){e.push(t)},pushShadow:function(t){n.push(t)}}}function Zi(){var t={};return{get:function(e,n){var r;return void 0===t[e.id]?(r=new Ji,t[e.id]={},t[e.id][n.id]=r):void 0===t[e.id][n.id]?(r=new Ji,t[e.id][n.id]=r):r=t[e.id][n.id],r},dispose:function(){t={}}}}function Qi(t){br.call(this),this.type="MeshDepthMaterial",this.depthPacking=We,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(t)}function Ki(t){br.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new $e,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(t)}function $i(t,e,n){for(var r=new gn,i=new Qe,o=new Ze,a=new Ze(n,n),s=new $e,c=new $e,h=new Array(4),u=new Array(4),l={},d={0:A,1:T,2:L},p=[new $e(1,0,0),new $e(-1,0,0),new $e(0,0,1),new $e(0,0,-1),new $e(0,1,0),new $e(0,-1,0)],f=[new $e(0,1,0),new $e(0,1,0),new $e(0,1,0),new $e(0,1,0),new $e(0,0,1),new $e(0,0,-1)],m=[new un,new un,new un,new un,new un,new un],v=0;4!==v;++v){var g=0!=(1&v),y=0!=(2&v),x=new Qi({depthPacking:qe,morphTargets:g,skinning:y});h[v]=x;var b=new Ki({morphTargets:g,skinning:y});u[v]=b}var w=this;function _(e,n,r,i,o,a){var s=e.geometry,c=null,p=h,f=e.customDepthMaterial;if(r&&(p=u,f=e.customDistanceMaterial),f)c=f;else{var m=!1;n.morphTargets&&(s&&s.isBufferGeometry?m=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(m=s.morphTargets&&s.morphTargets.length>0)),e.isSkinnedMesh&&!1===n.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e);var v=0;m&&(v|=1),e.isSkinnedMesh&&n.skinning&&(v|=2),c=p[v]}if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var g=c.uuid,y=n.uuid,x=l[g];void 0===x&&(x={},l[g]=x);var b=x[y];void 0===b&&(b=c.clone(),x[y]=b),c=b}return c.visible=n.visible,c.wireframe=n.wireframe,c.side=null!=n.shadowSide?n.shadowSide:d[n.side],c.clipShadows=n.clipShadows,c.clippingPlanes=n.clippingPlanes,c.clipIntersection=n.clipIntersection,c.wireframeLinewidth=n.wireframeLinewidth,c.linewidth=n.linewidth,r&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(i),c.nearDistance=o,c.farDistance=a),c}function M(n,i,o,a){if(!1!==n.visible){if(n.layers.test(i.layers)&&(n.isMesh||n.isLine||n.isPoints)&&n.castShadow&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,n.matrixWorld);var s=e.update(n),h=n.material;if(Array.isArray(h))for(var u=s.groups,l=0,d=u.length;l<d;l++){var p=u[l],f=h[p.materialIndex];if(f&&f.visible){var m=_(n,f,a,c,o.near,o.far);t.renderBufferDirect(o,null,s,m,n,p)}}else if(h.visible){m=_(n,h,a,c,o.near,o.far);t.renderBufferDirect(o,null,s,m,n,null)}}for(var v=n.children,g=0,y=v.length;g<y;g++)M(v[g],i,o,a)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=E,this.render=function(e,n,h){if(!1!==w.enabled&&(!1!==w.autoUpdate||!1!==w.needsUpdate)&&0!==e.length){t.context;var u,l=t.state;l.disable(3042),l.buffers.color.setClear(1,1,1,1),l.buffers.depth.setTest(!0),l.setScissorTest(!1);for(var d=0,v=e.length;d<v;d++){var g=e[d],y=g.shadow,x=g&&g.isPointLight;if(void 0!==y){var b=y.camera;if(o.copy(y.mapSize),o.min(a),x){var _=o.x,E=o.y;m[0].set(2*_,E,_,E),m[1].set(0,E,_,E),m[2].set(3*_,E,_,E),m[3].set(_,E,_,E),m[4].set(3*_,0,_,E),m[5].set(_,0,_,E),o.x*=4,o.y*=2}if(null===y.map){var S={minFilter:Ct,magFilter:Ct,format:Jt};y.map=new ln(o.x,o.y,S),y.map.texture.name=g.name+".shadowMap",b.updateProjectionMatrix()}y.isSpotLightShadow&&y.update(g);var T=y.map,A=y.matrix;c.setFromMatrixPosition(g.matrixWorld),b.position.copy(c),x?(u=6,A.makeTranslation(-c.x,-c.y,-c.z)):(u=1,s.setFromMatrixPosition(g.target.matrixWorld),b.lookAt(s),b.updateMatrixWorld(),A.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),A.multiply(b.projectionMatrix),A.multiply(b.matrixWorldInverse)),t.setRenderTarget(T),t.clear();for(var L=0;L<u;L++){if(x){s.copy(b.position),s.add(p[L]),b.up.copy(f[L]),b.lookAt(s),b.updateMatrixWorld();var C=m[L];l.viewport(C)}i.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),r.setFromMatrix(i),M(n,h,b,x)}}else console.warn("THREE.WebGLShadowMap:",g,"has no shadow.")}w.needsUpdate=!1}}}function to(t,e,n,r){var i=new function(){var e=!1,n=new un,r=null,i=new un(0,0,0,0);return{setMask:function(n){r===n||e||(t.colorMask(n,n,n,n),r=n)},setLocked:function(t){e=t},setClear:function(e,r,o,a,s){!0===s&&(e*=a,r*=a,o*=a),n.set(e,r,o,a),!1===i.equals(n)&&(t.clearColor(e,r,o,a),i.copy(n))},reset:function(){e=!1,r=null,i.set(-1,0,0,0)}}},o=new function(){var e=!1,n=null,r=null,i=null;return{setTest:function(t){t?Q(2929):K(2929)},setMask:function(r){n===r||e||(t.depthMask(r),n=r)},setFunc:function(e){if(r!==e){if(e)switch(e){case nt:t.depthFunc(512);break;case rt:t.depthFunc(519);break;case it:t.depthFunc(513);break;case ot:t.depthFunc(515);break;case at:t.depthFunc(514);break;case st:t.depthFunc(518);break;case ct:t.depthFunc(516);break;case ht:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);r=e}},setLocked:function(t){e=t},setClear:function(e){i!==e&&(t.clearDepth(e),i=e)},reset:function(){e=!1,n=null,r=null,i=null}}},a=new function(){var e=!1,n=null,r=null,i=null,o=null,a=null,s=null,c=null,h=null;return{setTest:function(t){t?Q(2960):K(2960)},setMask:function(r){n===r||e||(t.stencilMask(r),n=r)},setFunc:function(e,n,a){r===e&&i===n&&o===a||(t.stencilFunc(e,n,a),r=e,i=n,o=a)},setOp:function(e,n,r){a===e&&s===n&&c===r||(t.stencilOp(e,n,r),a=e,s=n,c=r)},setLocked:function(t){e=t},setClear:function(e){h!==e&&(t.clearStencil(e),h=e)},reset:function(){e=!1,n=null,r=null,i=null,o=null,a=null,s=null,c=null,h=null}}},s=t.getParameter(34921),c=new Uint8Array(s),h=new Uint8Array(s),u=new Uint8Array(s),l={},d=null,p=null,f=null,m=null,v=null,b=null,w=null,_=null,M=null,E=null,S=!1,T=null,C=null,P=null,R=null,O=null,I=t.getParameter(35661),H=!1,k=0,V=t.getParameter(7938);-1!==V.indexOf("WebGL")?(k=parseFloat(/^WebGL\ ([0-9])/.exec(V)[1]),H=k>=1):-1!==V.indexOf("OpenGL ES")&&(k=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(V)[1]),H=k>=2);var j=null,W={},q=new un,X=new un;function Y(e,n,r){var i=new Uint8Array(4),o=t.createTexture();t.bindTexture(e,o),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(var a=0;a<r;a++)t.texImage2D(n+a,0,6408,1,1,0,6408,5121,i);return o}var J={};function Z(n,i){(c[n]=1,0===h[n]&&(t.enableVertexAttribArray(n),h[n]=1),u[n]!==i)&&((r.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[r.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,i),u[n]=i)}function Q(e){!0!==l[e]&&(t.enable(e),l[e]=!0)}function K(e){!1!==l[e]&&(t.disable(e),l[e]=!1)}function $(e,r,i,o,a,s,c,h){if(e!==D){if(f||(Q(3042),f=!0),e===F)a=a||r,s=s||i,c=c||o,r===v&&a===_||(t.blendEquationSeparate(n.convert(r),n.convert(a)),v=r,_=a),i===b&&o===w&&s===M&&c===E||(t.blendFuncSeparate(n.convert(i),n.convert(o),n.convert(s),n.convert(c)),b=i,w=o,M=s,E=c),m=e,S=null;else if(e!==m||h!==S){if(v===G&&_===G||(t.blendEquation(32774),v=G,_=G),h)switch(e){case z:t.blendFuncSeparate(1,771,1,771);break;case N:t.blendFunc(1,1);break;case B:t.blendFuncSeparate(0,0,769,771);break;case U:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case z:t.blendFuncSeparate(770,771,1,771);break;case N:t.blendFunc(770,1);break;case B:t.blendFunc(0,769);break;case U:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}b=null,w=null,M=null,E=null,m=e,S=h}}else f&&(K(3042),f=!1)}function tt(e){T!==e&&(e?t.frontFace(2304):t.frontFace(2305),T=e)}function et(e){e!==g?(Q(2884),e!==C&&(e===y?t.cullFace(1029):e===x?t.cullFace(1028):t.cullFace(1032))):K(2884),C=e}function ut(e,n,r){e?(Q(32823),R===n&&O===r||(t.polygonOffset(n,r),R=n,O=r)):K(32823)}function lt(e){void 0===e&&(e=33984+I-1),j!==e&&(t.activeTexture(e),j=e)}return J[3553]=Y(3553,3553,1),J[34067]=Y(34067,34069,6),i.setClear(0,0,0,1),o.setClear(1),a.setClear(0),Q(2929),o.setFunc(ot),tt(!1),et(y),Q(2884),$(D),{buffers:{color:i,depth:o,stencil:a},initAttributes:function(){for(var t=0,e=c.length;t<e;t++)c[t]=0},enableAttribute:function(t){Z(t,0)},enableAttributeAndDivisor:Z,disableUnusedAttributes:function(){for(var e=0,n=h.length;e!==n;++e)h[e]!==c[e]&&(t.disableVertexAttribArray(e),h[e]=0)},enable:Q,disable:K,getCompressedTextureFormats:function(){if(null===d&&(d=[],e.get("WEBGL_compressed_texture_pvrtc")||e.get("WEBGL_compressed_texture_s3tc")||e.get("WEBGL_compressed_texture_etc1")||e.get("WEBGL_compressed_texture_astc")))for(var n=t.getParameter(34467),r=0;r<n.length;r++)d.push(n[r]);return d},useProgram:function(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:$,setMaterial:function(t,e){t.side===L?K(2884):Q(2884);var n=t.side===A;e&&(n=!n),tt(n),t.blending===z&&!1===t.transparent?$(D):$(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),o.setFunc(t.depthFunc),o.setTest(t.depthTest),o.setMask(t.depthWrite),i.setMask(t.colorWrite),ut(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:tt,setCullFace:et,setLineWidth:function(e){e!==P&&(H&&t.lineWidth(e),P=e)},setPolygonOffset:ut,setScissorTest:function(t){t?Q(3089):K(3089)},activeTexture:lt,bindTexture:function(e,n){null===j&&lt();var r=W[j];void 0===r&&(r={type:void 0,texture:void 0},W[j]=r),r.type===e&&r.texture===n||(t.bindTexture(e,n||J[e]),r.type=e,r.texture=n)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===q.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),q.copy(e))},viewport:function(e){!1===X.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),X.copy(e))},reset:function(){for(var e=0;e<h.length;e++)1===h[e]&&(t.disableVertexAttribArray(e),h[e]=0);l={},d=null,j=null,W={},p=null,m=null,T=null,C=null,i.reset(),o.reset(),a.reset()}}}function eo(t,e,n,r,i,o,a){var s,c={};function h(t,e){if(t.width>e||t.height>e){if("data"in t)return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big ("+t.width+"x"+t.height+").");var n=e/Math.max(t.width,t.height),r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return r.width=Math.floor(t.width*n),r.height=Math.floor(t.height*n),r.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,r.width,r.height),console.warn("THREE.WebGLRenderer: image is too big ("+t.width+"x"+t.height+"). Resized to "+r.width+"x"+r.height),r}return t}function u(t){return Je.isPowerOfTwo(t.width)&&Je.isPowerOfTwo(t.height)}function l(t,e){return t.generateMipmaps&&e&&t.minFilter!==Ct&&t.minFilter!==Ot}function d(e,n,i,o){t.generateMipmap(e),r.get(n).__maxMipLevel=Math.log(Math.max(i,o))*Math.LOG2E}function p(t,e){if(!i.isWebGL2)return t;if(6403===t){if(5126===e)return 33326;if(5131===e)return 33325;if(5121===e)return 33321}if(6407===t){if(5126===e)return 34837;if(5131===e)return 34843;if(5121===e)return 32849}if(6408===t){if(5126===e)return 34836;if(5131===e)return 34842;if(5121===e)return 32856}return t}function f(t){return t===Ct||t===Pt||t===Rt?9728:9729}function m(e){var n=e.target;n.removeEventListener("dispose",m),function(e){var n=r.get(e);if(e.image&&n.__image__webglTextureCube)t.deleteTexture(n.__image__webglTextureCube);else{if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture)}r.remove(e)}(n),n.isVideoTexture&&delete c[n.id],a.memory.textures--}function v(e){var n=e.target;n.removeEventListener("dispose",v),function(e){var n=r.get(e),i=r.get(e.texture);if(!e)return;void 0!==i.__webglTexture&&t.deleteTexture(i.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var o=0;o<6;o++)t.deleteFramebuffer(n.__webglFramebuffer[o]),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[o]);else t.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer);r.remove(e.texture),r.remove(e)}(n),a.memory.textures--}function g(t,e){var i=r.get(t);if(t.isVideoTexture&&function(t){var e=t.id,n=a.render.frame;c[e]!==n&&(c[e]=n,t.update())}(t),t.version>0&&i.__version!==t.version){var o=t.image;if(void 0===o)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==o.complete)return void x(i,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,i.__webglTexture)}function y(n,a,s){var c;if(s?(t.texParameteri(n,10242,o.convert(a.wrapS)),t.texParameteri(n,10243,o.convert(a.wrapT)),t.texParameteri(n,10240,o.convert(a.magFilter)),t.texParameteri(n,10241,o.convert(a.minFilter))):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),a.wrapS===At&&a.wrapT===At||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,f(a.magFilter)),t.texParameteri(n,10241,f(a.minFilter)),a.minFilter!==Ct&&a.minFilter!==Ot&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),c=e.get("EXT_texture_filter_anisotropic")){if(a.type===Ht&&null===e.get("OES_texture_float_linear"))return;if(a.type===kt&&null===(i.isWebGL2||e.get("OES_texture_half_float_linear")))return;(a.anisotropy>1||r.get(a).__currentAnisotropy)&&(t.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy())),r.get(a).__currentAnisotropy=a.anisotropy)}}function x(e,r,c){var f;f=r.isDataTexture3D?32879:3553,void 0===e.__webglInit&&(e.__webglInit=!0,r.addEventListener("dispose",m),e.__webglTexture=t.createTexture(),a.memory.textures++),n.activeTexture(33984+c),n.bindTexture(f,e.__webglTexture),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment);var v=h(r.image,i.maxTextureSize);(function(t){return!i.isWebGL2&&(t.wrapS!==At||t.wrapT!==At||t.minFilter!==Ct&&t.minFilter!==Ot)})(r)&&!1===u(v)&&(v=function(t){return t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof ImageBitmap?(void 0===s&&(s=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),s.width=Je.floorPowerOfTwo(t.width),s.height=Je.floorPowerOfTwo(t.height),s.getContext("2d").drawImage(t,0,0,s.width,s.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+t.width+"x"+t.height+"). Resized to "+s.width+"x"+s.height),s):t}(v));var g=u(v),x=o.convert(r.format),b=o.convert(r.type),w=p(x,b);y(f,r,g);var _,M=r.mipmaps;if(r.isDepthTexture){if(w=6402,r.type===Ht){if(!i.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");w=36012}else i.isWebGL2&&(w=33189);r.format===$t&&6402===w&&r.type!==Ut&&r.type!==Gt&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=Ut,b=o.convert(r.type)),r.format===te&&(w=34041,r.type!==qt&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=qt,b=o.convert(r.type))),n.texImage2D(3553,0,w,v.width,v.height,0,x,b,null)}else if(r.isDataTexture)if(M.length>0&&g){for(var E=0,S=M.length;E<S;E++)_=M[E],n.texImage2D(3553,E,w,_.width,_.height,0,x,b,_.data);r.generateMipmaps=!1,e.__maxMipLevel=M.length-1}else n.texImage2D(3553,0,w,v.width,v.height,0,x,b,v.data),e.__maxMipLevel=0;else if(r.isCompressedTexture){for(E=0,S=M.length;E<S;E++)_=M[E],r.format!==Jt&&r.format!==Yt?n.getCompressedTextureFormats().indexOf(x)>-1?n.compressedTexImage2D(3553,E,w,_.width,_.height,0,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,E,w,_.width,_.height,0,x,b,_.data);e.__maxMipLevel=M.length-1}else if(r.isDataTexture3D)n.texImage3D(32879,0,w,v.width,v.height,v.depth,0,x,b,v.data),e.__maxMipLevel=0;else if(M.length>0&&g){for(E=0,S=M.length;E<S;E++)_=M[E],n.texImage2D(3553,E,w,x,b,_);r.generateMipmaps=!1,e.__maxMipLevel=M.length-1}else n.texImage2D(3553,0,w,x,b,v),e.__maxMipLevel=0;l(r,g)&&d(3553,r,v.width,v.height),e.__version=r.version,r.onUpdate&&r.onUpdate(r)}function b(e,i,a,s){var c=o.convert(i.texture.format),h=o.convert(i.texture.type),u=p(c,h);n.texImage2D(s,0,u,i.width,i.height,0,c,h,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,a,s,r.get(i.texture).__webglTexture,0),t.bindFramebuffer(36160,null)}function w(e,n){t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer?(t.renderbufferStorage(36161,33189,n.width,n.height),t.framebufferRenderbuffer(36160,36096,36161,e)):n.depthBuffer&&n.stencilBuffer?(t.renderbufferStorage(36161,34041,n.width,n.height),t.framebufferRenderbuffer(36160,33306,36161,e)):t.renderbufferStorage(36161,32854,n.width,n.height),t.bindRenderbuffer(36161,null)}function _(e){var n=r.get(e),i=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,e),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),g(n.depthTexture,0);var i=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===$t)t.framebufferTexture2D(36160,36096,3553,i,0);else{if(n.depthTexture.format!==te)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,i,0)}}(n.__webglFramebuffer,e)}else if(i){n.__webglDepthbuffer=[];for(var o=0;o<6;o++)t.bindFramebuffer(36160,n.__webglFramebuffer[o]),n.__webglDepthbuffer[o]=t.createRenderbuffer(),w(n.__webglDepthbuffer[o],e)}else t.bindFramebuffer(36160,n.__webglFramebuffer),n.__webglDepthbuffer=t.createRenderbuffer(),w(n.__webglDepthbuffer,e);t.bindFramebuffer(36160,null)}this.setTexture2D=g,this.setTexture3D=function(t,e){var i=r.get(t);t.version>0&&i.__version!==t.version?x(i,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,i.__webglTexture))},this.setTextureCube=function(e,s){var c=r.get(e);if(6===e.image.length)if(e.version>0&&c.__version!==e.version){c.__image__webglTextureCube||(e.addEventListener("dispose",m),c.__image__webglTextureCube=t.createTexture(),a.memory.textures++),n.activeTexture(33984+s),n.bindTexture(34067,c.__image__webglTextureCube),t.pixelStorei(37440,e.flipY);for(var f=e&&e.isCompressedTexture,v=e.image[0]&&e.image[0].isDataTexture,g=[],x=0;x<6;x++)g[x]=f||v?v?e.image[x].image:e.image[x]:h(e.image[x],i.maxCubemapSize);var b=g[0],w=u(b),_=o.convert(e.format),M=o.convert(e.type),E=p(_,M);y(34067,e,w);for(x=0;x<6;x++)if(f)for(var S,T=g[x].mipmaps,A=0,L=T.length;A<L;A++)S=T[A],e.format!==Jt&&e.format!==Yt?n.getCompressedTextureFormats().indexOf(_)>-1?n.compressedTexImage2D(34069+x,A,E,S.width,S.height,0,S.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+x,A,E,S.width,S.height,0,_,M,S.data);else v?n.texImage2D(34069+x,0,E,g[x].width,g[x].height,0,_,M,g[x].data):n.texImage2D(34069+x,0,E,_,M,g[x]);c.__maxMipLevel=f?T.length-1:0,l(e,w)&&d(34067,e,b.width,b.height),c.__version=e.version,e.onUpdate&&e.onUpdate(e)}else n.activeTexture(33984+s),n.bindTexture(34067,c.__image__webglTextureCube)},this.setTextureCubeDynamic=function(t,e){n.activeTexture(33984+e),n.bindTexture(34067,r.get(t).__webglTexture)},this.setupRenderTarget=function(e){var i=r.get(e),o=r.get(e.texture);e.addEventListener("dispose",v),o.__webglTexture=t.createTexture(),a.memory.textures++;var s=!0===e.isWebGLRenderTargetCube,c=u(e);if(s){i.__webglFramebuffer=[];for(var h=0;h<6;h++)i.__webglFramebuffer[h]=t.createFramebuffer()}else i.__webglFramebuffer=t.createFramebuffer();if(s){n.bindTexture(34067,o.__webglTexture),y(34067,e.texture,c);for(h=0;h<6;h++)b(i.__webglFramebuffer[h],e,36064,34069+h);l(e.texture,c)&&d(34067,e.texture,e.width,e.height),n.bindTexture(34067,null)}else n.bindTexture(3553,o.__webglTexture),y(3553,e.texture,c),b(i.__webglFramebuffer,e,36064,3553),l(e.texture,c)&&d(3553,e.texture,e.width,e.height),n.bindTexture(3553,null);e.depthBuffer&&_(e)},this.updateRenderTargetMipmap=function(t){var e=t.texture;if(l(e,u(t))){var i=t.isWebGLRenderTargetCube?34067:3553,o=r.get(e).__webglTexture;n.bindTexture(i,o),d(i,e,t.width,t.height),n.bindTexture(i,null)}}}function no(t,e,n){return{convert:function(t){var r;if(t===Tt)return 10497;if(t===At)return 33071;if(t===Lt)return 33648;if(t===Ct)return 9728;if(t===Pt)return 9984;if(t===Rt)return 9986;if(t===Ot)return 9729;if(t===It)return 9985;if(t===Dt)return 9987;if(t===zt)return 5121;if(t===Vt)return 32819;if(t===jt)return 32820;if(t===Wt)return 33635;if(t===Nt)return 5120;if(t===Bt)return 5122;if(t===Ut)return 5123;if(t===Ft)return 5124;if(t===Gt)return 5125;if(t===Ht)return 5126;if(t===kt){if(n.isWebGL2)return 5131;if(null!==(r=e.get("OES_texture_half_float")))return r.HALF_FLOAT_OES}if(t===Xt)return 6406;if(t===Yt)return 6407;if(t===Jt)return 6408;if(t===Zt)return 6409;if(t===Qt)return 6410;if(t===$t)return 6402;if(t===te)return 34041;if(t===ee)return 6403;if(t===G)return 32774;if(t===H)return 32778;if(t===k)return 32779;if(t===W)return 0;if(t===q)return 1;if(t===X)return 768;if(t===Y)return 769;if(t===J)return 770;if(t===Z)return 771;if(t===Q)return 772;if(t===K)return 773;if(t===$)return 774;if(t===tt)return 775;if(t===et)return 776;if((t===ne||t===re||t===ie||t===oe)&&null!==(r=e.get("WEBGL_compressed_texture_s3tc"))){if(t===ne)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===re)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===ie)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===oe)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===ae||t===se||t===ce||t===he)&&null!==(r=e.get("WEBGL_compressed_texture_pvrtc"))){if(t===ae)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===se)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ce)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===he)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===ue&&null!==(r=e.get("WEBGL_compressed_texture_etc1")))return r.COMPRESSED_RGB_ETC1_WEBGL;if((t===le||t===de||t===pe||t===fe||t===me||t===ve||t===ge||t===ye||t===xe||t===be||t===we||t===_e||t===Me||t===Ee)&&null!==(r=e.get("WEBGL_compressed_texture_astc")))return t;if(t===V||t===j){if(n.isWebGL2){if(t===V)return 32775;if(t===j)return 32776}if(null!==(r=e.get("EXT_blend_minmax"))){if(t===V)return r.MIN_EXT;if(t===j)return r.MAX_EXT}}if(t===qt){if(n.isWebGL2)return 34042;if(null!==(r=e.get("WEBGL_depth_texture")))return r.UNSIGNED_INT_24_8_WEBGL}return 0}}}function ro(){Un.call(this),this.type="Group"}function io(){Un.call(this),this.type="Camera",this.matrixWorldInverse=new Qe,this.projectionMatrix=new Qe,this.projectionMatrixInverse=new Qe}function oo(t,e,n,r){io.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function ao(t){oo.call(this),this.cameras=t||[]}Qi.prototype=Object.create(br.prototype),Qi.prototype.constructor=Qi,Qi.prototype.isMeshDepthMaterial=!0,Qi.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},Ki.prototype=Object.create(br.prototype),Ki.prototype.constructor=Ki,Ki.prototype.isMeshDistanceMaterial=!0,Ki.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this},ro.prototype=Object.assign(Object.create(Un.prototype),{constructor:ro,isGroup:!0}),io.prototype=Object.assign(Object.create(Un.prototype),{constructor:io,isCamera:!0,copy:function(t,e){return Un.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new $e),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){Un.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),oo.prototype=Object.assign(Object.create(io.prototype),{constructor:oo,isPerspectiveCamera:!0,copy:function(t,e){return io.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*Je.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*Je.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*Je.RAD2DEG*Math.atan(Math.tan(.5*Je.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,n,r,i,o){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*Je.DEG2RAD*this.fov)/this.zoom,n=2*e,r=this.aspect*n,i=-.5*r,o=this.view;if(null!==this.view&&this.view.enabled){var a=o.fullWidth,s=o.fullHeight;i+=o.offsetX*r/a,e-=o.offsetY*n/s,r*=o.width/a,n*=o.height/s}var c=this.filmOffset;0!==c&&(i+=t*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+r,e,e-n,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Un.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}),ao.prototype=Object.assign(Object.create(oo.prototype),{constructor:ao,isArrayCamera:!0});var so,co,ho,uo,lo,po,fo=new $e,mo=new $e;function vo(t,e,n){fo.setFromMatrixPosition(e.matrixWorld),mo.setFromMatrixPosition(n.matrixWorld);var r=fo.distanceTo(mo),i=e.projectionMatrix.elements,o=n.projectionMatrix.elements,a=i[14]/(i[10]-1),s=i[14]/(i[10]+1),c=(i[9]+1)/i[5],h=(i[9]-1)/i[5],u=(i[8]-1)/i[0],l=(o[8]+1)/o[0],d=a*u,p=a*l,f=r/(-u+l),m=f*-u;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var v=a+f,g=s+f,y=d-m,x=p+(r-m),b=c*s/g*v,w=h*s/g*v;t.projectionMatrix.makePerspective(y,x,b,w,v,g)}function go(t){var e=this,n=null,r=null,i=null,o=[],a=new Qe,s=new Qe,c=1,h="stage";"undefined"!=typeof window&&"VRFrameData"in window&&(r=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",x,!1));var u=new Qe,l=new Ke,d=new $e,p=new oo;p.bounds=new un(0,0,.5,1),p.layers.enable(1);var f=new oo;f.bounds=new un(.5,0,.5,1),f.layers.enable(2);var m,v,g=new ao([p,f]);function y(){return null!==n&&!0===n.isPresenting}function x(){if(y()){var r=n.getEyeParameters("left"),i=r.renderWidth*c,o=r.renderHeight*c;v=t.getPixelRatio(),m=t.getSize(),t.setDrawingBufferSize(2*i,o,1),_.start()}else e.enabled&&t.setDrawingBufferSize(m.width,m.height,v),_.stop()}g.layers.enable(1),g.layers.enable(2);var b=[];function w(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),n=0,r=0,i=e.length;n<i;n++){var o=e[n];if(o&&("Daydream Controller"===o.id||"Gear VR Controller"===o.id||"Oculus Go Controller"===o.id||"OpenVR Gamepad"===o.id||o.id.startsWith("Oculus Touch")||o.id.startsWith("Spatial Controller"))){if(r===t)return o;r++}}}this.enabled=!1,this.getController=function(t){var e=o[t];return void 0===e&&((e=new ro).matrixAutoUpdate=!1,e.visible=!1,o[t]=e),e},this.getDevice=function(){return n},this.setDevice=function(t){void 0!==t&&(n=t),_.setContext(t)},this.setFramebufferScaleFactor=function(t){c=t},this.setFrameOfReferenceType=function(t){h=t},this.setPoseTarget=function(t){void 0!==t&&(i=t)},this.getCamera=function(t){var e="stage"===h?1.6:0;if(null===n)return t.position.set(0,e,0),t;if(n.depthNear=t.near,n.depthFar=t.far,n.getFrameData(r),"stage"===h){var c=n.stageParameters;c?a.fromArray(c.sittingToStandingTransform):a.makeTranslation(0,e,0)}var m=r.pose,v=null!==i?i:t;if(v.matrix.copy(a),v.matrix.decompose(v.position,v.quaternion,v.scale),null!==m.orientation&&(l.fromArray(m.orientation),v.quaternion.multiply(l)),null!==m.position&&(l.setFromRotationMatrix(a),d.fromArray(m.position),d.applyQuaternion(l),v.position.add(d)),v.updateMatrixWorld(),!1===n.isPresenting)return t;p.near=t.near,f.near=t.near,p.far=t.far,f.far=t.far,p.matrixWorldInverse.fromArray(r.leftViewMatrix),f.matrixWorldInverse.fromArray(r.rightViewMatrix),s.getInverse(a),"stage"===h&&(p.matrixWorldInverse.multiply(s),f.matrixWorldInverse.multiply(s));var y=v.parent;null!==y&&(u.getInverse(y.matrixWorld),p.matrixWorldInverse.multiply(u),f.matrixWorldInverse.multiply(u)),p.matrixWorld.getInverse(p.matrixWorldInverse),f.matrixWorld.getInverse(f.matrixWorldInverse),p.projectionMatrix.fromArray(r.leftProjectionMatrix),f.projectionMatrix.fromArray(r.rightProjectionMatrix),vo(g,p,f);var x=n.getLayers();if(x.length){var _=x[0];null!==_.leftBounds&&4===_.leftBounds.length&&p.bounds.fromArray(_.leftBounds),null!==_.rightBounds&&4===_.rightBounds.length&&f.bounds.fromArray(_.rightBounds)}return function(){for(var t=0;t<o.length;t++){var e=o[t],n=w(t);if(void 0!==n&&void 0!==n.pose){if(null===n.pose)return;var r=n.pose;!1===r.hasPosition&&e.position.set(.2,-.6,-.05),null!==r.position&&e.position.fromArray(r.position),null!==r.orientation&&e.quaternion.fromArray(r.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(a),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var i="Daydream Controller"===n.id?0:1;b[t]!==n.buttons[i].pressed&&(b[t]=n.buttons[i].pressed,!0===b[t]?e.dispatchEvent({type:"selectstart"}):(e.dispatchEvent({type:"selectend"}),e.dispatchEvent({type:"select"})))}else e.visible=!1}}(),g},this.getStandingMatrix=function(){return a},this.isPresenting=y;var _=new Ln;this.setAnimationLoop=function(t){_.setAnimationLoop(t)},this.submitFrame=function(){y()&&n.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",x)}}function yo(t){var e=t.context,n=null,r=null,i=1,o=null,a="stage",s=null,c=[],h=[];function u(){return null!==r&&null!==o}var l=new oo;l.layers.enable(1),l.viewport=new un;var d=new oo;d.layers.enable(2),d.viewport=new un;var p=new ao([l,d]);function f(t){var e=c[h.indexOf(t.inputSource)];e&&e.dispatchEvent({type:t.type})}function m(){t.setFramebuffer(null),y.stop()}function v(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}p.layers.enable(1),p.layers.enable(2),this.enabled=!1,this.getController=function(t){var e=c[t];return void 0===e&&((e=new ro).matrixAutoUpdate=!1,e.visible=!1,c[t]=e),e},this.getDevice=function(){return n},this.setDevice=function(t){void 0!==t&&(n=t),t instanceof XRDevice&&e.setCompatibleXRDevice(t)},this.setFramebufferScaleFactor=function(t){i=t},this.setFrameOfReferenceType=function(t){a=t},this.setSession=function(n){null!==(r=n)&&(r.addEventListener("select",f),r.addEventListener("selectstart",f),r.addEventListener("selectend",f),r.addEventListener("end",m),r.baseLayer=new XRWebGLLayer(r,e,{framebufferScaleFactor:i}),r.requestFrameOfReference(a).then((function(e){o=e,t.setFramebuffer(r.baseLayer.framebuffer),y.setContext(r),y.start()})),h=r.getInputSources(),r.addEventListener("inputsourceschange",(function(){h=r.getInputSources(),console.log(h);for(var t=0;t<c.length;t++){c[t].userData.inputSource=h[t]}})))},this.getCamera=function(t){if(u()){var e=t.parent,n=p.cameras;v(p,e);for(var r=0;r<n.length;r++)v(n[r],e);t.matrixWorld.copy(p.matrixWorld);for(var i=t.children,o=(r=0,i.length);r<o;r++)i[r].updateMatrixWorld(!0);return vo(p,l,d),p}return t},this.isPresenting=u;var g=null;var y=new Ln;y.setAnimationLoop((function(t,e){if(null!==(s=e.getDevicePose(o)))for(var n=r.baseLayer,i=e.views,a=0;a<i.length;a++){var u=i[a],l=n.getViewport(u),d=s.getViewMatrix(u),f=p.cameras[a];f.matrix.fromArray(d).getInverse(f.matrix),f.projectionMatrix.fromArray(u.projectionMatrix),f.viewport.set(l.x,l.y,l.width,l.height),0===a&&p.matrix.copy(f.matrix)}for(a=0;a<c.length;a++){var m=c[a],v=h[a];if(v){var y=e.getInputPose(v,o);if(null!==y){"targetRay"in y?m.matrix.elements=y.targetRay.transformMatrix:"pointerMatrix"in y&&(m.matrix.elements=y.pointerMatrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.visible=!0;continue}}m.visible=!1}g&&g(t)})),this.setAnimationLoop=function(t){g=t},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new THREE.Matrix4},this.submitFrame=function(){}}function xo(t){console.log("THREE.WebGLRenderer",m);var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,i=void 0===t.depth||t.depth,o=void 0===t.stencil||t.stencil,a=void 0!==t.antialias&&t.antialias,s=void 0===t.premultipliedAlpha||t.premultipliedAlpha,c=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,h=void 0!==t.powerPreference?t.powerPreference:"default",u=null,l=null;this.domElement=e,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=ft,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var d,p,f,v,g,y,x,b,w,_,M,E,S,T,L,C,P,R,O=this,I=!1,D=null,z=null,N=null,B=-1,U={geometry:null,program:null,wireframe:!1},F=null,G=null,H=new un,k=new un,V=null,j=0,W=e.width,q=e.height,X=1,Y=new un(0,0,W,q),J=new un(0,0,W,q),Z=!1,Q=new gn,K=new Cr,$=!1,tt=!1,et=new Qe,nt=new $e;function rt(){return null===z?X:1}try{var it={alpha:r,depth:i,stencil:o,antialias:a,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:h};if(e.addEventListener("webglcontextlost",ct,!1),e.addEventListener("webglcontextrestored",ht,!1),null===(d=n||e.getContext("webgl",it)||e.getContext("experimental-webgl",it)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===d.getShaderPrecisionFormat&&(d.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){console.error("THREE.WebGLRenderer: "+t.message)}function ot(){p=new Pr(d),(f=new Lr(d,p,t)).isWebGL2||(p.get("WEBGL_depth_texture"),p.get("OES_texture_float"),p.get("OES_texture_half_float"),p.get("OES_texture_half_float_linear"),p.get("OES_standard_derivatives"),p.get("OES_element_index_uint"),p.get("ANGLE_instanced_arrays")),p.get("OES_texture_float_linear"),R=new no(d,p,f),(v=new to(d,p,R,f)).scissor(k.copy(J).multiplyScalar(X)),v.viewport(H.copy(Y).multiplyScalar(X)),g=new Ir(d),y=new Hi,x=new eo(d,p,v,y,f,R,g),b=new Cn(d),w=new Rr(d,b,g),_=new Nr(w,g),L=new zr(d),M=new Gi(O,p,f),E=new Wi,S=new Zi,T=new Tr(O,v,_,s),C=new Ar(d,p,g,f),P=new Or(d,p,g,f),g.programs=M.programs,O.context=d,O.capabilities=f,O.extensions=p,O.properties=y,O.renderLists=E,O.state=v,O.info=g}ot();var at=null;"undefined"!=typeof navigator&&(at="xr"in navigator?new yo(O):new go(O)),this.vr=at;var st=new $i(O,_,f.maxTextureSize);function ct(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),I=!0}function ht(){console.log("THREE.WebGLRenderer: Context Restored."),I=!1,ot()}function ut(t){var e=t.target;e.removeEventListener("dispose",ut),function(t){lt(t),y.remove(t)}(e)}function lt(t){var e=y.get(t).program;t.program=void 0,void 0!==e&&M.releaseProgram(e)}this.shadowMap=st,this.getContext=function(){return d},this.getContextAttributes=function(){return d.getContextAttributes()},this.forceContextLoss=function(){var t=p.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=p.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return X},this.setPixelRatio=function(t){void 0!==t&&(X=t,this.setSize(W,q,!1))},this.getSize=function(){return{width:W,height:q}},this.setSize=function(t,n,r){at.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(W=t,q=n,e.width=t*X,e.height=n*X,!1!==r&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(){return{width:W*X,height:q*X}},this.setDrawingBufferSize=function(t,n,r){W=t,q=n,X=r,e.width=t*r,e.height=n*r,this.setViewport(0,0,t,n)},this.getCurrentViewport=function(){return H},this.setViewport=function(t,e,n,r){Y.set(t,q-e-r,n,r),v.viewport(H.copy(Y).multiplyScalar(X))},this.setScissor=function(t,e,n,r){J.set(t,q-e-r,n,r),v.scissor(k.copy(J).multiplyScalar(X))},this.setScissorTest=function(t){v.setScissorTest(Z=t)},this.getClearColor=function(){return T.getClearColor()},this.setClearColor=function(){T.setClearColor.apply(T,arguments)},this.getClearAlpha=function(){return T.getClearAlpha()},this.setClearAlpha=function(){T.setClearAlpha.apply(T,arguments)},this.clear=function(t,e,n){var r=0;(void 0===t||t)&&(r|=16384),(void 0===e||e)&&(r|=256),(void 0===n||n)&&(r|=1024),d.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",ct,!1),e.removeEventListener("webglcontextrestored",ht,!1),E.dispose(),S.dispose(),y.dispose(),_.dispose(),at.dispose(),mt.stop()},this.renderBufferImmediate=function(t,e){v.initAttributes();var n=y.get(t);t.hasPositions&&!n.position&&(n.position=d.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=d.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=d.createBuffer()),t.hasColors&&!n.color&&(n.color=d.createBuffer());var r=e.getAttributes();t.hasPositions&&(d.bindBuffer(34962,n.position),d.bufferData(34962,t.positionArray,35048),v.enableAttribute(r.position),d.vertexAttribPointer(r.position,3,5126,!1,0,0)),t.hasNormals&&(d.bindBuffer(34962,n.normal),d.bufferData(34962,t.normalArray,35048),v.enableAttribute(r.normal),d.vertexAttribPointer(r.normal,3,5126,!1,0,0)),t.hasUvs&&(d.bindBuffer(34962,n.uv),d.bufferData(34962,t.uvArray,35048),v.enableAttribute(r.uv),d.vertexAttribPointer(r.uv,2,5126,!1,0,0)),t.hasColors&&(d.bindBuffer(34962,n.color),d.bufferData(34962,t.colorArray,35048),v.enableAttribute(r.color),d.vertexAttribPointer(r.color,3,5126,!1,0,0)),v.disableUnusedAttributes(),d.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,r,i,o){var a=i.isMesh&&i.normalMatrix.determinant()<0;v.setMaterial(r,a);var s=xt(t,e,r,i),c=!1;U.geometry===n.id&&U.program===s.id&&U.wireframe===(!0===r.wireframe)||(U.geometry=n.id,U.program=s.id,U.wireframe=!0===r.wireframe,c=!0),i.morphTargetInfluences&&(L.update(i,n,r,s),c=!0);var h,u=n.index,l=n.attributes.position,m=1;!0===r.wireframe&&(u=w.getWireframeAttribute(n),m=2);var g=C;null!==u&&(h=b.get(u),(g=P).setIndex(h)),c&&(!function(t,e,n){if(n&&n.isInstancedBufferGeometry&!f.isWebGL2&&null===p.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");v.initAttributes();var r=n.attributes,i=e.getAttributes(),o=t.defaultAttributeValues;for(var a in i){var s=i[a];if(s>=0){var c=r[a];if(void 0!==c){var h=c.normalized,u=c.itemSize,l=b.get(c);if(void 0===l)continue;var m=l.buffer,g=l.type,y=l.bytesPerElement;if(c.isInterleavedBufferAttribute){var x=c.data,w=x.stride,_=c.offset;x&&x.isInstancedInterleavedBuffer?(v.enableAttributeAndDivisor(s,x.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=x.meshPerAttribute*x.count)):v.enableAttribute(s),d.bindBuffer(34962,m),d.vertexAttribPointer(s,u,g,h,w*y,_*y)}else c.isInstancedBufferAttribute?(v.enableAttributeAndDivisor(s,c.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=c.meshPerAttribute*c.count)):v.enableAttribute(s),d.bindBuffer(34962,m),d.vertexAttribPointer(s,u,g,h,0,0)}else if(void 0!==o){var M=o[a];if(void 0!==M)switch(M.length){case 2:d.vertexAttrib2fv(s,M);break;case 3:d.vertexAttrib3fv(s,M);break;case 4:d.vertexAttrib4fv(s,M);break;default:d.vertexAttrib1fv(s,M)}}}}v.disableUnusedAttributes()}(r,s,n),null!==u&&d.bindBuffer(34963,h.buffer));var y=1/0;null!==u?y=u.count:void 0!==l&&(y=l.count);var x=n.drawRange.start*m,_=n.drawRange.count*m,M=null!==o?o.start*m:0,E=null!==o?o.count*m:1/0,S=Math.max(x,M),T=Math.min(y,x+_,M+E)-1,A=Math.max(0,T-S+1);if(0!==A){if(i.isMesh)if(!0===r.wireframe)v.setLineWidth(r.wireframeLinewidth*rt()),g.setMode(1);else switch(i.drawMode){case De:g.setMode(4);break;case ze:g.setMode(5);break;case Ne:g.setMode(6)}else if(i.isLine){var R=r.linewidth;void 0===R&&(R=1),v.setLineWidth(R*rt()),i.isLineSegments?g.setMode(1):i.isLineLoop?g.setMode(2):g.setMode(3)}else i.isPoints?g.setMode(0):i.isSprite&&g.setMode(4);n&&n.isInstancedBufferGeometry?n.maxInstancedCount>0&&g.renderInstances(n,S,A):g.render(S,A)}},this.compile=function(t,e){(l=S.get(t,e)).init(),t.traverse((function(t){t.isLight&&(l.pushLight(t),t.castShadow&&l.pushShadow(t))})),l.setupLights(e),t.traverse((function(e){if(e.material)if(Array.isArray(e.material))for(var n=0;n<e.material.length;n++)yt(e.material[n],t.fog,e);else yt(e.material,t.fog,e)}))};var dt=null;var pt,mt=new Ln;function vt(t,e,n,r){for(var i=0,o=t.length;i<o;i++){var a=t[i],s=a.object,c=a.geometry,h=void 0===r?a.material:r,u=a.group;if(n.isArrayCamera){G=n;for(var d=n.cameras,p=0,f=d.length;p<f;p++){var m=d[p];if(s.layers.test(m.layers)){if("viewport"in m)v.viewport(H.copy(m.viewport));else{var g=m.bounds,y=g.x*W,x=g.y*q,b=g.z*W,w=g.w*q;v.viewport(H.set(y,x,b,w).multiplyScalar(X))}l.setupLights(m),gt(s,e,m,c,h,u)}}}else G=null,gt(s,e,n,c,h,u)}}function gt(t,e,n,r,i,o){if(t.onBeforeRender(O,e,n,r,i,o),l=S.get(e,G||n),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){v.setMaterial(i);var a=xt(n,e.fog,i,t);U.geometry=null,U.program=null,U.wireframe=!1,function(t,e){t.render((function(t){O.renderBufferImmediate(t,e)}))}(t,a)}else O.renderBufferDirect(n,e.fog,r,i,t,o);t.onAfterRender(O,e,n,r,i,o),l=S.get(e,G||n)}function yt(t,e,n){var r=y.get(t),i=l.state.lights,o=l.state.shadowsArray,a=r.lightsHash,s=i.state.hash,c=M.getParameters(t,i.state,o,e,K.numPlanes,K.numIntersection,n),h=M.getProgramCode(t,c),u=r.program,d=!0;if(void 0===u)t.addEventListener("dispose",ut);else if(u.code!==h)lt(t);else if(a.stateID!==s.stateID||a.directionalLength!==s.directionalLength||a.pointLength!==s.pointLength||a.spotLength!==s.spotLength||a.rectAreaLength!==s.rectAreaLength||a.hemiLength!==s.hemiLength||a.shadowsLength!==s.shadowsLength)a.stateID=s.stateID,a.directionalLength=s.directionalLength,a.pointLength=s.pointLength,a.spotLength=s.spotLength,a.rectAreaLength=s.rectAreaLength,a.hemiLength=s.hemiLength,a.shadowsLength=s.shadowsLength,d=!1;else{if(void 0!==c.shaderID)return;d=!1}if(d){if(c.shaderID){var p=An[c.shaderID];r.shader={name:t.type,uniforms:_n.clone(p.uniforms),vertexShader:p.vertexShader,fragmentShader:p.fragmentShader}}else r.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(r.shader,O),h=M.getProgramCode(t,c),u=M.acquireProgram(t,r.shader,c,h),r.program=u,t.program=u}var f=u.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var m=0;m<O.maxMorphTargets;m++)f["morphTarget"+m]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(m=0;m<O.maxMorphNormals;m++)f["morphNormal"+m]>=0&&t.numSupportedMorphNormals++}var v=r.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(r.numClippingPlanes=K.numPlanes,r.numIntersection=K.numIntersection,v.clippingPlanes=K.uniform),r.fog=e,void 0===a&&(r.lightsHash=a={}),a.stateID=s.stateID,a.directionalLength=s.directionalLength,a.pointLength=s.pointLength,a.spotLength=s.spotLength,a.rectAreaLength=s.rectAreaLength,a.hemiLength=s.hemiLength,a.shadowsLength=s.shadowsLength,t.lights&&(v.ambientLightColor.value=i.state.ambient,v.directionalLights.value=i.state.directional,v.spotLights.value=i.state.spot,v.rectAreaLights.value=i.state.rectArea,v.pointLights.value=i.state.point,v.hemisphereLights.value=i.state.hemi,v.directionalShadowMap.value=i.state.directionalShadowMap,v.directionalShadowMatrix.value=i.state.directionalShadowMatrix,v.spotShadowMap.value=i.state.spotShadowMap,v.spotShadowMatrix.value=i.state.spotShadowMatrix,v.pointShadowMap.value=i.state.pointShadowMap,v.pointShadowMatrix.value=i.state.pointShadowMatrix);var g=r.program.getUniforms(),x=Li.seqWithValue(g.seq,v);r.uniformsList=x}function xt(t,e,n,r){j=0;var i=y.get(n),o=l.state.lights,a=i.lightsHash,s=o.state.hash;if($&&(tt||t!==F)){var c=t===F&&n.id===B;K.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,t,i,c)}!1===n.needsUpdate&&(void 0===i.program||n.fog&&i.fog!==e?n.needsUpdate=!0:(!n.lights||a.stateID===s.stateID&&a.directionalLength===s.directionalLength&&a.pointLength===s.pointLength&&a.spotLength===s.spotLength&&a.rectAreaLength===s.rectAreaLength&&a.hemiLength===s.hemiLength&&a.shadowsLength===s.shadowsLength)&&(void 0===i.numClippingPlanes||i.numClippingPlanes===K.numPlanes&&i.numIntersection===K.numIntersection)||(n.needsUpdate=!0)),n.needsUpdate&&(yt(n,e,r),n.needsUpdate=!1);var h,u,p=!1,m=!1,g=!1,x=i.program,b=x.getUniforms(),w=i.shader.uniforms;if(v.useProgram(x.program)&&(p=!0,m=!0,g=!0),n.id!==B&&(B=n.id,m=!0),p||F!==t){if(b.setValue(d,"projectionMatrix",t.projectionMatrix),f.logarithmicDepthBuffer&&b.setValue(d,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),F!==t&&(F=t,m=!0,g=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var _=b.map.cameraPosition;void 0!==_&&_.setValue(d,nt.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&b.setValue(d,"viewMatrix",t.matrixWorldInverse)}if(n.skinning){b.setOptional(d,r,"bindMatrix"),b.setOptional(d,r,"bindMatrixInverse");var M=r.skeleton;if(M){var E=M.bones;if(f.floatVertexTextures){if(void 0===M.boneTexture){var S=Math.sqrt(4*E.length);S=Je.ceilPowerOfTwo(S),S=Math.max(S,4);var T=new Float32Array(S*S*4);T.set(M.boneMatrices);var L=new pn(T,S,S,Jt,Ht);L.needsUpdate=!0,M.boneMatrices=T,M.boneTexture=L,M.boneTextureSize=S}b.setValue(d,"boneTexture",M.boneTexture),b.setValue(d,"boneTextureSize",M.boneTextureSize)}else b.setOptional(d,M,"boneMatrices")}}return m&&(b.setValue(d,"toneMappingExposure",O.toneMappingExposure),b.setValue(d,"toneMappingWhitePoint",O.toneMappingWhitePoint),n.lights&&(u=g,(h=w).ambientLightColor.needsUpdate=u,h.directionalLights.needsUpdate=u,h.pointLights.needsUpdate=u,h.spotLights.needsUpdate=u,h.rectAreaLights.needsUpdate=u,h.hemisphereLights.needsUpdate=u),e&&n.fog&&function(t,e){t.fogColor.value=e.color,e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(w,e),n.isMeshBasicMaterial?bt(w,n):n.isMeshLambertMaterial?(bt(w,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(w,n)):n.isMeshPhongMaterial?(bt(w,n),n.isMeshToonMaterial?function(t,e){wt(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(w,n):wt(w,n)):n.isMeshStandardMaterial?(bt(w,n),n.isMeshPhysicalMaterial?function(t,e){_t(t,e),t.reflectivity.value=e.reflectivity,t.clearCoat.value=e.clearCoat,t.clearCoatRoughness.value=e.clearCoatRoughness}(w,n):_t(w,n)):n.isMeshMatcapMaterial?(bt(w,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,n)):n.isMeshDepthMaterial?(bt(w,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,n)):n.isMeshDistanceMaterial?(bt(w,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(w,n)):n.isMeshNormalMaterial?(bt(w,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(w,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity}(w,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(w,n)):n.isPointsMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.size.value=e.size*X,t.scale.value=.5*q,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(w,n):n.isSpriteMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.rotation.value=e.rotation,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(w,n):n.isShadowMaterial&&(w.color.value=n.color,w.opacity.value=n.opacity),void 0!==w.ltc_1&&(w.ltc_1.value=Tn.LTC_1),void 0!==w.ltc_2&&(w.ltc_2.value=Tn.LTC_2),Li.upload(d,i.uniformsList,w,O)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Li.upload(d,i.uniformsList,w,O),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&b.setValue(d,"center",r.center),b.setValue(d,"modelViewMatrix",r.modelViewMatrix),b.setValue(d,"normalMatrix",r.normalMatrix),b.setValue(d,"modelMatrix",r.matrixWorld),x}function bt(t,e){var n;t.opacity.value=e.opacity,e.color&&(t.diffuse.value=e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap&&e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=y.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?n=e.map:e.specularMap?n=e.specularMap:e.displacementMap?n=e.displacementMap:e.normalMap?n=e.normalMap:e.bumpMap?n=e.bumpMap:e.roughnessMap?n=e.roughnessMap:e.metalnessMap?n=e.metalnessMap:e.alphaMap?n=e.alphaMap:e.emissiveMap&&(n=e.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}function wt(t,e){t.specular.value=e.specular,t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function _t(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===A&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===A&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}mt.setAnimationLoop((function(t){at.isPresenting()||dt&&dt(t)})),"undefined"!=typeof window&&mt.setContext(window),this.setAnimationLoop=function(t){dt=t,at.setAnimationLoop(t),mt.start()},this.render=function(t,e,n,r){if(e&&e.isCamera){if(!I){U.geometry=null,U.program=null,U.wireframe=!1,B=-1,F=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),at.enabled&&(e=at.getCamera(e)),(l=S.get(t,e)).init(),t.onBeforeRender(O,t,e,n),et.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),Q.setFromMatrix(et),tt=this.localClippingEnabled,$=K.init(this.clippingPlanes,tt,e),(u=E.get(t,e)).init(),function t(e,n,r){if(!1===e.visible)return;if(e.layers.test(n.layers))if(e.isLight)l.pushLight(e),e.castShadow&&l.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||Q.intersectsSprite(e)){r&&nt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et);var i=_.update(e),o=e.material;u.push(e,i,o,nt.z,null)}}else if(e.isImmediateRenderObject)r&&nt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et),u.push(e,null,e.material,nt.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||Q.intersectsObject(e))){r&&nt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(et);i=_.update(e),o=e.material;if(Array.isArray(o))for(var a=i.groups,s=0,c=a.length;s<c;s++){var h=a[s],d=o[h.materialIndex];d&&d.visible&&u.push(e,i,d,nt.z,h)}else o.visible&&u.push(e,i,o,nt.z,null)}var p=e.children;for(s=0,c=p.length;s<c;s++)t(p[s],n,r)}(t,e,O.sortObjects),!0===O.sortObjects&&u.sort(),$&&K.beginShadows();var i=l.state.shadowsArray;st.render(i,t,e),l.setupLights(e),$&&K.endShadows(),this.info.autoReset&&this.info.reset(),void 0===n&&(n=null),this.setRenderTarget(n),T.render(u,t,e,r);var o=u.opaque,a=u.transparent;if(t.overrideMaterial){var s=t.overrideMaterial;o.length&&vt(o,t,e,s),a.length&&vt(a,t,e,s)}else o.length&&vt(o,t,e),a.length&&vt(a,t,e);n&&x.updateRenderTargetMipmap(n),v.buffers.depth.setTest(!0),v.buffers.depth.setMask(!0),v.buffers.color.setMask(!0),v.setPolygonOffset(!1),t.onAfterRender(O,t,e),at.enabled&&at.submitFrame(),u=null,l=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.allocTextureUnit=function(){var t=j;return t>=f.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+t+" texture units while this GPU supports only "+f.maxTextures),j+=1,t},this.setTexture2D=(pt=!1,function(t,e){t&&t.isWebGLRenderTarget&&(pt||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),pt=!0),t=t.texture),x.setTexture2D(t,e)}),this.setTexture3D=function(t,e){x.setTexture3D(t,e)},this.setTexture=function(){var t=!1;return function(e,n){t||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),t=!0),x.setTexture2D(e,n)}}(),this.setTextureCube=function(){var t=!1;return function(e,n){e&&e.isWebGLRenderTargetCube&&(t||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),t=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?x.setTextureCube(e,n):x.setTextureCubeDynamic(e,n)}}(),this.setFramebuffer=function(t){D=t},this.getRenderTarget=function(){return z},this.setRenderTarget=function(t){z=t,t&&void 0===y.get(t).__webglFramebuffer&&x.setupRenderTarget(t);var e=D,n=!1;if(t){var r=y.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(e=r[t.activeCubeFace],n=!0):e=r,H.copy(t.viewport),k.copy(t.scissor),V=t.scissorTest}else H.copy(Y).multiplyScalar(X),k.copy(J).multiplyScalar(X),V=Z;if(N!==e&&(d.bindFramebuffer(36160,e),N=e),v.viewport(H),v.scissor(k),v.setScissorTest(V),n){var i=y.get(t.texture);d.framebufferTexture2D(36160,36064,34069+t.activeCubeFace,i.__webglTexture,t.activeMipMapLevel)}},this.readRenderTargetPixels=function(t,e,n,r,i,o){if(t&&t.isWebGLRenderTarget){var a=y.get(t).__webglFramebuffer;if(a){var s=!1;a!==N&&(d.bindFramebuffer(36160,a),s=!0);try{var c=t.texture,h=c.format,u=c.type;if(h!==Jt&&R.convert(h)!==d.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(u===zt||R.convert(u)===d.getParameter(35738)||u===Ht&&(f.isWebGL2||p.get("OES_texture_float")||p.get("WEBGL_color_buffer_float"))||u===kt&&(f.isWebGL2?p.get("EXT_color_buffer_float"):p.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===d.checkFramebufferStatus(36160)?e>=0&&e<=t.width-r&&n>=0&&n<=t.height-i&&d.readPixels(e,n,r,i,R.convert(h),R.convert(u),o):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&d.bindFramebuffer(36160,N)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,n){var r=e.image.width,i=e.image.height,o=R.convert(e.format);this.setTexture2D(e,0),d.copyTexImage2D(3553,n||0,o,t.x,t.y,r,i,0)},this.copyTextureToTexture=function(t,e,n,r){var i=e.image.width,o=e.image.height,a=R.convert(n.format),s=R.convert(n.type);this.setTexture2D(n,0),e.isDataTexture?d.texSubImage2D(3553,r||0,t.x,t.y,i,o,a,s,e.image.data):d.texSubImage2D(3553,r||0,t.x,t.y,a,s,e.image)}}function bo(t,e){this.name="",this.color=new En(t),this.density=void 0!==e?e:25e-5}function wo(t,e,n){this.name="",this.color=new En(t),this.near=void 0!==e?e:1,this.far=void 0!==n?n:1e3}function _o(){Un.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function Mo(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Eo(t,e,n,r){this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===r}function So(t){br.call(this),this.type="SpriteMaterial",this.color=new En(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.lights=!1,this.transparent=!0,this.setValues(t)}function To(t){if(Un.call(this),this.type="Sprite",void 0===so){so=new nr;var e=new Mo(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);so.setIndex([0,1,2,0,2,3]),so.addAttribute("position",new Eo(e,3,0,!1)),so.addAttribute("uv",new Eo(e,2,3,!1))}this.geometry=so,this.material=void 0!==t?t:new So,this.center=new Ze(.5,.5)}function Ao(){Un.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Lo(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,r=this.bones.length;n<r;n++)this.boneInverses.push(new Qe)}}function Co(){Un.call(this),this.type="Bone"}function Po(t,e){Sr.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Qe,this.bindMatrixInverse=new Qe;var n=new Lo(this.initBones());this.bind(n,this.matrixWorld),this.normalizeSkinWeights()}function Ro(t){br.call(this),this.type="LineBasicMaterial",this.color=new En(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(t)}function Oo(t,e,n){1===n&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),Un.call(this),this.type="Line",this.geometry=void 0!==t?t:new nr,this.material=void 0!==e?e:new Ro({color:16777215*Math.random()})}function Io(t,e){Oo.call(this,t,e),this.type="LineSegments"}function Do(t,e){Oo.call(this,t,e),this.type="LineLoop"}function zo(t){br.call(this),this.type="PointsMaterial",this.color=new En(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function No(t,e){Un.call(this),this.type="Points",this.geometry=void 0!==t?t:new nr,this.material=void 0!==e?e:new zo({color:16777215*Math.random()})}function Bo(t,e,n,r,i,o,a,s,c){hn.call(this,t,e,n,r,i,o,a,s,c),this.generateMipmaps=!1}function Uo(t,e,n,r,i,o,a,s,c,h,u,l){hn.call(this,null,o,a,s,c,h,r,i,u,l),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function Fo(t,e,n,r,i,o,a,s,c){hn.call(this,t,e,n,r,i,o,a,s,c),this.needsUpdate=!0}function Go(t,e,n,r,i,o,a,s,c,h){if((h=void 0!==h?h:$t)!==$t&&h!==te)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&h===$t&&(n=Ut),void 0===n&&h===te&&(n=qt),hn.call(this,null,r,i,o,a,s,h,n,c),this.image={width:t,height:e},this.magFilter=void 0!==a?a:Ct,this.minFilter=void 0!==s?s:Ct,this.flipY=!1,this.generateMipmaps=!1}function Ho(t){nr.call(this),this.type="WireframeGeometry";var e,n,r,i,o,a,s,c,h,u,l=[],d=[0,0],p={},f=["a","b","c"];if(t&&t.isGeometry){var m=t.faces;for(e=0,r=m.length;e<r;e++){var v=m[e];for(n=0;n<3;n++)s=v[f[n]],c=v[f[(n+1)%3]],d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[h=d[0]+","+d[1]]&&(p[h]={index1:d[0],index2:d[1]})}for(h in p)a=p[h],u=t.vertices[a.index1],l.push(u.x,u.y,u.z),u=t.vertices[a.index2],l.push(u.x,u.y,u.z)}else if(t&&t.isBufferGeometry){var g,y,x,b,w,_,M;if(u=new $e,null!==t.index){for(g=t.attributes.position,y=t.index,0===(x=t.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),i=0,o=x.length;i<o;++i)for(e=w=(b=x[i]).start,r=w+b.count;e<r;e+=3)for(n=0;n<3;n++)s=y.getX(e+n),c=y.getX(e+(n+1)%3),d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[h=d[0]+","+d[1]]&&(p[h]={index1:d[0],index2:d[1]});for(h in p)a=p[h],u.fromBufferAttribute(g,a.index1),l.push(u.x,u.y,u.z),u.fromBufferAttribute(g,a.index2),l.push(u.x,u.y,u.z)}else for(e=0,r=(g=t.attributes.position).count/3;e<r;e++)for(n=0;n<3;n++)_=3*e+n,u.fromBufferAttribute(g,_),l.push(u.x,u.y,u.z),M=3*e+(n+1)%3,u.fromBufferAttribute(g,M),l.push(u.x,u.y,u.z)}this.addAttribute("position",new Qn(l,3))}function ko(t,e,n){kn.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n},this.fromBufferGeometry(new Vo(t,e,n)),this.mergeVertices()}function Vo(t,e,n){nr.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:n};var r,i,o=[],a=[],s=[],c=[],h=1e-5,u=new $e,l=new $e,d=new $e,p=new $e,f=new $e;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var m=e+1;for(r=0;r<=n;r++){var v=r/n;for(i=0;i<=e;i++){var g=i/e;t(g,v,l),a.push(l.x,l.y,l.z),g-h>=0?(t(g-h,v,d),p.subVectors(l,d)):(t(g+h,v,d),p.subVectors(d,l)),v-h>=0?(t(g,v-h,d),f.subVectors(l,d)):(t(g,v+h,d),f.subVectors(d,l)),u.crossVectors(p,f).normalize(),s.push(u.x,u.y,u.z),c.push(g,v)}}for(r=0;r<n;r++)for(i=0;i<e;i++){var y=r*m+i,x=r*m+i+1,b=(r+1)*m+i+1,w=(r+1)*m+i;o.push(y,x,w),o.push(x,b,w)}this.setIndex(o),this.addAttribute("position",new Qn(a,3)),this.addAttribute("normal",new Qn(s,3)),this.addAttribute("uv",new Qn(c,2))}function jo(t,e,n,r){kn.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r},this.fromBufferGeometry(new Wo(t,e,n,r)),this.mergeVertices()}function Wo(t,e,n,r){nr.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r},n=n||1;var i=[],o=[];function a(t,e,n,r){var i,o,a=Math.pow(2,r),c=[];for(i=0;i<=a;i++){c[i]=[];var h=t.clone().lerp(n,i/a),u=e.clone().lerp(n,i/a),l=a-i;for(o=0;o<=l;o++)c[i][o]=0===o&&i===a?h:h.clone().lerp(u,o/l)}for(i=0;i<a;i++)for(o=0;o<2*(a-i)-1;o++){var d=Math.floor(o/2);o%2==0?(s(c[i][d+1]),s(c[i+1][d]),s(c[i][d])):(s(c[i][d+1]),s(c[i+1][d+1]),s(c[i+1][d]))}}function s(t){i.push(t.x,t.y,t.z)}function c(e,n){var r=3*e;n.x=t[r+0],n.y=t[r+1],n.z=t[r+2]}function h(t,e,n,r){r<0&&1===t.x&&(o[e]=t.x-1),0===n.x&&0===n.z&&(o[e]=r/2/Math.PI+.5)}function u(t){return Math.atan2(t.z,-t.x)}function l(t){return Math.atan2(-t.y,Math.sqrt(t.x*t.x+t.z*t.z))}!function(t){for(var n=new $e,r=new $e,i=new $e,o=0;o<e.length;o+=3)c(e[o+0],n),c(e[o+1],r),c(e[o+2],i),a(n,r,i,t)}(r=r||0),function(t){for(var e=new $e,n=0;n<i.length;n+=3)e.x=i[n+0],e.y=i[n+1],e.z=i[n+2],e.normalize().multiplyScalar(t),i[n+0]=e.x,i[n+1]=e.y,i[n+2]=e.z}(n),function(){for(var t=new $e,e=0;e<i.length;e+=3){t.x=i[e+0],t.y=i[e+1],t.z=i[e+2];var n=u(t)/2/Math.PI+.5,r=l(t)/Math.PI+.5;o.push(n,1-r)}(function(){for(var t=new $e,e=new $e,n=new $e,r=new $e,a=new Ze,s=new Ze,c=new Ze,l=0,d=0;l<i.length;l+=9,d+=6){t.set(i[l+0],i[l+1],i[l+2]),e.set(i[l+3],i[l+4],i[l+5]),n.set(i[l+6],i[l+7],i[l+8]),a.set(o[d+0],o[d+1]),s.set(o[d+2],o[d+3]),c.set(o[d+4],o[d+5]),r.copy(t).add(e).add(n).divideScalar(3);var p=u(r);h(a,d+0,t,p),h(s,d+2,e,p),h(c,d+4,n,p)}})(),function(){for(var t=0;t<o.length;t+=6){var e=o[t+0],n=o[t+2],r=o[t+4],i=Math.max(e,n,r),a=Math.min(e,n,r);i>.9&&a<.1&&(e<.2&&(o[t+0]+=1),n<.2&&(o[t+2]+=1),r<.2&&(o[t+4]+=1))}}()}(),this.addAttribute("position",new Qn(i,3)),this.addAttribute("normal",new Qn(i.slice(),3)),this.addAttribute("uv",new Qn(o,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}function qo(t,e){kn.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Xo(t,e)),this.mergeVertices()}function Xo(t,e){Wo.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Yo(t,e){kn.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Jo(t,e)),this.mergeVertices()}function Jo(t,e){Wo.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Zo(t,e){kn.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Qo(t,e)),this.mergeVertices()}function Qo(t,e){var n=(1+Math.sqrt(5))/2,r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];Wo.call(this,r,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Ko(t,e){kn.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new $o(t,e)),this.mergeVertices()}function $o(t,e){var n=(1+Math.sqrt(5))/2,r=1/n,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];Wo.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function ta(t,e,n,r,i,o){kn.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:i},void 0!==o&&console.warn("THREE.TubeGeometry: taper has been removed.");var a=new ea(t,e,n,r,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals,this.fromBufferGeometry(a),this.mergeVertices()}function ea(t,e,n,r,i){nr.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:i},e=e||64,n=n||1,r=r||8,i=i||!1;var o=t.computeFrenetFrames(e,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;var a,s,c=new $e,h=new $e,u=new Ze,l=new $e,d=[],p=[],f=[],m=[];function v(i){l=t.getPointAt(i/e,l);var a=o.normals[i],u=o.binormals[i];for(s=0;s<=r;s++){var f=s/r*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);h.x=v*a.x+m*u.x,h.y=v*a.y+m*u.y,h.z=v*a.z+m*u.z,h.normalize(),p.push(h.x,h.y,h.z),c.x=l.x+n*h.x,c.y=l.y+n*h.y,c.z=l.z+n*h.z,d.push(c.x,c.y,c.z)}}!function(){for(a=0;a<e;a++)v(a);v(!1===i?e:0),function(){for(a=0;a<=e;a++)for(s=0;s<=r;s++)u.x=a/e,u.y=s/r,f.push(u.x,u.y)}(),function(){for(s=1;s<=e;s++)for(a=1;a<=r;a++){var t=(r+1)*(s-1)+(a-1),n=(r+1)*s+(a-1),i=(r+1)*s+a,o=(r+1)*(s-1)+a;m.push(t,n,o),m.push(n,i,o)}}()}(),this.setIndex(m),this.addAttribute("position",new Qn(d,3)),this.addAttribute("normal",new Qn(p,3)),this.addAttribute("uv",new Qn(f,2))}function na(t,e,n,r,i,o,a){kn.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:i,q:o},void 0!==a&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new ra(t,e,n,r,i,o)),this.mergeVertices()}function ra(t,e,n,r,i,o){nr.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:i,q:o},t=t||1,e=e||.4,n=Math.floor(n)||64,r=Math.floor(r)||8,i=i||2,o=o||3;var a,s,c=[],h=[],u=[],l=[],d=new $e,p=new $e,f=new $e,m=new $e,v=new $e,g=new $e,y=new $e;for(a=0;a<=n;++a){var x=a/n*i*Math.PI*2;for(A(x,i,o,t,f),A(x+.01,i,o,t,m),g.subVectors(m,f),y.addVectors(m,f),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),s=0;s<=r;++s){var b=s/r*Math.PI*2,w=-e*Math.cos(b),_=e*Math.sin(b);d.x=f.x+(w*y.x+_*v.x),d.y=f.y+(w*y.y+_*v.y),d.z=f.z+(w*y.z+_*v.z),h.push(d.x,d.y,d.z),p.subVectors(d,f).normalize(),u.push(p.x,p.y,p.z),l.push(a/n),l.push(s/r)}}for(s=1;s<=n;s++)for(a=1;a<=r;a++){var M=(r+1)*(s-1)+(a-1),E=(r+1)*s+(a-1),S=(r+1)*s+a,T=(r+1)*(s-1)+a;c.push(M,E,T),c.push(E,S,T)}function A(t,e,n,r,i){var o=Math.cos(t),a=Math.sin(t),s=n/e*t,c=Math.cos(s);i.x=r*(2+c)*.5*o,i.y=r*(2+c)*a*.5,i.z=r*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new Qn(h,3)),this.addAttribute("normal",new Qn(u,3)),this.addAttribute("uv",new Qn(l,2))}function ia(t,e,n,r,i){kn.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:i},this.fromBufferGeometry(new oa(t,e,n,r,i)),this.mergeVertices()}function oa(t,e,n,r,i){nr.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:i},t=t||1,e=e||.4,n=Math.floor(n)||8,r=Math.floor(r)||6,i=i||2*Math.PI;var o,a,s=[],c=[],h=[],u=[],l=new $e,d=new $e,p=new $e;for(o=0;o<=n;o++)for(a=0;a<=r;a++){var f=a/r*i,m=o/n*Math.PI*2;d.x=(t+e*Math.cos(m))*Math.cos(f),d.y=(t+e*Math.cos(m))*Math.sin(f),d.z=e*Math.sin(m),c.push(d.x,d.y,d.z),l.x=t*Math.cos(f),l.y=t*Math.sin(f),p.subVectors(d,l).normalize(),h.push(p.x,p.y,p.z),u.push(a/r),u.push(o/n)}for(o=1;o<=n;o++)for(a=1;a<=r;a++){var v=(r+1)*o+a-1,g=(r+1)*(o-1)+a-1,y=(r+1)*(o-1)+a,x=(r+1)*o+a;s.push(v,g,x),s.push(g,y,x)}this.setIndex(s),this.addAttribute("position",new Qn(c,3)),this.addAttribute("normal",new Qn(h,3)),this.addAttribute("uv",new Qn(u,2))}bo.prototype.isFogExp2=!0,bo.prototype.clone=function(){return new bo(this.color,this.density)},bo.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},wo.prototype.isFog=!0,wo.prototype.clone=function(){return new wo(this.color,this.near,this.far)},wo.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},_o.prototype=Object.assign(Object.create(Un.prototype),{constructor:_o,copy:function(t,e){return Un.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=Un.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}),Object.defineProperty(Mo.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Mo.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.stride:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.dynamic=t.dynamic,this},copyAt:function(t,e,n){t*=this.stride,n*=e.stride;for(var r=0,i=this.stride;r<i;r++)this.array[t+r]=e.array[n+r];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}}),Object.defineProperties(Eo.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Eo.prototype,{isInterleavedBufferAttribute:!0,setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this},setXYZW:function(t,e,n,r,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this.data.array[t+3]=i,this}}),So.prototype=Object.create(br.prototype),So.prototype.constructor=So,So.prototype.isSpriteMaterial=!0,So.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this},To.prototype=Object.assign(Object.create(Un.prototype),{constructor:To,isSprite:!0,raycast:function(){var t=new $e,e=new $e,n=new $e,r=new Ze,i=new Ze,o=new Qe,a=new $e,s=new $e,c=new $e,h=new Ze,u=new Ze,l=new Ze;function d(t,e,n,a,s,c){r.subVectors(t,n).addScalar(.5).multiply(a),void 0!==s?(i.x=c*r.x-s*r.y,i.y=s*r.x+c*r.y):i.copy(r),t.copy(e),t.x+=i.x,t.y+=i.y,t.applyMatrix4(o)}return function(r,i){e.setFromMatrixScale(this.matrixWorld),o.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld),n.setFromMatrixPosition(this.modelViewMatrix);var p,f,m=this.material.rotation;0!==m&&(f=Math.cos(m),p=Math.sin(m));var v=this.center;d(a.set(-.5,-.5,0),n,v,e,p,f),d(s.set(.5,-.5,0),n,v,e,p,f),d(c.set(.5,.5,0),n,v,e,p,f),h.set(0,0),u.set(1,0),l.set(1,1);var g=r.ray.intersectTriangle(a,s,c,!1,t);if(null!==g||(d(s.set(-.5,.5,0),n,v,e,p,f),u.set(0,1),null!==(g=r.ray.intersectTriangle(a,c,s,!1,t)))){var y=r.ray.origin.distanceTo(t);y<r.near||y>r.far||i.push({distance:y,point:t.clone(),uv:Mr.getUV(t,a,s,c,h,u,l,new Ze),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return Un.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}}),Ao.prototype=Object.assign(Object.create(Un.prototype),{constructor:Ao,copy:function(t){Un.prototype.copy.call(this,t,!1);for(var e=t.levels,n=0,r=e.length;n<r;n++){var i=e[n];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var n=this.levels,r=0;r<n.length&&!(e<n[r].distance);r++);n.splice(r,0,{distance:e,object:t}),this.add(t)},getObjectForDistance:function(t){for(var e=this.levels,n=1,r=e.length;n<r&&!(t<e[n].distance);n++);return e[n-1].object},raycast:(co=new $e,function(t,e){co.setFromMatrixPosition(this.matrixWorld);var n=t.ray.origin.distanceTo(co);this.getObjectForDistance(n).raycast(t,e)}),update:function(){var t=new $e,e=new $e;return function(n){var r=this.levels;if(r.length>1){t.setFromMatrixPosition(n.matrixWorld),e.setFromMatrixPosition(this.matrixWorld);var i=t.distanceTo(e);r[0].object.visible=!0;for(var o=1,a=r.length;o<a&&i>=r[o].distance;o++)r[o-1].object.visible=!1,r[o].object.visible=!0;for(;o<a;o++)r[o].object.visible=!1}}}(),toJSON:function(t){var e=Un.prototype.toJSON.call(this,t);e.object.levels=[];for(var n=this.levels,r=0,i=n.length;r<i;r++){var o=n[r];e.object.levels.push({object:o.object.uuid,distance:o.distance})}return e}}),Object.assign(Lo.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var n=new Qe;this.bones[t]&&n.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(n)}},pose:function(){var t,e,n;for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:(ho=new Qe,uo=new Qe,function(){for(var t=this.bones,e=this.boneInverses,n=this.boneMatrices,r=this.boneTexture,i=0,o=t.length;i<o;i++){var a=t[i]?t[i].matrixWorld:uo;ho.multiplyMatrices(a,e[i]),ho.toArray(n,16*i)}void 0!==r&&(r.needsUpdate=!0)}),clone:function(){return new Lo(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,n=this.bones.length;e<n;e++){var r=this.bones[e];if(r.name===t)return r}}}),Co.prototype=Object.assign(Object.create(Un.prototype),{constructor:Co,isBone:!0}),Po.prototype=Object.assign(Object.create(Sr.prototype),{constructor:Po,isSkinnedMesh:!0,initBones:function(){var t,e,n,r,i=[];if(this.geometry&&void 0!==this.geometry.bones){for(n=0,r=this.geometry.bones.length;n<r;n++)e=this.geometry.bones[n],t=new Co,i.push(t),t.name=e.name,t.position.fromArray(e.pos),t.quaternion.fromArray(e.rotq),void 0!==e.scl&&t.scale.fromArray(e.scl);for(n=0,r=this.geometry.bones.length;n<r;n++)-1!==(e=this.geometry.bones[n]).parent&&null!==e.parent&&void 0!==i[e.parent]?i[e.parent].add(i[n]):this.add(i[n])}return this.updateMatrixWorld(!0),i},bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var t,e;if(this.geometry&&this.geometry.isGeometry)for(e=0;e<this.geometry.skinWeights.length;e++){var n=this.geometry.skinWeights[e];(t=1/n.manhattanLength())!==1/0?n.multiplyScalar(t):n.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var r=new un,i=this.geometry.attributes.skinWeight;for(e=0;e<i.count;e++)r.x=i.getX(e),r.y=i.getY(e),r.z=i.getZ(e),r.w=i.getW(e),(t=1/r.manhattanLength())!==1/0?r.multiplyScalar(t):r.set(1,0,0,0),i.setXYZW(e,r.x,r.y,r.z,r.w)}},updateMatrixWorld:function(t){Sr.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ro.prototype=Object.create(br.prototype),Ro.prototype.constructor=Ro,Ro.prototype.isLineBasicMaterial=!0,Ro.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this},Oo.prototype=Object.assign(Object.create(Un.prototype),{constructor:Oo,isLine:!0,computeLineDistances:(lo=new $e,po=new $e,function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,n=[0],r=1,i=e.count;r<i;r++)lo.fromBufferAttribute(e,r-1),po.fromBufferAttribute(e,r),n[r]=n[r-1],n[r]+=lo.distanceTo(po);t.addAttribute("lineDistance",new Qn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var o=t.vertices;for((n=t.lineDistances)[0]=0,r=1,i=o.length;r<i;r++)n[r]=n[r-1],n[r]+=o[r-1].distanceTo(o[r])}return this}),raycast:function(){var t=new Qe,e=new _r,n=new mn;return function(r,i){var o=r.linePrecision,a=this.geometry,s=this.matrixWorld;if(null===a.boundingSphere&&a.computeBoundingSphere(),n.copy(a.boundingSphere),n.applyMatrix4(s),n.radius+=o,!1!==r.ray.intersectsSphere(n)){t.getInverse(s),e.copy(r.ray).applyMatrix4(t);var c=o/((this.scale.x+this.scale.y+this.scale.z)/3),h=c*c,u=new $e,l=new $e,d=new $e,p=new $e,f=this&&this.isLineSegments?2:1;if(a.isBufferGeometry){var m=a.index,v=a.attributes.position.array;if(null!==m)for(var g=m.array,y=0,x=g.length-1;y<x;y+=f){var b=g[y],w=g[y+1];if(u.fromArray(v,3*b),l.fromArray(v,3*w),!(e.distanceSqToSegment(u,l,p,d)>h))p.applyMatrix4(this.matrixWorld),(E=r.ray.origin.distanceTo(p))<r.near||E>r.far||i.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}else for(y=0,x=v.length/3-1;y<x;y+=f){if(u.fromArray(v,3*y),l.fromArray(v,3*y+3),!(e.distanceSqToSegment(u,l,p,d)>h))p.applyMatrix4(this.matrixWorld),(E=r.ray.origin.distanceTo(p))<r.near||E>r.far||i.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}else if(a.isGeometry){var _=a.vertices,M=_.length;for(y=0;y<M-1;y+=f){var E;if(!(e.distanceSqToSegment(_[y],_[y+1],p,d)>h))p.applyMatrix4(this.matrixWorld),(E=r.ray.origin.distanceTo(p))<r.near||E>r.far||i.push({distance:E,point:d.clone().applyMatrix4(this.matrixWorld),index:y,face:null,faceIndex:null,object:this})}}}}}(),copy:function(t){return Un.prototype.copy.call(this,t),this.geometry.copy(t.geometry),this.material.copy(t.material),this},clone:function(){return(new this.constructor).copy(this)}}),Io.prototype=Object.assign(Object.create(Oo.prototype),{constructor:Io,isLineSegments:!0,computeLineDistances:function(){var t=new $e,e=new $e;return function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var r=n.attributes.position,i=[],o=0,a=r.count;o<a;o+=2)t.fromBufferAttribute(r,o),e.fromBufferAttribute(r,o+1),i[o]=0===o?0:i[o-1],i[o+1]=i[o]+t.distanceTo(e);n.addAttribute("lineDistance",new Qn(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var s=n.vertices;for(i=n.lineDistances,o=0,a=s.length;o<a;o+=2)t.copy(s[o]),e.copy(s[o+1]),i[o]=0===o?0:i[o-1],i[o+1]=i[o]+t.distanceTo(e)}return this}}()}),Do.prototype=Object.assign(Object.create(Oo.prototype),{constructor:Do,isLineLoop:!0}),zo.prototype=Object.create(br.prototype),zo.prototype.constructor=zo,zo.prototype.isPointsMaterial=!0,zo.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this},No.prototype=Object.assign(Object.create(Un.prototype),{constructor:No,isPoints:!0,raycast:function(){var t=new Qe,e=new _r,n=new mn;return function(r,i){var o=this,a=this.geometry,s=this.matrixWorld,c=r.params.Points.threshold;if(null===a.boundingSphere&&a.computeBoundingSphere(),n.copy(a.boundingSphere),n.applyMatrix4(s),n.radius+=c,!1!==r.ray.intersectsSphere(n)){t.getInverse(s),e.copy(r.ray).applyMatrix4(t);var h=c/((this.scale.x+this.scale.y+this.scale.z)/3),u=h*h,l=new $e,d=new $e;if(a.isBufferGeometry){var p=a.index,f=a.attributes.position.array;if(null!==p)for(var m=p.array,v=0,g=m.length;v<g;v++){var y=m[v];l.fromArray(f,3*y),w(l,y)}else{v=0;for(var x=f.length/3;v<x;v++)l.fromArray(f,3*v),w(l,v)}}else{var b=a.vertices;for(v=0,x=b.length;v<x;v++)w(b[v],v)}}function w(t,n){var a=e.distanceSqToPoint(t);if(a<u){e.closestPointToPoint(t,d),d.applyMatrix4(s);var c=r.ray.origin.distanceTo(d);if(c<r.near||c>r.far)return;i.push({distance:c,distanceToRay:Math.sqrt(a),point:d.clone(),index:n,face:null,object:o})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Bo.prototype=Object.assign(Object.create(hn.prototype),{constructor:Bo,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Uo.prototype=Object.create(hn.prototype),Uo.prototype.constructor=Uo,Uo.prototype.isCompressedTexture=!0,Fo.prototype=Object.create(hn.prototype),Fo.prototype.constructor=Fo,Fo.prototype.isCanvasTexture=!0,Go.prototype=Object.create(hn.prototype),Go.prototype.constructor=Go,Go.prototype.isDepthTexture=!0,Ho.prototype=Object.create(nr.prototype),Ho.prototype.constructor=Ho,ko.prototype=Object.create(kn.prototype),ko.prototype.constructor=ko,Vo.prototype=Object.create(nr.prototype),Vo.prototype.constructor=Vo,jo.prototype=Object.create(kn.prototype),jo.prototype.constructor=jo,Wo.prototype=Object.create(nr.prototype),Wo.prototype.constructor=Wo,qo.prototype=Object.create(kn.prototype),qo.prototype.constructor=qo,Xo.prototype=Object.create(Wo.prototype),Xo.prototype.constructor=Xo,Yo.prototype=Object.create(kn.prototype),Yo.prototype.constructor=Yo,Jo.prototype=Object.create(Wo.prototype),Jo.prototype.constructor=Jo,Zo.prototype=Object.create(kn.prototype),Zo.prototype.constructor=Zo,Qo.prototype=Object.create(Wo.prototype),Qo.prototype.constructor=Qo,Ko.prototype=Object.create(kn.prototype),Ko.prototype.constructor=Ko,$o.prototype=Object.create(Wo.prototype),$o.prototype.constructor=$o,ta.prototype=Object.create(kn.prototype),ta.prototype.constructor=ta,ea.prototype=Object.create(nr.prototype),ea.prototype.constructor=ea,na.prototype=Object.create(kn.prototype),na.prototype.constructor=na,ra.prototype=Object.create(nr.prototype),ra.prototype.constructor=ra,ia.prototype=Object.create(kn.prototype),ia.prototype.constructor=ia,oa.prototype=Object.create(nr.prototype),oa.prototype.constructor=oa;var aa=function(t,e,n){n=n||2;var r,i,o,a,s,c,h,u=e&&e.length,l=u?e[0]*n:t.length,d=sa(t,0,l,n,!0),p=[];if(!d)return p;if(u&&(d=function(t,e,n,r){var i,o,a,s,c,h=[];for(i=0,o=e.length;i<o;i++)a=e[i]*r,s=i<o-1?e[i+1]*r:t.length,(c=sa(t,a,s,r,!1))===c.next&&(c.steiner=!0),h.push(ga(c));for(h.sort(fa),i=0;i<h.length;i++)ma(h[i],n),n=ca(n,n.next);return n}(t,e,d,n)),t.length>80*n){r=o=t[0],i=a=t[1];for(var f=n;f<l;f+=n)(s=t[f])<r&&(r=s),(c=t[f+1])<i&&(i=c),s>o&&(o=s),c>a&&(a=c);h=0!==(h=Math.max(o-r,a-i))?1/h:0}return ha(d,p,n,r,i,h),p};function sa(t,e,n,r,i){var o,a;if(i===function(t,e,n,r){for(var i=0,o=e,a=n-r;o<n;o+=r)i+=(t[a]-t[o])*(t[o+1]+t[a+1]),a=o;return i}(t,e,n,r)>0)for(o=e;o<n;o+=r)a=Sa(o,t[o],t[o+1],a);else for(o=n-r;o>=e;o-=r)a=Sa(o,t[o],t[o+1],a);return a&&wa(a,a.next)&&(Ta(a),a=a.next),a}function ca(t,e){if(!t)return t;e||(e=t);var n,r=t;do{if(n=!1,r.steiner||!wa(r,r.next)&&0!==ba(r.prev,r,r.next))r=r.next;else{if(Ta(r),(r=e=r.prev)===r.next)break;n=!0}}while(n||r!==e);return e}function ha(t,e,n,r,i,o,a){if(t){!a&&o&&function(t,e,n,r){var i=t;do{null===i.z&&(i.z=va(i.x,i.y,e,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){var e,n,r,i,o,a,s,c,h=1;do{for(n=t,t=null,o=null,a=0;n;){for(a++,r=n,s=0,e=0;e<h&&(s++,r=r.nextZ);e++);for(c=h;s>0||c>0&&r;)0!==s&&(0===c||!r||n.z<=r.z)?(i=n,n=n.nextZ,s--):(i=r,r=r.nextZ,c--),o?o.nextZ=i:t=i,i.prevZ=o,o=i;n=r}o.nextZ=null,h*=2}while(a>1)}(i)}(t,r,i,o);for(var s,c,h=t;t.prev!==t.next;)if(s=t.prev,c=t.next,o?la(t,r,i,o):ua(t))e.push(s.i/n),e.push(t.i/n),e.push(c.i/n),Ta(t),t=c.next,h=c.next;else if((t=c)===h){a?1===a?ha(t=da(t,e,n),e,n,r,i,o,2):2===a&&pa(t,e,n,r,i,o):ha(ca(t),e,n,r,i,o,1);break}}}function ua(t){var e=t.prev,n=t,r=t.next;if(ba(e,n,r)>=0)return!1;for(var i=t.next.next;i!==t.prev;){if(ya(e.x,e.y,n.x,n.y,r.x,r.y,i.x,i.y)&&ba(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function la(t,e,n,r){var i=t.prev,o=t,a=t.next;if(ba(i,o,a)>=0)return!1;for(var s=i.x<o.x?i.x<a.x?i.x:a.x:o.x<a.x?o.x:a.x,c=i.y<o.y?i.y<a.y?i.y:a.y:o.y<a.y?o.y:a.y,h=i.x>o.x?i.x>a.x?i.x:a.x:o.x>a.x?o.x:a.x,u=i.y>o.y?i.y>a.y?i.y:a.y:o.y>a.y?o.y:a.y,l=va(s,c,e,n,r),d=va(h,u,e,n,r),p=t.nextZ;p&&p.z<=d;){if(p!==t.prev&&p!==t.next&&ya(i.x,i.y,o.x,o.y,a.x,a.y,p.x,p.y)&&ba(p.prev,p,p.next)>=0)return!1;p=p.nextZ}for(p=t.prevZ;p&&p.z>=l;){if(p!==t.prev&&p!==t.next&&ya(i.x,i.y,o.x,o.y,a.x,a.y,p.x,p.y)&&ba(p.prev,p,p.next)>=0)return!1;p=p.prevZ}return!0}function da(t,e,n){var r=t;do{var i=r.prev,o=r.next.next;!wa(i,o)&&_a(i,r,r.next,o)&&Ma(i,o)&&Ma(o,i)&&(e.push(i.i/n),e.push(r.i/n),e.push(o.i/n),Ta(r),Ta(r.next),r=t=o),r=r.next}while(r!==t);return r}function pa(t,e,n,r,i,o){var a=t;do{for(var s=a.next.next;s!==a.prev;){if(a.i!==s.i&&xa(a,s)){var c=Ea(a,s);return a=ca(a,a.next),c=ca(c,c.next),ha(a,e,n,r,i,o),void ha(c,e,n,r,i,o)}s=s.next}a=a.next}while(a!==t)}function fa(t,e){return t.x-e.x}function ma(t,e){if(e=function(t,e){var n,r=e,i=t.x,o=t.y,a=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var s=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(s<=i&&s>a){if(a=s,s===i){if(o===r.y)return r;if(o===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!n)return null;if(i===a)return n.prev;var c,h=n,u=n.x,l=n.y,d=1/0;r=n.next;for(;r!==h;)i>=r.x&&r.x>=u&&i!==r.x&&ya(o<l?i:a,o,u,l,o<l?a:i,o,r.x,r.y)&&((c=Math.abs(o-r.y)/(i-r.x))<d||c===d&&r.x>n.x)&&Ma(r,t)&&(n=r,d=c),r=r.next;return n}(t,e)){var n=Ea(e,t);ca(n,n.next)}}function va(t,e,n,r,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*i)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function ga(t){var e=t,n=t;do{e.x<n.x&&(n=e),e=e.next}while(e!==t);return n}function ya(t,e,n,r,i,o,a,s){return(i-a)*(e-s)-(t-a)*(o-s)>=0&&(t-a)*(r-s)-(n-a)*(e-s)>=0&&(n-a)*(o-s)-(i-a)*(r-s)>=0}function xa(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&_a(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&Ma(t,e)&&Ma(e,t)&&function(t,e){var n=t,r=!1,i=(t.x+e.x)/2,o=(t.y+e.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)}function ba(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function wa(t,e){return t.x===e.x&&t.y===e.y}function _a(t,e,n,r){return!!(wa(t,e)&&wa(n,r)||wa(t,r)&&wa(n,e))||ba(t,e,n)>0!=ba(t,e,r)>0&&ba(n,r,t)>0!=ba(n,r,e)>0}function Ma(t,e){return ba(t.prev,t,t.next)<0?ba(t,e,t.next)>=0&&ba(t,t.prev,e)>=0:ba(t,e,t.prev)<0||ba(t,t.next,e)<0}function Ea(t,e){var n=new Aa(t.i,t.x,t.y),r=new Aa(e.i,e.x,e.y),i=t.next,o=e.prev;return t.next=e,e.prev=t,n.next=i,i.prev=n,r.next=n,n.prev=r,o.next=r,r.prev=o,r}function Sa(t,e,n,r){var i=new Aa(t,e,n);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function Ta(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Aa(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var La={area:function(t){for(var e=t.length,n=0,r=e-1,i=0;i<e;r=i++)n+=t[r].x*t[i].y-t[i].x*t[r].y;return.5*n},isClockWise:function(t){return La.area(t)<0},triangulateShape:function(t,e){var n=[],r=[],i=[];Ca(t),Pa(n,t);var o=t.length;e.forEach(Ca);for(var a=0;a<e.length;a++)r.push(o),o+=e[a].length,Pa(n,e[a]);var s=aa(n,r);for(a=0;a<s.length;a+=3)i.push(s.slice(a,a+3));return i}};function Ca(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Pa(t,e){for(var n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}function Ra(t,e){kn.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new Oa(t,e)),this.mergeVertices()}function Oa(t,e){nr.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];for(var n=this,r=[],i=[],o=0,a=t.length;o<a;o++){s(t[o])}function s(t){var o=[],a=void 0!==e.curveSegments?e.curveSegments:12,s=void 0!==e.steps?e.steps:1,c=void 0!==e.depth?e.depth:100,h=void 0===e.bevelEnabled||e.bevelEnabled,u=void 0!==e.bevelThickness?e.bevelThickness:6,l=void 0!==e.bevelSize?e.bevelSize:u-2,d=void 0!==e.bevelSegments?e.bevelSegments:3,p=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:Ia;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=e.amount);var m,v,g,y,x,b,w,_,M=!1;p&&(m=p.getSpacedPoints(s),M=!0,h=!1,v=p.computeFrenetFrames(s,!1),g=new $e,y=new $e,x=new $e),h||(d=0,u=0,l=0);var E=t.extractPoints(a),S=E.shape,T=E.holes;if(!La.isClockWise(S))for(S=S.reverse(),w=0,_=T.length;w<_;w++)b=T[w],La.isClockWise(b)&&(T[w]=b.reverse());var A=La.triangulateShape(S,T),L=S;for(w=0,_=T.length;w<_;w++)b=T[w],S=S.concat(b);function C(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}var P,R,O,I,D,z,N=S.length,B=A.length;function U(t,e,n){var r,i,o,a=t.x-e.x,s=t.y-e.y,c=n.x-t.x,h=n.y-t.y,u=a*a+s*s,l=a*h-s*c;if(Math.abs(l)>Number.EPSILON){var d=Math.sqrt(u),p=Math.sqrt(c*c+h*h),f=e.x-s/d,m=e.y+a/d,v=((n.x-h/p-f)*h-(n.y+c/p-m)*c)/(a*h-s*c),g=(r=f+a*v-t.x)*r+(i=m+s*v-t.y)*i;if(g<=2)return new Ze(r,i);o=Math.sqrt(g/2)}else{var y=!1;a>Number.EPSILON?c>Number.EPSILON&&(y=!0):a<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(h)&&(y=!0),y?(r=-s,i=a,o=Math.sqrt(u)):(r=a,i=s,o=Math.sqrt(u/2))}return new Ze(r/o,i/o)}for(var F=[],G=0,H=L.length,k=H-1,V=G+1;G<H;G++,k++,V++)k===H&&(k=0),V===H&&(V=0),F[G]=U(L[G],L[k],L[V]);var j,W,q=[],X=F.concat();for(w=0,_=T.length;w<_;w++){for(b=T[w],j=[],G=0,k=(H=b.length)-1,V=G+1;G<H;G++,k++,V++)k===H&&(k=0),V===H&&(V=0),j[G]=U(b[G],b[k],b[V]);q.push(j),X=X.concat(j)}for(P=0;P<d;P++){for(O=P/d,I=u*Math.cos(O*Math.PI/2),R=l*Math.sin(O*Math.PI/2),G=0,H=L.length;G<H;G++)J((D=C(L[G],F[G],R)).x,D.y,-I);for(w=0,_=T.length;w<_;w++)for(b=T[w],j=q[w],G=0,H=b.length;G<H;G++)J((D=C(b[G],j[G],R)).x,D.y,-I)}for(R=l,G=0;G<N;G++)D=h?C(S[G],X[G],R):S[G],M?(y.copy(v.normals[0]).multiplyScalar(D.x),g.copy(v.binormals[0]).multiplyScalar(D.y),x.copy(m[0]).add(y).add(g),J(x.x,x.y,x.z)):J(D.x,D.y,0);for(W=1;W<=s;W++)for(G=0;G<N;G++)D=h?C(S[G],X[G],R):S[G],M?(y.copy(v.normals[W]).multiplyScalar(D.x),g.copy(v.binormals[W]).multiplyScalar(D.y),x.copy(m[W]).add(y).add(g),J(x.x,x.y,x.z)):J(D.x,D.y,c/s*W);for(P=d-1;P>=0;P--){for(O=P/d,I=u*Math.cos(O*Math.PI/2),R=l*Math.sin(O*Math.PI/2),G=0,H=L.length;G<H;G++)J((D=C(L[G],F[G],R)).x,D.y,c+I);for(w=0,_=T.length;w<_;w++)for(b=T[w],j=q[w],G=0,H=b.length;G<H;G++)D=C(b[G],j[G],R),M?J(D.x,D.y+m[s-1].y,m[s-1].x+I):J(D.x,D.y,c+I)}function Y(t,e){var n,r;for(G=t.length;--G>=0;){n=G,(r=G-1)<0&&(r=t.length-1);var i=0,o=s+2*d;for(i=0;i<o;i++){var a=N*i,c=N*(i+1);Q(e+n+a,e+r+a,e+r+c,e+n+c)}}}function J(t,e,n){o.push(t),o.push(e),o.push(n)}function Z(t,e,i){K(t),K(e),K(i);var o=r.length/3,a=f.generateTopUV(n,r,o-3,o-2,o-1);$(a[0]),$(a[1]),$(a[2])}function Q(t,e,i,o){K(t),K(e),K(o),K(e),K(i),K(o);var a=r.length/3,s=f.generateSideWallUV(n,r,a-6,a-3,a-2,a-1);$(s[0]),$(s[1]),$(s[3]),$(s[1]),$(s[2]),$(s[3])}function K(t){r.push(o[3*t+0]),r.push(o[3*t+1]),r.push(o[3*t+2])}function $(t){i.push(t.x),i.push(t.y)}!function(){var t=r.length/3;if(h){var e=0,i=N*e;for(G=0;G<B;G++)Z((z=A[G])[2]+i,z[1]+i,z[0]+i);for(i=N*(e=s+2*d),G=0;G<B;G++)Z((z=A[G])[0]+i,z[1]+i,z[2]+i)}else{for(G=0;G<B;G++)Z((z=A[G])[2],z[1],z[0]);for(G=0;G<B;G++)Z((z=A[G])[0]+N*s,z[1]+N*s,z[2]+N*s)}n.addGroup(t,r.length/3-t,0)}(),function(){var t=r.length/3,e=0;for(Y(L,e),e+=L.length,w=0,_=T.length;w<_;w++)Y(b=T[w],e),e+=b.length;n.addGroup(t,r.length/3-t,1)}()}this.addAttribute("position",new Qn(r,3)),this.addAttribute("uv",new Qn(i,2)),this.computeVertexNormals()}Ra.prototype=Object.create(kn.prototype),Ra.prototype.constructor=Ra,Ra.prototype.toJSON=function(){var t=kn.prototype.toJSON.call(this);return Da(this.parameters.shapes,this.parameters.options,t)},Oa.prototype=Object.create(nr.prototype),Oa.prototype.constructor=Oa,Oa.prototype.toJSON=function(){var t=nr.prototype.toJSON.call(this);return Da(this.parameters.shapes,this.parameters.options,t)};var Ia={generateTopUV:function(t,e,n,r,i){var o=e[3*n],a=e[3*n+1],s=e[3*r],c=e[3*r+1],h=e[3*i],u=e[3*i+1];return[new Ze(o,a),new Ze(s,c),new Ze(h,u)]},generateSideWallUV:function(t,e,n,r,i,o){var a=e[3*n],s=e[3*n+1],c=e[3*n+2],h=e[3*r],u=e[3*r+1],l=e[3*r+2],d=e[3*i],p=e[3*i+1],f=e[3*i+2],m=e[3*o],v=e[3*o+1],g=e[3*o+2];return Math.abs(s-u)<.01?[new Ze(a,1-c),new Ze(h,1-l),new Ze(d,1-f),new Ze(m,1-g)]:[new Ze(s,1-c),new Ze(u,1-l),new Ze(p,1-f),new Ze(v,1-g)]}};function Da(t,e,n){if(n.shapes=[],Array.isArray(t))for(var r=0,i=t.length;r<i;r++){var o=t[r];n.shapes.push(o.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}function za(t,e){kn.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new Na(t,e)),this.mergeVertices()}function Na(t,e){var n=(e=e||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new kn;var r=n.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),Oa.call(this,r,e),this.type="TextBufferGeometry"}function Ba(t,e,n,r,i,o,a){kn.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:i,thetaStart:o,thetaLength:a},this.fromBufferGeometry(new Ua(t,e,n,r,i,o,a)),this.mergeVertices()}function Ua(t,e,n,r,i,o,a){nr.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:i,thetaStart:o,thetaLength:a},t=t||1,e=Math.max(3,Math.floor(e)||8),n=Math.max(2,Math.floor(n)||6),r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI;var s,c,h=(o=void 0!==o?o:0)+(a=void 0!==a?a:Math.PI),u=0,l=[],d=new $e,p=new $e,f=[],m=[],v=[],g=[];for(c=0;c<=n;c++){var y=[],x=c/n;for(s=0;s<=e;s++){var b=s/e;d.x=-t*Math.cos(r+b*i)*Math.sin(o+x*a),d.y=t*Math.cos(o+x*a),d.z=t*Math.sin(r+b*i)*Math.sin(o+x*a),m.push(d.x,d.y,d.z),p.set(d.x,d.y,d.z).normalize(),v.push(p.x,p.y,p.z),g.push(b,1-x),y.push(u++)}l.push(y)}for(c=0;c<n;c++)for(s=0;s<e;s++){var w=l[c][s+1],_=l[c][s],M=l[c+1][s],E=l[c+1][s+1];(0!==c||o>0)&&f.push(w,_,E),(c!==n-1||h<Math.PI)&&f.push(_,M,E)}this.setIndex(f),this.addAttribute("position",new Qn(m,3)),this.addAttribute("normal",new Qn(v,3)),this.addAttribute("uv",new Qn(g,2))}function Fa(t,e,n,r,i,o){kn.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:o},this.fromBufferGeometry(new Ga(t,e,n,r,i,o)),this.mergeVertices()}function Ga(t,e,n,r,i,o){nr.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:o},t=t||.5,e=e||1,i=void 0!==i?i:0,o=void 0!==o?o:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var a,s,c,h=[],u=[],l=[],d=[],p=t,f=(e-t)/(r=void 0!==r?Math.max(1,r):1),m=new $e,v=new Ze;for(s=0;s<=r;s++){for(c=0;c<=n;c++)a=i+c/n*o,m.x=p*Math.cos(a),m.y=p*Math.sin(a),u.push(m.x,m.y,m.z),l.push(0,0,1),v.x=(m.x/e+1)/2,v.y=(m.y/e+1)/2,d.push(v.x,v.y);p+=f}for(s=0;s<r;s++){var g=s*(n+1);for(c=0;c<n;c++){var y=a=c+g,x=a+n+1,b=a+n+2,w=a+1;h.push(y,x,w),h.push(x,b,w)}}this.setIndex(h),this.addAttribute("position",new Qn(u,3)),this.addAttribute("normal",new Qn(l,3)),this.addAttribute("uv",new Qn(d,2))}function Ha(t,e,n,r){kn.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},this.fromBufferGeometry(new ka(t,e,n,r)),this.mergeVertices()}function ka(t,e,n,r){nr.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},e=Math.floor(e)||12,n=n||0,r=r||2*Math.PI,r=Je.clamp(r,0,2*Math.PI);var i,o,a,s=[],c=[],h=[],u=1/e,l=new $e,d=new Ze;for(o=0;o<=e;o++){var p=n+o*u*r,f=Math.sin(p),m=Math.cos(p);for(a=0;a<=t.length-1;a++)l.x=t[a].x*f,l.y=t[a].y,l.z=t[a].x*m,c.push(l.x,l.y,l.z),d.x=o/e,d.y=a/(t.length-1),h.push(d.x,d.y)}for(o=0;o<e;o++)for(a=0;a<t.length-1;a++){var v=i=a+o*t.length,g=i+t.length,y=i+t.length+1,x=i+1;s.push(v,g,x),s.push(g,y,x)}if(this.setIndex(s),this.addAttribute("position",new Qn(c,3)),this.addAttribute("uv",new Qn(h,2)),this.computeVertexNormals(),r===2*Math.PI){var b=this.attributes.normal.array,w=new $e,_=new $e,M=new $e;for(i=e*t.length*3,o=0,a=0;o<t.length;o++,a+=3)w.x=b[a+0],w.y=b[a+1],w.z=b[a+2],_.x=b[i+a+0],_.y=b[i+a+1],_.z=b[i+a+2],M.addVectors(w,_).normalize(),b[a+0]=b[i+a+0]=M.x,b[a+1]=b[i+a+1]=M.y,b[a+2]=b[i+a+2]=M.z}}function Va(t,e){kn.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new ja(t,e)),this.mergeVertices()}function ja(t,e){nr.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var n=[],r=[],i=[],o=[],a=0,s=0;if(!1===Array.isArray(t))h(t);else for(var c=0;c<t.length;c++)h(t[c]),this.addGroup(a,s,c),a+=s,s=0;function h(t){var a,c,h,u=r.length/3,l=t.extractPoints(e),d=l.shape,p=l.holes;if(!1===La.isClockWise(d))for(d=d.reverse(),a=0,c=p.length;a<c;a++)h=p[a],!0===La.isClockWise(h)&&(p[a]=h.reverse());var f=La.triangulateShape(d,p);for(a=0,c=p.length;a<c;a++)h=p[a],d=d.concat(h);for(a=0,c=d.length;a<c;a++){var m=d[a];r.push(m.x,m.y,0),i.push(0,0,1),o.push(m.x,m.y)}for(a=0,c=f.length;a<c;a++){var v=f[a],g=v[0]+u,y=v[1]+u,x=v[2]+u;n.push(g,y,x),s+=3}}this.setIndex(n),this.addAttribute("position",new Qn(r,3)),this.addAttribute("normal",new Qn(i,3)),this.addAttribute("uv",new Qn(o,2))}function Wa(t,e){if(e.shapes=[],Array.isArray(t))for(var n=0,r=t.length;n<r;n++){var i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}function qa(t,e){nr.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var n,r,i,o,a=[],s=Math.cos(Je.DEG2RAD*e),c=[0,0],h={},u=["a","b","c"];t.isBufferGeometry?(o=new kn).fromBufferGeometry(t):o=t.clone(),o.mergeVertices(),o.computeFaceNormals();for(var l=o.vertices,d=o.faces,p=0,f=d.length;p<f;p++)for(var m=d[p],v=0;v<3;v++)n=m[u[v]],r=m[u[(v+1)%3]],c[0]=Math.min(n,r),c[1]=Math.max(n,r),void 0===h[i=c[0]+","+c[1]]?h[i]={index1:c[0],index2:c[1],face1:p,face2:void 0}:h[i].face2=p;for(i in h){var g=h[i];if(void 0===g.face2||d[g.face1].normal.dot(d[g.face2].normal)<=s){var y=l[g.index1];a.push(y.x,y.y,y.z),y=l[g.index2],a.push(y.x,y.y,y.z)}}this.addAttribute("position",new Qn(a,3))}function Xa(t,e,n,r,i,o,a,s){kn.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s},this.fromBufferGeometry(new Ya(t,e,n,r,i,o,a,s)),this.mergeVertices()}function Ya(t,e,n,r,i,o,a,s){nr.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s};var c=this;t=void 0!==t?t:1,e=void 0!==e?e:1,n=n||1,r=Math.floor(r)||8,i=Math.floor(i)||1,o=void 0!==o&&o,a=void 0!==a?a:0,s=void 0!==s?s:2*Math.PI;var h=[],u=[],l=[],d=[],p=0,f=[],m=n/2,v=0;function g(n){var i,o,f,g=new Ze,y=new $e,x=0,b=!0===n?t:e,w=!0===n?1:-1;for(o=p,i=1;i<=r;i++)u.push(0,m*w,0),l.push(0,w,0),d.push(.5,.5),p++;for(f=p,i=0;i<=r;i++){var _=i/r*s+a,M=Math.cos(_),E=Math.sin(_);y.x=b*E,y.y=m*w,y.z=b*M,u.push(y.x,y.y,y.z),l.push(0,w,0),g.x=.5*M+.5,g.y=.5*E*w+.5,d.push(g.x,g.y),p++}for(i=0;i<r;i++){var S=o+i,T=f+i;!0===n?h.push(T,T+1,S):h.push(T+1,T,S),x+=3}c.addGroup(v,x,!0===n?1:2),v+=x}!function(){var o,g,y=new $e,x=new $e,b=0,w=(e-t)/n;for(g=0;g<=i;g++){var _=[],M=g/i,E=M*(e-t)+t;for(o=0;o<=r;o++){var S=o/r,T=S*s+a,A=Math.sin(T),L=Math.cos(T);x.x=E*A,x.y=-M*n+m,x.z=E*L,u.push(x.x,x.y,x.z),y.set(A,w,L).normalize(),l.push(y.x,y.y,y.z),d.push(S,1-M),_.push(p++)}f.push(_)}for(o=0;o<r;o++)for(g=0;g<i;g++){var C=f[g][o],P=f[g+1][o],R=f[g+1][o+1],O=f[g][o+1];h.push(C,P,O),h.push(P,R,O),b+=6}c.addGroup(v,b,0),v+=b}(),!1===o&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(h),this.addAttribute("position",new Qn(u,3)),this.addAttribute("normal",new Qn(l,3)),this.addAttribute("uv",new Qn(d,2))}function Ja(t,e,n,r,i,o,a){Xa.call(this,0,t,e,n,r,i,o,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:a}}function Za(t,e,n,r,i,o,a){Ya.call(this,0,t,e,n,r,i,o,a),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:a}}function Qa(t,e,n,r){kn.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},this.fromBufferGeometry(new Ka(t,e,n,r)),this.mergeVertices()}function Ka(t,e,n,r){nr.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},t=t||1,e=void 0!==e?Math.max(3,e):8,n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var i,o,a=[],s=[],c=[],h=[],u=new $e,l=new Ze;for(s.push(0,0,0),c.push(0,0,1),h.push(.5,.5),o=0,i=3;o<=e;o++,i+=3){var d=n+o/e*r;u.x=t*Math.cos(d),u.y=t*Math.sin(d),s.push(u.x,u.y,u.z),c.push(0,0,1),l.x=(s[i]/t+1)/2,l.y=(s[i+1]/t+1)/2,h.push(l.x,l.y)}for(i=1;i<=e;i++)a.push(i,i+1,0);this.setIndex(a),this.addAttribute("position",new Qn(s,3)),this.addAttribute("normal",new Qn(c,3)),this.addAttribute("uv",new Qn(h,2))}za.prototype=Object.create(kn.prototype),za.prototype.constructor=za,Na.prototype=Object.create(Oa.prototype),Na.prototype.constructor=Na,Ba.prototype=Object.create(kn.prototype),Ba.prototype.constructor=Ba,Ua.prototype=Object.create(nr.prototype),Ua.prototype.constructor=Ua,Fa.prototype=Object.create(kn.prototype),Fa.prototype.constructor=Fa,Ga.prototype=Object.create(nr.prototype),Ga.prototype.constructor=Ga,Ha.prototype=Object.create(kn.prototype),Ha.prototype.constructor=Ha,ka.prototype=Object.create(nr.prototype),ka.prototype.constructor=ka,Va.prototype=Object.create(kn.prototype),Va.prototype.constructor=Va,Va.prototype.toJSON=function(){var t=kn.prototype.toJSON.call(this);return Wa(this.parameters.shapes,t)},ja.prototype=Object.create(nr.prototype),ja.prototype.constructor=ja,ja.prototype.toJSON=function(){var t=nr.prototype.toJSON.call(this);return Wa(this.parameters.shapes,t)},qa.prototype=Object.create(nr.prototype),qa.prototype.constructor=qa,Xa.prototype=Object.create(kn.prototype),Xa.prototype.constructor=Xa,Ya.prototype=Object.create(nr.prototype),Ya.prototype.constructor=Ya,Ja.prototype=Object.create(Xa.prototype),Ja.prototype.constructor=Ja,Za.prototype=Object.create(Ya.prototype),Za.prototype.constructor=Za,Qa.prototype=Object.create(kn.prototype),Qa.prototype.constructor=Qa,Ka.prototype=Object.create(nr.prototype),Ka.prototype.constructor=Ka;var $a=Object.freeze({WireframeGeometry:Ho,ParametricGeometry:ko,ParametricBufferGeometry:Vo,TetrahedronGeometry:qo,TetrahedronBufferGeometry:Xo,OctahedronGeometry:Yo,OctahedronBufferGeometry:Jo,IcosahedronGeometry:Zo,IcosahedronBufferGeometry:Qo,DodecahedronGeometry:Ko,DodecahedronBufferGeometry:$o,PolyhedronGeometry:jo,PolyhedronBufferGeometry:Wo,TubeGeometry:ta,TubeBufferGeometry:ea,TorusKnotGeometry:na,TorusKnotBufferGeometry:ra,TorusGeometry:ia,TorusBufferGeometry:oa,TextGeometry:za,TextBufferGeometry:Na,SphereGeometry:Ba,SphereBufferGeometry:Ua,RingGeometry:Fa,RingBufferGeometry:Ga,PlaneGeometry:or,PlaneBufferGeometry:ar,LatheGeometry:Ha,LatheBufferGeometry:ka,ShapeGeometry:Va,ShapeBufferGeometry:ja,ExtrudeGeometry:Ra,ExtrudeBufferGeometry:Oa,EdgesGeometry:qa,ConeGeometry:Ja,ConeBufferGeometry:Za,CylinderGeometry:Xa,CylinderBufferGeometry:Ya,CircleGeometry:Qa,CircleBufferGeometry:Ka,BoxGeometry:rr,BoxBufferGeometry:ir});function ts(t){br.call(this),this.type="ShadowMaterial",this.color=new En(0),this.transparent=!0,this.setValues(t)}function es(t){wr.call(this,t),this.type="RawShaderMaterial"}function ns(t){br.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new En(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new En(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Xe,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function rs(t){ns.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(t)}function is(t){br.call(this),this.type="MeshPhongMaterial",this.color=new En(16777215),this.specular=new En(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new En(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Xe,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ut,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function os(t){is.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(t)}function as(t){br.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Xe,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function ss(t){br.call(this),this.type="MeshLambertMaterial",this.color=new En(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new En(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ut,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function cs(t){if(br.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new En(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Xe,this.normalScale=new Ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.lights=!1,this.setValues(t),null===this.matcap){var e=document.createElement("canvas");e.width=1,e.height=1;var n=e.getContext("2d");n.fillStyle="#fff",n.fillRect(0,0,1,1),this.matcap=new THREE.CanvasTexture(e)}}function hs(t){Ro.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}ts.prototype=Object.create(br.prototype),ts.prototype.constructor=ts,ts.prototype.isShadowMaterial=!0,ts.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this},es.prototype=Object.create(wr.prototype),es.prototype.constructor=es,es.prototype.isRawShaderMaterial=!0,ns.prototype=Object.create(br.prototype),ns.prototype.constructor=ns,ns.prototype.isMeshStandardMaterial=!0,ns.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},rs.prototype=Object.create(ns.prototype),rs.prototype.constructor=rs,rs.prototype.isMeshPhysicalMaterial=!0,rs.prototype.copy=function(t){return ns.prototype.copy.call(this,t),this.defines={PHYSICAL:""},this.reflectivity=t.reflectivity,this.clearCoat=t.clearCoat,this.clearCoatRoughness=t.clearCoatRoughness,this},is.prototype=Object.create(br.prototype),is.prototype.constructor=is,is.prototype.isMeshPhongMaterial=!0,is.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},os.prototype=Object.create(is.prototype),os.prototype.constructor=os,os.prototype.isMeshToonMaterial=!0,os.prototype.copy=function(t){return is.prototype.copy.call(this,t),this.gradientMap=t.gradientMap,this},as.prototype=Object.create(br.prototype),as.prototype.constructor=as,as.prototype.isMeshNormalMaterial=!0,as.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},ss.prototype=Object.create(br.prototype),ss.prototype.constructor=ss,ss.prototype.isMeshLambertMaterial=!0,ss.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},cs.prototype=Object.create(br.prototype),cs.prototype.constructor=cs,cs.prototype.isMeshMatcapMaterial=!0,cs.prototype.copy=function(t){return br.prototype.copy.call(this,t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},hs.prototype=Object.create(Ro.prototype),hs.prototype.constructor=hs,hs.prototype.isLineDashedMaterial=!0,hs.prototype.copy=function(t){return Ro.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var us=Object.freeze({ShadowMaterial:ts,SpriteMaterial:So,RawShaderMaterial:es,ShaderMaterial:wr,PointsMaterial:zo,MeshPhysicalMaterial:rs,MeshStandardMaterial:ns,MeshPhongMaterial:is,MeshToonMaterial:os,MeshNormalMaterial:as,MeshLambertMaterial:ss,MeshDepthMaterial:Qi,MeshDistanceMaterial:Ki,MeshBasicMaterial:Er,MeshMatcapMaterial:cs,LineDashedMaterial:hs,LineBasicMaterial:Ro,Material:br}),ls={arraySlice:function(t,e,n){return ls.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,n=new Array(e),r=0;r!==e;++r)n[r]=r;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){for(var r=t.length,i=new t.constructor(r),o=0,a=0;a!==r;++o)for(var s=n[o]*e,c=0;c!==e;++c)i[a++]=t[s+c];return i},flattenJSON:function(t,e,n,r){for(var i=1,o=t[0];void 0!==o&&void 0===o[r];)o=t[i++];if(void 0!==o){var a=o[r];if(void 0!==a)if(Array.isArray(a))do{void 0!==(a=o[r])&&(e.push(o.time),n.push.apply(n,a)),o=t[i++]}while(void 0!==o);else if(void 0!==a.toArray)do{void 0!==(a=o[r])&&(e.push(o.time),a.toArray(n,n.length)),o=t[i++]}while(void 0!==o);else do{void 0!==(a=o[r])&&(e.push(o.time),n.push(a)),o=t[i++]}while(void 0!==o)}}};function ds(t,e,n,r){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new e.constructor(n),this.sampleValues=e,this.valueSize=n}function ps(t,e,n,r){ds.call(this,t,e,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function fs(t,e,n,r){ds.call(this,t,e,n,r)}function ms(t,e,n,r){ds.call(this,t,e,n,r)}function vs(t,e,n,r){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=ls.convertArray(e,this.TimeBufferType),this.values=ls.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}function gs(t,e,n){vs.call(this,t,e,n)}function ys(t,e,n,r){vs.call(this,t,e,n,r)}function xs(t,e,n,r){vs.call(this,t,e,n,r)}function bs(t,e,n,r){ds.call(this,t,e,n,r)}function ws(t,e,n,r){vs.call(this,t,e,n,r)}function _s(t,e,n,r){vs.call(this,t,e,n,r)}function Ms(t,e,n,r){vs.call(this,t,e,n,r)}function Es(t,e,n){this.name=t,this.tracks=n,this.duration=void 0!==e?e:-1,this.uuid=Je.generateUUID(),this.duration<0&&this.resetDuration()}function Ss(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return xs;case"vector":case"vector2":case"vector3":case"vector4":return Ms;case"color":return ys;case"quaternion":return ws;case"bool":case"boolean":return gs;case"string":return _s}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){var n=[],r=[];ls.flattenJSON(t.keys,n,r,"value"),t.times=n,t.values=r}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}Object.assign(ds.prototype,{evaluate:function(t){var e=this.parameterPositions,n=this._cachedIndex,r=e[n],i=e[n-1];t:{e:{var o;n:{r:if(!(t<r)){for(var a=n+2;;){if(void 0===r){if(t<i)break r;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,i)}if(n===a)break;if(i=r,t<(r=e[++n]))break e}o=e.length;break n}if(t>=i)break t;var s=e[1];t<s&&(n=2,i=s);for(a=n-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(n===a)break;if(r=i,t>=(i=e[--n-1]))break e}o=n,n=0}for(;n<o;){var c=n+o>>>1;t<e[c]?o=c:n=c+1}if(r=e[n],void 0===(i=e[n-1]))return this._cachedIndex=0,this.beforeStart_(0,t,r);if(void 0===r)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,i,t)}this._cachedIndex=n,this.intervalChanged_(n,i,r)}return this.interpolate_(n,i,t,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=t*r,o=0;o!==r;++o)e[o]=n[i+o];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(ds.prototype,{beforeStart_:ds.prototype.copySampleValue_,afterEnd_:ds.prototype.copySampleValue_}),ps.prototype=Object.assign(Object.create(ds.prototype),{constructor:ps,DefaultSettings_:{endingStart:Re,endingEnd:Re},intervalChanged_:function(t,e,n){var r=this.parameterPositions,i=t-2,o=t+1,a=r[i],s=r[o];if(void 0===a)switch(this.getSettings_().endingStart){case Oe:i=t,a=2*e-n;break;case Ie:a=e+r[i=r.length-2]-r[i+1];break;default:i=t,a=n}if(void 0===s)switch(this.getSettings_().endingEnd){case Oe:o=t,s=2*n-e;break;case Ie:o=1,s=n+r[1]-r[0];break;default:o=t-1,s=e}var c=.5*(n-e),h=this.valueSize;this._weightPrev=c/(e-a),this._weightNext=c/(s-n),this._offsetPrev=i*h,this._offsetNext=o*h},interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=t*a,c=s-a,h=this._offsetPrev,u=this._offsetNext,l=this._weightPrev,d=this._weightNext,p=(n-e)/(r-e),f=p*p,m=f*p,v=-l*m+2*l*f-l*p,g=(1+l)*m+(-1.5-2*l)*f+(-.5+l)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,b=0;b!==a;++b)i[b]=v*o[h+b]+g*o[c+b]+y*o[s+b]+x*o[u+b];return i}}),fs.prototype=Object.assign(Object.create(ds.prototype),{constructor:fs,interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=t*a,c=s-a,h=(n-e)/(r-e),u=1-h,l=0;l!==a;++l)i[l]=o[c+l]*u+o[s+l]*h;return i}}),ms.prototype=Object.assign(Object.create(ds.prototype),{constructor:ms,interpolate_:function(t){return this.copySampleValue_(t-1)}}),Object.assign(vs,{toJSON:function(t){var e,n=t.constructor;if(void 0!==n.toJSON)e=n.toJSON(t);else{e={name:t.name,times:ls.convertArray(t.times,Array),values:ls.convertArray(t.values,Array)};var r=t.getInterpolation();r!==t.DefaultInterpolation&&(e.interpolation=r)}return e.type=t.ValueTypeName,e}}),Object.assign(vs.prototype,{constructor:vs,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:Ce,InterpolantFactoryMethodDiscrete:function(t){return new ms(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new fs(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new ps(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case Le:e=this.InterpolantFactoryMethodDiscrete;break;case Ce:e=this.InterpolantFactoryMethodLinear;break;case Pe:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=e,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Le;case this.InterpolantFactoryMethodLinear:return Ce;case this.InterpolantFactoryMethodSmooth:return Pe}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,n=0,r=e.length;n!==r;++n)e[n]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,n=0,r=e.length;n!==r;++n)e[n]*=t;return this},trim:function(t,e){for(var n=this.times,r=n.length,i=0,o=r-1;i!==r&&n[i]<t;)++i;for(;-1!==o&&n[o]>e;)--o;if(++o,0!==i||o!==r){i>=o&&(i=(o=Math.max(o,1))-1);var a=this.getValueSize();this.times=ls.arraySlice(n,i,o),this.values=ls.arraySlice(this.values,i*a,o*a)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var n=this.times,r=this.values,i=n.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var o=null,a=0;a!==i;a++){var s=n[a];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,s),t=!1;break}if(null!==o&&o>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,s,o),t=!1;break}o=s}if(void 0!==r&&ls.isTypedArray(r)){a=0;for(var c=r.length;a!==c;++a){var h=r[a];if(isNaN(h)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,h),t=!1;break}}}return t},optimize:function(){for(var t=this.times,e=this.values,n=this.getValueSize(),r=this.getInterpolation()===Pe,i=1,o=t.length-1,a=1;a<o;++a){var s=!1,c=t[a];if(c!==t[a+1]&&(1!==a||c!==c[0]))if(r)s=!0;else for(var h=a*n,u=h-n,l=h+n,d=0;d!==n;++d){var p=e[h+d];if(p!==e[u+d]||p!==e[l+d]){s=!0;break}}if(s){if(a!==i){t[i]=t[a];var f=a*n,m=i*n;for(d=0;d!==n;++d)e[m+d]=e[f+d]}++i}}if(o>0){t[i]=t[o];for(f=o*n,m=i*n,d=0;d!==n;++d)e[m+d]=e[f+d];++i}return i!==t.length&&(this.times=ls.arraySlice(t,0,i),this.values=ls.arraySlice(e,0,i*n)),this}}),gs.prototype=Object.assign(Object.create(vs.prototype),{constructor:gs,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:Le,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),ys.prototype=Object.assign(Object.create(vs.prototype),{constructor:ys,ValueTypeName:"color"}),xs.prototype=Object.assign(Object.create(vs.prototype),{constructor:xs,ValueTypeName:"number"}),bs.prototype=Object.assign(Object.create(ds.prototype),{constructor:bs,interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=t*a,c=(n-e)/(r-e),h=s+a;s!==h;s+=4)Ke.slerpFlat(i,0,o,s-a,o,s,c);return i}}),ws.prototype=Object.assign(Object.create(vs.prototype),{constructor:ws,ValueTypeName:"quaternion",DefaultInterpolation:Ce,InterpolantFactoryMethodLinear:function(t){return new bs(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),_s.prototype=Object.assign(Object.create(vs.prototype),{constructor:_s,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:Le,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Ms.prototype=Object.assign(Object.create(vs.prototype),{constructor:Ms,ValueTypeName:"vector"}),Object.assign(Es,{parse:function(t){for(var e=[],n=t.tracks,r=1/(t.fps||1),i=0,o=n.length;i!==o;++i)e.push(Ss(n[i]).scale(r));return new Es(t.name,t.duration,e)},toJSON:function(t){for(var e=[],n=t.tracks,r={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},i=0,o=n.length;i!==o;++i)e.push(vs.toJSON(n[i]));return r},CreateFromMorphTargetSequence:function(t,e,n,r){for(var i=e.length,o=[],a=0;a<i;a++){var s=[],c=[];s.push((a+i-1)%i,a,(a+1)%i),c.push(0,1,0);var h=ls.getKeyframeOrder(s);s=ls.sortedArray(s,1,h),c=ls.sortedArray(c,1,h),r||0!==s[0]||(s.push(i),c.push(c[0])),o.push(new xs(".morphTargetInfluences["+e[a].name+"]",s,c).scale(1/n))}return new Es(t,-1,o)},findByName:function(t,e){var n=t;if(!Array.isArray(t)){var r=t;n=r.geometry&&r.geometry.animations||r.animations}for(var i=0;i<n.length;i++)if(n[i].name===e)return n[i];return null},CreateClipsFromMorphTargetSequences:function(t,e,n){for(var r={},i=/^([\w-]*?)([\d]+)$/,o=0,a=t.length;o<a;o++){var s=t[o],c=s.name.match(i);if(c&&c.length>1){var h=r[l=c[1]];h||(r[l]=h=[]),h.push(s)}}var u=[];for(var l in r)u.push(Es.CreateFromMorphTargetSequence(l,r[l],e,n));return u},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(t,e,n,r,i){if(0!==n.length){var o=[],a=[];ls.flattenJSON(n,o,a,r),0!==o.length&&i.push(new t(e,o,a))}},r=[],i=t.name||"default",o=t.length||-1,a=t.fps||30,s=t.hierarchy||[],c=0;c<s.length;c++){var h=s[c].keys;if(h&&0!==h.length)if(h[0].morphTargets){for(var u={},l=0;l<h.length;l++)if(h[l].morphTargets)for(var d=0;d<h[l].morphTargets.length;d++)u[h[l].morphTargets[d]]=-1;for(var p in u){var f=[],m=[];for(d=0;d!==h[l].morphTargets.length;++d){var v=h[l];f.push(v.time),m.push(v.morphTarget===p?1:0)}r.push(new xs(".morphTargetInfluence["+p+"]",f,m))}o=u.length*(a||1)}else{var g=".bones["+e[c].name+"]";n(Ms,g+".position",h,"pos",r),n(ws,g+".quaternion",h,"rot",r),n(Ms,g+".scale",h,"scl",r)}}return 0===r.length?null:new Es(i,o,r)}}),Object.assign(Es.prototype,{resetDuration:function(){for(var t=0,e=0,n=this.tracks.length;e!==n;++e){var r=this.tracks[e];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},validate:function(){for(var t=!0,e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}});var Ts={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function As(t,e,n){var r=this,i=!1,o=0,a=0,s=void 0;this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){a++,!1===i&&void 0!==r.onStart&&r.onStart(t,o,a),i=!0},this.itemEnd=function(t){o++,void 0!==r.onProgress&&r.onProgress(t,o,a),o===a&&(i=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(t){void 0!==r.onError&&r.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this}}var Ls=new As,Cs={};function Ps(t){this.manager=void 0!==t?t:Ls}function Rs(t){this.manager=void 0!==t?t:Ls}function Os(t){this.manager=void 0!==t?t:Ls,this._parser=null}function Is(t){this.manager=void 0!==t?t:Ls,this._parser=null}function Ds(t){this.manager=void 0!==t?t:Ls}function zs(t){this.manager=void 0!==t?t:Ls}function Ns(t){this.manager=void 0!==t?t:Ls}function Bs(){this.type="Curve",this.arcLengthDivisions=200}function Us(t,e,n,r,i,o,a,s){Bs.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=n||1,this.yRadius=r||1,this.aStartAngle=i||0,this.aEndAngle=o||2*Math.PI,this.aClockwise=a||!1,this.aRotation=s||0}function Fs(t,e,n,r,i,o){Us.call(this,t,e,n,n,r,i,o),this.type="ArcCurve"}function Gs(){var t=0,e=0,n=0,r=0;function i(i,o,a,s){t=i,e=a,n=-3*i+3*o-2*a-s,r=2*i-2*o+a+s}return{initCatmullRom:function(t,e,n,r,o){i(e,n,o*(n-t),o*(r-e))},initNonuniformCatmullRom:function(t,e,n,r,o,a,s){var c=(e-t)/o-(n-t)/(o+a)+(n-e)/a,h=(n-e)/a-(r-e)/(a+s)+(r-n)/s;i(e,n,c*=a,h*=a)},calc:function(i){var o=i*i;return t+e*i+n*o+r*(o*i)}}}Object.assign(Ps.prototype,{load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,o=Ts.get(t);if(void 0!==o)return i.manager.itemStart(t),setTimeout((function(){e&&e(o),i.manager.itemEnd(t)}),0),o;if(void 0===Cs[t]){var a=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(a){var s=a[1],c=!!a[2],h=a[3];h=decodeURIComponent(h),c&&(h=atob(h));try{var u,l=(this.responseType||"").toLowerCase();switch(l){case"arraybuffer":case"blob":for(var d=new Uint8Array(h.length),p=0;p<h.length;p++)d[p]=h.charCodeAt(p);u="blob"===l?new Blob([d.buffer],{type:s}):d.buffer;break;case"document":var f=new DOMParser;u=f.parseFromString(h,s);break;case"json":u=JSON.parse(h);break;default:u=h}setTimeout((function(){e&&e(u),i.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){r&&r(e),i.manager.itemError(t),i.manager.itemEnd(t)}),0)}}else{Cs[t]=[],Cs[t].push({onLoad:e,onProgress:n,onError:r});var m=new XMLHttpRequest;for(var v in m.open("GET",t,!0),m.addEventListener("load",(function(e){var n=this.response;Ts.add(t,n);var r=Cs[t];if(delete Cs[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var o=0,a=r.length;o<a;o++){(s=r[o]).onLoad&&s.onLoad(n)}i.manager.itemEnd(t)}else{for(o=0,a=r.length;o<a;o++){var s;(s=r[o]).onError&&s.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}}),!1),m.addEventListener("progress",(function(e){for(var n=Cs[t],r=0,i=n.length;r<i;r++){var o=n[r];o.onProgress&&o.onProgress(e)}}),!1),m.addEventListener("error",(function(e){var n=Cs[t];delete Cs[t];for(var r=0,o=n.length;r<o;r++){var a=n[r];a.onError&&a.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}),!1),m.addEventListener("abort",(function(e){var n=Cs[t];delete Cs[t];for(var r=0,o=n.length;r<o;r++){var a=n[r];a.onError&&a.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return i.manager.itemStart(t),m}Cs[t].push({onLoad:e,onProgress:n,onError:r})},setPath:function(t){return this.path=t,this},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),Object.assign(Rs.prototype,{load:function(t,e,n,r){var i=this,o=new Ps(i.manager);o.setPath(i.path),o.load(t,(function(t){e(i.parse(JSON.parse(t)))}),n,r)},parse:function(t,e){for(var n=[],r=0;r<t.length;r++){var i=Es.parse(t[r]);n.push(i)}e(n)},setPath:function(t){return this.path=t,this}}),Object.assign(Os.prototype,{load:function(t,e,n,r){var i=this,o=[],a=new Uo;a.image=o;var s=new Ps(this.manager);function c(c){s.load(t[c],(function(t){var n=i._parser(t,!0);o[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(h+=1)&&(1===n.mipmapCount&&(a.minFilter=Ot),a.format=n.format,a.needsUpdate=!0,e&&e(a))}),n,r)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(t))for(var h=0,u=0,l=t.length;u<l;++u)c(u);else s.load(t,(function(t){var n=i._parser(t,!0);if(n.isCubemap)for(var r=n.mipmaps.length/n.mipmapCount,s=0;s<r;s++){o[s]={mipmaps:[]};for(var c=0;c<n.mipmapCount;c++)o[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+c]),o[s].format=n.format,o[s].width=n.width,o[s].height=n.height}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=Ot),a.format=n.format,a.needsUpdate=!0,e&&e(a)}),n,r);return a},setPath:function(t){return this.path=t,this}}),Object.assign(Is.prototype,{load:function(t,e,n,r){var i=this,o=new pn,a=new Ps(this.manager);return a.setResponseType("arraybuffer"),a.setPath(this.path),a.load(t,(function(t){var n=i._parser(t);n&&(void 0!==n.image?o.image=n.image:void 0!==n.data&&(o.image.width=n.width,o.image.height=n.height,o.image.data=n.data),o.wrapS=void 0!==n.wrapS?n.wrapS:At,o.wrapT=void 0!==n.wrapT?n.wrapT:At,o.magFilter=void 0!==n.magFilter?n.magFilter:Ot,o.minFilter=void 0!==n.minFilter?n.minFilter:Dt,o.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(o.format=n.format),void 0!==n.type&&(o.type=n.type),void 0!==n.mipmaps&&(o.mipmaps=n.mipmaps),1===n.mipmapCount&&(o.minFilter=Ot),o.needsUpdate=!0,e&&e(o,n))}),n,r),o},setPath:function(t){return this.path=t,this}}),Object.assign(Ds.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,o=Ts.get(t);if(void 0!==o)return i.manager.itemStart(t),setTimeout((function(){e&&e(o),i.manager.itemEnd(t)}),0),o;var a=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){a.removeEventListener("load",s,!1),a.removeEventListener("error",c,!1),Ts.add(t,this),e&&e(this),i.manager.itemEnd(t)}function c(e){a.removeEventListener("load",s,!1),a.removeEventListener("error",c,!1),r&&r(e),i.manager.itemError(t),i.manager.itemEnd(t)}return a.addEventListener("load",s,!1),a.addEventListener("error",c,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),i.manager.itemStart(t),a.src=t,a},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(zs.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=new Br,o=new Ds(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);var a=0;function s(n){o.load(t[n],(function(t){i.images[n]=t,6===++a&&(i.needsUpdate=!0,e&&e(i))}),void 0,r)}for(var c=0;c<t.length;++c)s(c);return i},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Ns.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=new hn,o=new Ds(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(t,(function(n){i.image=n;var r=t.search(/\.jpe?g$/i)>0||0===t.search(/^data\:image\/jpeg/);i.format=r?Yt:Jt,i.needsUpdate=!0,void 0!==e&&e(i)}),n,r),i},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Bs.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var n=this.getUtoTmapping(t);return this.getPoint(n,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,n,r=[],i=this.getPoint(0),o=0;for(r.push(0),n=1;n<=t;n++)o+=(e=this.getPoint(n/t)).distanceTo(i),r.push(o),i=e;return this.cacheArcLengths=r,r},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var n,r=this.getLengths(),i=0,o=r.length;n=e||t*r[o-1];for(var a,s=0,c=o-1;s<=c;)if((a=r[i=Math.floor(s+(c-s)/2)]-n)<0)s=i+1;else{if(!(a>0)){c=i;break}c=i-1}if(r[i=c]===n)return i/(o-1);var h=r[i];return(i+(n-h)/(r[i+1]-h))/(o-1)},getTangent:function(t){var e=t-1e-4,n=t+1e-4;e<0&&(e=0),n>1&&(n=1);var r=this.getPoint(e);return this.getPoint(n).clone().sub(r).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var n,r,i,o=new $e,a=[],s=[],c=[],h=new $e,u=new Qe;for(n=0;n<=t;n++)r=n/t,a[n]=this.getTangentAt(r),a[n].normalize();s[0]=new $e,c[0]=new $e;var l=Number.MAX_VALUE,d=Math.abs(a[0].x),p=Math.abs(a[0].y),f=Math.abs(a[0].z);for(d<=l&&(l=d,o.set(1,0,0)),p<=l&&(l=p,o.set(0,1,0)),f<=l&&o.set(0,0,1),h.crossVectors(a[0],o).normalize(),s[0].crossVectors(a[0],h),c[0].crossVectors(a[0],s[0]),n=1;n<=t;n++)s[n]=s[n-1].clone(),c[n]=c[n-1].clone(),h.crossVectors(a[n-1],a[n]),h.length()>Number.EPSILON&&(h.normalize(),i=Math.acos(Je.clamp(a[n-1].dot(a[n]),-1,1)),s[n].applyMatrix4(u.makeRotationAxis(h,i))),c[n].crossVectors(a[n],s[n]);if(!0===e)for(i=Math.acos(Je.clamp(s[0].dot(s[t]),-1,1)),i/=t,a[0].dot(h.crossVectors(s[0],s[t]))>0&&(i=-i),n=1;n<=t;n++)s[n].applyMatrix4(u.makeRotationAxis(a[n],i*n)),c[n].crossVectors(a[n],s[n]);return{tangents:a,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),Us.prototype=Object.create(Bs.prototype),Us.prototype.constructor=Us,Us.prototype.isEllipseCurve=!0,Us.prototype.getPoint=function(t,e){for(var n=e||new Ze,r=2*Math.PI,i=this.aEndAngle-this.aStartAngle,o=Math.abs(i)<Number.EPSILON;i<0;)i+=r;for(;i>r;)i-=r;i<Number.EPSILON&&(i=o?0:r),!0!==this.aClockwise||o||(i===r?i=-r:i-=r);var a=this.aStartAngle+t*i,s=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){var h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),l=s-this.aX,d=c-this.aY;s=l*h-d*u+this.aX,c=l*u+d*h+this.aY}return n.set(s,c)},Us.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Us.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},Us.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Fs.prototype=Object.create(Us.prototype),Fs.prototype.constructor=Fs,Fs.prototype.isArcCurve=!0;var Hs=new $e,ks=new Gs,Vs=new Gs,js=new Gs;function Ws(t,e,n,r){Bs.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=n||"centripetal",this.tension=r||.5}function qs(t,e,n,r,i){var o=.5*(r-e),a=.5*(i-n),s=t*t;return(2*n-2*r+o+a)*(t*s)+(-3*n+3*r-2*o-a)*s+o*t+n}function Xs(t,e,n,r){return function(t,e){var n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,r)}function Ys(t,e,n,r,i){return function(t,e){var n=1-t;return n*n*n*e}(t,e)+function(t,e){var n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,r)+function(t,e){return t*t*t*e}(t,i)}function Js(t,e,n,r){Bs.call(this),this.type="CubicBezierCurve",this.v0=t||new Ze,this.v1=e||new Ze,this.v2=n||new Ze,this.v3=r||new Ze}function Zs(t,e,n,r){Bs.call(this),this.type="CubicBezierCurve3",this.v0=t||new $e,this.v1=e||new $e,this.v2=n||new $e,this.v3=r||new $e}function Qs(t,e){Bs.call(this),this.type="LineCurve",this.v1=t||new Ze,this.v2=e||new Ze}function Ks(t,e){Bs.call(this),this.type="LineCurve3",this.v1=t||new $e,this.v2=e||new $e}function $s(t,e,n){Bs.call(this),this.type="QuadraticBezierCurve",this.v0=t||new Ze,this.v1=e||new Ze,this.v2=n||new Ze}function tc(t,e,n){Bs.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new $e,this.v1=e||new $e,this.v2=n||new $e}function ec(t){Bs.call(this),this.type="SplineCurve",this.points=t||[]}Ws.prototype=Object.create(Bs.prototype),Ws.prototype.constructor=Ws,Ws.prototype.isCatmullRomCurve3=!0,Ws.prototype.getPoint=function(t,e){var n,r,i,o,a=e||new $e,s=this.points,c=s.length,h=(c-(this.closed?0:1))*t,u=Math.floor(h),l=h-u;if(this.closed?u+=u>0?0:(Math.floor(Math.abs(u)/c)+1)*c:0===l&&u===c-1&&(u=c-2,l=1),this.closed||u>0?n=s[(u-1)%c]:(Hs.subVectors(s[0],s[1]).add(s[0]),n=Hs),r=s[u%c],i=s[(u+1)%c],this.closed||u+2<c?o=s[(u+2)%c]:(Hs.subVectors(s[c-1],s[c-2]).add(s[c-1]),o=Hs),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(n.distanceToSquared(r),d),f=Math.pow(r.distanceToSquared(i),d),m=Math.pow(i.distanceToSquared(o),d);f<1e-4&&(f=1),p<1e-4&&(p=f),m<1e-4&&(m=f),ks.initNonuniformCatmullRom(n.x,r.x,i.x,o.x,p,f,m),Vs.initNonuniformCatmullRom(n.y,r.y,i.y,o.y,p,f,m),js.initNonuniformCatmullRom(n.z,r.z,i.z,o.z,p,f,m)}else"catmullrom"===this.curveType&&(ks.initCatmullRom(n.x,r.x,i.x,o.x,this.tension),Vs.initCatmullRom(n.y,r.y,i.y,o.y,this.tension),js.initCatmullRom(n.z,r.z,i.z,o.z,this.tension));return a.set(ks.calc(l),Vs.calc(l),js.calc(l)),a},Ws.prototype.copy=function(t){Bs.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push(r.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Ws.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var r=this.points[e];t.points.push(r.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},Ws.prototype.fromJSON=function(t){Bs.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push((new $e).fromArray(r))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Js.prototype=Object.create(Bs.prototype),Js.prototype.constructor=Js,Js.prototype.isCubicBezierCurve=!0,Js.prototype.getPoint=function(t,e){var n=e||new Ze,r=this.v0,i=this.v1,o=this.v2,a=this.v3;return n.set(Ys(t,r.x,i.x,o.x,a.x),Ys(t,r.y,i.y,o.y,a.y)),n},Js.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Js.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Js.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Zs.prototype=Object.create(Bs.prototype),Zs.prototype.constructor=Zs,Zs.prototype.isCubicBezierCurve3=!0,Zs.prototype.getPoint=function(t,e){var n=e||new $e,r=this.v0,i=this.v1,o=this.v2,a=this.v3;return n.set(Ys(t,r.x,i.x,o.x,a.x),Ys(t,r.y,i.y,o.y,a.y),Ys(t,r.z,i.z,o.z,a.z)),n},Zs.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Zs.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Zs.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Qs.prototype=Object.create(Bs.prototype),Qs.prototype.constructor=Qs,Qs.prototype.isLineCurve=!0,Qs.prototype.getPoint=function(t,e){var n=e||new Ze;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},Qs.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Qs.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Qs.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Qs.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Qs.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ks.prototype=Object.create(Bs.prototype),Ks.prototype.constructor=Ks,Ks.prototype.isLineCurve3=!0,Ks.prototype.getPoint=function(t,e){var n=e||new $e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},Ks.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Ks.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ks.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ks.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},$s.prototype=Object.create(Bs.prototype),$s.prototype.constructor=$s,$s.prototype.isQuadraticBezierCurve=!0,$s.prototype.getPoint=function(t,e){var n=e||new Ze,r=this.v0,i=this.v1,o=this.v2;return n.set(Xs(t,r.x,i.x,o.x),Xs(t,r.y,i.y,o.y)),n},$s.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},$s.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},$s.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},tc.prototype=Object.create(Bs.prototype),tc.prototype.constructor=tc,tc.prototype.isQuadraticBezierCurve3=!0,tc.prototype.getPoint=function(t,e){var n=e||new $e,r=this.v0,i=this.v1,o=this.v2;return n.set(Xs(t,r.x,i.x,o.x),Xs(t,r.y,i.y,o.y),Xs(t,r.z,i.z,o.z)),n},tc.prototype.copy=function(t){return Bs.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},tc.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},tc.prototype.fromJSON=function(t){return Bs.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},ec.prototype=Object.create(Bs.prototype),ec.prototype.constructor=ec,ec.prototype.isSplineCurve=!0,ec.prototype.getPoint=function(t,e){var n=e||new Ze,r=this.points,i=(r.length-1)*t,o=Math.floor(i),a=i-o,s=r[0===o?o:o-1],c=r[o],h=r[o>r.length-2?r.length-1:o+1],u=r[o>r.length-3?r.length-1:o+2];return n.set(qs(a,s.x,c.x,h.x,u.x),qs(a,s.y,c.y,h.y,u.y)),n},ec.prototype.copy=function(t){Bs.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push(r.clone())}return this},ec.prototype.toJSON=function(){var t=Bs.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var r=this.points[e];t.points.push(r.toArray())}return t},ec.prototype.fromJSON=function(t){Bs.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push((new Ze).fromArray(r))}return this};var nc=Object.freeze({ArcCurve:Fs,CatmullRomCurve3:Ws,CubicBezierCurve:Js,CubicBezierCurve3:Zs,EllipseCurve:Us,LineCurve:Qs,LineCurve3:Ks,QuadraticBezierCurve:$s,QuadraticBezierCurve3:tc,SplineCurve:ec});function rc(){Bs.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function ic(t){rc.call(this),this.type="Path",this.currentPoint=new Ze,t&&this.setFromPoints(t)}function oc(t){ic.call(this,t),this.uuid=Je.generateUUID(),this.type="Shape",this.holes=[]}function ac(t,e){Un.call(this),this.type="Light",this.color=new En(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function sc(t,e,n){ac.call(this,t,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Un.DefaultUp),this.updateMatrix(),this.groundColor=new En(e)}function cc(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new Ze(512,512),this.map=null,this.matrix=new Qe}function hc(){cc.call(this,new oo(50,1,.5,500))}function uc(t,e,n,r,i,o){ac.call(this,t,e),this.type="SpotLight",this.position.copy(Un.DefaultUp),this.updateMatrix(),this.target=new Un,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==r?r:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==o?o:1,this.shadow=new hc}function lc(t,e,n,r){ac.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==r?r:1,this.shadow=new cc(new oo(90,1,.5,500))}function dc(t,e,n,r,i,o){io.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==t?t:-1,this.right=void 0!==e?e:1,this.top=void 0!==n?n:1,this.bottom=void 0!==r?r:-1,this.near=void 0!==i?i:.1,this.far=void 0!==o?o:2e3,this.updateProjectionMatrix()}function pc(){cc.call(this,new dc(-5,5,5,-5,.5,500))}function fc(t,e){ac.call(this,t,e),this.type="DirectionalLight",this.position.copy(Un.DefaultUp),this.updateMatrix(),this.target=new Un,this.shadow=new pc}function mc(t,e){ac.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function vc(t,e,n,r){ac.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==r?r:10}function gc(t){this.manager=void 0!==t?t:Ls,this.textures={}}rc.prototype=Object.assign(Object.create(Bs.prototype),{constructor:rc,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Qs(e,t))},getPoint:function(t){for(var e=t*this.getLength(),n=this.getCurveLengths(),r=0;r<n.length;){if(n[r]>=e){var i=n[r]-e,o=this.curves[r],a=o.getLength(),s=0===a?0:1-i/a;return o.getPointAt(s)}r++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,n=0,r=this.curves.length;n<r;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,n=[],r=0,i=this.curves;r<i.length;r++)for(var o=i[r],a=o&&o.isEllipseCurve?2*t:o&&(o.isLineCurve||o.isLineCurve3)?1:o&&o.isSplineCurve?t*o.points.length:t,s=o.getPoints(a),c=0;c<s.length;c++){var h=s[c];e&&e.equals(h)||(n.push(h),e=h)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(t){Bs.prototype.copy.call(this,t),this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var r=t.curves[e];this.curves.push(r.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=Bs.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,n=this.curves.length;e<n;e++){var r=this.curves[e];t.curves.push(r.toJSON())}return t},fromJSON:function(t){Bs.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var r=t.curves[e];this.curves.push((new nc[r.type]).fromJSON(r))}return this}}),ic.prototype=Object.assign(Object.create(rc.prototype),{constructor:ic,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y)},moveTo:function(t,e){this.currentPoint.set(t,e)},lineTo:function(t,e){var n=new Qs(this.currentPoint.clone(),new Ze(t,e));this.curves.push(n),this.currentPoint.set(t,e)},quadraticCurveTo:function(t,e,n,r){var i=new $s(this.currentPoint.clone(),new Ze(t,e),new Ze(n,r));this.curves.push(i),this.currentPoint.set(n,r)},bezierCurveTo:function(t,e,n,r,i,o){var a=new Js(this.currentPoint.clone(),new Ze(t,e),new Ze(n,r),new Ze(i,o));this.curves.push(a),this.currentPoint.set(i,o)},splineThru:function(t){var e=new ec([this.currentPoint.clone()].concat(t));this.curves.push(e),this.currentPoint.copy(t[t.length-1])},arc:function(t,e,n,r,i,o){var a=this.currentPoint.x,s=this.currentPoint.y;this.absarc(t+a,e+s,n,r,i,o)},absarc:function(t,e,n,r,i,o){this.absellipse(t,e,n,n,r,i,o)},ellipse:function(t,e,n,r,i,o,a,s){var c=this.currentPoint.x,h=this.currentPoint.y;this.absellipse(t+c,e+h,n,r,i,o,a,s)},absellipse:function(t,e,n,r,i,o,a,s){var c=new Us(t,e,n,r,i,o,a,s);if(this.curves.length>0){var h=c.getPoint(0);h.equals(this.currentPoint)||this.lineTo(h.x,h.y)}this.curves.push(c);var u=c.getPoint(1);this.currentPoint.copy(u)},copy:function(t){return rc.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=rc.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return rc.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),oc.prototype=Object.assign(Object.create(ic.prototype),{constructor:oc,getPointsHoles:function(t){for(var e=[],n=0,r=this.holes.length;n<r;n++)e[n]=this.holes[n].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){ic.prototype.copy.call(this,t),this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var r=t.holes[e];this.holes.push(r.clone())}return this},toJSON:function(){var t=ic.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,n=this.holes.length;e<n;e++){var r=this.holes[e];t.holes.push(r.toJSON())}return t},fromJSON:function(t){ic.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var r=t.holes[e];this.holes.push((new ic).fromJSON(r))}return this}}),ac.prototype=Object.assign(Object.create(Un.prototype),{constructor:ac,isLight:!0,copy:function(t){return Un.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=Un.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),sc.prototype=Object.assign(Object.create(ac.prototype),{constructor:sc,isHemisphereLight:!0,copy:function(t){return ac.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(cc.prototype,{copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),hc.prototype=Object.assign(Object.create(cc.prototype),{constructor:hc,isSpotLightShadow:!0,update:function(t){var e=this.camera,n=2*Je.RAD2DEG*t.angle,r=this.mapSize.width/this.mapSize.height,i=t.distance||e.far;n===e.fov&&r===e.aspect&&i===e.far||(e.fov=n,e.aspect=r,e.far=i,e.updateProjectionMatrix())}}),uc.prototype=Object.assign(Object.create(ac.prototype),{constructor:uc,isSpotLight:!0,copy:function(t){return ac.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),lc.prototype=Object.assign(Object.create(ac.prototype),{constructor:lc,isPointLight:!0,copy:function(t){return ac.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),dc.prototype=Object.assign(Object.create(io.prototype),{constructor:dc,isOrthographicCamera:!0,copy:function(t,e){return io.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,n,r,i,o){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2,i=n-t,o=n+t,a=r+e,s=r-e;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),h=this.zoom/(this.view.height/this.view.fullHeight),u=(this.right-this.left)/this.view.width,l=(this.top-this.bottom)/this.view.height;o=(i+=u*(this.view.offsetX/c))+u*(this.view.width/c),s=(a-=l*(this.view.offsetY/h))-l*(this.view.height/h)}this.projectionMatrix.makeOrthographic(i,o,a,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Un.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),pc.prototype=Object.assign(Object.create(cc.prototype),{constructor:pc}),fc.prototype=Object.assign(Object.create(ac.prototype),{constructor:fc,isDirectionalLight:!0,copy:function(t){return ac.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),mc.prototype=Object.assign(Object.create(ac.prototype),{constructor:mc,isAmbientLight:!0}),vc.prototype=Object.assign(Object.create(ac.prototype),{constructor:vc,isRectAreaLight:!0,copy:function(t){return ac.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=ac.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),Object.assign(gc.prototype,{load:function(t,e,n,r){var i=this,o=new Ps(i.manager);o.setPath(i.path),o.load(t,(function(t){e(i.parse(JSON.parse(t)))}),n,r)},parse:function(t){var e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var r=new us[t.type];if(void 0!==t.uuid&&(r.uuid=t.uuid),void 0!==t.name&&(r.name=t.name),void 0!==t.color&&r.color.setHex(t.color),void 0!==t.roughness&&(r.roughness=t.roughness),void 0!==t.metalness&&(r.metalness=t.metalness),void 0!==t.emissive&&r.emissive.setHex(t.emissive),void 0!==t.specular&&r.specular.setHex(t.specular),void 0!==t.shininess&&(r.shininess=t.shininess),void 0!==t.clearCoat&&(r.clearCoat=t.clearCoat),void 0!==t.clearCoatRoughness&&(r.clearCoatRoughness=t.clearCoatRoughness),void 0!==t.vertexColors&&(r.vertexColors=t.vertexColors),void 0!==t.fog&&(r.fog=t.fog),void 0!==t.flatShading&&(r.flatShading=t.flatShading),void 0!==t.blending&&(r.blending=t.blending),void 0!==t.combine&&(r.combine=t.combine),void 0!==t.side&&(r.side=t.side),void 0!==t.opacity&&(r.opacity=t.opacity),void 0!==t.transparent&&(r.transparent=t.transparent),void 0!==t.alphaTest&&(r.alphaTest=t.alphaTest),void 0!==t.depthTest&&(r.depthTest=t.depthTest),void 0!==t.depthWrite&&(r.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(r.colorWrite=t.colorWrite),void 0!==t.wireframe&&(r.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(r.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(r.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(r.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(r.rotation=t.rotation),1!==t.linewidth&&(r.linewidth=t.linewidth),void 0!==t.dashSize&&(r.dashSize=t.dashSize),void 0!==t.gapSize&&(r.gapSize=t.gapSize),void 0!==t.scale&&(r.scale=t.scale),void 0!==t.polygonOffset&&(r.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(r.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(r.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(r.skinning=t.skinning),void 0!==t.morphTargets&&(r.morphTargets=t.morphTargets),void 0!==t.dithering&&(r.dithering=t.dithering),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.uniforms)for(var i in t.uniforms){var o=t.uniforms[i];switch(r.uniforms[i]={},o.type){case"t":r.uniforms[i].value=n(o.value);break;case"c":r.uniforms[i].value=(new En).setHex(o.value);break;case"v2":r.uniforms[i].value=(new Ze).fromArray(o.value);break;case"v3":r.uniforms[i].value=(new $e).fromArray(o.value);break;case"v4":r.uniforms[i].value=(new un).fromArray(o.value);break;case"m4":r.uniforms[i].value=(new Qe).fromArray(o.value);break;default:r.uniforms[i].value=o.value}}if(void 0!==t.defines&&(r.defines=t.defines),void 0!==t.vertexShader&&(r.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(r.fragmentShader=t.fragmentShader),void 0!==t.shading&&(r.flatShading=1===t.shading),void 0!==t.size&&(r.size=t.size),void 0!==t.sizeAttenuation&&(r.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(r.map=n(t.map)),void 0!==t.alphaMap&&(r.alphaMap=n(t.alphaMap),r.transparent=!0),void 0!==t.bumpMap&&(r.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(r.bumpScale=t.bumpScale),void 0!==t.normalMap&&(r.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(r.normalMapType=t.normalMapType),void 0!==t.normalScale){var a=t.normalScale;!1===Array.isArray(a)&&(a=[a,a]),r.normalScale=(new Ze).fromArray(a)}return void 0!==t.displacementMap&&(r.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(r.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(r.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(r.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(r.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(r.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(r.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(r.specularMap=n(t.specularMap)),void 0!==t.envMap&&(r.envMap=n(t.envMap)),void 0!==t.envMapIntensity&&(r.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(r.reflectivity=t.reflectivity),void 0!==t.lightMap&&(r.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(r.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(r.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(r.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(r.gradientMap=n(t.gradientMap)),r},setPath:function(t){return this.path=t,this},setTextures:function(t){return this.textures=t,this}});var yc={decodeText:function(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);for(var e="",n=0,r=t.length;n<r;n++)e+=String.fromCharCode(t[n]);return decodeURIComponent(escape(e))},extractUrlBase:function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}};function xc(t){this.manager=void 0!==t?t:Ls}Object.assign(xc.prototype,{load:function(t,e,n,r){var i=this,o=new Ps(i.manager);o.setPath(i.path),o.load(t,(function(t){e(i.parse(JSON.parse(t)))}),n,r)},parse:function(t){var e=new nr,n=t.data.index;if(void 0!==n){var r=new Ec[n.type](n.array);e.setIndex(new Vn(r,1))}var i=t.data.attributes;for(var o in i){var a=i[o];r=new Ec[a.type](a.array);e.addAttribute(o,new Vn(r,a.itemSize,a.normalized))}var s=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==s)for(var c=0,h=s.length;c!==h;++c){var u=s[c];e.addGroup(u.start,u.count,u.materialIndex)}var l=t.data.boundingSphere;if(void 0!==l){var d=new $e;void 0!==l.center&&d.fromArray(l.center),e.boundingSphere=new mn(d,l.radius)}return e},setPath:function(t){return this.path=t,this}});var bc,wc,_c,Mc,Ec={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Sc(){}function Tc(t){"boolean"==typeof t&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),t=void 0),this.manager=void 0!==t?t:Ls,this.withCredentials=!1}function Ac(t){this.manager=void 0!==t?t:Ls,this.resourcePath=""}Sc.Handlers={handlers:[],add:function(t,e){this.handlers.push(t,e)},get:function(t){for(var e=this.handlers,n=0,r=e.length;n<r;n+=2){var i=e[n],o=e[n+1];if(i.test(t))return o}return null}},Object.assign(Sc.prototype,{crossOrigin:"anonymous",onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(t,e,n){for(var r=[],i=0;i<t.length;++i)r[i]=this.createMaterial(t[i],e,n);return r},createMaterial:(bc={NoBlending:D,NormalBlending:z,AdditiveBlending:N,SubtractiveBlending:B,MultiplyBlending:U,CustomBlending:F},wc=new En,_c=new Ns,Mc=new gc,function(t,e,n){var r={};function i(t,i,o,a,s){var c,h=e+t,u=Sc.Handlers.get(h);null!==u?c=u.load(h):(_c.setCrossOrigin(n),c=_c.load(h)),void 0!==i&&(c.repeat.fromArray(i),1!==i[0]&&(c.wrapS=Tt),1!==i[1]&&(c.wrapT=Tt)),void 0!==o&&c.offset.fromArray(o),void 0!==a&&("repeat"===a[0]&&(c.wrapS=Tt),"mirror"===a[0]&&(c.wrapS=Lt),"repeat"===a[1]&&(c.wrapT=Tt),"mirror"===a[1]&&(c.wrapT=Lt)),void 0!==s&&(c.anisotropy=s);var l=Je.generateUUID();return r[l]=c,l}var o={uuid:Je.generateUUID(),type:"MeshLambertMaterial"};for(var a in t){var s=t[a];switch(a){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":o.name=s;break;case"blending":o.blending=bc[s];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",a,"is no longer supported.");break;case"colorDiffuse":o.color=wc.fromArray(s).getHex();break;case"colorSpecular":o.specular=wc.fromArray(s).getHex();break;case"colorEmissive":o.emissive=wc.fromArray(s).getHex();break;case"specularCoef":o.shininess=s;break;case"shading":"basic"===s.toLowerCase()&&(o.type="MeshBasicMaterial"),"phong"===s.toLowerCase()&&(o.type="MeshPhongMaterial"),"standard"===s.toLowerCase()&&(o.type="MeshStandardMaterial");break;case"mapDiffuse":o.map=i(s,t.mapDiffuseRepeat,t.mapDiffuseOffset,t.mapDiffuseWrap,t.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":o.emissiveMap=i(s,t.mapEmissiveRepeat,t.mapEmissiveOffset,t.mapEmissiveWrap,t.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":o.lightMap=i(s,t.mapLightRepeat,t.mapLightOffset,t.mapLightWrap,t.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":o.aoMap=i(s,t.mapAORepeat,t.mapAOOffset,t.mapAOWrap,t.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":o.bumpMap=i(s,t.mapBumpRepeat,t.mapBumpOffset,t.mapBumpWrap,t.mapBumpAnisotropy);break;case"mapBumpScale":o.bumpScale=s;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":o.normalMap=i(s,t.mapNormalRepeat,t.mapNormalOffset,t.mapNormalWrap,t.mapNormalAnisotropy);break;case"mapNormalFactor":o.normalScale=s;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":o.specularMap=i(s,t.mapSpecularRepeat,t.mapSpecularOffset,t.mapSpecularWrap,t.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":o.metalnessMap=i(s,t.mapMetalnessRepeat,t.mapMetalnessOffset,t.mapMetalnessWrap,t.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":o.roughnessMap=i(s,t.mapRoughnessRepeat,t.mapRoughnessOffset,t.mapRoughnessWrap,t.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":o.alphaMap=i(s,t.mapAlphaRepeat,t.mapAlphaOffset,t.mapAlphaWrap,t.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":o.side=A;break;case"doubleSided":o.side=L;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),o.opacity=s;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":o[a]=s;break;case"vertexColors":!0===s&&(o.vertexColors=I),"face"===s&&(o.vertexColors=O);break;default:console.error("THREE.Loader.createMaterial: Unsupported",a,s)}}return"MeshBasicMaterial"===o.type&&delete o.emissive,"MeshPhongMaterial"!==o.type&&delete o.specular,o.opacity<1&&(o.transparent=!0),Mc.setTextures(r),Mc.parse(o)})}),Object.assign(Tc.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=this,o=void 0===this.path?yc.extractUrlBase(t):this.path,a=new Ps(this.manager);a.setPath(this.path),a.setWithCredentials(this.withCredentials),a.load(t,(function(n){var r=JSON.parse(n),a=r.metadata;if(void 0!==a){var s=a.type;if(void 0!==s&&"object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+t+" should be loaded with THREE.ObjectLoader instead.")}var c=i.parse(r,o);e(c.geometry,c.materials)}),n,r)},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this},setCrossOrigin:function(t){return this.crossOrigin=t,this},parse:function(t,e){void 0!==t.data&&(t=t.data),void 0!==t.scale?t.scale=1/t.scale:t.scale=1;var n=new kn;return function(t,e){function n(t,e){return t&1<<e}var r,i,o,a,s,c,h,u,l,d,p,f,m,v,g,y,x,b,w,_,M,E,S,T,A,L=t.faces,C=t.vertices,P=t.normals,R=t.colors,O=t.scale,I=0;if(void 0!==t.uvs){for(r=0;r<t.uvs.length;r++)t.uvs[r].length&&I++;for(r=0;r<I;r++)e.faceVertexUvs[r]=[]}for(a=0,s=C.length;a<s;)(b=new $e).x=C[a++]*O,b.y=C[a++]*O,b.z=C[a++]*O,e.vertices.push(b);for(a=0,s=L.length;a<s;)if(p=n(d=L[a++],0),f=n(d,1),m=n(d,3),v=n(d,4),g=n(d,5),y=n(d,6),x=n(d,7),p){if((_=new Pn).a=L[a],_.b=L[a+1],_.c=L[a+3],(M=new Pn).a=L[a+1],M.b=L[a+2],M.c=L[a+3],a+=4,f&&(l=L[a++],_.materialIndex=l,M.materialIndex=l),o=e.faces.length,m)for(r=0;r<I;r++)for(T=t.uvs[r],e.faceVertexUvs[r][o]=[],e.faceVertexUvs[r][o+1]=[],i=0;i<4;i++)A=new Ze(T[2*(u=L[a++])],T[2*u+1]),2!==i&&e.faceVertexUvs[r][o].push(A),0!==i&&e.faceVertexUvs[r][o+1].push(A);if(v&&(h=3*L[a++],_.normal.set(P[h++],P[h++],P[h]),M.normal.copy(_.normal)),g)for(r=0;r<4;r++)h=3*L[a++],S=new $e(P[h++],P[h++],P[h]),2!==r&&_.vertexNormals.push(S),0!==r&&M.vertexNormals.push(S);if(y&&(E=R[c=L[a++]],_.color.setHex(E),M.color.setHex(E)),x)for(r=0;r<4;r++)E=R[c=L[a++]],2!==r&&_.vertexColors.push(new En(E)),0!==r&&M.vertexColors.push(new En(E));e.faces.push(_),e.faces.push(M)}else{if((w=new Pn).a=L[a++],w.b=L[a++],w.c=L[a++],f&&(l=L[a++],w.materialIndex=l),o=e.faces.length,m)for(r=0;r<I;r++)for(T=t.uvs[r],e.faceVertexUvs[r][o]=[],i=0;i<3;i++)A=new Ze(T[2*(u=L[a++])],T[2*u+1]),e.faceVertexUvs[r][o].push(A);if(v&&(h=3*L[a++],w.normal.set(P[h++],P[h++],P[h])),g)for(r=0;r<3;r++)h=3*L[a++],S=new $e(P[h++],P[h++],P[h]),w.vertexNormals.push(S);if(y&&(c=L[a++],w.color.setHex(R[c])),x)for(r=0;r<3;r++)c=L[a++],w.vertexColors.push(new En(R[c]));e.faces.push(w)}}(t,n),function(t,e){var n=void 0!==t.influencesPerVertex?t.influencesPerVertex:2;if(t.skinWeights)for(var r=0,i=t.skinWeights.length;r<i;r+=n){var o=t.skinWeights[r],a=n>1?t.skinWeights[r+1]:0,s=n>2?t.skinWeights[r+2]:0,c=n>3?t.skinWeights[r+3]:0;e.skinWeights.push(new un(o,a,s,c))}if(t.skinIndices)for(r=0,i=t.skinIndices.length;r<i;r+=n){var h=t.skinIndices[r],u=n>1?t.skinIndices[r+1]:0,l=n>2?t.skinIndices[r+2]:0,d=n>3?t.skinIndices[r+3]:0;e.skinIndices.push(new un(h,u,l,d))}e.bones=t.bones,e.bones&&e.bones.length>0&&(e.skinWeights.length!==e.skinIndices.length||e.skinIndices.length!==e.vertices.length)&&console.warn("When skinning, number of vertices ("+e.vertices.length+"), skinIndices ("+e.skinIndices.length+"), and skinWeights ("+e.skinWeights.length+") should match.")}(t,n),function(t,e){var n=t.scale;if(void 0!==t.morphTargets)for(var r=0,i=t.morphTargets.length;r<i;r++){e.morphTargets[r]={},e.morphTargets[r].name=t.morphTargets[r].name,e.morphTargets[r].vertices=[];for(var o=e.morphTargets[r].vertices,a=t.morphTargets[r].vertices,s=0,c=a.length;s<c;s+=3){var h=new $e;h.x=a[s]*n,h.y=a[s+1]*n,h.z=a[s+2]*n,o.push(h)}}if(void 0!==t.morphColors&&t.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');var u=e.faces,l=t.morphColors[0].colors;for(r=0,i=u.length;r<i;r++)u[r].color.fromArray(l,3*r)}}(t,n),function(t,e){var n=[],r=[];void 0!==t.animation&&r.push(t.animation),void 0!==t.animations&&(t.animations.length?r=r.concat(t.animations):r.push(t.animations));for(var i=0;i<r.length;i++){var o=Es.parseAnimation(r[i],e.bones);o&&n.push(o)}if(e.morphTargets){var a=Es.CreateClipsFromMorphTargetSequences(e.morphTargets,10);n=n.concat(a)}n.length>0&&(e.animations=n)}(t,n),n.computeFaceNormals(),n.computeBoundingSphere(),void 0===t.materials||0===t.materials.length?{geometry:n}:{geometry:n,materials:Sc.prototype.initMaterials(t.materials,this.resourcePath||e,this.crossOrigin)}}}),Object.assign(Ac.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=this,o=void 0===this.path?yc.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||o;var a=new Ps(i.manager);a.setPath(this.path),a.load(t,(function(n){var o=null;try{o=JSON.parse(n)}catch(e){return void 0!==r&&r(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var a=o.metadata;void 0!==a&&void 0!==a.type&&"geometry"!==a.type.toLowerCase()?i.parse(o,e):console.error("THREE.ObjectLoader: Can't load "+t+". Use THREE.JSONLoader instead.")}),n,r)},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this},setCrossOrigin:function(t){return this.crossOrigin=t,this},parse:function(t,e){var n=this.parseShape(t.shapes),r=this.parseGeometries(t.geometries,n),i=this.parseImages(t.images,(function(){void 0!==e&&e(s)})),o=this.parseTextures(t.textures,i),a=this.parseMaterials(t.materials,o),s=this.parseObject(t.object,r,a);return t.animations&&(s.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(s),s},parseShape:function(t){var e={};if(void 0!==t)for(var n=0,r=t.length;n<r;n++){var i=(new oc).fromJSON(t[n]);e[i.uuid]=i}return e},parseGeometries:function(t,e){var n={};if(void 0!==t)for(var r=new Tc,i=new xc,o=0,a=t.length;o<a;o++){var s,c=t[o];switch(c.type){case"PlaneGeometry":case"PlaneBufferGeometry":s=new $a[c.type](c.width,c.height,c.widthSegments,c.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":s=new $a[c.type](c.width,c.height,c.depth,c.widthSegments,c.heightSegments,c.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":s=new $a[c.type](c.radius,c.segments,c.thetaStart,c.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":s=new $a[c.type](c.radiusTop,c.radiusBottom,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":s=new $a[c.type](c.radius,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":s=new $a[c.type](c.radius,c.widthSegments,c.heightSegments,c.phiStart,c.phiLength,c.thetaStart,c.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":s=new $a[c.type](c.radius,c.detail);break;case"RingGeometry":case"RingBufferGeometry":s=new $a[c.type](c.innerRadius,c.outerRadius,c.thetaSegments,c.phiSegments,c.thetaStart,c.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":s=new $a[c.type](c.radius,c.tube,c.radialSegments,c.tubularSegments,c.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":s=new $a[c.type](c.radius,c.tube,c.tubularSegments,c.radialSegments,c.p,c.q);break;case"LatheGeometry":case"LatheBufferGeometry":s=new $a[c.type](c.points,c.segments,c.phiStart,c.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":s=new $a[c.type](c.vertices,c.indices,c.radius,c.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var h=[],u=0,l=c.shapes.length;u<l;u++){var d=e[c.shapes[u]];h.push(d)}s=new $a[c.type](h,c.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(h=[],u=0,l=c.shapes.length;u<l;u++){d=e[c.shapes[u]];h.push(d)}var p=c.options.extrudePath;void 0!==p&&(c.options.extrudePath=(new nc[p.type]).fromJSON(p)),s=new $a[c.type](h,c.options);break;case"BufferGeometry":s=i.parse(c);break;case"Geometry":s=r.parse(c,this.resourcePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+c.type+'"');continue}s.uuid=c.uuid,void 0!==c.name&&(s.name=c.name),!0===s.isBufferGeometry&&void 0!==c.userData&&(s.userData=c.userData),n[c.uuid]=s}return n},parseMaterials:function(t,e){var n={},r={};if(void 0!==t){var i=new gc;i.setTextures(e);for(var o=0,a=t.length;o<a;o++){var s=t[o];if("MultiMaterial"===s.type){for(var c=[],h=0;h<s.materials.length;h++){var u=s.materials[h];void 0===n[u.uuid]&&(n[u.uuid]=i.parse(u)),c.push(n[u.uuid])}r[s.uuid]=c}else r[s.uuid]=i.parse(s),n[s.uuid]=r[s.uuid]}}return r},parseAnimations:function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n],i=Es.parse(r);void 0!==r.uuid&&(i.uuid=r.uuid),e.push(i)}return e},parseImages:function(t,e){var n=this,r={};function i(t){return n.manager.itemStart(t),o.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}if(void 0!==t&&t.length>0){var o=new Ds(new As(e));o.setCrossOrigin(this.crossOrigin);for(var a=0,s=t.length;a<s;a++){var c=t[a],h=c.url;if(Array.isArray(h)){r[c.uuid]=[];for(var u=0,l=h.length;u<l;u++){var d=h[u],p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:n.resourcePath+d;r[c.uuid].push(i(p))}}else{p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:n.resourcePath+c.url;r[c.uuid]=i(p)}}}return r},parseTextures:function(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var r={};if(void 0!==t)for(var i=0,o=t.length;i<o;i++){var a,s=t[i];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(a=Array.isArray(e[s.image])?new Br(e[s.image]):new hn(e[s.image])).needsUpdate=!0,a.uuid=s.uuid,void 0!==s.name&&(a.name=s.name),void 0!==s.mapping&&(a.mapping=n(s.mapping,Cc)),void 0!==s.offset&&a.offset.fromArray(s.offset),void 0!==s.repeat&&a.repeat.fromArray(s.repeat),void 0!==s.center&&a.center.fromArray(s.center),void 0!==s.rotation&&(a.rotation=s.rotation),void 0!==s.wrap&&(a.wrapS=n(s.wrap[0],Pc),a.wrapT=n(s.wrap[1],Pc)),void 0!==s.format&&(a.format=s.format),void 0!==s.minFilter&&(a.minFilter=n(s.minFilter,Rc)),void 0!==s.magFilter&&(a.magFilter=n(s.magFilter,Rc)),void 0!==s.anisotropy&&(a.anisotropy=s.anisotropy),void 0!==s.flipY&&(a.flipY=s.flipY),r[s.uuid]=a}return r},parseObject:function(t,e,n){var r;function i(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function o(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],r=0,i=t.length;r<i;r++){var o=t[r];void 0===n[o]&&console.warn("THREE.ObjectLoader: Undefined material",o),e.push(n[o])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}switch(t.type){case"Scene":r=new _o,void 0!==t.background&&Number.isInteger(t.background)&&(r.background=new En(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?r.fog=new wo(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(r.fog=new bo(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":r=new oo(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(r.focus=t.focus),void 0!==t.zoom&&(r.zoom=t.zoom),void 0!==t.filmGauge&&(r.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(r.filmOffset=t.filmOffset),void 0!==t.view&&(r.view=Object.assign({},t.view));break;case"OrthographicCamera":r=new dc(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(r.zoom=t.zoom),void 0!==t.view&&(r.view=Object.assign({},t.view));break;case"AmbientLight":r=new mc(t.color,t.intensity);break;case"DirectionalLight":r=new fc(t.color,t.intensity);break;case"PointLight":r=new lc(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":r=new vc(t.color,t.intensity,t.width,t.height);break;case"SpotLight":r=new uc(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":r=new sc(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var a=i(t.geometry),s=o(t.material);r=a.bones&&a.bones.length>0?new Po(a,s):new Sr(a,s);break;case"LOD":r=new Ao;break;case"Line":r=new Oo(i(t.geometry),o(t.material),t.mode);break;case"LineLoop":r=new Do(i(t.geometry),o(t.material));break;case"LineSegments":r=new Io(i(t.geometry),o(t.material));break;case"PointCloud":case"Points":r=new No(i(t.geometry),o(t.material));break;case"Sprite":r=new To(o(t.material));break;case"Group":r=new ro;break;default:r=new Un}if(r.uuid=t.uuid,void 0!==t.name&&(r.name=t.name),void 0!==t.matrix?(r.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(r.matrixAutoUpdate=t.matrixAutoUpdate),r.matrixAutoUpdate&&r.matrix.decompose(r.position,r.quaternion,r.scale)):(void 0!==t.position&&r.position.fromArray(t.position),void 0!==t.rotation&&r.rotation.fromArray(t.rotation),void 0!==t.quaternion&&r.quaternion.fromArray(t.quaternion),void 0!==t.scale&&r.scale.fromArray(t.scale)),void 0!==t.castShadow&&(r.castShadow=t.castShadow),void 0!==t.receiveShadow&&(r.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(r.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(r.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&r.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(r.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.frustumCulled&&(r.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(r.renderOrder=t.renderOrder),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.layers&&(r.layers.mask=t.layers),void 0!==t.children)for(var c=t.children,h=0;h<c.length;h++)r.add(this.parseObject(c[h],e,n));if("LOD"===t.type)for(var u=t.levels,l=0;l<u.length;l++){var d=u[l],p=r.getObjectByProperty("uuid",d.object);void 0!==p&&r.addLevel(p,d.distance)}return r}});var Lc,Cc={UVMapping:yt,CubeReflectionMapping:xt,CubeRefractionMapping:bt,EquirectangularReflectionMapping:wt,EquirectangularRefractionMapping:_t,SphericalReflectionMapping:Mt,CubeUVReflectionMapping:Et,CubeUVRefractionMapping:St},Pc={RepeatWrapping:Tt,ClampToEdgeWrapping:At,MirroredRepeatWrapping:Lt},Rc={NearestFilter:Ct,NearestMipMapNearestFilter:Pt,NearestMipMapLinearFilter:Rt,LinearFilter:Ot,LinearMipMapNearestFilter:It,LinearMipMapLinearFilter:Dt};function Oc(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.manager=void 0!==t?t:Ls,this.options=void 0}function Ic(){this.type="ShapePath",this.color=new En,this.subPaths=[],this.currentPath=null}function Dc(t){this.type="Font",this.data=t}function zc(t,e,n,r,i){var o=i.glyphs[t]||i.glyphs["?"];if(o){var a,s,c,h,u,l,d,p,f=new Ic;if(o.o)for(var m=o._cachedOutline||(o._cachedOutline=o.o.split(" ")),v=0,g=m.length;v<g;){switch(m[v++]){case"m":a=m[v++]*e+n,s=m[v++]*e+r,f.moveTo(a,s);break;case"l":a=m[v++]*e+n,s=m[v++]*e+r,f.lineTo(a,s);break;case"q":c=m[v++]*e+n,h=m[v++]*e+r,u=m[v++]*e+n,l=m[v++]*e+r,f.quadraticCurveTo(u,l,c,h);break;case"b":c=m[v++]*e+n,h=m[v++]*e+r,u=m[v++]*e+n,l=m[v++]*e+r,d=m[v++]*e+n,p=m[v++]*e+r,f.bezierCurveTo(u,l,d,p,c,h)}}return{offsetX:o.ha*e,path:f}}}function Nc(t){this.manager=void 0!==t?t:Ls}Oc.prototype={constructor:Oc,setOptions:function(t){return this.options=t,this},load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,o=Ts.get(t);if(void 0!==o)return i.manager.itemStart(t),setTimeout((function(){e&&e(o),i.manager.itemEnd(t)}),0),o;fetch(t).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,i.options)})).then((function(n){Ts.add(t,n),e&&e(n),i.manager.itemEnd(t)})).catch((function(e){r&&r(e),i.manager.itemError(t),i.manager.itemEnd(t)}))},setCrossOrigin:function(){return this},setPath:function(t){return this.path=t,this}},Object.assign(Ic.prototype,{moveTo:function(t,e){this.currentPath=new ic,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e)},lineTo:function(t,e){this.currentPath.lineTo(t,e)},quadraticCurveTo:function(t,e,n,r){this.currentPath.quadraticCurveTo(t,e,n,r)},bezierCurveTo:function(t,e,n,r,i,o){this.currentPath.bezierCurveTo(t,e,n,r,i,o)},splineThru:function(t){this.currentPath.splineThru(t)},toShapes:function(t,e){function n(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n],o=new oc;o.curves=i.curves,e.push(o)}return e}function r(t,e){for(var n=e.length,r=!1,i=n-1,o=0;o<n;i=o++){var a=e[i],s=e[o],c=s.x-a.x,h=s.y-a.y;if(Math.abs(h)>Number.EPSILON){if(h<0&&(a=e[o],c=-c,s=e[i],h=-h),t.y<a.y||t.y>s.y)continue;if(t.y===a.y){if(t.x===a.x)return!0}else{var u=h*(t.x-a.x)-c*(t.y-a.y);if(0===u)return!0;if(u<0)continue;r=!r}}else{if(t.y!==a.y)continue;if(s.x<=t.x&&t.x<=a.x||a.x<=t.x&&t.x<=s.x)return!0}}return r}var i=La.isClockWise,o=this.subPaths;if(0===o.length)return[];if(!0===e)return n(o);var a,s,c,h=[];if(1===o.length)return s=o[0],(c=new oc).curves=s.curves,h.push(c),h;var u=!i(o[0].getPoints());u=t?!u:u;var l,d,p=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=o.length;g<y;g++)a=i(l=(s=o[g]).getPoints()),(a=t?!a:a)?(!u&&f[v]&&v++,f[v]={s:new oc,p:l},f[v].s.curves=s.curves,u&&v++,m[v]=[]):m[v].push({h:s,p:l[0]});if(!f[0])return n(o);if(f.length>1){for(var x=!1,b=[],w=0,_=f.length;w<_;w++)p[w]=[];for(w=0,_=f.length;w<_;w++)for(var M=m[w],E=0;E<M.length;E++){for(var S=M[E],T=!0,A=0;A<f.length;A++)r(S.p,f[A].p)&&(w!==A&&b.push({froms:w,tos:A,hole:E}),T?(T=!1,p[A].push(S)):x=!0);T&&p[w].push(S)}b.length>0&&(x||(m=p))}g=0;for(var L=f.length;g<L;g++){c=f[g].s,h.push(c);for(var C=0,P=(d=m[g]).length;C<P;C++)c.holes.push(d[C].h)}return h}}),Object.assign(Dc.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var n=[],r=function(t,e,n){for(var r=Array.from?Array.from(t):String(t).split(""),i=e/n.resolution,o=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*i,a=[],s=0,c=0,h=0;h<r.length;h++){var u=r[h];if("\n"===u)s=0,c-=o;else{var l=zc(u,i,s,c,n);s+=l.offsetX,a.push(l.path)}}return a}(t,e,this.data),i=0,o=r.length;i<o;i++)Array.prototype.push.apply(n,r[i].toShapes());return n}}),Object.assign(Nc.prototype,{load:function(t,e,n,r){var i=this,o=new Ps(this.manager);o.setPath(this.path),o.load(t,(function(t){var n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(t.substring(65,t.length-2))}var r=i.parse(n);e&&e(r)}),n,r)},parse:function(t){return new Dc(t)},setPath:function(t){return this.path=t,this}});var Bc,Uc,Fc,Gc,Hc,kc,Vc,jc,Wc,qc,Xc={getContext:function(){return void 0===Lc&&(Lc=new(window.AudioContext||window.webkitAudioContext)),Lc},setContext:function(t){Lc=t}};function Yc(t){this.manager=void 0!==t?t:Ls}function Jc(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new oo,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new oo,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function Zc(t,e,n,r){Un.call(this),this.type="CubeCamera";var i=new oo(90,1,t,e);i.up.set(0,-1,0),i.lookAt(new $e(1,0,0)),this.add(i);var o=new oo(90,1,t,e);o.up.set(0,-1,0),o.lookAt(new $e(-1,0,0)),this.add(o);var a=new oo(90,1,t,e);a.up.set(0,0,1),a.lookAt(new $e(0,1,0)),this.add(a);var s=new oo(90,1,t,e);s.up.set(0,0,-1),s.lookAt(new $e(0,-1,0)),this.add(s);var c=new oo(90,1,t,e);c.up.set(0,-1,0),c.lookAt(new $e(0,0,1)),this.add(c);var h=new oo(90,1,t,e);h.up.set(0,-1,0),h.lookAt(new $e(0,0,-1)),this.add(h),r=r||{format:Yt,magFilter:Ot,minFilter:Ot},this.renderTarget=new dn(n,n,r),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var n=this.renderTarget,r=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,n.activeCubeFace=0,t.render(e,i,n),n.activeCubeFace=1,t.render(e,o,n),n.activeCubeFace=2,t.render(e,a,n),n.activeCubeFace=3,t.render(e,s,n),n.activeCubeFace=4,t.render(e,c,n),n.texture.generateMipmaps=r,n.activeCubeFace=5,t.render(e,h,n),t.setRenderTarget(null)},this.clear=function(t,e,n,r){for(var i=this.renderTarget,o=0;o<6;o++)i.activeCubeFace=o,t.setRenderTarget(i),t.clear(e,n,r);t.setRenderTarget(null)}}function Qc(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Kc(){Un.call(this),this.type="AudioListener",this.context=Xc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0}function $c(t){Un.call(this),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function th(t){$c.call(this,t),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function eh(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function nh(t,e,n){this.binding=t,this.valueSize=n;var r,i=Float64Array;switch(e){case"quaternion":r=this._slerp;break;case"string":case"bool":i=Array,r=this._select;break;default:r=this._lerp}this.buffer=new i(4*n),this._mixBufferRegion=r,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(Yc.prototype,{load:function(t,e,n,r){var i=new Ps(this.manager);i.setResponseType("arraybuffer"),i.setPath(this.path),i.load(t,(function(t){var n=t.slice(0);Xc.getContext().decodeAudioData(n,(function(t){e(t)}))}),n,r)},setPath:function(t){return this.path=t,this}}),Object.assign(Jc.prototype,{update:(Wc=new Qe,qc=new Qe,function(t){if(Bc!==this||Uc!==t.focus||Fc!==t.fov||Gc!==t.aspect*this.aspect||Hc!==t.near||kc!==t.far||Vc!==t.zoom||jc!==this.eyeSep){Bc=this,Uc=t.focus,Fc=t.fov,Gc=t.aspect*this.aspect,Hc=t.near,kc=t.far,Vc=t.zoom;var e,n,r=t.projectionMatrix.clone(),i=(jc=this.eyeSep/2)*Hc/Uc,o=Hc*Math.tan(Je.DEG2RAD*Fc*.5)/Vc;qc.elements[12]=-jc,Wc.elements[12]=jc,e=-o*Gc+i,n=o*Gc+i,r.elements[0]=2*Hc/(n-e),r.elements[8]=(n+e)/(n-e),this.cameraL.projectionMatrix.copy(r),e=-o*Gc-i,n=o*Gc-i,r.elements[0]=2*Hc/(n-e),r.elements[8]=(n+e)/(n-e),this.cameraR.projectionMatrix.copy(r)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(qc),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Wc)})}),Zc.prototype=Object.create(Un.prototype),Zc.prototype.constructor=Zc,Object.assign(Qc.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}),Kc.prototype=Object.assign(Object.create(Un.prototype),{constructor:Kc,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(){var t=new $e,e=new Ke,n=new $e,r=new $e,i=new Qc;return function(o){Un.prototype.updateMatrixWorld.call(this,o);var a=this.context.listener,s=this.up;if(this.timeDelta=i.getDelta(),this.matrixWorld.decompose(t,e,n),r.set(0,0,-1).applyQuaternion(e),a.positionX){var c=this.context.currentTime+this.timeDelta;a.positionX.linearRampToValueAtTime(t.x,c),a.positionY.linearRampToValueAtTime(t.y,c),a.positionZ.linearRampToValueAtTime(t.z,c),a.forwardX.linearRampToValueAtTime(r.x,c),a.forwardY.linearRampToValueAtTime(r.y,c),a.forwardZ.linearRampToValueAtTime(r.z,c),a.upX.linearRampToValueAtTime(s.x,c),a.upY.linearRampToValueAtTime(s.y,c),a.upZ.linearRampToValueAtTime(s.z,c)}else a.setPosition(t.x,t.y,t.z),a.setOrientation(r.x,r.y,r.z,s.x,s.y,s.z)}}()}),$c.prototype=Object.assign(Object.create(Un.prototype),{constructor:$c,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.onended=this.onEnded.bind(this),t.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,t.start(this.startTime,this.offset),this.isPlaying=!0,this.source=t,this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}),th.prototype=Object.assign(Object.create($c.prototype),{constructor:th,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(){var t=new $e,e=new Ke,n=new $e,r=new $e;return function(i){Un.prototype.updateMatrixWorld.call(this,i);var o=this.panner;if(this.matrixWorld.decompose(t,e,n),r.set(0,0,1).applyQuaternion(e),o.positionX){var a=this.context.currentTime+this.listener.timeDelta;o.positionX.linearRampToValueAtTime(t.x,a),o.positionY.linearRampToValueAtTime(t.y,a),o.positionZ.linearRampToValueAtTime(t.z,a),o.orientationX.linearRampToValueAtTime(r.x,a),o.orientationY.linearRampToValueAtTime(r.y,a),o.orientationZ.linearRampToValueAtTime(r.z,a)}else o.setPosition(t.x,t.y,t.z),o.setOrientation(r.x,r.y,r.z)}}()}),Object.assign(eh.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),n=0;n<e.length;n++)t+=e[n];return t/e.length}}),Object.assign(nh.prototype,{accumulate:function(t,e){var n=this.buffer,r=this.valueSize,i=t*r+r,o=this.cumulativeWeight;if(0===o){for(var a=0;a!==r;++a)n[i+a]=n[a];o=e}else{var s=e/(o+=e);this._mixBufferRegion(n,i,0,s,r)}this.cumulativeWeight=o},apply:function(t){var e=this.valueSize,n=this.buffer,r=t*e+e,i=this.cumulativeWeight,o=this.binding;if(this.cumulativeWeight=0,i<1){var a=3*e;this._mixBufferRegion(n,r,a,1-i,e)}for(var s=e,c=e+e;s!==c;++s)if(n[s]!==n[s+e]){o.setValue(n,r);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,n=this.valueSize,r=3*n;t.getValue(e,r);for(var i=n,o=r;i!==o;++i)e[i]=e[r+i%n];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,n,r,i){if(r>=.5)for(var o=0;o!==i;++o)t[e+o]=t[n+o]},_slerp:function(t,e,n,r){Ke.slerpFlat(t,e,t,e,t,n,r)},_lerp:function(t,e,n,r,i){for(var o=1-r,a=0;a!==i;++a){var s=e+a;t[s]=t[s]*o+t[n+a]*r}}});var rh,ih,oh,ah,sh,ch,hh,uh,lh,dh,ph,fh,mh,vh;function gh(t,e,n){var r=n||yh.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,r)}function yh(t,e,n){this.path=e,this.parsedPath=n||yh.parseTrackName(e),this.node=yh.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function xh(){this.uuid=Je.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var r=this;this.stats={objects:{get total(){return r._objects.length},get inUse(){return this.total-r.nCachedObjects_}},get bindingsPerObject(){return r._bindings.length}}}function bh(t,e,n){this._mixer=t,this._clip=e,this._localRoot=n||null;for(var r=e.tracks,i=r.length,o=new Array(i),a={endingStart:Re,endingEnd:Re},s=0;s!==i;++s){var c=r[s].createInterpolant(null);o[s]=c,c.settings=a}this._interpolantSettings=a,this._interpolants=o,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Te,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function wh(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function _h(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function Mh(){nr.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function Eh(t,e,n){Mo.call(this,t,e),this.meshPerAttribute=n||1}function Sh(t,e,n,r){"number"==typeof n&&(r=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Vn.call(this,t,e,n),this.meshPerAttribute=r||1}function Th(t,e,n,r){this.ray=new _r(t,e),this.near=n||0,this.far=r||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Ah(t,e){return t.distance-e.distance}function Lh(t,e,n,r){if(!1!==t.visible&&(t.raycast(e,n),!0===r))for(var i=t.children,o=0,a=i.length;o<a;o++)Lh(i[o],e,n,!0)}function Ch(t,e,n){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==n?n:0,this}function Ph(t,e,n){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==n?n:0,this}function Rh(t,e){this.min=void 0!==t?t:new Ze(1/0,1/0),this.max=void 0!==e?e:new Ze(-1/0,-1/0)}function Oh(t,e){this.start=void 0!==t?t:new $e,this.end=void 0!==e?e:new $e}function Ih(t){Un.call(this),this.material=t,this.render=function(){}}function Dh(t,e,n,r){this.object=t,this.size=void 0!==e?e:1;var i=void 0!==n?n:16711680,o=void 0!==r?r:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=3*s.faces.length:s&&s.isBufferGeometry&&(a=s.attributes.normal.count);var c=new nr,h=new Qn(2*a*3,3);c.addAttribute("position",h),Io.call(this,c,new Ro({color:i,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function zh(t,e){Un.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var n=new nr,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,o=1;i<32;i++,o++){var a=i/32*Math.PI*2,s=o/32*Math.PI*2;r.push(Math.cos(a),Math.sin(a),1,Math.cos(s),Math.sin(s),1)}n.addAttribute("position",new Qn(r,3));var c=new Ro({fog:!1});this.cone=new Io(n,c),this.add(this.cone),this.update()}function Nh(t){for(var e=function t(e){var n=[];e&&e.isBone&&n.push(e);for(var r=0;r<e.children.length;r++)n.push.apply(n,t(e.children[r]));return n}(t),n=new nr,r=[],i=[],o=new En(0,0,1),a=new En(0,1,0),s=0;s<e.length;s++){var c=e[s];c.parent&&c.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),i.push(o.r,o.g,o.b),i.push(a.r,a.g,a.b))}n.addAttribute("position",new Qn(r,3)),n.addAttribute("color",new Qn(i,3));var h=new Ro({vertexColors:I,depthTest:!1,depthWrite:!1,transparent:!0});Io.call(this,n,h),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function Bh(t,e,n){this.light=t,this.light.updateMatrixWorld(),this.color=n;var r=new Ua(e,4,2),i=new Er({wireframe:!0,fog:!1});Sr.call(this,r,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function Uh(t,e){Un.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;var n=new Ro({fog:!1}),r=new nr;r.addAttribute("position",new Vn(new Float32Array(15),3)),this.line=new Oo(r,n),this.add(this.line),this.update()}function Fh(t,e,n){Un.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var r=new Jo(e);r.rotateY(.5*Math.PI),this.material=new Er({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=I);var i=r.getAttribute("position"),o=new Float32Array(3*i.count);r.addAttribute("color",new Vn(o,3)),this.add(new Sr(r,this.material)),this.update()}function Gh(t,e,n,r){t=t||10,e=e||10,n=new En(void 0!==n?n:4473924),r=new En(void 0!==r?r:8947848);for(var i=e/2,o=t/e,a=t/2,s=[],c=[],h=0,u=0,l=-a;h<=e;h++,l+=o){s.push(-a,0,l,a,0,l),s.push(l,0,-a,l,0,a);var d=h===i?n:r;d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3}var p=new nr;p.addAttribute("position",new Qn(s,3)),p.addAttribute("color",new Qn(c,3));var f=new Ro({vertexColors:I});Io.call(this,p,f)}function Hh(t,e,n,r,i,o){t=t||10,e=e||16,n=n||8,r=r||64,i=new En(void 0!==i?i:4473924),o=new En(void 0!==o?o:8947848);var a,s,c,h,u,l,d,p=[],f=[];for(h=0;h<=e;h++)c=h/e*(2*Math.PI),a=Math.sin(c)*t,s=Math.cos(c)*t,p.push(0,0,0),p.push(a,0,s),d=1&h?i:o,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(h=0;h<=n;h++)for(d=1&h?i:o,l=t-t/n*h,u=0;u<r;u++)c=u/r*(2*Math.PI),a=Math.sin(c)*l,s=Math.cos(c)*l,p.push(a,0,s),f.push(d.r,d.g,d.b),c=(u+1)/r*(2*Math.PI),a=Math.sin(c)*l,s=Math.cos(c)*l,p.push(a,0,s),f.push(d.r,d.g,d.b);var m=new nr;m.addAttribute("position",new Qn(p,3)),m.addAttribute("color",new Qn(f,3));var v=new Ro({vertexColors:I});Io.call(this,m,v)}function kh(t,e,n,r){this.object=t,this.size=void 0!==e?e:1;var i=void 0!==n?n:16776960,o=void 0!==r?r:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new nr,h=new Qn(2*a*3,3);c.addAttribute("position",h),Io.call(this,c,new Ro({color:i,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function Vh(t,e,n){Un.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);var r=new nr;r.addAttribute("position",new Qn([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var i=new Ro({fog:!1});this.lightPlane=new Oo(r,i),this.add(this.lightPlane),(r=new nr).addAttribute("position",new Qn([0,0,0,0,0,1],3)),this.targetLine=new Oo(r,i),this.add(this.targetLine),this.update()}function jh(t){var e=new nr,n=new Ro({color:16777215,vertexColors:O}),r=[],i=[],o={},a=new En(16755200),s=new En(16711680),c=new En(43775),h=new En(16777215),u=new En(3355443);function l(t,e,n){d(t,n),d(e,n)}function d(t,e){r.push(0,0,0),i.push(e.r,e.g,e.b),void 0===o[t]&&(o[t]=[]),o[t].push(r.length/3-1)}l("n1","n2",a),l("n2","n4",a),l("n4","n3",a),l("n3","n1",a),l("f1","f2",a),l("f2","f4",a),l("f4","f3",a),l("f3","f1",a),l("n1","f1",a),l("n2","f2",a),l("n3","f3",a),l("n4","f4",a),l("p","n1",s),l("p","n2",s),l("p","n3",s),l("p","n4",s),l("u1","u2",c),l("u2","u3",c),l("u3","u1",c),l("c","t",h),l("p","c",u),l("cn1","cn2",u),l("cn3","cn4",u),l("cf1","cf2",u),l("cf3","cf4",u),e.addAttribute("position",new Qn(r,3)),e.addAttribute("color",new Qn(i,3)),Io.call(this,e,n),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=o,this.update()}function Wh(t,e){this.object=t,void 0===e&&(e=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),i=new nr;i.setIndex(new Vn(n,1)),i.addAttribute("position",new Vn(r,3)),Io.call(this,i,new Ro({color:e})),this.matrixAutoUpdate=!1,this.update()}function qh(t,e){this.type="Box3Helper",this.box=t;var n=void 0!==e?e:16776960,r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new nr;i.setIndex(new Vn(r,1)),i.addAttribute("position",new Qn([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Io.call(this,i,new Ro({color:n})),this.geometry.computeBoundingSphere()}function Xh(t,e,n){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var r=void 0!==n?n:16776960,i=new nr;i.addAttribute("position",new Qn([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),Oo.call(this,i,new Ro({color:r}));var o=new nr;o.addAttribute("position",new Qn([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),o.computeBoundingSphere(),this.add(new Sr(o,new Er({color:r,opacity:.2,transparent:!0,depthWrite:!1})))}function Yh(t,e,n,r,i,o){Un.call(this),void 0===t&&(t=new THREE.Vector3(0,0,1)),void 0===e&&(e=new THREE.Vector3(0,0,0)),void 0===n&&(n=1),void 0===r&&(r=16776960),void 0===i&&(i=.2*n),void 0===o&&(o=.2*i),void 0===ph&&((ph=new nr).addAttribute("position",new Qn([0,0,0,0,1,0],3)),(fh=new Ya(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new Oo(ph,new Ro({color:r})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Sr(fh,new Er({color:r})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,i,o)}function Jh(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new nr;n.addAttribute("position",new Qn(e,3)),n.addAttribute("color",new Qn([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var r=new Ro({vertexColors:I});Io.call(this,n,r)}function Zh(t,e,n,r,i,o,a){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new Pn(t,e,n,i,o,a)}Object.assign(gh.prototype,{getValue:function(t,e){this.bind();var n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(t,e)},setValue:function(t,e){for(var n=this._bindings,r=this._targetGroup.nCachedObjects_,i=n.length;r!==i;++r)n[r].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}}),Object.assign(yh,{Composite:gh,create:function(t,e,n){return t&&t.isAnimationObjectGroup?new yh.Composite(t,e,n):new yh(t,e,n)},sanitizeNodeName:(uh=new RegExp("[\\[\\]\\.:\\/]","g"),function(t){return t.replace(/\s/g,"_").replace(uh,"")}),parseTrackName:(rh="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",ih=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),oh=/(WCOD+)?/.source.replace("WCOD",rh),ah=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),sh=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),ch=new RegExp("^"+ih+oh+ah+sh+"$"),hh=["material","materials","bones"],function(t){var e=ch.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){var i=n.nodeName.substring(r+1);-1!==hh.indexOf(i)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=i)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}),findNode:function(t,e){if(!e||""===e||"root"===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){var r=function(t){for(var n=0;n<t.length;n++){var i=t[n];if(i.name===e||i.uuid===e)return i;var o=r(i.children);if(o)return o}return null},i=r(t.children);if(i)return i}return null}}),Object.assign(yh.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)t[e++]=n[r]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++]},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,n=e.objectName,r=e.propertyName,i=e.propertyIndex;if(t||(t=yh.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(n){var o=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var a=0;a<t.length;a++)if(t[a].name===o){o=a;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==o){if(void 0===t[o])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[o]}}var s=t[r];if(void 0!==s){var c=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);var h=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===r){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(a=0;a<this.node.geometry.morphAttributes.position.length;a++)if(t.geometry.morphAttributes.position[a].name===i){i=a;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(a=0;a<this.node.geometry.morphTargets.length;a++)if(t.geometry.morphTargets[a].name===i){i=a;break}}}h=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(h=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=r;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][c]}else{var u=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+u+"."+r+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(yh.prototype,{_getValue_unbound:yh.prototype.getValue,_setValue_unbound:yh.prototype.setValue}),Object.assign(xh.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._paths,o=this._parsedPaths,a=this._bindings,s=a.length,c=void 0,h=0,u=arguments.length;h!==u;++h){var l=arguments[h],d=l.uuid,p=r[d];if(void 0===p){p=e++,r[d]=p,t.push(l);for(var f=0,m=s;f!==m;++f)a[f].push(new yh(l,i[f],o[f]))}else if(p<n){c=t[p];var v=--n,g=t[v];r[g.uuid]=p,t[p]=g,r[d]=v,t[v]=l;for(f=0,m=s;f!==m;++f){var y=a[f],x=y[v],b=y[p];y[p]=x,void 0===b&&(b=new yh(l,i[f],o[f])),y[v]=b}}else t[p]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,i=r.length,o=0,a=arguments.length;o!==a;++o){var s=arguments[o],c=s.uuid,h=n[c];if(void 0!==h&&h>=e){var u=e++,l=t[u];n[l.uuid]=h,t[h]=l,n[c]=u,t[u]=s;for(var d=0,p=i;d!==p;++d){var f=r[d],m=f[u],v=f[h];f[h]=m,f[u]=v}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._bindings,o=i.length,a=0,s=arguments.length;a!==s;++a){var c=arguments[a],h=c.uuid,u=r[h];if(void 0!==u)if(delete r[h],u<n){var l=--n,d=t[l],p=t[y=--e];r[d.uuid]=u,t[u]=d,r[p.uuid]=l,t[l]=p,t.pop();for(var f=0,m=o;f!==m;++f){var v=(x=i[f])[l],g=x[y];x[u]=v,x[l]=g,x.pop()}}else{var y;r[(p=t[y=--e]).uuid]=u,t[u]=p,t.pop();for(f=0,m=o;f!==m;++f){var x;(x=i[f])[u]=x[y],x.pop()}}}this.nCachedObjects_=n},subscribe_:function(t,e){var n=this._bindingsIndicesByPath,r=n[t],i=this._bindings;if(void 0!==r)return i[r];var o=this._paths,a=this._parsedPaths,s=this._objects,c=s.length,h=this.nCachedObjects_,u=new Array(c);r=i.length,n[t]=r,o.push(t),a.push(e),i.push(u);for(var l=h,d=s.length;l!==d;++l){var p=s[l];u[l]=new yh(p,t,e)}return u},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){var r=this._paths,i=this._parsedPaths,o=this._bindings,a=o.length-1,s=o[a];e[t[a]]=n,o[n]=s,o.pop(),i[n]=i[a],i.pop(),r[n]=r[a],r.pop()}}}),Object.assign(bh.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){var r=this._clip.duration,i=t._clip.duration,o=i/r,a=r/i;t.warp(1,o,e),this.warp(a,1,e)}return this},crossFadeTo:function(t,e,n){return t.crossFadeFrom(this,e,n)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,n){var r=this._mixer,i=r.time,o=this._timeScaleInterpolant,a=this.timeScale;null===o&&(o=r._lendControlInterpolant(),this._timeScaleInterpolant=o);var s=o.parameterPositions,c=o.sampleValues;return s[0]=i,s[1]=i+n,c[0]=t/a,c[1]=e/a,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,n,r){if(this.enabled){var i=this._startTime;if(null!==i){var o=(t-i)*n;if(o<0||0===n)return;this._startTime=null,e=n*o}e*=this._updateTimeScale(t);var a=this._updateTime(e),s=this._updateWeight(t);if(s>0)for(var c=this._interpolants,h=this._propertyBindings,u=0,l=c.length;u!==l;++u)c[u].evaluate(a),h[u].accumulate(r,s)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var n=this._weightInterpolant;if(null!==n){var r=n.evaluate(t)[0];e*=r,t>n.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t,n=this._clip.duration,r=this.loop,i=this._loopCount,o=r===Ae;if(0===t)return-1===i?e:o&&1==(1&i)?n-e:e;if(r===Se){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=n)e=n;else{if(!(e<0))break t;e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===i&&(t>=0?(i=0,this._setEndings(!0,0===this.repetitions,o)):this._setEndings(0===this.repetitions,!0,o)),e>=n||e<0){var a=Math.floor(e/n);e-=n*a,i+=Math.abs(a);var s=this.repetitions-i;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?n:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===s){var c=t<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}if(o&&1==(1&i))return this.time=e,n-e}return this.time=e,e},_setEndings:function(t,e,n){var r=this._interpolantSettings;n?(r.endingStart=Oe,r.endingEnd=Oe):(r.endingStart=t?this.zeroSlopeAtStart?Oe:Re:Ie,r.endingEnd=e?this.zeroSlopeAtEnd?Oe:Re:Ie)},_scheduleFading:function(t,e,n){var r=this._mixer,i=r.time,o=this._weightInterpolant;null===o&&(o=r._lendControlInterpolant(),this._weightInterpolant=o);var a=o.parameterPositions,s=o.sampleValues;return a[0]=i,s[0]=e,a[1]=i+t,s[1]=n,this}}),wh.prototype=Object.assign(Object.create(r.prototype),{constructor:wh,_bindAction:function(t,e){var n=t._localRoot||this._root,r=t._clip.tracks,i=r.length,o=t._propertyBindings,a=t._interpolants,s=n.uuid,c=this._bindingsByRootAndName,h=c[s];void 0===h&&(h={},c[s]=h);for(var u=0;u!==i;++u){var l=r[u],d=l.name,p=h[d];if(void 0!==p)o[u]=p;else{if(void 0!==(p=o[u])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=e&&e._propertyBindings[u].binding.parsedPath;++(p=new nh(yh.create(n,d,f),l.ValueTypeName,l.getValueSize())).referenceCount,this._addInactiveBinding(p,s,d),o[u]=p}a[u].resultBuffer=p.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,n=t._clip.uuid,r=this._actionsByClip[n];this._bindAction(t,r&&r.knownActions[0]),this._addInactiveAction(t,n,e)}for(var i=t._propertyBindings,o=0,a=i.length;o!==a;++o){var s=i[o];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,n=0,r=e.length;n!==r;++n){var i=e[n];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,n){var r=this._actions,i=this._actionsByClip,o=i[e];if(void 0===o)o={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,i[e]=o;else{var a=o.knownActions;t._byClipCacheIndex=a.length,a.push(t)}t._cacheIndex=r.length,r.push(t),o.actionByRoot[n]=t},_removeInactiveAction:function(t){var e=this._actions,n=e[e.length-1],r=t._cacheIndex;n._cacheIndex=r,e[r]=n,e.pop(),t._cacheIndex=null;var i=t._clip.uuid,o=this._actionsByClip,a=o[i],s=a.knownActions,c=s[s.length-1],h=t._byClipCacheIndex;c._byClipCacheIndex=h,s[h]=c,s.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===s.length&&delete o[i],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,n=0,r=e.length;n!==r;++n){var i=e[n];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(t){var e=this._actions,n=t._cacheIndex,r=this._nActiveActions++,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_takeBackAction:function(t){var e=this._actions,n=t._cacheIndex,r=--this._nActiveActions,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_addInactiveBinding:function(t,e,n){var r=this._bindingsByRootAndName,i=r[e],o=this._bindings;void 0===i&&(i={},r[e]=i),i[n]=t,t._cacheIndex=o.length,o.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,n=t.binding,r=n.rootNode.uuid,i=n.path,o=this._bindingsByRootAndName,a=o[r],s=e[e.length-1],c=t._cacheIndex;s._cacheIndex=c,e[c]=s,e.pop(),delete a[i];t:{for(var h in a)break t;delete o[r]}},_lendBinding:function(t){var e=this._bindings,n=t._cacheIndex,r=this._nActiveBindings++,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_takeBackBinding:function(t){var e=this._bindings,n=t._cacheIndex,r=--this._nActiveBindings,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,n=t[e];return void 0===n&&((n=new fs(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=n),n},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,n=t.__cacheIndex,r=--this._nActiveControlInterpolants,i=e[r];t.__cacheIndex=r,e[r]=t,i.__cacheIndex=n,e[n]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var n=e||this._root,r=n.uuid,i="string"==typeof t?Es.findByName(n,t):t,o=null!==i?i.uuid:t,a=this._actionsByClip[o],s=null;if(void 0!==a){var c=a.actionByRoot[r];if(void 0!==c)return c;s=a.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var h=new bh(this,i,e);return this._bindAction(h,s),this._addInactiveAction(h,o,r),h},existingAction:function(t,e){var n=e||this._root,r=n.uuid,i="string"==typeof t?Es.findByName(n,t):t,o=i?i.uuid:t,a=this._actionsByClip[o];return void 0!==a&&a.actionByRoot[r]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,n=this._bindings,r=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==e;++i)t[i].reset();for(i=0;i!==r;++i)n[i].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,n=this._nActiveActions,r=this.time+=t,i=Math.sign(t),o=this._accuIndex^=1,a=0;a!==n;++a){e[a]._update(r,t,i,o)}var s=this._bindings,c=this._nActiveBindings;for(a=0;a!==c;++a)s[a].apply(o);return this},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,n=t.uuid,r=this._actionsByClip,i=r[n];if(void 0!==i){for(var o=i.knownActions,a=0,s=o.length;a!==s;++a){var c=o[a];this._deactivateAction(c);var h=c._cacheIndex,u=e[e.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=h,e[h]=u,e.pop(),this._removeInactiveBindingsForAction(c)}delete r[n]}},uncacheRoot:function(t){var e=t.uuid,n=this._actionsByClip;for(var r in n){var i=n[r].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var o=this._bindingsByRootAndName[e];if(void 0!==o)for(var a in o){var s=o[a];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(t,e){var n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),_h.prototype.clone=function(){return new _h(void 0===this.value.clone?this.value:this.value.clone())},Mh.prototype=Object.assign(Object.create(nr.prototype),{constructor:Mh,isInstancedBufferGeometry:!0,copy:function(t){return nr.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),Eh.prototype=Object.assign(Object.create(Mo.prototype),{constructor:Eh,isInstancedInterleavedBuffer:!0,copy:function(t){return Mo.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Sh.prototype=Object.assign(Object.create(Vn.prototype),{constructor:Sh,isInstancedBufferAttribute:!0,copy:function(t){return Vn.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(Th.prototype,{linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize()):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,n){var r=n||[];return Lh(t,this,r,e),r.sort(Ah),r},intersectObjects:function(t,e,n){var r=n||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),r;for(var i=0,o=t.length;i<o;i++)Lh(t[i],this,r,e);return r.sort(Ah),r}}),Object.assign(Ch.prototype,{set:function(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(Je.clamp(e/this.radius,-1,1))),this}}),Object.assign(Ph.prototype,{set:function(t,e,n){return this.radius=t,this.theta=e,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}}),Object.assign(Rh.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new Ze;return function(e,n){var r=t.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new Ze),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new Ze),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new Ze),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new Ze),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new Ze;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(Oh.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new $e),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new $e),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new $e),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:(lh=new $e,dh=new $e,function(t,e){lh.subVectors(t,this.start),dh.subVectors(this.end,this.start);var n=dh.dot(dh),r=dh.dot(lh)/n;return e&&(r=Je.clamp(r,0,1)),r}),closestPointToPoint:function(t,e,n){var r=this.closestPointToPointParameter(t,e);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new $e),this.delta(n).multiplyScalar(r).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),Ih.prototype=Object.create(Un.prototype),Ih.prototype.constructor=Ih,Ih.prototype.isImmediateRenderObject=!0,Dh.prototype=Object.create(Io.prototype),Dh.prototype.constructor=Dh,Dh.prototype.update=function(){var t=new $e,e=new $e,n=new tn;return function(){var r=["a","b","c"];this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);var i=this.object.matrixWorld,o=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry)for(var s=a.vertices,c=a.faces,h=0,u=0,l=c.length;u<l;u++)for(var d=c[u],p=0,f=d.vertexNormals.length;p<f;p++){var m=s[d[r[p]]],v=d.vertexNormals[p];t.copy(m).applyMatrix4(i),e.copy(v).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),o.setXYZ(h,t.x,t.y,t.z),h+=1,o.setXYZ(h,e.x,e.y,e.z),h+=1}else if(a&&a.isBufferGeometry){var g=a.attributes.position,y=a.attributes.normal;for(h=0,p=0,f=g.count;p<f;p++)t.set(g.getX(p),g.getY(p),g.getZ(p)).applyMatrix4(i),e.set(y.getX(p),y.getY(p),y.getZ(p)),e.applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),o.setXYZ(h,t.x,t.y,t.z),h+=1,o.setXYZ(h,e.x,e.y,e.z),h+=1}o.needsUpdate=!0}}(),zh.prototype=Object.create(Un.prototype),zh.prototype.constructor=zh,zh.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},zh.prototype.update=function(){var t=new $e,e=new $e;return function(){this.light.updateMatrixWorld();var n=this.light.distance?this.light.distance:1e3,r=n*Math.tan(this.light.angle);this.cone.scale.set(r,r,n),t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(e.sub(t)),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),Nh.prototype=Object.create(Io.prototype),Nh.prototype.constructor=Nh,Nh.prototype.updateMatrixWorld=function(){var t=new $e,e=new Qe,n=new Qe;return function(r){var i=this.bones,o=this.geometry,a=o.getAttribute("position");n.getInverse(this.root.matrixWorld);for(var s=0,c=0;s<i.length;s++){var h=i[s];h.parent&&h.parent.isBone&&(e.multiplyMatrices(n,h.matrixWorld),t.setFromMatrixPosition(e),a.setXYZ(c,t.x,t.y,t.z),e.multiplyMatrices(n,h.parent.matrixWorld),t.setFromMatrixPosition(e),a.setXYZ(c+1,t.x,t.y,t.z),c+=2)}o.getAttribute("position").needsUpdate=!0,Un.prototype.updateMatrixWorld.call(this,r)}}(),Bh.prototype=Object.create(Sr.prototype),Bh.prototype.constructor=Bh,Bh.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Bh.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},Uh.prototype=Object.create(Un.prototype),Uh.prototype.constructor=Uh,Uh.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Uh.prototype.update=function(){var t=.5*this.light.width,e=.5*this.light.height,n=this.line.geometry.attributes.position,r=n.array;r[0]=t,r[1]=-e,r[2]=0,r[3]=t,r[4]=e,r[5]=0,r[6]=-t,r[7]=e,r[8]=0,r[9]=-t,r[10]=-e,r[11]=0,r[12]=t,r[13]=-e,r[14]=0,n.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},Fh.prototype=Object.create(Un.prototype),Fh.prototype.constructor=Fh,Fh.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Fh.prototype.update=function(){var t=new $e,e=new En,n=new En;return function(){var r=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var i=r.geometry.getAttribute("color");e.copy(this.light.color),n.copy(this.light.groundColor);for(var o=0,a=i.count;o<a;o++){var s=o<a/2?e:n;i.setXYZ(o,s.r,s.g,s.b)}i.needsUpdate=!0}r.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),Gh.prototype=Object.create(Io.prototype),Gh.prototype.constructor=Gh,Hh.prototype=Object.create(Io.prototype),Hh.prototype.constructor=Hh,kh.prototype=Object.create(Io.prototype),kh.prototype.constructor=kh,kh.prototype.update=function(){var t=new $e,e=new $e,n=new tn;return function(){this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);for(var r=this.object.matrixWorld,i=this.geometry.attributes.position,o=this.object.geometry,a=o.vertices,s=o.faces,c=0,h=0,u=s.length;h<u;h++){var l=s[h],d=l.normal;t.copy(a[l.a]).add(a[l.b]).add(a[l.c]).divideScalar(3).applyMatrix4(r),e.copy(d).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),i.setXYZ(c,t.x,t.y,t.z),c+=1,i.setXYZ(c,e.x,e.y,e.z),c+=1}i.needsUpdate=!0}}(),Vh.prototype=Object.create(Un.prototype),Vh.prototype.constructor=Vh,Vh.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Vh.prototype.update=function(){var t=new $e,e=new $e,n=new $e;return function(){t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),n.subVectors(e,t),this.lightPlane.lookAt(n),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(n),this.targetLine.scale.z=n.length()}}(),jh.prototype=Object.create(Io.prototype),jh.prototype.constructor=jh,jh.prototype.update=function(){var t,e,n=new $e,r=new io;function i(i,o,a,s){n.set(o,a,s).unproject(r);var c=e[i];if(void 0!==c)for(var h=t.getAttribute("position"),u=0,l=c.length;u<l;u++)h.setXYZ(c[u],n.x,n.y,n.z)}return function(){t=this.geometry,e=this.pointMap;r.projectionMatrix.copy(this.camera.projectionMatrix),i("c",0,0,-1),i("t",0,0,1),i("n1",-1,-1,-1),i("n2",1,-1,-1),i("n3",-1,1,-1),i("n4",1,1,-1),i("f1",-1,-1,1),i("f2",1,-1,1),i("f3",-1,1,1),i("f4",1,1,1),i("u1",.7,1.1,-1),i("u2",-.7,1.1,-1),i("u3",0,2,-1),i("cf1",-1,0,1),i("cf2",1,0,1),i("cf3",0,-1,1),i("cf4",0,1,1),i("cn1",-1,0,-1),i("cn2",1,0,-1),i("cn3",0,-1,-1),i("cn4",0,1,-1),t.getAttribute("position").needsUpdate=!0}}(),Wh.prototype=Object.create(Io.prototype),Wh.prototype.constructor=Wh,Wh.prototype.update=function(){var t=new fn;return function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&t.setFromObject(this.object),!t.isEmpty()){var n=t.min,r=t.max,i=this.geometry.attributes.position,o=i.array;o[0]=r.x,o[1]=r.y,o[2]=r.z,o[3]=n.x,o[4]=r.y,o[5]=r.z,o[6]=n.x,o[7]=n.y,o[8]=r.z,o[9]=r.x,o[10]=n.y,o[11]=r.z,o[12]=r.x,o[13]=r.y,o[14]=n.z,o[15]=n.x,o[16]=r.y,o[17]=n.z,o[18]=n.x,o[19]=n.y,o[20]=n.z,o[21]=r.x,o[22]=n.y,o[23]=n.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),Wh.prototype.setFromObject=function(t){return this.object=t,this.update(),this},Wh.prototype.copy=function(t){return Io.prototype.copy.call(this,t),this.object=t.object,this},Wh.prototype.clone=function(){return(new this.constructor).copy(this)},qh.prototype=Object.create(Io.prototype),qh.prototype.constructor=qh,qh.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),Un.prototype.updateMatrixWorld.call(this,t))},Xh.prototype=Object.create(Oo.prototype),Xh.prototype.constructor=Xh,Xh.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?A:T,this.lookAt(this.plane.normal),Un.prototype.updateMatrixWorld.call(this,t)},Yh.prototype=Object.create(Un.prototype),Yh.prototype.constructor=Yh,Yh.prototype.setDirection=(vh=new $e,function(t){t.y>.99999?this.quaternion.set(0,0,0,1):t.y<-.99999?this.quaternion.set(1,0,0,0):(vh.set(t.z,0,-t.x).normalize(),mh=Math.acos(t.y),this.quaternion.setFromAxisAngle(vh,mh))}),Yh.prototype.setLength=function(t,e,n){void 0===e&&(e=.2*t),void 0===n&&(n=.2*e),this.line.scale.set(1,Math.max(0,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()},Yh.prototype.setColor=function(t){this.line.material.color.copy(t),this.cone.material.color.copy(t)},Yh.prototype.copy=function(t){return Un.prototype.copy.call(this,t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this},Yh.prototype.clone=function(){return(new this.constructor).copy(this)},Jh.prototype=Object.create(Io.prototype),Jh.prototype.constructor=Jh;var Qh=0,Kh=1;function $h(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function tu(t){return void 0===t&&(t=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function eu(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new No(t,e)}function nu(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new To(t)}function ru(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new No(t,e)}function iu(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new zo(t)}function ou(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new zo(t)}function au(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new zo(t)}function su(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new $e(t,e,n)}function cu(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new Vn(t,e).setDynamic(!0)}function hu(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new jn(t,e)}function uu(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Wn(t,e)}function lu(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new qn(t,e)}function du(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Xn(t,e)}function pu(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Yn(t,e)}function fu(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Jn(t,e)}function mu(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Zn(t,e)}function vu(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Qn(t,e)}function gu(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Kn(t,e)}function yu(t){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),Ws.call(this,t),this.type="catmullrom",this.closed=!0}function xu(t){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),Ws.call(this,t),this.type="catmullrom"}function bu(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),Ws.call(this,t),this.type="catmullrom"}function wu(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Jh(t)}function _u(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Wh(t,e)}function Mu(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Io(new qa(t.geometry),new Ro({color:void 0!==e?e:16777215}))}function Eu(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Io(new Ho(t.geometry),new Ro({color:void 0!==e?e:16777215}))}function Su(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Ps(t)}function Tu(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Is(t)}Bs.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(Bs.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(rc.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new kn,n=0,r=t.length;n<r;n++){var i=t[n];e.vertices.push(new $e(i.x,i.y,i.z||0))}return e}}),Object.assign(ic.prototype,{fromPoints:function(t){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),yu.prototype=Object.create(Ws.prototype),xu.prototype=Object.create(Ws.prototype),bu.prototype=Object.create(Ws.prototype),Object.assign(bu.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Gh.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Nh.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Sc.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),yc.extractUrlBase(t)}}),Object.assign(Tc.prototype,{setTexturePath:function(t){return console.warn("THREE.JSONLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}),Object.assign(Ac.prototype,{setTexturePath:function(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}),Object.assign(Rh.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(fn.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),Oh.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(Je,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Je.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Je.ceilPowerOfTwo(t)}}),Object.assign(tn.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Qe.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){var t;return function(){return void 0===t&&(t=new $e),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),t.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,n,r,i,o){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,r,n,i,o)}}),vn.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},Ke.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(_r.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(Mr.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(Mr,{barycoordFromPoint:function(t,e,n,r,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Mr.getBarycoord(t,e,n,r,i)},normal:function(t,e,n,r){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Mr.getNormal(t,e,n,r)}}),Object.assign(oc.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Ra(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Va(this,t)}}),Object.assign(Ze.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign($e.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(un.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(kn.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(Un.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(Un.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Ao.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Lo.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Object.defineProperty(Bs.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),oo.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(ac.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Vn.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")}}),Object.assign(nr.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addDrawCall:function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(nr.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(Oa.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(_h.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(br.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new En}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===C}}}),Object.defineProperties(is.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(wr.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(xo.prototype,{clearTarget:function(t,e,n,r){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,r)},animate:function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")}}),Object.defineProperties(xo.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties($i.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(ln.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(go.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),$c.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new Yc).load(t,(function(t){e.setBuffer(t)})),this},eh.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Zc.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};var Au={merge:function(t,e,n){var r;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),e.isMesh&&(e.matrixAutoUpdate&&e.updateMatrix(),r=e.matrix,e=e.geometry),t.merge(e,r,n)},center:function(t){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),t.center()}};function Lu(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(t,e){console.warn("THREE.Projector: .projectVector() is now vector.project()."),t.project(e)},this.unprojectVector=function(t,e){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),t.unproject(e)},this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}}function Cu(){console.error("THREE.CanvasRenderer has been removed")}sn.crossOrigin=void 0,sn.loadTexture=function(t,e,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new Ns;i.setCrossOrigin(this.crossOrigin);var o=i.load(t,n,void 0,r);return e&&(o.mapping=e),o},sn.loadTextureCube=function(t,e,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new zs;i.setCrossOrigin(this.crossOrigin);var o=i.load(t,n,void 0,r);return e&&(o.mapping=e),o},sn.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},sn.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var Pu={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};function Ru(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")}},function(t,e,n){"use strict";n.r(e);var r=n(0);window.THREE=n(0),n(2);const i=n(3),o=n(5),a=n(7),s=n(8),c=n(9),h=n(10),u=n(11),l=n(12),d=n(13);let p,f,m,v,g,y,x,b,w,_,M,E=window.innerWidth,S=window.innerHeight,T=30,A=3,L=!0,C=!0,P=!0,R=!0,O=!0,I=new r.Group;const D={time:{type:"f",value:1},resolution:{type:"v2",value:new r.Vector2},dirLightPos:{type:"v3",value:new r.Vector3},dirLightColor:{type:"v3",value:new r.Color(15658734)},ambientLightColor:{type:"v3",value:new r.Color(328965)},size:{type:"f",value:32}},z=t=>{i.update(t),m.getDelta();const e=m.elapsedTime;(t=>{const e=w.attributes.position;for(let n=0,r=e.count;n<r;n++){let r=30*Math.sin(n/2+(5*t+n));n%14==0&&(r*=A),e.setY(n,r)}e.needsUpdate=!0})(e),((t,e)=>{let n,r,i,o,a,s;for(t.reset(),a=18,s=1.2/((Math.sqrt(T)-1)/4+1),n=0;n<T;n++)r=.27*Math.sin(n+1.26*e*(1.03+.5*Math.cos(.21*n)))+.5,i=.27*Math.cos(n+1.12*e*Math.cos(1.22+.1424*n))+.5,o=.27*Math.cos(n+1.32*e*.1*Math.sin(.92+.53*n))+.5,t.addBall(r,i,o,s,18)})(v,1.6*e),C||(v.rotation.x=e,v.rotation.y=e,v.rotation.z=e);const n=30*e*(Math.PI/180),o=300*Math.sin(n),s=300*Math.cos(n);f.position.x=o,f.position.z=s,O&&(f.position.y=.3*o,f.lookAt(new r.Vector3(0,0,0))),D.time.value=e;let c=I.children.length;if(c>0)for(let t=0;t<c;t++){let n=I.children[t],r=n.geometry;r.verticesNeedUpdate=!0;let i=a.originalVerticesArray[t];for(let t=0,n=r.vertices.length;t<n;t++){let n=8*e+300*t,o=5;r.vertices[t].x=i[t].x+Math.sin(n)*o,r.vertices[t].y=i[t].y+Math.sin(.8*n)*o}const o=5*e+t%4*80;n.scale.x=1+Math.abs(Math.sin(o)),n.scale.y=1+Math.abs(Math.sin(o)),n.scale.z=1+Math.abs(Math.sin(o))}e>5&&L?N():e>15&&C?B():e>25&&P?U():e>30&&R?F():e>40&&O&&G(),g.render(p,f),requestAnimationFrame(z)},N=()=>{const t=_.position.y,e={x:0,y:t,z:0};new i.Tween(e).to({x:0,y:-500,z:0},3e3).easing(i.Easing.Exponential.Out).onUpdate((function(){_.position.y=e.y,y.position.y=(t-e.y)/(-500-t)})).start(),L=!1},B=()=>{p.remove(v);const t=new r.ShaderMaterial({uniforms:D,vertexShader:s,fragmentShader:u});v=new r.MarchingCubes(48,t,!0,!0),v.position.set(0,0,0),v.scale.set(100,100,100),p.add(v),p.background=new r.Color(2300821),p.fog=new r.FogExp2(2300821,3e-4),A=12,C=!1},U=()=>{p.remove(v);const t=new r.ShaderMaterial({uniforms:D,vertexShader:s,fragmentShader:h});v=new r.MarchingCubes(48,t,!0,!0),v.position.set(0,0,0),v.scale.set(100,100,100),p.add(v),p.background=new r.Color(4596702),p.fog=new r.FogExp2(4596702,3e-4);let e=["#7BFFEF","#6FE8B8","#7FFFAC","#6FE873","#FFDEAA"];const n=t=>{let e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return{r:parseInt(e[1],16)/255,g:parseInt(e[2],16)/255,b:parseInt(e[3],16)/255}},i=[],o=[],a=new r.BufferGeometry,c=.8*window.innerWidth;for(let t=0;t<2e4;t++){const t=Math.floor(Math.random()*c-c/2),r=Math.floor(Math.random()*c-c/2),a=Math.floor(Math.random()*c-c/2);i.push(t,r,a);const s=n(e[Math.floor(Math.random()*e.length)]);o.push(s.r,s.g,s.b)}const u=new Float32Array(i);a.addAttribute("position",new r.BufferAttribute(u,3));const f=new Float32Array(o);a.addAttribute("color",new r.BufferAttribute(f,3));const m=new r.ShaderMaterial({uniforms:D,vertexShader:l,fragmentShader:d,transparent:!0,depthWrite:!1,blending:r.AdditiveBlending});M=new r.Points(a,m),p.add(M),H(50,5e3),P=!1},F=()=>{for(let t=0;t<18;t++){const e=20*Math.PI/180*t;I.add(a.createObject(30,{x:600*Math.cos(e),y:0,z:600*Math.sin(e)}))}p.add(I),R=!1},G=()=>{const t={y:v.position.y};new i.Tween(t).to({y:2e3},8e3).easing(i.Easing.Linear.None).onUpdate((function(){v.position.y=t.y,f.position.y=t.y,M.position.y=t.y,f.lookAt(new r.Vector3(0,t.y,0))})).onComplete((function(){p.remove(M),o.stop()})).start(),H(0,9e3),O=!1},H=(t,e)=>{const n={count:T};new i.Tween(n).to({count:t},e).easing(i.Easing.Exponential.Out).onUpdate((function(){T=Math.floor(n.count)})).start()},k=()=>{E=window.innerWidth,S=window.innerHeight,f.aspect=E/S,f.updateProjectionMatrix(),g.setPixelRatio(window.devicePixelRatio),g.setSize(E,S)};window.addEventListener("resize",k),(()=>{p=new r.Scene,p.background=new r.Color(16711833),p.fog=new r.FogExp2(16711833,3e-4),m=new r.Clock,f=new r.PerspectiveCamera(45,E/S,1,1e4),f.position.set(0,100,300),y=new r.DirectionalLight(16777215),y.position.set(0,0,0),p.add(y),x=new r.PointLight(58555,30,150),x.position.set(0,-150,0),p.add(x),b=new r.AmbientLight(58555),b.position.set(0,-1,0),p.add(b),w=new r.PlaneBufferGeometry(2e4,2e4,128,128),w.rotateX(-Math.PI/2);const t=(new r.TextureLoader).load("https://i.imgur.com/uXLLH9G.jpg");t.wrapS=t.wrapT=r.RepeatWrapping,t.repeat.set(5,5);const e=new r.MeshBasicMaterial({color:58555,map:t});_=new r.Mesh(w,e),_.position.set(0,-3e3,0),p.add(_),D.resolution=new r.Vector2(E,S),D.dirLightPos.value=y.position,D.dirLightColor.value=y.color,D.ambientLightColor.value=b.color;const n=new r.ShaderMaterial({uniforms:D,vertexShader:s,fragmentShader:c});v=new r.MarchingCubes(48,n,!0,!0),v.position.set(0,0,0),v.scale.set(100,100,100),p.add(v),g=new r.WebGLRenderer,g.setPixelRatio(window.devicePixelRatio),g.setSize(E,S),document.body.appendChild(g.domElement),g.gammaInput=!0,g.gammaOutput=!0,g.autoClear=!1,o.init()})(),k(),z()},function(t,e){THREE.MarchingCubes=function(t,e,n,r){THREE.ImmediateRenderObject.call(this,e);var i=this,o=new Float32Array(36),a=new Float32Array(36);function s(t,e,n){return t+(e-t)*n}function c(t,e,n,r,c,h,u,l){var d=(n-u)/(l-u),p=i.normal_cache;o[e+0]=r+d*i.delta,o[e+1]=c,o[e+2]=h,a[e+0]=s(p[t+0],p[t+3],d),a[e+1]=s(p[t+1],p[t+4],d),a[e+2]=s(p[t+2],p[t+5],d)}function h(t,e,n,r,c,h,u,l){var d=(n-u)/(l-u),p=i.normal_cache;o[e+0]=r,o[e+1]=c+d*i.delta,o[e+2]=h;var f=t+3*i.yd;a[e+0]=s(p[t+0],p[f+0],d),a[e+1]=s(p[t+1],p[f+1],d),a[e+2]=s(p[t+2],p[f+2],d)}function u(t,e,n,r,c,h,u,l){var d=(n-u)/(l-u),p=i.normal_cache;o[e+0]=r,o[e+1]=c,o[e+2]=h+d*i.delta;var f=t+3*i.zd;a[e+0]=s(p[t+0],p[f+0],d),a[e+1]=s(p[t+1],p[f+1],d),a[e+2]=s(p[t+2],p[f+2],d)}function l(t){var e=3*t;0===i.normal_cache[e]&&(i.normal_cache[e+0]=i.field[t-1]-i.field[t+1],i.normal_cache[e+1]=i.field[t-i.yd]-i.field[t+i.yd],i.normal_cache[e+2]=i.field[t-i.zd]-i.field[t+i.zd])}function d(t,e,n,r,s,d){var f=r+1,m=r+i.yd,v=r+i.zd,g=f+i.yd,y=f+i.zd,x=r+i.yd+i.zd,b=f+i.yd+i.zd,w=0,_=i.field[r],M=i.field[f],E=i.field[m],S=i.field[g],T=i.field[v],A=i.field[y],L=i.field[x],C=i.field[b];_<s&&(w|=1),M<s&&(w|=2),E<s&&(w|=8),S<s&&(w|=4),T<s&&(w|=16),A<s&&(w|=32),L<s&&(w|=128),C<s&&(w|=64);var P=THREE.edgeTable[w];if(0===P)return 0;var R=i.delta,O=t+R,I=e+R,D=n+R;1&P&&(l(r),l(f),c(3*r,0,s,t,e,n,_,M)),2&P&&(l(f),l(g),h(3*f,3,s,O,e,n,M,S)),4&P&&(l(m),l(g),c(3*m,6,s,t,I,n,E,S)),8&P&&(l(r),l(m),h(3*r,9,s,t,e,n,_,E)),16&P&&(l(v),l(y),c(3*v,12,s,t,e,D,T,A)),32&P&&(l(y),l(b),h(3*y,15,s,O,e,D,A,C)),64&P&&(l(x),l(b),c(3*x,18,s,t,I,D,L,C)),128&P&&(l(v),l(x),h(3*v,21,s,t,e,D,T,L)),256&P&&(l(r),l(v),u(3*r,24,s,t,e,n,_,T)),512&P&&(l(f),l(y),u(3*f,27,s,O,e,n,M,A)),1024&P&&(l(g),l(b),u(3*g,30,s,O,I,n,S,C)),2048&P&&(l(m),l(x),u(3*m,33,s,t,I,n,E,L)),w<<=4;for(var z,N,B,U=0,F=0;-1!=THREE.triTable[w+F];)N=(z=w+F)+1,B=z+2,p(o,a,3*THREE.triTable[z],3*THREE.triTable[N],3*THREE.triTable[B],d),F+=3,U++;return U}function p(t,e,n,r,o,a){var s=3*i.count;if(i.positionArray[s+0]=t[n],i.positionArray[s+1]=t[n+1],i.positionArray[s+2]=t[n+2],i.positionArray[s+3]=t[r],i.positionArray[s+4]=t[r+1],i.positionArray[s+5]=t[r+2],i.positionArray[s+6]=t[o],i.positionArray[s+7]=t[o+1],i.positionArray[s+8]=t[o+2],!0===i.material.flatShading){var c=(e[n+0]+e[r+0]+e[o+0])/3,h=(e[n+1]+e[r+1]+e[o+1])/3,u=(e[n+2]+e[r+2]+e[o+2])/3;i.normalArray[s+0]=c,i.normalArray[s+1]=h,i.normalArray[s+2]=u,i.normalArray[s+3]=c,i.normalArray[s+4]=h,i.normalArray[s+5]=u,i.normalArray[s+6]=c,i.normalArray[s+7]=h,i.normalArray[s+8]=u}else i.normalArray[s+0]=e[n+0],i.normalArray[s+1]=e[n+1],i.normalArray[s+2]=e[n+2],i.normalArray[s+3]=e[r+0],i.normalArray[s+4]=e[r+1],i.normalArray[s+5]=e[r+2],i.normalArray[s+6]=e[o+0],i.normalArray[s+7]=e[o+1],i.normalArray[s+8]=e[o+2];if(i.enableUvs){var l=2*i.count;i.uvArray[l+0]=t[n+0],i.uvArray[l+1]=t[n+2],i.uvArray[l+2]=t[r+0],i.uvArray[l+3]=t[r+2],i.uvArray[l+4]=t[o+0],i.uvArray[l+5]=t[o+2]}i.enableColors&&(i.colorArray[s+0]=t[n+0],i.colorArray[s+1]=t[n+1],i.colorArray[s+2]=t[n+2],i.colorArray[s+3]=t[r+0],i.colorArray[s+4]=t[r+1],i.colorArray[s+5]=t[r+2],i.colorArray[s+6]=t[o+0],i.colorArray[s+7]=t[o+1],i.colorArray[s+8]=t[o+2]),i.count+=3,i.count>=i.maxCount-3&&(i.hasPositions=!0,i.hasNormals=!0,i.enableUvs&&(i.hasUvs=!0),i.enableColors&&(i.hasColors=!0),a(i))}function f(t,e,n){var r=new Float32Array(t.length+n);return r.set(t,0),r.set(e.slice(0,n),t.length),r}this.enableUvs=void 0!==n&&n,this.enableColors=void 0!==r&&r,this.init=function(t){this.resolution=t,this.isolation=80,this.size=t,this.size2=this.size*this.size,this.size3=this.size2*this.size,this.halfsize=this.size/2,this.delta=2/this.size,this.yd=this.size,this.zd=this.size2,this.field=new Float32Array(this.size3),this.normal_cache=new Float32Array(3*this.size3),this.maxCount=4096,this.count=0,this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=new Float32Array(3*this.maxCount),this.normalArray=new Float32Array(3*this.maxCount),this.enableUvs&&(this.uvArray=new Float32Array(2*this.maxCount)),this.enableColors&&(this.colorArray=new Float32Array(3*this.maxCount))},this.begin=function(){this.count=0,this.hasPositions=!1,this.hasNormals=!1,this.hasUvs=!1,this.hasColors=!1},this.end=function(t){if(0!==this.count){for(var e=3*this.count;e<this.positionArray.length;e++)this.positionArray[e]=0;this.hasPositions=!0,this.hasNormals=!0,this.enableUvs&&this.material.map&&(this.hasUvs=!0),this.enableColors&&this.material.vertexColors!==THREE.NoColors&&(this.hasColors=!0),t(this)}},this.addBall=function(t,e,n,r,i){var o=Math.sign(r);r=Math.abs(r);var a=this.size*Math.sqrt(r/i),s=n*this.size,c=e*this.size,h=t*this.size,u=Math.floor(s-a);u<1&&(u=1);var l=Math.floor(s+a);l>this.size-1&&(l=this.size-1);var d=Math.floor(c-a);d<1&&(d=1);var p=Math.floor(c+a);p>this.size-1&&(p=this.size-1);var f=Math.floor(h-a);f<1&&(f=1);var m,v,g,y,x,b,w,_,M,E,S,T=Math.floor(h+a);for(T>this.size-1&&(T=this.size-1),g=u;g<l;g++)for(x=this.size2*g,M=(_=g/this.size-n)*_,v=d;v<p;v++)for(y=x+this.size*v,E=(w=v/this.size-e)*w,m=f;m<T;m++)(S=r/(1e-6+(b=m/this.size-t)*b+E+M)-i)>0&&(this.field[y+m]+=S*o)},this.addPlaneX=function(t,e){var n,r,i,o,a,s,c=this.size,h=this.yd,u=this.zd,l=this.field,d=c*Math.sqrt(t/e);for(d>c&&(d=c),n=0;n<d;n++)if((o=t/(1e-4+(a=n/c)*a)-e)>0)for(r=0;r<c;r++)for(s=n+r*h,i=0;i<c;i++)l[u*i+s]+=o},this.addPlaneY=function(t,e){var n,r,i,o,a,s,c,h=this.size,u=this.yd,l=this.zd,d=this.field,p=h*Math.sqrt(t/e);for(p>h&&(p=h),r=0;r<p;r++)if((o=t/(1e-4+(a=r/h)*a)-e)>0)for(s=r*u,n=0;n<h;n++)for(c=s+n,i=0;i<h;i++)d[l*i+c]+=o},this.addPlaneZ=function(t,e){var n,r,i,o,a,s,c,h=this.size,u=this.yd,l=this.zd,d=this.field,p=h*Math.sqrt(t/e);for(p>h&&(p=h),i=0;i<p;i++)if((o=t/(1e-4+(a=i/h)*a)-e)>0)for(s=l*i,r=0;r<h;r++)for(c=s+r*u,n=0;n<h;n++)d[c+n]+=o},this.reset=function(){var t;for(t=0;t<this.size3;t++)this.normal_cache[3*t]=0,this.field[t]=0},this.render=function(t){this.begin();for(var e=this.size-2,n=1;n<e;n++)for(var r=this.size2*n,i=(n-this.halfsize)/this.halfsize,o=1;o<e;o++)for(var a=r+this.size*o,s=(o-this.halfsize)/this.halfsize,c=1;c<e;c++){d((c-this.halfsize)/this.halfsize,s,i,a+c,this.isolation,t)}this.end(t)},this.generateGeometry=function(){return console.warn("THREE.MarchingCubes: generateGeometry() now returns THREE.BufferGeometry"),this.generateBufferGeometry()},this.generateBufferGeometry=function(){var t=new THREE.BufferGeometry,e=new Float32Array,n=new Float32Array,r=new Float32Array,i=new Float32Array,o=this;return this.render((function(t){o.hasPositions&&(e=f(e,t.positionArray,3*t.count)),o.hasNormals&&(n=f(n,t.normalArray,3*t.count)),o.hasColors&&(r=f(r,t.colorArray,3*t.count)),o.hasUvs&&(i=f(i,t.uvArray,2*t.count)),t.count=0})),this.hasPositions&&t.addAttribute("position",new THREE.BufferAttribute(e,3)),this.hasNormals&&t.addAttribute("normal",new THREE.BufferAttribute(n,3)),this.hasColors&&t.addAttribute("color",new THREE.BufferAttribute(r,3)),this.hasUvs&&t.addAttribute("uv",new THREE.BufferAttribute(i,2)),t},this.init(t)},THREE.MarchingCubes.prototype=Object.create(THREE.ImmediateRenderObject.prototype),THREE.MarchingCubes.prototype.constructor=THREE.MarchingCubes,THREE.edgeTable=new Int32Array([0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0]),THREE.triTable=new Int32Array([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1,3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1,3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1,9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1,9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1,2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1,8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1,9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1,4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1,-1,3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1,1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1,4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1,4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1,5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1,2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1,-1,9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1,0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1,2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1,10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1,-1,5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1,5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1,0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1,1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1,-1,8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1,2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1,9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1,2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1,-1,11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1,9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1,-1,5,7,0,5,0,9,7,11,0,1,0,10,11,10,0,-1,11,10,0,11,0,3,10,5,0,8,0,7,5,7,0,-1,11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1,-1,9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1,-1,5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1,-1,2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1,-1,0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1,-1,5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1,-1,6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1,-1,0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1,-1,3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1,-1,6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1,-1,1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1,-1,10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1,-1,6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1,-1,1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1,-1,8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1,-1,7,3,9,7,9,4,3,2,9,5,9,6,2,6,9,-1,3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1,-1,5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1,-1,0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1,-1,9,2,1,9,11,2,9,4,11,7,11,4,5,10,6,-1,8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1,-1,5,1,11,5,11,6,1,0,11,7,11,4,0,4,11,-1,0,5,9,0,6,5,0,3,6,11,6,3,8,4,7,-1,6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1,-1,10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1,-1,10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1,-1,8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1,-1,1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1,-1,3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1,-1,0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1,-1,0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1,-1,3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1,-1,6,4,1,6,1,10,4,8,1,2,1,11,8,11,1,-1,9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1,-1,8,11,1,8,1,0,11,6,1,9,1,4,6,4,1,-1,3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1,-1,6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1,-1,0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1,-1,10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1,-1,10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1,-1,2,6,9,2,9,1,6,7,9,0,9,3,7,3,9,-1,7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1,-1,7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1,-1,2,0,7,2,7,11,0,9,7,6,7,10,9,10,7,-1,1,8,0,1,7,8,1,10,7,6,7,10,2,3,11,-1,11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1,-1,8,9,6,8,6,7,9,1,6,11,6,3,1,3,6,-1,0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1,-1,7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1,-1,10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1,-1,2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1,-1,6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1,-1,7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1,2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1,1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1,10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1,10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1,0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1,-1,7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1,6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1,8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1,9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1,6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1,-1,4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1,-1,10,9,3,10,3,2,9,4,3,11,3,6,4,6,3,-1,8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1,-1,1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1,-1,8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1,-1,10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1,4,6,3,4,3,8,6,10,3,0,3,9,10,9,3,-1,10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1,-1,5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1,-1,11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1,-1,9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1,-1,6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1,-1,7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1,-1,3,4,8,3,5,4,3,2,5,10,5,2,11,7,6,-1,7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1,9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1,-1,3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1,-1,6,2,8,6,8,7,2,1,8,4,8,5,1,5,8,-1,9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1,-1,1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1,4,0,10,4,10,5,0,3,10,6,10,7,3,7,10,-1,7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1,6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1,3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1,0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1,6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1,1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1,0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1,11,8,5,11,5,6,8,0,5,10,5,2,0,2,5,-1,6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1,5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1,-1,9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,1,5,8,1,8,0,5,6,8,3,8,2,6,2,8,-1,1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,6,1,6,10,3,8,6,5,6,9,8,9,6,-1,10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1,-1,0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1,-1,5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1,-1,11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1,-1,0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1,-1,9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1,-1,7,5,2,7,2,11,5,9,2,3,2,8,9,8,2,-1,2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1,-1,9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1,-1,9,8,2,9,2,1,8,7,2,10,2,5,7,5,2,-1,1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1,-1,9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1,-1,0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1,-1,10,11,4,10,4,5,11,3,4,9,4,1,3,1,4,-1,2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1,-1,0,4,11,0,11,3,4,5,11,2,11,1,5,1,11,-1,0,2,5,0,5,9,2,11,5,4,5,8,11,8,5,-1,9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1,-1,5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1,-1,3,10,2,3,5,10,3,8,5,4,5,8,0,1,9,-1,5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1,-1,8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1,0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1,-1,9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1,-1,0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1,-1,1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1,-1,3,1,4,3,4,8,1,10,4,7,4,11,10,11,4,-1,4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1,-1,9,7,4,9,11,7,9,1,11,2,11,1,0,8,3,-1,11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1,-1,2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1,-1,9,10,7,9,7,4,10,2,7,8,7,0,2,0,7,-1,3,7,10,3,10,2,7,4,10,1,10,0,4,0,10,-1,1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1,-1,4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1,-1,4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1,-1,0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1,-1,3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1,-1,0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1,-1,9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1,-1,1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1])},function(t,e,n){(function(n){var r,i=function(){this._tweens={},this._tweensAddedDuringUpdate={}};i.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,e){var n=Object.keys(this._tweens);if(0===n.length)return!1;for(t=void 0!==t?t:a.now();n.length>0;){this._tweensAddedDuringUpdate={};for(var r=0;r<n.length;r++){var i=this._tweens[n[r]];i&&!1===i.update(t)&&(i._isPlaying=!1,e||delete this._tweens[n[r]])}n=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var o,a=new i;a.Group=i,a._nextId=0,a.nextId=function(){return a._nextId++},"undefined"==typeof self&&void 0!==n&&n.hrtime?a.now=function(){var t=n.hrtime();return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof self&&void 0!==self.performance&&void 0!==self.performance.now?a.now=self.performance.now.bind(self.performance):void 0!==Date.now?a.now=Date.now:a.now=function(){return(new Date).getTime()},a.Tween=function(t,e){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=null,this._easingFunction=a.Easing.Linear.None,this._interpolationFunction=a.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onRepeatCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=e||a,this._id=a.nextId()},a.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,e){return this._valuesEnd=t,void 0!==e&&(this._duration=e),this},duration:function(t){return this._duration=t,this},start:function(t){for(var e in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?a.now()+parseFloat(t):t:a.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[e]instanceof Array){if(0===this._valuesEnd[e].length)continue;this._valuesEnd[e]=[this._object[e]].concat(this._valuesEnd[e])}void 0!==this._object[e]&&(this._valuesStart[e]=this._object[e],this._valuesStart[e]instanceof Array==!1&&(this._valuesStart[e]*=1),this._valuesStartRepeat[e]=this._valuesStart[e]||0)}return this},stop:function(){return this._isPlaying?(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens(),this):this},end:function(){return this.update(1/0),this},stopChainedTweens:function(){for(var t=0,e=this._chainedTweens.length;t<e;t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onRepeat:function(t){return this._onRepeatCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var e,n,r;if(t<this._startTime)return!0;for(e in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),n=(t-this._startTime)/this._duration,n=0===this._duration||n>1?1:n,r=this._easingFunction(n),this._valuesEnd)if(void 0!==this._valuesStart[e]){var i=this._valuesStart[e]||0,o=this._valuesEnd[e];o instanceof Array?this._object[e]=this._interpolationFunction(o,r):("string"==typeof o&&(o="+"===o.charAt(0)||"-"===o.charAt(0)?i+parseFloat(o):parseFloat(o)),"number"==typeof o&&(this._object[e]=i+(o-i)*r))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object,n),1===n){if(this._repeat>0){for(e in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[e]&&(this._valuesStartRepeat[e]=this._valuesStartRepeat[e]+parseFloat(this._valuesEnd[e])),this._yoyo){var a=this._valuesStartRepeat[e];this._valuesStartRepeat[e]=this._valuesEnd[e],this._valuesEnd[e]=a}this._valuesStart[e]=this._valuesStartRepeat[e]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,null!==this._onRepeatCallback&&this._onRepeatCallback(this._object),!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var s=0,c=this._chainedTweens.length;s<c;s++)this._chainedTweens[s].start(this._startTime+this._duration);return!1}return!0}},a.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){var e=1.70158;return t*t*((e+1)*t-e)},Out:function(t){var e=1.70158;return--t*t*((e+1)*t+e)+1},InOut:function(t){var e=2.5949095;return(t*=2)<1?t*t*((e+1)*t-e)*.5:.5*((t-=2)*t*((e+1)*t+e)+2)}},Bounce:{In:function(t){return 1-a.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*a.Easing.Bounce.In(2*t):.5*a.Easing.Bounce.Out(2*t-1)+.5}}},a.Interpolation={Linear:function(t,e){var n=t.length-1,r=n*e,i=Math.floor(r),o=a.Interpolation.Utils.Linear;return e<0?o(t[0],t[1],r):e>1?o(t[n],t[n-1],n-r):o(t[i],t[i+1>n?n:i+1],r-i)},Bezier:function(t,e){for(var n=0,r=t.length-1,i=Math.pow,o=a.Interpolation.Utils.Bernstein,s=0;s<=r;s++)n+=i(1-e,r-s)*i(e,s)*t[s]*o(r,s);return n},CatmullRom:function(t,e){var n=t.length-1,r=n*e,i=Math.floor(r),o=a.Interpolation.Utils.CatmullRom;return t[0]===t[n]?(e<0&&(i=Math.floor(r=n*(1+e))),o(t[(i-1+n)%n],t[i],t[(i+1)%n],t[(i+2)%n],r-i)):e<0?t[0]-(o(t[0],t[0],t[1],t[1],-r)-t[0]):e>1?t[n]-(o(t[n],t[n],t[n-1],t[n-1],r-n)-t[n]):o(t[i?i-1:0],t[i],t[n<i+1?n:i+1],t[n<i+2?n:i+2],r-i)},Utils:{Linear:function(t,e,n){return(e-t)*n+t},Bernstein:function(t,e){var n=a.Interpolation.Utils.Factorial;return n(t)/n(e)/n(t-e)},Factorial:(o=[1],function(t){var e=1;if(o[t])return o[t];for(var n=t;n>1;n--)e*=n;return o[t]=e,e}),CatmullRom:function(t,e,n,r,i){var o=.5*(n-t),a=.5*(r-e),s=i*i;return(2*e-2*n+o+a)*(i*s)+(-3*e+3*n-2*o-a)*s+o*i+e}}},void 0===(r=function(){return a}.apply(e,[]))||(t.exports=r)}).call(this,n(4))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,h=[],u=!1,l=-1;function d(){u&&c&&(u=!1,c.length?h=c.concat(h):l=-1,h.length&&p())}function p(){if(!u){var t=s(d);u=!0;for(var e=h.length;e;){for(c=h,h=[];++l<e;)c&&c[l].run();l=-1,e=h.length}c=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new f(t,e)),1!==h.length||u||s(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e),n.d(e,"init",(function(){return o})),n.d(e,"stop",(function(){return a}));var r=n(0);let i;const o=()=>{const t=n(6),e=new window.AudioContext;i=e.createBufferSource(),i.connect(e.destination),i.loop=!0;const o={blockOffset:{type:"f",value:0},sampleRate:{type:"f",value:e.sampleRate},texture:{type:"t",value:(new r.TextureLoader).load("https://i.imgur.com/uXLLH9G.jpg")}},a=e.createBuffer(2,90*e.sampleRate,e.sampleRate),s=new r.WebGLRenderer,c=s.getContext(),h=new r.PlaneGeometry(2,2),u=new r.ShaderMaterial({uniforms:o,fragmentShader:t}),l=new r.Mesh(h,u),d=new r.OrthographicCamera(-1,1,1,-1,.1,10);d.position.set(0,0,1);const p=new r.Scene;p.add(l);const f=90*e.sampleRate/262144,m=new r.WebGLRenderTarget(512,512);for(let t=0;t<f;t++){o.blockOffset.value=262144*t/e.sampleRate,s.render(p,d,m,!0);const n=new Uint8Array(1048576);c.readPixels(0,0,512,512,c.RGBA,c.UNSIGNED_BYTE,n);const r=a.getChannelData(0),i=a.getChannelData(1);for(let e=0;e<262144;e++)r[262144*t+e]=(n[4*e+0]+256*n[4*e+1])/65535*2-1,i[262144*t+e]=(n[4*e+2]+256*n[4*e+3])/65535*2-1}i.buffer=a,i.start(0)},a=()=>{i.stop()}},function(t,e){t.exports="precision mediump float;\r\nuniform float sampleRate;\r\nuniform float blockOffset;\r\nuniform sampler2D texture;\r\n\r\n#define BPM 180.0\r\n#define PI 3.141592654\r\n\r\nfloat timeToBeat(float t) {\r\n    return t / 60.0 * BPM;\r\n}\r\n\r\nfloat beatToTime(float b) {\r\n    return b / BPM * 60.0;\r\n}\r\n\r\n// TODO: texture can not be loaded.\r\nvec4 noise(float phase) {\r\n    vec2 uv = phase / vec2(0.512, 0.487);\r\n    return 2.0 * texture2D(texture, uv) - 1.0;\r\n}\r\n\r\nfloat sine(float phase) {\r\n    return sin(PI * 2.0 * phase);\r\n}\r\n\r\nfloat kick(float time) {\r\n    float amp = exp(-5.0 * time);\r\n    float phase = 30.0 * time - 10.0 * exp(-30.0 * time);\r\n    return amp * sine(phase);\r\n}\r\n\r\nfloat chord(float n) {\r\n    return (\r\n        n < 1.0 ? 55.0 :\r\n        n < 2.0 ? 58.0 :\r\n        n < 3.0 ? 62.0 :\r\n                  65.0\r\n    );\r\n}\r\n\r\nfloat noteToFreq(float n) {\r\n    return 440.0 * pow(2.0, (n - 69.0) / 12.0);\r\n}\r\n\r\nfloat saw(float phase) {\r\n    return 2.0 * fract(phase) - 1.0;\r\n}\r\n\r\nvec2 pad(float note, float time) {\r\n    float freq = noteToFreq(note);\r\n    float vib = 0.2 * sine(3.0 * time);\r\n    return vec2(\r\n        saw(freq * 0.99 * time + vib),\r\n        saw(freq * 1.01 * time + vib)\r\n    );\r\n}\r\n\r\nvec2 mainSound(float time) {\r\n    vec2 ret = vec2(0.0);\r\n    float beat = timeToBeat(time);\r\n    float kickTime = beatToTime(mod(beat, 1.3));\r\n\r\n    ret += kick(kickTime);\r\n\r\n    float sidechain = smoothstep(0.0, 0.8, kickTime);\r\n    ret += sidechain * 0.6 * vec2(\r\n            pad(chord(0.0), time)\r\n          + pad(chord(1.0), time)\r\n          + pad(chord(2.0), time)\r\n          + pad(chord(3.0), time)\r\n        ) / 4.0;\r\n\r\n    if (time > 2.0) {\r\n\r\n    }\r\n\r\n    return clamp(ret, -1.0, 1.0);\r\n}\r\n\r\nvoid main() {\r\n    float t = blockOffset + ((gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * 512.0) / sampleRate;\r\n    vec2 y = mainSound(t);\r\n    vec2 v  = floor((0.5 + 0.5 * y) * 65536.0);\r\n    vec2 vl = mod(v, 256.0) / 255.0;\r\n    vec2 vh = floor(v / 256.0) / 255.0;\r\n    gl_FragColor = vec4(vl.x, vh.x, vl.y, vh.y);\r\n}"},function(t,e,n){"use strict";n.r(e),n.d(e,"originalVerticesArray",(function(){return o})),n.d(e,"createObject",(function(){return a}));var r=n(0);let i=[2152662,3253154,5487032,7453883,10738393];const o=[],a=(t,e)=>{let n=[],a=new r.IcosahedronGeometry(t);for(let t=0,e=a.faces.length;t<e;t++){a.faces[t].color.setHex(i[Math.floor(Math.random()*i.length)])}for(let t=0,e=a.vertices.length;t<e;t++){let e=a.vertices[t];n.push({x:e.x,y:e.y})}let s=new r.MeshBasicMaterial({vertexColors:r.FaceColors}),c=new r.Mesh(a,s);return c.position.x=e.x,c.position.y=e.y,c.position.z=e.z,c.castShadow=!0,o.push(n),c}},function(t,e){t.exports="varying vec2 vUv;\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n    vUv = uv;\r\n\r\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n\r\n    gl_Position = projectionMatrix * mvPosition;\r\n    vNormal = normalize(normalMatrix * normal);\r\n}"},function(t,e){t.exports="#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI 3.14159265359\r\n\r\nuniform float time;\r\nuniform vec2 resolution;\r\n\r\nuniform vec3 dirLightPos;\r\nuniform vec3 dirLightColor;\r\nuniform vec3 ambientLightColor;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\n\r\nfloat map(float value, float beforeMin, float beforeMax, float afterMin, float afterMax) {\r\n    return afterMin + (afterMax - afterMin) * ((value - beforeMin) / (beforeMax - beforeMin));\r\n}\r\n\r\nvoid main( void ) {\r\n    vec2 uv = 2.0 * vUv - 1.0;\r\n\r\n    float directionalLightWeighting = max(dot(normalize(vNormal), dirLightPos), 0.0);\r\n    vec3 lightWeighting = ambientLightColor + dirLightColor * directionalLightWeighting;\r\n//    float intensity = smoothstep(0.0, 1.0, pow(length(lightWeighting), 20.0));\r\n\r\n    uv *= 6.0;\r\n    uv = fract(uv);\r\n    uv -= 0.5;\r\n\r\n    vec3 ballColor = vec3(1.0, 0.0, 0.5);\r\n    vec3 shadowColor = vec3(0.0, 1.0, 1.0);\r\n    vec3 color = mix(ballColor, shadowColor, directionalLightWeighting);\r\n\r\n    color += 0.1 + 0.1 * abs(sin(time * 2.0)) / length(uv);\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n}"},function(t,e){t.exports="#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI 3.14159265359\r\n\r\nuniform float time;\r\nuniform vec2 resolution;\r\n\r\nuniform vec3 dirLightPos;\r\nuniform vec3 dirLightColor;\r\nuniform vec3 ambientLightColor;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\n\r\nfloat map(float value, float beforeMin, float beforeMax, float afterMin, float afterMax) {\r\n    return afterMin + (afterMax - afterMin) * ((value - beforeMin) / (beforeMax - beforeMin));\r\n}\r\n\r\nmat2 rotate2d(float angle){\r\n    return mat2(cos(angle), -sin(angle),  sin(angle), cos(angle));\r\n}\r\n\r\nfloat obliqueLine(vec2 uv){\r\n    return step(0.6, fract((uv.x + uv.y + time * 0.8) * 2.0));\r\n}\r\n\r\nvoid main( void ) {\r\n    vec2 uv = 2.0 * vUv - 1.0;\r\n\r\n    float directionalLightWeighting = max(dot(normalize(vNormal), dirLightPos), 0.0);\r\n    vec3 lightWeighting = ambientLightColor + dirLightColor * directionalLightWeighting;\r\n\r\n    vec3 ballColor = vec3(0.139,0.000,0.426);\r\n    vec3 shadowColor = vec3(0.0, 1.0, 1.0);\r\n    vec3 color = mix(ballColor, shadowColor, directionalLightWeighting);\r\n    color += obliqueLine(uv * 4.0);\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n}"},function(t,e){t.exports="#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n\r\n#define PI 3.141592653589793\r\n#define TWO_PI 6.283\r\n\r\nuniform vec2 resolution;\r\nuniform float time;\r\n\r\nuniform vec3 dirLightPos;\r\nuniform vec3 dirLightColor;\r\nuniform vec3 ambientLightColor;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\n\r\nvec2 directionalWaveNormal(vec2 uv, float amp, vec2 dir, float freq, float speed, float k) {\r\n    float a = dot(uv, dir) * freq + time * speed;\r\n    float b = 7.5 * k * freq * amp * pow((sin(a) + 1.0) * 0.5, k - 1.0) * cos(a);\r\n    return vec2(dir.x * b, dir.y * b);\r\n}\r\n\r\nvec3 summedWaveNormal(vec2 uv) {\r\n    vec2 sum = vec2(0.0);\r\n    sum += directionalWaveNormal(uv, 0.5, normalize(vec2(1.0, 1.0)), 5.0, 1.5, 1.0);\r\n    sum += directionalWaveNormal(uv, 0.25,normalize(vec2(1.4, 1.0)), 11.0, 2.5, 1.5);\r\n    sum += directionalWaveNormal(uv, 0.125, normalize(vec2(-0.8, -1.0)), 10.0, 3.0, 2.0);\r\n    sum += directionalWaveNormal(uv, 0.0625, normalize(vec2(1.3, 1.0)), 15.0, 4.0, 2.0);\r\n    sum += directionalWaveNormal(uv, 0.03125, normalize(vec2(-1.7, -1.0)), 5.0, 1.0, 3.0);\r\n    return normalize(vec3(-sum.x, -sum.y, 1.0));\r\n}\r\n\r\nvoid main( void ) {\r\n    vec2 uv = 2.0 * vUv - 1.0;\r\n\r\n    float directionalLightWeighting = max(dot(normalize(vNormal), dirLightPos), 0.0);\r\n    vec3 lightWeighting = ambientLightColor + dirLightColor * directionalLightWeighting;\r\n\r\n    vec3 normal = summedWaveNormal(uv * 5.0);\r\n\r\n    vec3 color = mix(vec3(0.0, 5.0, 5.0), vec3(0.2, 1.0, 1.0), dot(normal, normalize(vec3(0.2, 0.2, 0.5))) * 0.5);\r\n    color = mix(color, vec3(0.9, 0.9, 2.0), pow(dot(normal, normalize(vec3(-2.0, -9.0, 0.5))) * 1.5 + 0.5, 1.0));\r\n\r\n    vec3 shadowColor = vec3(0.0, 1.0, 1.0);\r\n    color = mix(color, shadowColor, directionalLightWeighting);\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n}"},function(t,e){t.exports="attribute vec3 color;\r\n\r\nuniform float time;\r\nuniform float size;\r\n\r\nvarying vec4 vMvPosition;\r\nvarying vec3 vColor;\r\n\r\nfloat map(float value, float beforeMin, float beforeMax, float afterMin, float afterMax) {\r\n    return afterMin + (afterMax - afterMin) * ((value - beforeMin) / (beforeMax - beforeMin));\r\n}\r\n\r\nvoid main() {\r\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n    vMvPosition = mvPosition;\r\n    vColor = color;\r\n\r\n    gl_PointSize = (size + map(sin(time * 0.05), -1.0, 1.0, 0.0, 100.0)) * (100.0 / length(mvPosition.xyz));\r\n    gl_Position = projectionMatrix * mvPosition;\r\n}\r\n"},function(t,e){t.exports="uniform sampler2D texture;\r\nuniform float time;\r\n\r\nvarying vec4 vMvPosition;\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    float opacity = 200.0 / length(vMvPosition.xyz);\r\n\r\n    vec2 uv = gl_PointCoord.xy * 2.0 - 1.0;\r\n\r\n    float orb = 0.1 / length(vec2(0.0) - uv) * step(0.5, 1.0 - length(uv));\r\n    orb = smoothstep(0.0, 1.0, orb);\r\n\r\n    vec3 color = vec3(orb) * vColor;\r\n\r\n    gl_FragColor = vec4(color, 1.0);\r\n}\r\n"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlL2V4YW1wbGVzL2pzL01hcmNoaW5nQ3ViZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0d2VlbmpzL3R3ZWVuLmpzL3NyYy9Ud2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9zb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9zb3VuZFNoYWRlci5mcmFnIiwid2VicGFjazovLy8uL3NyYy9pY29zYWhlZHJvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC92ZXJ0ZXhTaGFkZXIudmVydCIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9mcmFnbWVudFNoYWRlci5mcmFnIiwid2VicGFjazovLy8uL3NyYy9nbHNsL29ibGlxdWVMaW5lRnJhZ21lbnRTaGFkZXIuZnJhZyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9zdW1tZWRXYXZlRnJhZ21lbnRTaGFkZXIuZnJhZyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2xzbC9wYXJ0aWNsZVZlcnRleFNoYWRlci52ZXJ0Iiwid2VicGFjazovLy8uL3NyYy9nbHNsL3BhcnRpY2xlRnJhZ21lbnRTaGFkZXIuZnJhZyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkV2ZW50RGlzcGF0Y2hlciIsInVuZGVmaW5lZCIsIk51bWJlciIsIkVQU0lMT04iLCJNYXRoIiwicG93IiwiaXNJbnRlZ2VyIiwiaXNGaW5pdGUiLCJmbG9vciIsInNpZ24iLCJ4IiwiRnVuY3Rpb24iLCJ0aGlzIiwidG9TdHJpbmciLCJtYXRjaCIsImFzc2lnbiIsInRhcmdldCIsIlR5cGVFcnJvciIsIm91dHB1dCIsImluZGV4IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwibmV4dEtleSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJzcGxpY2UiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnQiLCJhcnJheSIsInNsaWNlIiwibWluIiwibWF4IiwidmVjdG9yIiwibWF0cml4IiwieSIsInoiLCJ6ZXJvIiwib25lIiwidjEiLCJxdWF0ZXJuaW9uIiwiUkVWSVNJT04iLCJNT1VTRSIsIkxFRlQiLCJNSURETEUiLCJSSUdIVCIsIkN1bGxGYWNlTm9uZSIsIkN1bGxGYWNlQmFjayIsIkN1bGxGYWNlRnJvbnQiLCJDdWxsRmFjZUZyb250QmFjayIsIkZyb250RmFjZURpcmVjdGlvbkNXIiwiRnJvbnRGYWNlRGlyZWN0aW9uQ0NXIiwiQmFzaWNTaGFkb3dNYXAiLCJQQ0ZTaGFkb3dNYXAiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiRnJvbnRTaWRlIiwiQmFja1NpZGUiLCJEb3VibGVTaWRlIiwiRmxhdFNoYWRpbmciLCJTbW9vdGhTaGFkaW5nIiwiTm9Db2xvcnMiLCJGYWNlQ29sb3JzIiwiVmVydGV4Q29sb3JzIiwiTm9CbGVuZGluZyIsIk5vcm1hbEJsZW5kaW5nIiwiQWRkaXRpdmVCbGVuZGluZyIsIlN1YnRyYWN0aXZlQmxlbmRpbmciLCJNdWx0aXBseUJsZW5kaW5nIiwiQ3VzdG9tQmxlbmRpbmciLCJBZGRFcXVhdGlvbiIsIlN1YnRyYWN0RXF1YXRpb24iLCJSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiIsIk1pbkVxdWF0aW9uIiwiTWF4RXF1YXRpb24iLCJaZXJvRmFjdG9yIiwiT25lRmFjdG9yIiwiU3JjQ29sb3JGYWN0b3IiLCJPbmVNaW51c1NyY0NvbG9yRmFjdG9yIiwiU3JjQWxwaGFGYWN0b3IiLCJPbmVNaW51c1NyY0FscGhhRmFjdG9yIiwiRHN0QWxwaGFGYWN0b3IiLCJPbmVNaW51c0RzdEFscGhhRmFjdG9yIiwiRHN0Q29sb3JGYWN0b3IiLCJPbmVNaW51c0RzdENvbG9yRmFjdG9yIiwiU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciIsIk5ldmVyRGVwdGgiLCJBbHdheXNEZXB0aCIsIkxlc3NEZXB0aCIsIkxlc3NFcXVhbERlcHRoIiwiRXF1YWxEZXB0aCIsIkdyZWF0ZXJFcXVhbERlcHRoIiwiR3JlYXRlckRlcHRoIiwiTm90RXF1YWxEZXB0aCIsIk11bHRpcGx5T3BlcmF0aW9uIiwiTWl4T3BlcmF0aW9uIiwiQWRkT3BlcmF0aW9uIiwiTm9Ub25lTWFwcGluZyIsIkxpbmVhclRvbmVNYXBwaW5nIiwiUmVpbmhhcmRUb25lTWFwcGluZyIsIlVuY2hhcnRlZDJUb25lTWFwcGluZyIsIkNpbmVvblRvbmVNYXBwaW5nIiwiVVZNYXBwaW5nIiwiQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVJlZnJhY3Rpb25NYXBwaW5nIiwiRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyIsIlNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyIsIlJlcGVhdFdyYXBwaW5nIiwiQ2xhbXBUb0VkZ2VXcmFwcGluZyIsIk1pcnJvcmVkUmVwZWF0V3JhcHBpbmciLCJOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyIiwiTGluZWFyRmlsdGVyIiwiTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciIsIkxpbmVhck1pcE1hcExpbmVhckZpbHRlciIsIlVuc2lnbmVkQnl0ZVR5cGUiLCJCeXRlVHlwZSIsIlNob3J0VHlwZSIsIlVuc2lnbmVkU2hvcnRUeXBlIiwiSW50VHlwZSIsIlVuc2lnbmVkSW50VHlwZSIsIkZsb2F0VHlwZSIsIkhhbGZGbG9hdFR5cGUiLCJVbnNpZ25lZFNob3J0NDQ0NFR5cGUiLCJVbnNpZ25lZFNob3J0NTU1MVR5cGUiLCJVbnNpZ25lZFNob3J0NTY1VHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIkFscGhhRm9ybWF0IiwiUkdCRm9ybWF0IiwiUkdCQUZvcm1hdCIsIkx1bWluYW5jZUZvcm1hdCIsIkx1bWluYW5jZUFscGhhRm9ybWF0IiwiUkdCRUZvcm1hdCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiUmVkRm9ybWF0IiwiUkdCX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUM19Gb3JtYXQiLCJSR0JBX1MzVENfRFhUNV9Gb3JtYXQiLCJSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCX0VUQzFfRm9ybWF0IiwiUkdCQV9BU1RDXzR4NF9Gb3JtYXQiLCJSR0JBX0FTVENfNXg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzZ4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzh4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfOHg4X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg1X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg4X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IiwiUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCIsIkxvb3BPbmNlIiwiTG9vcFJlcGVhdCIsIkxvb3BQaW5nUG9uZyIsIkludGVycG9sYXRlRGlzY3JldGUiLCJJbnRlcnBvbGF0ZUxpbmVhciIsIkludGVycG9sYXRlU21vb3RoIiwiWmVyb0N1cnZhdHVyZUVuZGluZyIsIlplcm9TbG9wZUVuZGluZyIsIldyYXBBcm91bmRFbmRpbmciLCJUcmlhbmdsZXNEcmF3TW9kZSIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIlRyaWFuZ2xlRmFuRHJhd01vZGUiLCJMaW5lYXJFbmNvZGluZyIsInNSR0JFbmNvZGluZyIsIkdhbW1hRW5jb2RpbmciLCJSR0JFRW5jb2RpbmciLCJMb2dMdXZFbmNvZGluZyIsIlJHQk03RW5jb2RpbmciLCJSR0JNMTZFbmNvZGluZyIsIlJHQkRFbmNvZGluZyIsIkJhc2ljRGVwdGhQYWNraW5nIiwiUkdCQURlcHRoUGFja2luZyIsIlRhbmdlbnRTcGFjZU5vcm1hbE1hcCIsIk9iamVjdFNwYWNlTm9ybWFsTWFwIiwiX01hdGgiLCJERUcyUkFEIiwiUEkiLCJSQUQyREVHIiwiZ2VuZXJhdGVVVUlEIiwibHV0IiwiZDAiLCJyYW5kb20iLCJkMSIsImQyIiwiZDMiLCJ0b1VwcGVyQ2FzZSIsImNsYW1wIiwiZXVjbGlkZWFuTW9kdWxvIiwibWFwTGluZWFyIiwiYTEiLCJhMiIsImIxIiwiYjIiLCJsZXJwIiwic21vb3Roc3RlcCIsInNtb290aGVyc3RlcCIsInJhbmRJbnQiLCJsb3ciLCJoaWdoIiwicmFuZEZsb2F0IiwicmFuZEZsb2F0U3ByZWFkIiwicmFuZ2UiLCJkZWdUb1JhZCIsImRlZ3JlZXMiLCJyYWRUb0RlZyIsInJhZGlhbnMiLCJpc1Bvd2VyT2ZUd28iLCJjZWlsUG93ZXJPZlR3byIsImNlaWwiLCJsb2ciLCJMTjIiLCJmbG9vclBvd2VyT2ZUd28iLCJWZWN0b3IyIiwiTWF0cml4NCIsImVsZW1lbnRzIiwiY29uc29sZSIsImVycm9yIiwiUXVhdGVybmlvbiIsInciLCJfeCIsIl95IiwiX3oiLCJfdyIsIlZlY3RvcjMiLCJNYXRyaXgzIiwiZGVmaW5lUHJvcGVydGllcyIsInNldCIsImlzVmVjdG9yMiIsInNldFNjYWxhciIsInNjYWxhciIsInNldFgiLCJzZXRZIiwic2V0Q29tcG9uZW50IiwiRXJyb3IiLCJnZXRDb21wb25lbnQiLCJjbG9uZSIsImNvbnN0cnVjdG9yIiwiY29weSIsInYiLCJhZGQiLCJ3YXJuIiwiYWRkVmVjdG9ycyIsImFkZFNjYWxhciIsImEiLCJiIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViIiwic3ViVmVjdG9ycyIsInN1YlNjYWxhciIsIm11bHRpcGx5IiwibXVsdGlwbHlTY2FsYXIiLCJkaXZpZGUiLCJkaXZpZGVTY2FsYXIiLCJhcHBseU1hdHJpeDMiLCJlIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsInJvdW5kIiwicm91bmRUb1plcm8iLCJuZWdhdGUiLCJkb3QiLCJjcm9zcyIsImxlbmd0aFNxIiwic3FydCIsIm1hbmhhdHRhbkxlbmd0aCIsImFicyIsIm5vcm1hbGl6ZSIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZVRvIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJkeCIsImR5IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldExlbmd0aCIsImFscGhhIiwibGVycFZlY3RvcnMiLCJ2MiIsImVxdWFscyIsImZyb21BcnJheSIsIm9mZnNldCIsInRvQXJyYXkiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZ2V0WCIsImdldFkiLCJyb3RhdGVBcm91bmQiLCJjZW50ZXIiLCJjb3MiLCJzaW4iLCJpc01hdHJpeDQiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMTQiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMjQiLCJuMzEiLCJuMzIiLCJuMzMiLCJuMzQiLCJuNDEiLCJuNDIiLCJuNDMiLCJuNDQiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJjb3B5UG9zaXRpb24iLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwibWFrZUJhc2lzIiwiZXh0cmFjdFJvdGF0aW9uIiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGVaIiwibWFrZVJvdGF0aW9uRnJvbUV1bGVyIiwiZXVsZXIiLCJpc0V1bGVyIiwiZiIsIm9yZGVyIiwiYWUiLCJhZiIsImJlIiwiYmYiLCJjZSIsImNmIiwiZGUiLCJkZiIsImFjIiwiYWQiLCJiYyIsImJkIiwibWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJxIiwiY29tcG9zZSIsImxvb2tBdCIsImV5ZSIsInVwIiwiY3Jvc3NWZWN0b3JzIiwibXVsdGlwbHlNYXRyaWNlcyIsInByZW11bHRpcGx5IiwiYTExIiwiYTEyIiwiYTEzIiwiYTE0IiwiYTIxIiwiYTIyIiwiYTIzIiwiYTI0IiwiYTMxIiwiYTMyIiwiYTMzIiwiYTM0IiwiYTQxIiwiYTQyIiwiYTQzIiwiYTQ0IiwiYjExIiwiYjEyIiwiYjEzIiwiYjE0IiwiYjIxIiwiYjIyIiwiYjIzIiwiYjI0IiwiYjMxIiwiYjMyIiwiYjMzIiwiYjM0IiwiYjQxIiwiYjQyIiwiYjQzIiwiYjQ0IiwiYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSIsImNvdW50IiwiZ2V0WiIsImFwcGx5TWF0cml4NCIsInNldFhZWiIsImRldGVybWluYW50IiwidHJhbnNwb3NlIiwidG1wIiwic2V0UG9zaXRpb24iLCJnZXRJbnZlcnNlIiwidGhyb3dPbkRlZ2VuZXJhdGUiLCJ0MTEiLCJ0MTIiLCJ0MTMiLCJ0MTQiLCJkZXQiLCJtc2ciLCJkZXRJbnYiLCJzY2FsZSIsImdldE1heFNjYWxlT25BeGlzIiwic2NhbGVYU3EiLCJzY2FsZVlTcSIsInNjYWxlWlNxIiwibWFrZVRyYW5zbGF0aW9uIiwibWFrZVJvdGF0aW9uWCIsInRoZXRhIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwiYXhpcyIsInR4IiwidHkiLCJtYWtlU2NhbGUiLCJtYWtlU2hlYXIiLCJwb3NpdGlvbiIsIngyIiwieTIiLCJ6MiIsInh4IiwieHkiLCJ4eiIsInl5IiwieXoiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsInN4Iiwic3kiLCJzeiIsImRlY29tcG9zZSIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsIm1ha2VQZXJzcGVjdGl2ZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5lYXIiLCJmYXIiLCJtYWtlT3J0aG9ncmFwaGljIiwiaCIsInNsZXJwIiwicWEiLCJxYiIsInFtIiwic2xlcnBGbGF0IiwiZHN0IiwiZHN0T2Zmc2V0Iiwic3JjMCIsInNyY09mZnNldDAiLCJzcmMxIiwic3JjT2Zmc2V0MSIsIngwIiwieTAiLCJ6MCIsIncwIiwieDEiLCJ5MSIsInoxIiwidzEiLCJkaXIiLCJzcXJTaW4iLCJsZW4iLCJ0RGlyIiwib25DaGFuZ2VDYWxsYmFjayIsImlzUXVhdGVybmlvbiIsInNldEZyb21FdWxlciIsInVwZGF0ZSIsImMxIiwiYzIiLCJjMyIsInMxIiwiczIiLCJzMyIsInNldEZyb21BeGlzQW5nbGUiLCJoYWxmQW5nbGUiLCJtMTEiLCJtMTIiLCJtMTMiLCJtMjEiLCJtMjIiLCJtMjMiLCJtMzEiLCJtMzIiLCJtMzMiLCJ0cmFjZSIsInNldEZyb21Vbml0VmVjdG9ycyIsInZGcm9tIiwidlRvIiwiYW5nbGVUbyIsImFjb3MiLCJyb3RhdGVUb3dhcmRzIiwic3RlcCIsImludmVyc2UiLCJjb25qdWdhdGUiLCJtdWx0aXBseVF1YXRlcm5pb25zIiwicWF4IiwicWF5IiwicWF6IiwicWF3IiwicWJ4IiwicWJ5IiwicWJ6IiwicWJ3IiwiY29zSGFsZlRoZXRhIiwic3FyU2luSGFsZlRoZXRhIiwic2luSGFsZlRoZXRhIiwiaGFsZlRoZXRhIiwicmF0aW9BIiwicmF0aW9CIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImlzVmVjdG9yMyIsInNldFoiLCJtdWx0aXBseVZlY3RvcnMiLCJhcHBseUV1bGVyIiwiYXBwbHlRdWF0ZXJuaW9uIiwiYXBwbHlBeGlzQW5nbGUiLCJxeCIsInF5IiwicXoiLCJxdyIsIml4IiwiaXkiLCJpeiIsIml3IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJtYXRyaXhXb3JsZCIsInRyYW5zZm9ybURpcmVjdGlvbiIsImF4IiwiYXkiLCJheiIsImJ4IiwiYnkiLCJieiIsInByb2plY3RPblZlY3RvciIsInByb2plY3RPblBsYW5lIiwicGxhbmVOb3JtYWwiLCJyZWZsZWN0Iiwibm9ybWFsIiwiZHoiLCJzZXRGcm9tU3BoZXJpY2FsIiwic2V0RnJvbVNwaGVyaWNhbENvb3JkcyIsInJhZGl1cyIsInBoaSIsInNpblBoaVJhZGl1cyIsInNldEZyb21DeWxpbmRyaWNhbCIsInNldEZyb21DeWxpbmRyaWNhbENvb3JkcyIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsInNldEZyb21NYXRyaXhTY2FsZSIsImlzTWF0cml4MyIsInNldEZyb21NYXRyaXg0IiwiZyIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeDQiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJzZXRVdlRyYW5zZm9ybSIsInJvdGF0aW9uIiwiY3giLCJjeSIsInJvdGF0ZSIsInRyYW5zbGF0ZSIsInBvaW50cyIsImNsb3Nlc3RQb2ludCIsImJveCIsInNwaGVyZSIsIkltYWdlVXRpbHMiLCJnZXREYXRhVVJMIiwiaW1hZ2UiLCJjYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsInNyYyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwid2lkdGgiLCJoZWlnaHQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIkltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInRleHR1cmVJZCIsIlRleHR1cmUiLCJtYXBwaW5nIiwid3JhcFMiLCJ3cmFwVCIsIm1hZ0ZpbHRlciIsIm1pbkZpbHRlciIsImZvcm1hdCIsImFuaXNvdHJvcHkiLCJlbmNvZGluZyIsInV1aWQiLCJERUZBVUxUX0lNQUdFIiwibWlwbWFwcyIsIkRFRkFVTFRfTUFQUElORyIsInJlcGVhdCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJnZW5lcmF0ZU1pcG1hcHMiLCJwcmVtdWx0aXBseUFscGhhIiwiZmxpcFkiLCJ1bnBhY2tBbGlnbm1lbnQiLCJ2ZXJzaW9uIiwib25VcGRhdGUiLCJWZWN0b3I0IiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJvcHRpb25zIiwic2Npc3NvciIsInNjaXNzb3JUZXN0Iiwidmlld3BvcnQiLCJ0ZXh0dXJlIiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsQnVmZmVyIiwiZGVwdGhUZXh0dXJlIiwiV2ViR0xSZW5kZXJUYXJnZXRDdWJlIiwiYWN0aXZlQ3ViZUZhY2UiLCJhY3RpdmVNaXBNYXBMZXZlbCIsIkRhdGFUZXh0dXJlIiwiZGF0YSIsIkJveDMiLCJJbmZpbml0eSIsIlNwaGVyZSIsIlBsYW5lIiwiY29uc3RhbnQiLCJGcnVzdHVtIiwicDAiLCJwMSIsInAyIiwicDMiLCJwNCIsInA1IiwicGxhbmVzIiwiaXNUZXh0dXJlIiwidXBkYXRlTWF0cml4IiwidG9KU09OIiwibWV0YSIsImlzUm9vdE9iamVjdCIsInRleHR1cmVzIiwibWV0YWRhdGEiLCJnZW5lcmF0b3IiLCJ3cmFwIiwiaW1hZ2VzIiwidXJsIiwiQXJyYXkiLCJpc0FycmF5IiwiZGlzcG9zZSIsInRyYW5zZm9ybVV2IiwidXYiLCJpc1ZlY3RvcjQiLCJzZXRXIiwic2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24iLCJzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXgiLCJnZXRXIiwiaXNXZWJHTFJlbmRlclRhcmdldCIsInNldFNpemUiLCJpc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSIsImlzRGF0YVRleHR1cmUiLCJpc0JveDMiLCJzZXRGcm9tQXJyYXkiLCJtaW5YIiwibWluWSIsIm1pbloiLCJtYXhYIiwibWF4WSIsIm1heFoiLCJzZXRGcm9tQnVmZmVyQXR0cmlidXRlIiwic2V0RnJvbVBvaW50cyIsIm1ha2VFbXB0eSIsImlsIiwiZXhwYW5kQnlQb2ludCIsInNldEZyb21DZW50ZXJBbmRTaXplIiwic2l6ZSIsImhhbGZTaXplIiwic2V0RnJvbU9iamVjdCIsImV4cGFuZEJ5T2JqZWN0IiwiaXNFbXB0eSIsImdldENlbnRlciIsImdldFNpemUiLCJwb2ludCIsImV4cGFuZEJ5VmVjdG9yIiwiZXhwYW5kQnlTY2FsYXIiLCJzY29wZSIsInRyYXZlcnNlIiwibm9kZSIsImdlb21ldHJ5IiwiaXNHZW9tZXRyeSIsInZlcnRpY2VzIiwiaXNCdWZmZXJHZW9tZXRyeSIsImF0dHJpYnV0ZXMiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiaW50ZXJzZWN0c1RyaWFuZ2xlIiwidjAiLCJmMCIsImYxIiwiZjIiLCJ0ZXN0QXhpcyIsImV4dGVudHMiLCJ0cmlhbmdsZU5vcm1hbCIsInNhdEZvckF4ZXMiLCJheGVzIiwiaiIsInRyaWFuZ2xlIiwiZGlzdGFuY2VUb1BvaW50IiwiZ2V0Qm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3QiLCJ1bmlvbiIsIm9wdGlvbmFsQ2VudGVyIiwibWF4UmFkaXVzU3EiLCJlbXB0eSIsInJhZGl1c1N1bSIsImRlbHRhTGVuZ3RoU3EiLCJnZXRCb3VuZGluZ0JveCIsInNldENvbXBvbmVudHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsInNldEZyb21Db3BsYW5hclBvaW50cyIsImludmVyc2VOb3JtYWxMZW5ndGgiLCJkaXN0YW5jZVRvU3BoZXJlIiwicHJvamVjdFBvaW50IiwiaW50ZXJzZWN0TGluZSIsImxpbmUiLCJkaXJlY3Rpb24iLCJkZWx0YSIsImRlbm9taW5hdG9yIiwic3RhcnQiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJlbmQiLCJjb3BsYW5hclBvaW50IiwibTEiLCJvcHRpb25hbE5vcm1hbE1hdHJpeCIsIm5vcm1hbE1hdHJpeCIsInJlZmVyZW5jZVBvaW50IiwiZnJ1c3R1bSIsInNldEZyb21NYXRyaXgiLCJtZTAiLCJtZTEiLCJtZTIiLCJtZTMiLCJtZTQiLCJtZTUiLCJtZTYiLCJtZTciLCJtZTgiLCJtZTkiLCJtZTEwIiwibWUxMSIsIm1lMTIiLCJtZTEzIiwibWUxNCIsIm1lMTUiLCJpbnRlcnNlY3RzT2JqZWN0IiwiYm91bmRpbmdTcGhlcmUiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3RzU3ByaXRlIiwic3ByaXRlIiwibmVnUmFkaXVzIiwiaHNsQSIsImhzbEIiLCJoc2wiLCJTaGFkZXJDaHVuayIsImFscGhhbWFwX2ZyYWdtZW50IiwiYWxwaGFtYXBfcGFyc19mcmFnbWVudCIsImFscGhhdGVzdF9mcmFnbWVudCIsImFvbWFwX2ZyYWdtZW50IiwiYW9tYXBfcGFyc19mcmFnbWVudCIsImJlZ2luX3ZlcnRleCIsImJlZ2lubm9ybWFsX3ZlcnRleCIsImJzZGZzIiwiYnVtcG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgiLCJjbGlwcGluZ19wbGFuZXNfdmVydGV4IiwiY29sb3JfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX2ZyYWdtZW50IiwiY29sb3JfcGFyc192ZXJ0ZXgiLCJjb2xvcl92ZXJ0ZXgiLCJjb21tb24iLCJjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQiLCJkZWZhdWx0bm9ybWFsX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgiLCJlbWlzc2l2ZW1hcF9mcmFnbWVudCIsImVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQiLCJlbmNvZGluZ3NfZnJhZ21lbnQiLCJlbmNvZGluZ3NfcGFyc19mcmFnbWVudCIsImVudm1hcF9mcmFnbWVudCIsImVudm1hcF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfdmVydGV4IiwiZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfdmVydGV4IiwiZm9nX3ZlcnRleCIsImZvZ19wYXJzX3ZlcnRleCIsImZvZ19mcmFnbWVudCIsImZvZ19wYXJzX2ZyYWdtZW50IiwiZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0bWFwX2ZyYWdtZW50IiwibGlnaHRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0c19sYW1iZXJ0X3ZlcnRleCIsImxpZ2h0c19wYXJzX2JlZ2luIiwibGlnaHRzX3Bob25nX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImxpZ2h0c19mcmFnbWVudF9iZWdpbiIsImxpZ2h0c19mcmFnbWVudF9tYXBzIiwibGlnaHRzX2ZyYWdtZW50X2VuZCIsImxvZ2RlcHRoYnVmX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4IiwibG9nZGVwdGhidWZfdmVydGV4IiwibWFwX2ZyYWdtZW50IiwibWFwX3BhcnNfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50IiwibW9ycGhub3JtYWxfdmVydGV4IiwibW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgiLCJtb3JwaHRhcmdldF92ZXJ0ZXgiLCJub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJub3JtYWxfZnJhZ21lbnRfbWFwcyIsIm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IiwicGFja2luZyIsInByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQiLCJwcm9qZWN0X3ZlcnRleCIsImRpdGhlcmluZ19mcmFnbWVudCIsImRpdGhlcmluZ19wYXJzX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX3ZlcnRleCIsInNoYWRvd21hcF92ZXJ0ZXgiLCJzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQiLCJza2luYmFzZV92ZXJ0ZXgiLCJza2lubmluZ19wYXJzX3ZlcnRleCIsInNraW5uaW5nX3ZlcnRleCIsInNraW5ub3JtYWxfdmVydGV4Iiwic3BlY3VsYXJtYXBfZnJhZ21lbnQiLCJzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50IiwidXZfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfdmVydGV4IiwidXZfdmVydGV4IiwidXYyX3BhcnNfZnJhZ21lbnQiLCJ1djJfcGFyc192ZXJ0ZXgiLCJ1djJfdmVydGV4Iiwid29ybGRwb3NfdmVydGV4IiwiYmFja2dyb3VuZF9mcmFnIiwiYmFja2dyb3VuZF92ZXJ0IiwiY3ViZV9mcmFnIiwiY3ViZV92ZXJ0IiwiZGVwdGhfZnJhZyIsImRlcHRoX3ZlcnQiLCJkaXN0YW5jZVJHQkFfZnJhZyIsImRpc3RhbmNlUkdCQV92ZXJ0IiwiZXF1aXJlY3RfZnJhZyIsImVxdWlyZWN0X3ZlcnQiLCJsaW5lZGFzaGVkX2ZyYWciLCJsaW5lZGFzaGVkX3ZlcnQiLCJtZXNoYmFzaWNfZnJhZyIsIm1lc2hiYXNpY192ZXJ0IiwibWVzaGxhbWJlcnRfZnJhZyIsIm1lc2hsYW1iZXJ0X3ZlcnQiLCJtZXNobWF0Y2FwX2ZyYWciLCJtZXNobWF0Y2FwX3ZlcnQiLCJtZXNocGhvbmdfZnJhZyIsIm1lc2hwaG9uZ192ZXJ0IiwibWVzaHBoeXNpY2FsX2ZyYWciLCJtZXNocGh5c2ljYWxfdmVydCIsIm5vcm1hbF9mcmFnIiwibm9ybWFsX3ZlcnQiLCJwb2ludHNfZnJhZyIsInBvaW50c192ZXJ0Iiwic2hhZG93X2ZyYWciLCJzaGFkb3dfdmVydCIsInNwcml0ZV9mcmFnIiwic3ByaXRlX3ZlcnQiLCJVbmlmb3Jtc1V0aWxzIiwibWVyZ2UiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsInUiLCJ1bmlmb3Jtc19zcmMiLCJ1bmlmb3Jtc19kc3QiLCJwYXJhbWV0ZXJfc3JjIiwiaXNDb2xvciIsIkNvbG9yS2V5d29yZHMiLCJDb2xvciIsInNldFJHQiIsInNldEhleCIsInNldFN0eWxlIiwiaGV4Iiwic2V0SFNMIiwiaHVlMnJnYiIsInN0eWxlIiwiaGFuZGxlQWxwaGEiLCJzdHJpbmciLCJwYXJzZUZsb2F0IiwiZXhlYyIsImNvbG9yIiwiY29tcG9uZW50cyIsInBhcnNlSW50IiwiY2hhckF0IiwiY29weUdhbW1hVG9MaW5lYXIiLCJnYW1tYUZhY3RvciIsImNvcHlMaW5lYXJUb0dhbW1hIiwic2FmZUludmVyc2UiLCJjb252ZXJ0R2FtbWFUb0xpbmVhciIsImNvbnZlcnRMaW5lYXJUb0dhbW1hIiwiY29weVNSR0JUb0xpbmVhciIsIlNSR0JUb0xpbmVhciIsImNvcHlMaW5lYXJUb1NSR0IiLCJMaW5lYXJUb1NSR0IiLCJjb252ZXJ0U1JHQlRvTGluZWFyIiwiY29udmVydExpbmVhclRvU1JHQiIsImdldEhleCIsImdldEhleFN0cmluZyIsImdldEhTTCIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJnZXRTdHlsZSIsIm9mZnNldEhTTCIsImFkZENvbG9ycyIsImNvbG9yMSIsImNvbG9yMiIsImxlcnBIU0wiLCJVbmlmb3Jtc0xpYiIsImRpZmZ1c2UiLCJvcGFjaXR5IiwibWFwIiwidXZUcmFuc2Zvcm0iLCJhbHBoYU1hcCIsInNwZWN1bGFybWFwIiwic3BlY3VsYXJNYXAiLCJlbnZtYXAiLCJlbnZNYXAiLCJmbGlwRW52TWFwIiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwibWF4TWlwTGV2ZWwiLCJhb21hcCIsImFvTWFwIiwiYW9NYXBJbnRlbnNpdHkiLCJsaWdodG1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJlbWlzc2l2ZW1hcCIsImVtaXNzaXZlTWFwIiwiYnVtcG1hcCIsImJ1bXBNYXAiLCJidW1wU2NhbGUiLCJub3JtYWxtYXAiLCJub3JtYWxNYXAiLCJub3JtYWxTY2FsZSIsImRpc3BsYWNlbWVudG1hcCIsImRpc3BsYWNlbWVudE1hcCIsImRpc3BsYWNlbWVudFNjYWxlIiwiZGlzcGxhY2VtZW50QmlhcyIsInJvdWdobmVzc21hcCIsInJvdWdobmVzc01hcCIsIm1ldGFsbmVzc21hcCIsIm1ldGFsbmVzc01hcCIsImdyYWRpZW50bWFwIiwiZ3JhZGllbnRNYXAiLCJmb2ciLCJmb2dEZW5zaXR5IiwiZm9nTmVhciIsImZvZ0ZhciIsImZvZ0NvbG9yIiwibGlnaHRzIiwiYW1iaWVudExpZ2h0Q29sb3IiLCJkaXJlY3Rpb25hbExpZ2h0cyIsInByb3BlcnRpZXMiLCJzaGFkb3ciLCJzaGFkb3dCaWFzIiwic2hhZG93UmFkaXVzIiwic2hhZG93TWFwU2l6ZSIsImRpcmVjdGlvbmFsU2hhZG93TWFwIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgiLCJzcG90TGlnaHRzIiwiZGlzdGFuY2UiLCJjb25lQ29zIiwicGVudW1icmFDb3MiLCJkZWNheSIsInNwb3RTaGFkb3dNYXAiLCJzcG90U2hhZG93TWF0cml4IiwicG9pbnRMaWdodHMiLCJzaGFkb3dDYW1lcmFOZWFyIiwic2hhZG93Q2FtZXJhRmFyIiwicG9pbnRTaGFkb3dNYXAiLCJwb2ludFNoYWRvd01hdHJpeCIsImhlbWlzcGhlcmVMaWdodHMiLCJza3lDb2xvciIsImdyb3VuZENvbG9yIiwicmVjdEFyZWFMaWdodHMiLCJTaGFkZXJMaWIiLCJiYXNpYyIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibGFtYmVydCIsImVtaXNzaXZlIiwicGhvbmciLCJzcGVjdWxhciIsInNoaW5pbmVzcyIsInN0YW5kYXJkIiwicm91Z2huZXNzIiwibWV0YWxuZXNzIiwiZW52TWFwSW50ZW5zaXR5IiwibWF0Y2FwIiwiZGFzaGVkIiwiZGFzaFNpemUiLCJ0b3RhbFNpemUiLCJkZXB0aCIsImJhY2tncm91bmQiLCJ0MkQiLCJjdWJlIiwidEN1YmUiLCJ0RmxpcCIsImVxdWlyZWN0IiwidEVxdWlyZWN0IiwiZGlzdGFuY2VSR0JBIiwicmVmZXJlbmNlUG9zaXRpb24iLCJuZWFyRGlzdGFuY2UiLCJmYXJEaXN0YW5jZSIsIldlYkdMQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJhbmltYXRpb25Mb29wIiwib25BbmltYXRpb25GcmFtZSIsInRpbWUiLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0b3AiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiYnVmZmVycyIsIldlYWtNYXAiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwicmVtb3ZlIiwiZGVsZXRlQnVmZmVyIiwiYnVmZmVyIiwiZGVsZXRlIiwiYnVmZmVyVHlwZSIsInVzYWdlIiwiZHluYW1pYyIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwib25VcGxvYWRDYWxsYmFjayIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiSW50MzJBcnJheSIsIkludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJieXRlc1BlckVsZW1lbnQiLCJCWVRFU19QRVJfRUxFTUVOVCIsInVwZGF0ZVJhbmdlIiwiYnVmZmVyU3ViRGF0YSIsInN1YmFycmF5IiwidXBkYXRlQnVmZmVyIiwiRmFjZTMiLCJtYXRlcmlhbEluZGV4IiwidmVydGV4Tm9ybWFscyIsInZlcnRleENvbG9ycyIsIkV1bGVyIiwiX29yZGVyIiwiRGVmYXVsdE9yZGVyIiwiTGF5ZXJzIiwibWFzayIsInBoeXNpY2FsIiwiY2xlYXJDb2F0IiwiY2xlYXJDb2F0Um91Z2huZXNzIiwiUm90YXRpb25PcmRlcnMiLCJhc2luIiwic2V0RnJvbVF1YXRlcm5pb24iLCJzZXRGcm9tVmVjdG9yMyIsInJlb3JkZXIiLCJuZXdPcmRlciIsInRvVmVjdG9yMyIsIm9wdGlvbmFsUmVzdWx0IiwiY2hhbm5lbCIsImVuYWJsZSIsInRvZ2dsZSIsImRpc2FibGUiLCJ0ZXN0IiwibGF5ZXJzIiwicTEiLCJvYmplY3QzRElkIiwiT2JqZWN0M0QiLCJwYXJlbnQiLCJjaGlsZHJlbiIsIkRlZmF1bHRVcCIsImNvbmZpZ3VyYWJsZSIsIm1vZGVsVmlld01hdHJpeCIsIkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlIiwibWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInZpc2libGUiLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsInVzZXJEYXRhIiwiaXNPYmplY3QzRCIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsImFwcGx5TWF0cml4Iiwic2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlIiwic2V0Um90YXRpb25Gcm9tRXVsZXIiLCJzZXRSb3RhdGlvbkZyb21NYXRyaXgiLCJzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwicm90YXRlT25BeGlzIiwicm90YXRlT25Xb3JsZEF4aXMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJ0cmFuc2xhdGVPbkF4aXMiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJsb2NhbFRvV29ybGQiLCJ3b3JsZFRvTG9jYWwiLCJ1cGRhdGVXb3JsZE1hdHJpeCIsImlzQ2FtZXJhIiwiZ2V0T2JqZWN0QnlJZCIsImlkIiwiZ2V0T2JqZWN0QnlQcm9wZXJ0eSIsImdldE9iamVjdEJ5TmFtZSIsImdldFdvcmxkUG9zaXRpb24iLCJnZXRXb3JsZFF1YXRlcm5pb24iLCJnZXRXb3JsZFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJyYXljYXN0IiwidHJhdmVyc2VWaXNpYmxlIiwidHJhdmVyc2VBbmNlc3RvcnMiLCJmb3JjZSIsInVwZGF0ZVBhcmVudHMiLCJ1cGRhdGVDaGlsZHJlbiIsImdlb21ldHJpZXMiLCJtYXRlcmlhbHMiLCJzaGFwZXMiLCJzZXJpYWxpemUiLCJsaWJyYXJ5IiwiZWxlbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc01lc2giLCJpc0xpbmUiLCJpc1BvaW50cyIsInBhcmFtZXRlcnMiLCJzaGFwZSIsIm1hdGVyaWFsIiwidXVpZHMiLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJyZWN1cnNpdmUiLCJwYXJzZSIsImNoaWxkIiwib2JqIiwiZ2VvbWV0cnlJZCIsIkdlb21ldHJ5IiwiY29sb3JzIiwiZmFjZXMiLCJmYWNlVmVydGV4VXZzIiwibW9ycGhUYXJnZXRzIiwibW9ycGhOb3JtYWxzIiwic2tpbldlaWdodHMiLCJza2luSW5kaWNlcyIsImxpbmVEaXN0YW5jZXMiLCJib3VuZGluZ0JveCIsImVsZW1lbnRzTmVlZFVwZGF0ZSIsInZlcnRpY2VzTmVlZFVwZGF0ZSIsInV2c05lZWRVcGRhdGUiLCJub3JtYWxzTmVlZFVwZGF0ZSIsImNvbG9yc05lZWRVcGRhdGUiLCJsaW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSIsImdyb3Vwc05lZWRVcGRhdGUiLCJCdWZmZXJBdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsIm5vcm1hbGl6ZWQiLCJJbnQ4QnVmZmVyQXR0cmlidXRlIiwiVWludDhCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QnVmZmVyQXR0cmlidXRlIiwiVWludDE2QnVmZmVyQXR0cmlidXRlIiwiSW50MzJCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MzJCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDMyQnVmZmVyQXR0cmlidXRlIiwiRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSIsIkRpcmVjdEdlb21ldHJ5Iiwibm9ybWFscyIsInV2cyIsInV2czIiLCJncm91cHMiLCJhcnJheU1heCIsImZhY2UiLCJqbCIsImNvbXB1dGVCb3VuZGluZ0JveCIsImZyb21CdWZmZXJHZW9tZXRyeSIsImluZGljZXMiLCJwb3NpdGlvbnMiLCJ1djIiLCJhZGRGYWNlIiwiZ3JvdXAiLCJjb21wdXRlRmFjZU5vcm1hbHMiLCJjYiIsImFiIiwiZmwiLCJ2QSIsInZCIiwidkMiLCJjb21wdXRlVmVydGV4Tm9ybWFscyIsImFyZWFXZWlnaHRlZCIsInZsIiwiY29tcHV0ZUZsYXRWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZU1vcnBoTm9ybWFscyIsIl9fb3JpZ2luYWxGYWNlTm9ybWFsIiwiX19vcmlnaW5hbFZlcnRleE5vcm1hbHMiLCJ0bXBHZW8iLCJmYWNlTm9ybWFscyIsImRzdE5vcm1hbHNGYWNlIiwiZHN0Tm9ybWFsc1ZlcnRleCIsImZhY2VOb3JtYWwiLCJtYXRlcmlhbEluZGV4T2Zmc2V0IiwidmVydGV4T2Zmc2V0IiwidmVydGljZXMxIiwidmVydGljZXMyIiwiZmFjZXMxIiwiZmFjZXMyIiwidXZzMSIsImNvbG9yczEiLCJjb2xvcnMyIiwidmVydGV4Q29weSIsImZhY2VDb3B5IiwiZmFjZVZlcnRleE5vcm1hbHMiLCJmYWNlVmVydGV4Q29sb3JzIiwidXZDb3B5IiwibWVyZ2VNZXNoIiwibWVzaCIsIm1lcmdlVmVydGljZXMiLCJ2ZXJ0aWNlc01hcCIsInVuaXF1ZSIsImNoYW5nZXMiLCJwcmVjaXNpb24iLCJmYWNlSW5kaWNlc1RvUmVtb3ZlIiwiaWR4IiwiZGlmZiIsInNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleCIsIl9pZCIsInNvcnQiLCJuZXdVdnMxIiwibmV3VXZzMiIsInZlcnRleCIsIm5vcm1hbHNIYXNoIiwiY29sb3JzSGFzaCIsInV2c0hhc2giLCJoYXNGYWNlVmVydGV4VXYiLCJoYXNGYWNlTm9ybWFsIiwiaGFzRmFjZVZlcnRleE5vcm1hbCIsImhhc0ZhY2VDb2xvciIsImhhc0ZhY2VWZXJ0ZXhDb2xvciIsImZhY2VUeXBlIiwic2V0Qml0IiwiZ2V0VXZJbmRleCIsImdldE5vcm1hbEluZGV4IiwiZ2V0Q29sb3JJbmRleCIsImVuYWJsZWQiLCJoYXNoIiwiayIsImtsIiwidXZzQ29weSIsIm1vcnBoVGFyZ2V0IiwibW9ycGhOb3JtYWwiLCJzcmNWZXJ0ZXhOb3JtYWwiLCJkZXN0VmVydGV4Tm9ybWFsIiwiaXNCdWZmZXJBdHRyaWJ1dGUiLCJzZXRBcnJheSIsInNldER5bmFtaWMiLCJjb3B5QXQiLCJpbmRleDEiLCJpbmRleDIiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb3B5VmVjdG9yMnNBcnJheSIsInZlY3RvcnMiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5Iiwic2V0WFkiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJjb21wdXRlR3JvdXBzIiwiZnJvbUdlb21ldHJ5IiwibW9ycGhUYXJnZXRzUG9zaXRpb24iLCJoYXNGYWNlVmVydGV4VXYyIiwibW9ycGhUYXJnZXRzTGVuZ3RoIiwibW9ycGhUYXJnZXRzTm9ybWFsIiwibW9ycGhOb3JtYWxzTGVuZ3RoIiwiaGFzU2tpbkluZGljZXMiLCJoYXNTa2luV2VpZ2h0cyIsInZlcnRleFV2cyIsImJ1ZmZlckdlb21ldHJ5SWQiLCJCdWZmZXJHZW9tZXRyeSIsIm1vcnBoQXR0cmlidXRlcyIsImRyYXdSYW5nZSIsIkJveEdlb21ldHJ5Iiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsIkJveEJ1ZmZlckdlb21ldHJ5IiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsImFkZEdyb3VwIiwic2V0SW5kZXgiLCJhZGRBdHRyaWJ1dGUiLCJQbGFuZUdlb21ldHJ5IiwiUGxhbmVCdWZmZXJHZW9tZXRyeSIsIndpZHRoX2hhbGYiLCJoZWlnaHRfaGFsZiIsInNlZ21lbnRfd2lkdGgiLCJzZWdtZW50X2hlaWdodCIsImdldEluZGV4IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xlYXJHcm91cHMiLCJzZXREcmF3UmFuZ2UiLCJuZWVkc1VwZGF0ZSIsInVwZGF0ZUZyb21PYmplY3QiLCJkaXJlY3QiLCJfX2RpcmVjdEdlb21ldHJ5IiwibGluZURpc3RhbmNlIiwiZnJvbURpcmVjdEdlb21ldHJ5IiwiaXNOYU4iLCJwQSIsInBCIiwicEMiLCJub3JtYWxpemVOb3JtYWxzIiwiYXR0cmlidXRlQXJyYXkxIiwiYXR0cmlidXRlMiIsImF0dHJpYnV0ZUFycmF5MiIsInRvTm9uSW5kZXhlZCIsImdlb21ldHJ5MiIsImFycmF5MiIsImtleXMiLCJtb3JwaEF0dHJpYnV0ZSIsInNlZ0NlbnRlciIsInNlZ0RpciIsImJhcnljb29yZCIsInZhYiIsInZhYyIsInZiYyIsInZhcCIsInZicCIsInZjcCIsIm1hdGVyaWFsSWQiLCJNYXRlcmlhbCIsImJsZW5kaW5nIiwic2lkZSIsImZsYXRTaGFkaW5nIiwidHJhbnNwYXJlbnQiLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRFcXVhdGlvbiIsImJsZW5kU3JjQWxwaGEiLCJibGVuZERzdEFscGhhIiwiYmxlbmRFcXVhdGlvbkFscGhhIiwiZGVwdGhGdW5jIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImNsaXBwaW5nUGxhbmVzIiwiY2xpcEludGVyc2VjdGlvbiIsImNsaXBTaGFkb3dzIiwic2hhZG93U2lkZSIsImNvbG9yV3JpdGUiLCJwb2x5Z29uT2Zmc2V0IiwicG9seWdvbk9mZnNldEZhY3RvciIsInBvbHlnb25PZmZzZXRVbml0cyIsImRpdGhlcmluZyIsImFscGhhVGVzdCIsInByZW11bHRpcGxpZWRBbHBoYSIsIlNoYWRlck1hdGVyaWFsIiwiZGVmaW5lcyIsImxpbmV3aWR0aCIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsImNsaXBwaW5nIiwic2tpbm5pbmciLCJleHRlbnNpb25zIiwiZGVyaXZhdGl2ZXMiLCJmcmFnRGVwdGgiLCJkcmF3QnVmZmVycyIsInNoYWRlclRleHR1cmVMT0QiLCJkZWZhdWx0QXR0cmlidXRlVmFsdWVzIiwiaW5kZXgwQXR0cmlidXRlTmFtZSIsInVuaWZvcm1zTmVlZFVwZGF0ZSIsInNldFZhbHVlcyIsIlJheSIsIm9yaWdpbiIsIlRyaWFuZ2xlIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJjb21iaW5lIiwid2lyZWZyYW1lTGluZWNhcCIsIndpcmVmcmFtZUxpbmVqb2luIiwiTWVzaCIsImRyYXdNb2RlIiwidXBkYXRlTW9ycGhUYXJnZXRzIiwiV2ViR0xCYWNrZ3JvdW5kIiwicmVuZGVyZXIiLCJzdGF0ZSIsIm9iamVjdHMiLCJwbGFuZU1lc2giLCJib3hNZXNoIiwiY2xlYXJDb2xvciIsImNsZWFyQWxwaGEiLCJzZXRDbGVhciIsImdldENsZWFyQ29sb3IiLCJzZXRDbGVhckNvbG9yIiwiZ2V0Q2xlYXJBbHBoYSIsInNldENsZWFyQWxwaGEiLCJyZW5kZXIiLCJyZW5kZXJMaXN0Iiwic2NlbmUiLCJmb3JjZUNsZWFyIiwiYXV0b0NsZWFyIiwiY2xlYXIiLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsImlzQ3ViZVRleHR1cmUiLCJXZWJHTEJ1ZmZlclJlbmRlcmVyIiwiaW5mbyIsImNhcGFiaWxpdGllcyIsInNldE1vZGUiLCJkcmF3QXJyYXlzIiwicmVuZGVySW5zdGFuY2VzIiwiZXh0ZW5zaW9uIiwiaXNXZWJHTDIiLCJtYXhJbnN0YW5jZWRDb3VudCIsIldlYkdMQ2FwYWJpbGl0aWVzIiwibWF4QW5pc290cm9weSIsImdldE1heFByZWNpc2lvbiIsImdldFNoYWRlclByZWNpc2lvbkZvcm1hdCIsIldlYkdMMlJlbmRlcmluZ0NvbnRleHQiLCJtYXhQcmVjaXNpb24iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwibWF4VGV4dHVyZXMiLCJtYXhWZXJ0ZXhUZXh0dXJlcyIsIm1heFRleHR1cmVTaXplIiwibWF4Q3ViZW1hcFNpemUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJtYXhWYXJ5aW5ncyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsImZsb2F0RnJhZ21lbnRUZXh0dXJlcyIsImdldE1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJmbG9hdFZlcnRleFRleHR1cmVzIiwiV2ViR0xDbGlwcGluZyIsImdsb2JhbFN0YXRlIiwibnVtR2xvYmFsUGxhbmVzIiwibG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJyZW5kZXJpbmdTaGFkb3dzIiwidmlld05vcm1hbE1hdHJpeCIsInVuaWZvcm0iLCJyZXNldEdsb2JhbFN0YXRlIiwibnVtUGxhbmVzIiwibnVtSW50ZXJzZWN0aW9uIiwicHJvamVjdFBsYW5lcyIsInNraXBUcmFuc2Zvcm0iLCJuUGxhbmVzIiwiZHN0QXJyYXkiLCJmbGF0U2l6ZSIsInZpZXdNYXRyaXgiLCJpNCIsImluaXQiLCJlbmFibGVMb2NhbENsaXBwaW5nIiwiYmVnaW5TaGFkb3dzIiwiZW5kU2hhZG93cyIsInNldFN0YXRlIiwiZnJvbUNhY2hlIiwibkdsb2JhbCIsImxHbG9iYWwiLCJjbGlwcGluZ1N0YXRlIiwiV2ViR0xFeHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiV2ViR0xHZW9tZXRyaWVzIiwid2lyZWZyYW1lQXR0cmlidXRlcyIsIm9uR2VvbWV0cnlEaXNwb3NlIiwiYnVmZmVyZ2VvbWV0cnkiLCJtZW1vcnkiLCJfYnVmZmVyR2VvbWV0cnkiLCJnZW9tZXRyeUF0dHJpYnV0ZXMiLCJnZXRXaXJlZnJhbWVBdHRyaWJ1dGUiLCJnZW9tZXRyeUluZGV4IiwiV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJkcmF3RWxlbWVudHMiLCJXZWJHTEluZm8iLCJjYWxscyIsInRyaWFuZ2xlcyIsImxpbmVzIiwicHJvZ3JhbXMiLCJhdXRvUmVzZXQiLCJyZXNldCIsImluc3RhbmNlQ291bnQiLCJhYnNOdW1lcmljYWxTb3J0IiwiV2ViR0xNb3JwaHRhcmdldHMiLCJpbmZsdWVuY2VzTGlzdCIsIm1vcnBoSW5mbHVlbmNlcyIsInByb2dyYW0iLCJvYmplY3RJbmZsdWVuY2VzIiwibW9ycGhUYXJnZXRJbmZsdWVuY2VzIiwiaW5mbHVlbmNlcyIsImluZmx1ZW5jZSIsImdldFVuaWZvcm1zIiwic2V0VmFsdWUiLCJXZWJHTE9iamVjdHMiLCJ1cGRhdGVMaXN0IiwiQ3ViZVRleHR1cmUiLCJEYXRhVGV4dHVyZTNEIiwiaXNNYXRlcmlhbCIsIm9uQmVmb3JlQ29tcGlsZSIsIm5ld1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiaXNSb290IiwiZW1pc3NpdmVJbnRlbnNpdHkiLCJub3JtYWxNYXBUeXBlIiwic2l6ZUF0dGVudWF0aW9uIiwiZ2FwU2l6ZSIsInNyY1BsYW5lcyIsImRzdFBsYW5lcyIsImlzU2hhZGVyTWF0ZXJpYWwiLCJyYXkiLCJhdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzMCIsInNxckRpc3QiLCJleHREZXQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpbnRlcnNlY3RUcmlhbmdsZSIsImVkZ2UxIiwiZWRnZTIiLCJiYWNrZmFjZUN1bGxpbmciLCJEZE4iLCJEZFF4RTIiLCJEZEUxeFEiLCJRZE4iLCJnZXROb3JtYWwiLCJ0YXJnZXRMZW5ndGhTcSIsImdldEJhcnljb29yZCIsImRvdDAwIiwiZG90MDEiLCJkb3QwMiIsImRvdDExIiwiZG90MTIiLCJkZW5vbSIsImludkRlbm9tIiwiZ2V0VVYiLCJ1djEiLCJ1djMiLCJzZXRGcm9tUG9pbnRzQW5kSW5kaWNlcyIsImkwIiwiaTEiLCJpMiIsImdldEFyZWEiLCJnZXRNaWRwb2ludCIsImdldFBsYW5lIiwicmVzdWx0IiwiZDQiLCJ2YyIsImQ1IiwiZDYiLCJ2YiIsInZhIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsInNldERyYXdNb2RlIiwibW9ycGhUYXJnZXREaWN0aW9uYXJ5IiwibWwiLCJTdHJpbmciLCJpbnZlcnNlTWF0cml4IiwidGVtcEEiLCJ0ZW1wQiIsInRlbXBDIiwidXZBIiwidXZCIiwidXZDIiwiaW50ZXJzZWN0aW9uUG9pbnQiLCJpbnRlcnNlY3Rpb25Qb2ludFdvcmxkIiwiY2hlY2tJbnRlcnNlY3Rpb24iLCJyYXljYXN0ZXIiLCJjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0cyIsImdyb3VwTWF0ZXJpYWwiLCJmYWNlSW5kZXgiLCJmdkEiLCJmdkIiLCJmdkMiLCJpc011bHRpTWF0ZXJpYWwiLCJmYWNlTWF0ZXJpYWwiLCJ0bCIsInRhcmdldHMiLCJ1dnNfZiIsImlzRGF0YVRleHR1cmUzRCIsImVtcHR5VGV4dHVyZSIsImVtcHR5VGV4dHVyZTNkIiwiZW1wdHlDdWJlVGV4dHVyZSIsIlVuaWZvcm1Db250YWluZXIiLCJzZXEiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NUZXh0dXJlVW5pdCIsInNldFZhbHVlMWYiLCJ1bmlmb3JtMWYiLCJhZGRyIiwic2V0VmFsdWUxaSIsInVuaWZvcm0xaSIsInNldFZhbHVlMmZ2IiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlM2Z2IiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlNGZ2IiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlMmZtIiwidW5pZm9ybU1hdHJpeDJmdiIsInNldFZhbHVlM2ZtIiwidW5pZm9ybU1hdHJpeDNmdiIsInNldFZhbHVlNGZtIiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVDEiLCJ1bml0Iiwic2V0VGV4dHVyZTJEIiwic2V0VmFsdWVUM0QxIiwic2V0VGV4dHVyZTNEIiwic2V0VmFsdWVUNiIsInNldFRleHR1cmVDdWJlIiwic2V0VmFsdWUyaXYiLCJ1bmlmb3JtMml2Iiwic2V0VmFsdWUzaXYiLCJ1bmlmb3JtM2l2Iiwic2V0VmFsdWU0aXYiLCJ1bmlmb3JtNGl2Iiwic2V0VmFsdWUxZnYiLCJ1bmlmb3JtMWZ2Iiwic2V0VmFsdWUxaXYiLCJ1bmlmb3JtMWl2Iiwic2V0VmFsdWVWMmEiLCJ1cGRhdGVDYWNoZSIsInNldFZhbHVlVjNhIiwic2V0VmFsdWVWNGEiLCJzZXRWYWx1ZU0yYSIsInNldFZhbHVlTTNhIiwic2V0VmFsdWVNNGEiLCJzZXRWYWx1ZVQxYSIsInVuaXRzIiwic2V0VmFsdWVUNmEiLCJTaW5nbGVVbmlmb3JtIiwiYWN0aXZlSW5mbyIsImdldFNpbmd1bGFyU2V0dGVyIiwiUHVyZUFycmF5VW5pZm9ybSIsImdldFB1cmVBcnJheVNldHRlciIsIlN0cnVjdHVyZWRVbmlmb3JtIiwiUmVQYXRoUGFydCIsImFkZFVuaWZvcm0iLCJjb250YWluZXIiLCJ1bmlmb3JtT2JqZWN0IiwicGFyc2VVbmlmb3JtIiwicGF0aCIsInBhdGhMZW5ndGgiLCJsYXN0SW5kZXgiLCJtYXRjaEVuZCIsImlkSXNJbmRleCIsInN1YnNjcmlwdCIsIm5leHQiLCJXZWJHTFVuaWZvcm1zIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJXZWJHTFNoYWRlciIsInNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwic3BsaXQiLCJqb2luIiwiYWRkTGluZU51bWJlcnMiLCJzZXRPcHRpb25hbCIsInVwbG9hZCIsInNlcVdpdGhWYWx1ZSIsInByb2dyYW1JZENvdW50IiwiZ2V0RW5jb2RpbmdDb21wb25lbnRzIiwiZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uIiwiZnVuY3Rpb25OYW1lIiwiZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiIsInRvbmVNYXBwaW5nIiwidG9uZU1hcHBpbmdOYW1lIiwiZmlsdGVyRW1wdHlMaW5lIiwicmVwbGFjZUxpZ2h0TnVtcyIsInJlcGxhY2UiLCJudW1EaXJMaWdodHMiLCJudW1TcG90TGlnaHRzIiwibnVtUmVjdEFyZWFMaWdodHMiLCJudW1Qb2ludExpZ2h0cyIsIm51bUhlbWlMaWdodHMiLCJyZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMiLCJudW1DbGlwcGluZ1BsYW5lcyIsIm51bUNsaXBJbnRlcnNlY3Rpb24iLCJwYXJzZUluY2x1ZGVzIiwiaW5jbHVkZSIsInVucm9sbExvb3BzIiwic25pcHBldCIsInVucm9sbCIsIldlYkdMUHJvZ3JhbSIsImNvZGUiLCJzaGFkb3dNYXBUeXBlRGVmaW5lIiwic2hhZG93TWFwVHlwZSIsImVudk1hcFR5cGVEZWZpbmUiLCJlbnZNYXBNb2RlRGVmaW5lIiwiZW52TWFwQmxlbmRpbmdEZWZpbmUiLCJwcmVmaXhWZXJ0ZXgiLCJwcmVmaXhGcmFnbWVudCIsImdhbW1hRmFjdG9yRGVmaW5lIiwiY3VzdG9tRXh0ZW5zaW9ucyIsInJlbmRlcmVyRXh0ZW5zaW9ucyIsImVudk1hcEN1YmVVViIsIm9iamVjdFNwYWNlTm9ybWFsTWFwIiwiZmlsdGVyIiwiZ2VuZXJhdGVFeHRlbnNpb25zIiwiY3VzdG9tRGVmaW5lcyIsImNodW5rcyIsImdlbmVyYXRlRGVmaW5lcyIsImNyZWF0ZVByb2dyYW0iLCJpc1Jhd1NoYWRlck1hdGVyaWFsIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsIm1heEJvbmVzIiwidXNlRm9nIiwiZm9nRXhwIiwidXNlVmVydGV4VGV4dHVyZSIsImRvdWJsZVNpZGVkIiwiZmxpcFNpZGVkIiwic2hhZG93TWFwRW5hYmxlZCIsInBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzIiwib3V0cHV0RW5jb2RpbmciLCJtYXBFbmNvZGluZyIsIm1hdGNhcEVuY29kaW5nIiwiZW52TWFwRW5jb2RpbmciLCJlbWlzc2l2ZU1hcEVuY29kaW5nIiwiZGVwdGhQYWNraW5nIiwiaXNHTFNMM1NoYWRlck1hdGVyaWFsIiwidmVyc2lvblJlZ2V4IiwiZnJhZ21lbnRHbHNsIiwiZ2xWZXJ0ZXhTaGFkZXIiLCJnbEZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwibGlua1Byb2dyYW0iLCJjYWNoZWRVbmlmb3JtcyIsImNhY2hlZEF0dHJpYnV0ZXMiLCJwcm9ncmFtTG9nIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ0cmltIiwidmVydGV4TG9nIiwiZnJhZ21lbnRMb2ciLCJydW5uYWJsZSIsImhhdmVEaWFnbm9zdGljcyIsImdldEVycm9yIiwiZGlhZ25vc3RpY3MiLCJwcmVmaXgiLCJkZWxldGVTaGFkZXIiLCJnZXRBdHRyaWJ1dGVzIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyIsImRlc3Ryb3kiLCJkZWxldGVQcm9ncmFtIiwidXNlZFRpbWVzIiwiV2ViR0xQcm9ncmFtcyIsInNoYWRlcklEcyIsIk1lc2hEZXB0aE1hdGVyaWFsIiwiTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJNZXNoTm9ybWFsTWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJNZXNoVG9vbk1hdGVyaWFsIiwiTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsIk1lc2hNYXRjYXBNYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJTaGFkb3dNYXRlcmlhbCIsIlNwcml0ZU1hdGVyaWFsIiwicGFyYW1ldGVyTmFtZXMiLCJnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwIiwiZ2FtbWFPdmVycmlkZUxpbmVhciIsImdldFBhcmFtZXRlcnMiLCJzaGFkb3dzIiwibkNsaXBQbGFuZXMiLCJuQ2xpcEludGVyc2VjdGlvbiIsInNoYWRlcklEIiwiaXNTa2lubmVkTWVzaCIsImJvbmVzIiwic2tlbGV0b24iLCJuVmVydGV4VW5pZm9ybXMiLCJuVmVydGV4TWF0cmljZXMiLCJhbGxvY2F0ZUJvbmVzIiwiY3VycmVudFJlbmRlclRhcmdldCIsImdldFJlbmRlclRhcmdldCIsImdhbW1hT3V0cHV0IiwiZ2FtbWFJbnB1dCIsImVudk1hcE1vZGUiLCJpc0ZvZ0V4cDIiLCJtYXhNb3JwaFRhcmdldHMiLCJtYXhNb3JwaE5vcm1hbHMiLCJkaXJlY3Rpb25hbCIsInNwb3QiLCJyZWN0QXJlYSIsImhlbWkiLCJzaGFkb3dNYXAiLCJnZXRQcm9ncmFtQ29kZSIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcm9ncmFtSW5mbyIsInJlbGVhc2VQcm9ncmFtIiwicG9wIiwiV2ViR0xQcm9wZXJ0aWVzIiwicGFpbnRlclNvcnRTdGFibGUiLCJyZXZlcnNlUGFpbnRlclNvcnRTdGFibGUiLCJXZWJHTFJlbmRlckxpc3QiLCJyZW5kZXJJdGVtcyIsInJlbmRlckl0ZW1zSW5kZXgiLCJvcGFxdWUiLCJyZW5kZXJJdGVtIiwiV2ViR0xSZW5kZXJMaXN0cyIsImxpc3RzIiwibGlzdCIsIlVuaWZvcm1zQ2FjaGUiLCJsaWdodCIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJXZWJHTExpZ2h0cyIsInN0YXRlSUQiLCJkaXJlY3Rpb25hbExlbmd0aCIsInBvaW50TGVuZ3RoIiwic3BvdExlbmd0aCIsInJlY3RBcmVhTGVuZ3RoIiwiaGVtaUxlbmd0aCIsInNoYWRvd3NMZW5ndGgiLCJhbWJpZW50IiwidmVjdG9yMyIsIm1hdHJpeDQyIiwic2V0dXAiLCJpbnRlbnNpdHkiLCJpc0FtYmllbnRMaWdodCIsImlzRGlyZWN0aW9uYWxMaWdodCIsImJpYXMiLCJtYXBTaXplIiwiaXNTcG90TGlnaHQiLCJwZW51bWJyYSIsImlzUmVjdEFyZWFMaWdodCIsImlzUG9pbnRMaWdodCIsImlzSGVtaXNwaGVyZUxpZ2h0IiwiV2ViR0xSZW5kZXJTdGF0ZSIsImxpZ2h0c0FycmF5Iiwic2hhZG93c0FycmF5Iiwic2V0dXBMaWdodHMiLCJwdXNoTGlnaHQiLCJwdXNoU2hhZG93Iiwic2hhZG93TGlnaHQiLCJXZWJHTFJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlIiwiV2ViR0xTaGFkb3dNYXAiLCJfcmVuZGVyZXIiLCJfb2JqZWN0cyIsIl9mcnVzdHVtIiwiX3Byb2pTY3JlZW5NYXRyaXgiLCJfc2hhZG93TWFwU2l6ZSIsIl9tYXhTaGFkb3dNYXBTaXplIiwiX2xvb2tUYXJnZXQiLCJfbGlnaHRQb3NpdGlvbldvcmxkIiwiX2RlcHRoTWF0ZXJpYWxzIiwiX2Rpc3RhbmNlTWF0ZXJpYWxzIiwiX21hdGVyaWFsQ2FjaGUiLCIwIiwiMSIsIjIiLCJjdWJlRGlyZWN0aW9ucyIsImN1YmVVcHMiLCJjdWJlMkRWaWV3UG9ydHMiLCJ1c2VNb3JwaGluZyIsInVzZVNraW5uaW5nIiwiZGVwdGhNYXRlcmlhbCIsImRpc3RhbmNlTWF0ZXJpYWwiLCJnZXREZXB0aE1hdGVyaWFsIiwibGlnaHRQb3NpdGlvbldvcmxkIiwibWF0ZXJpYWxWYXJpYW50cyIsImN1c3RvbU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImN1c3RvbURpc3RhbmNlTWF0ZXJpYWwiLCJ2YXJpYW50SW5kZXgiLCJrZXlBIiwia2V5QiIsIm1hdGVyaWFsc0ZvclZhcmlhbnQiLCJjYWNoZWRNYXRlcmlhbCIsImlzTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJyZW5kZXJPYmplY3QiLCJzaGFkb3dDYW1lcmEiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJhdXRvVXBkYXRlIiwiZmFjZUNvdW50IiwiX3N0YXRlIiwic2V0VGVzdCIsInNldFNjaXNzb3JUZXN0IiwidnBXaWR0aCIsInZwSGVpZ2h0IiwicGFycyIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJpc1Nwb3RMaWdodFNoYWRvdyIsInNoYWRvd01hdHJpeCIsInNldFJlbmRlclRhcmdldCIsInZwRGltZW5zaW9ucyIsIldlYkdMU3RhdGUiLCJ1dGlscyIsImNvbG9yQnVmZmVyIiwibG9ja2VkIiwiY3VycmVudENvbG9yTWFzayIsImN1cnJlbnRDb2xvckNsZWFyIiwic2V0TWFzayIsImNvbG9yTWFzayIsInNldExvY2tlZCIsImxvY2siLCJjdXJyZW50RGVwdGhNYXNrIiwiY3VycmVudERlcHRoRnVuYyIsImN1cnJlbnREZXB0aENsZWFyIiwiZGVwdGhNYXNrIiwic2V0RnVuYyIsImNsZWFyRGVwdGgiLCJjdXJyZW50U3RlbmNpbE1hc2siLCJjdXJyZW50U3RlbmNpbEZ1bmMiLCJjdXJyZW50U3RlbmNpbFJlZiIsImN1cnJlbnRTdGVuY2lsRnVuY01hc2siLCJjdXJyZW50U3RlbmNpbEZhaWwiLCJjdXJyZW50U3RlbmNpbFpGYWlsIiwiY3VycmVudFN0ZW5jaWxaUGFzcyIsImN1cnJlbnRTdGVuY2lsQ2xlYXIiLCJzdGVuY2lsVGVzdCIsInN0ZW5jaWxNYXNrIiwic3RlbmNpbEZ1bmMiLCJzdGVuY2lsUmVmIiwic2V0T3AiLCJzdGVuY2lsRmFpbCIsInN0ZW5jaWxaRmFpbCIsInN0ZW5jaWxaUGFzcyIsInN0ZW5jaWxPcCIsInN0ZW5jaWwiLCJjbGVhclN0ZW5jaWwiLCJtYXhWZXJ0ZXhBdHRyaWJ1dGVzIiwibmV3QXR0cmlidXRlcyIsImVuYWJsZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlRGl2aXNvcnMiLCJlbmFibGVkQ2FwYWJpbGl0aWVzIiwiY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzIiwiY3VycmVudFByb2dyYW0iLCJjdXJyZW50QmxlbmRpbmdFbmFibGVkIiwiY3VycmVudEJsZW5kaW5nIiwiY3VycmVudEJsZW5kRXF1YXRpb24iLCJjdXJyZW50QmxlbmRTcmMiLCJjdXJyZW50QmxlbmREc3QiLCJjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhIiwiY3VycmVudEJsZW5kU3JjQWxwaGEiLCJjdXJyZW50QmxlbmREc3RBbHBoYSIsImN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSIsImN1cnJlbnRGbGlwU2lkZWQiLCJjdXJyZW50Q3VsbEZhY2UiLCJjdXJyZW50TGluZVdpZHRoIiwiY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IiLCJjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzIiwibGluZVdpZHRoQXZhaWxhYmxlIiwiZ2xWZXJzaW9uIiwiY3VycmVudFRleHR1cmVTbG90IiwiY3VycmVudEJvdW5kVGV4dHVyZXMiLCJjdXJyZW50U2Npc3NvciIsImN1cnJlbnRWaWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInRleFBhcmFtZXRlcmkiLCJ0ZXhJbWFnZTJEIiwiZW1wdHlUZXh0dXJlcyIsImVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IiLCJtZXNoUGVyQXR0cmlidXRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJzZXRCbGVuZGluZyIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImNvbnZlcnQiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsInNldEZsaXBTaWRlZCIsImZyb250RmFjZSIsInNldEN1bGxGYWNlIiwiY3VsbEZhY2UiLCJzZXRQb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwiYWN0aXZlVGV4dHVyZSIsIndlYmdsU2xvdCIsImluaXRBdHRyaWJ1dGVzIiwiZW5hYmxlQXR0cmlidXRlIiwiZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMiLCJmb3JtYXRzIiwidXNlUHJvZ3JhbSIsInNldE1hdGVyaWFsIiwiZnJvbnRGYWNlQ1ciLCJzZXRMaW5lV2lkdGgiLCJsaW5lV2lkdGgiLCJ3ZWJnbFR5cGUiLCJ3ZWJnbFRleHR1cmUiLCJib3VuZFRleHR1cmUiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsImFwcGx5IiwidGV4SW1hZ2UzRCIsIldlYkdMVGV4dHVyZXMiLCJfZ2wiLCJfY2FudmFzIiwiX3ZpZGVvVGV4dHVyZXMiLCJjbGFtcFRvTWF4U2l6ZSIsIm1heFNpemUiLCJ0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMiLCJnZW5lcmF0ZU1pcG1hcCIsIl9fbWF4TWlwTGV2ZWwiLCJMT0cyRSIsImdldEludGVybmFsRm9ybWF0IiwiZ2xGb3JtYXQiLCJnbFR5cGUiLCJmaWx0ZXJGYWxsYmFjayIsIm9uVGV4dHVyZURpc3Bvc2UiLCJ0ZXh0dXJlUHJvcGVydGllcyIsIl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUiLCJkZWxldGVUZXh0dXJlIiwiX193ZWJnbEluaXQiLCJfX3dlYmdsVGV4dHVyZSIsImRlYWxsb2NhdGVUZXh0dXJlIiwiaXNWaWRlb1RleHR1cmUiLCJvblJlbmRlclRhcmdldERpc3Bvc2UiLCJyZW5kZXJUYXJnZXQiLCJyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJfX3dlYmdsRnJhbWVidWZmZXIiLCJfX3dlYmdsRGVwdGhidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0Iiwic2xvdCIsInVwZGF0ZVZpZGVvVGV4dHVyZSIsIl9fdmVyc2lvbiIsImNvbXBsZXRlIiwidXBsb2FkVGV4dHVyZSIsInNldFRleHR1cmVQYXJhbWV0ZXJzIiwidGV4dHVyZVR5cGUiLCJpc1Bvd2VyT2ZUd29JbWFnZSIsIl9fY3VycmVudEFuaXNvdHJvcHkiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJwaXhlbFN0b3JlaSIsInRleHR1cmVOZWVkc1Bvd2VyT2ZUd28iLCJIVE1MSW1hZ2VFbGVtZW50IiwiSW1hZ2VCaXRtYXAiLCJtYWtlUG93ZXJPZlR3byIsImdsSW50ZXJuYWxGb3JtYXQiLCJtaXBtYXAiLCJpc0RlcHRoVGV4dHVyZSIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImZyYW1lYnVmZmVyIiwiYXR0YWNobWVudCIsInRleHR1cmVUYXJnZXQiLCJiaW5kRnJhbWVidWZmZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsInNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSIsInJlbmRlcmJ1ZmZlciIsImJpbmRSZW5kZXJidWZmZXIiLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJzZXR1cERlcHRoUmVuZGVyYnVmZmVyIiwiaXNDdWJlIiwid2ViZ2xEZXB0aFRleHR1cmUiLCJzZXR1cERlcHRoVGV4dHVyZSIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsImlzQ29tcHJlc3NlZCIsImN1YmVJbWFnZSIsInNldFRleHR1cmVDdWJlRHluYW1pYyIsInNldHVwUmVuZGVyVGFyZ2V0IiwiaXNUYXJnZXRQb3dlck9mVHdvIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJ1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAiLCJXZWJHTFV0aWxzIiwiSEFMRl9GTE9BVF9PRVMiLCJDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTCIsIk1JTl9FWFQiLCJNQVhfRVhUIiwiVU5TSUdORURfSU5UXzI0XzhfV0VCR0wiLCJHcm91cCIsIkNhbWVyYSIsInByb2plY3Rpb25NYXRyaXhJbnZlcnNlIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJmb3YiLCJhc3BlY3QiLCJ6b29tIiwiZm9jdXMiLCJ2aWV3IiwiZmlsbUdhdWdlIiwiZmlsbU9mZnNldCIsIkFycmF5Q2FtZXJhIiwiY2FtZXJhcyIsImlzTWVzaERlcHRoTWF0ZXJpYWwiLCJpc0dyb3VwIiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwidGFuIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsZWFyVmlld09mZnNldCIsInNrZXciLCJpc0FycmF5Q2FtZXJhIiwibWF0cml4UG9zaXRpb24iLCJvZmZzZXRNYXRyaXgiLCJpZGVudGl0eU1hdHJpeCIsImNhbWVyYUxQb3MiLCJjYW1lcmFSUG9zIiwic2V0UHJvamVjdGlvbkZyb21VbmlvbiIsImNhbWVyYUwiLCJjYW1lcmFSIiwiaXBkIiwicHJvakwiLCJwcm9qUiIsInRvcEZvdiIsImJvdHRvbUZvdiIsImxlZnRGb3YiLCJyaWdodEZvdiIsInpPZmZzZXQiLCJ4T2Zmc2V0IiwibmVhcjIiLCJmYXIyIiwibGVmdDIiLCJyaWdodDIiLCJ0b3AyIiwiYm90dG9tMiIsIldlYlZSTWFuYWdlciIsImRldmljZSIsImZyYW1lRGF0YSIsInBvc2VUYXJnZXQiLCJjb250cm9sbGVycyIsInN0YW5kaW5nTWF0cml4Iiwic3RhbmRpbmdNYXRyaXhJbnZlcnNlIiwiZnJhbWVidWZmZXJTY2FsZUZhY3RvciIsImZyYW1lT2ZSZWZlcmVuY2VUeXBlIiwid2luZG93IiwiVlJGcmFtZURhdGEiLCJvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UiLCJ0ZW1wUXVhdGVybmlvbiIsInRlbXBQb3NpdGlvbiIsImJvdW5kcyIsImN1cnJlbnRTaXplIiwiY3VycmVudFBpeGVsUmF0aW8iLCJjYW1lcmFWUiIsImlzUHJlc2VudGluZyIsImV5ZVBhcmFtZXRlcnMiLCJnZXRFeWVQYXJhbWV0ZXJzIiwicmVuZGVyV2lkdGgiLCJyZW5kZXJIZWlnaHQiLCJnZXRQaXhlbFJhdGlvIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJhbmltYXRpb24iLCJ0cmlnZ2VycyIsImZpbmRHYW1lcGFkIiwiZ2FtZXBhZHMiLCJuYXZpZ2F0b3IiLCJnZXRHYW1lcGFkcyIsImdhbWVwYWQiLCJzdGFydHNXaXRoIiwiZ2V0Q29udHJvbGxlciIsImNvbnRyb2xsZXIiLCJnZXREZXZpY2UiLCJzZXREZXZpY2UiLCJzZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIiwic2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUiLCJzZXRQb3NlVGFyZ2V0IiwiZ2V0Q2FtZXJhIiwidXNlckhlaWdodCIsImRlcHRoTmVhciIsImRlcHRoRmFyIiwiZ2V0RnJhbWVEYXRhIiwic3RhZ2VQYXJhbWV0ZXJzIiwic2l0dGluZ1RvU3RhbmRpbmdUcmFuc2Zvcm0iLCJwb3NlIiwicG9zZU9iamVjdCIsIm9yaWVudGF0aW9uIiwibGVmdFZpZXdNYXRyaXgiLCJyaWdodFZpZXdNYXRyaXgiLCJsZWZ0UHJvamVjdGlvbk1hdHJpeCIsInJpZ2h0UHJvamVjdGlvbk1hdHJpeCIsImdldExheWVycyIsImxheWVyIiwibGVmdEJvdW5kcyIsInJpZ2h0Qm91bmRzIiwiaGFzUG9zaXRpb24iLCJidXR0b25JZCIsImJ1dHRvbnMiLCJwcmVzc2VkIiwidXBkYXRlQ29udHJvbGxlcnMiLCJnZXRTdGFuZGluZ01hdHJpeCIsInN1Ym1pdEZyYW1lIiwiV2ViWFJNYW5hZ2VyIiwic2Vzc2lvbiIsImZyYW1lT2ZSZWZlcmVuY2UiLCJpbnB1dFNvdXJjZXMiLCJvblNlc3Npb25FdmVudCIsImlucHV0U291cmNlIiwib25TZXNzaW9uRW5kIiwic2V0RnJhbWVidWZmZXIiLCJ1cGRhdGVDYW1lcmEiLCJYUkRldmljZSIsInNldENvbXBhdGlibGVYUkRldmljZSIsInNldFNlc3Npb24iLCJiYXNlTGF5ZXIiLCJYUldlYkdMTGF5ZXIiLCJyZXF1ZXN0RnJhbWVPZlJlZmVyZW5jZSIsInRoZW4iLCJnZXRJbnB1dFNvdXJjZXMiLCJvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2siLCJnZXREZXZpY2VQb3NlIiwidmlld3MiLCJnZXRWaWV3cG9ydCIsImdldFZpZXdNYXRyaXgiLCJpbnB1dFBvc2UiLCJnZXRJbnB1dFBvc2UiLCJ0YXJnZXRSYXkiLCJ0cmFuc2Zvcm1NYXRyaXgiLCJwb2ludGVyTWF0cml4IiwiVEhSRUUiLCJXZWJHTFJlbmRlcmVyIiwiX2NvbnRleHQiLCJfYWxwaGEiLCJfZGVwdGgiLCJfc3RlbmNpbCIsIl9hbnRpYWxpYXMiLCJhbnRpYWxpYXMiLCJfcHJlbXVsdGlwbGllZEFscGhhIiwiX3ByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsIl9wb3dlclByZWZlcmVuY2UiLCJwb3dlclByZWZlcmVuY2UiLCJjdXJyZW50UmVuZGVyTGlzdCIsImN1cnJlbnRSZW5kZXJTdGF0ZSIsImRvbUVsZW1lbnQiLCJzb3J0T2JqZWN0cyIsInRvbmVNYXBwaW5nRXhwb3N1cmUiLCJ0b25lTWFwcGluZ1doaXRlUG9pbnQiLCJwcm9ncmFtQ2FjaGUiLCJyZW5kZXJMaXN0cyIsIm1vcnBodGFyZ2V0cyIsImJ1ZmZlclJlbmRlcmVyIiwiaW5kZXhlZEJ1ZmZlclJlbmRlcmVyIiwiX3RoaXMiLCJfaXNDb250ZXh0TG9zdCIsIl9mcmFtZWJ1ZmZlciIsIl9jdXJyZW50UmVuZGVyVGFyZ2V0IiwiX2N1cnJlbnRGcmFtZWJ1ZmZlciIsIl9jdXJyZW50TWF0ZXJpYWxJZCIsIl9jdXJyZW50R2VvbWV0cnlQcm9ncmFtIiwiX2N1cnJlbnRDYW1lcmEiLCJfY3VycmVudEFycmF5Q2FtZXJhIiwiX2N1cnJlbnRWaWV3cG9ydCIsIl9jdXJyZW50U2Npc3NvciIsIl9jdXJyZW50U2Npc3NvclRlc3QiLCJfdXNlZFRleHR1cmVVbml0cyIsIl93aWR0aCIsIl9oZWlnaHQiLCJfcGl4ZWxSYXRpbyIsIl92aWV3cG9ydCIsIl9zY2lzc29yIiwiX3NjaXNzb3JUZXN0IiwiX2NsaXBwaW5nIiwiX2NsaXBwaW5nRW5hYmxlZCIsIl9sb2NhbENsaXBwaW5nRW5hYmxlZCIsIl92ZWN0b3IzIiwiZ2V0VGFyZ2V0UGl4ZWxSYXRpbyIsImNvbnRleHRBdHRyaWJ1dGVzIiwib25Db250ZXh0TG9zdCIsIm9uQ29udGV4dFJlc3RvcmUiLCJtZXNzYWdlIiwiaW5pdEdMQ29udGV4dCIsInZyIiwicHJldmVudERlZmF1bHQiLCJvbk1hdGVyaWFsRGlzcG9zZSIsInJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UiLCJkZWFsbG9jYXRlTWF0ZXJpYWwiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsImZvcmNlQ29udGV4dExvc3MiLCJsb3NlQ29udGV4dCIsImZvcmNlQ29udGV4dFJlc3RvcmUiLCJyZXN0b3JlQ29udGV4dCIsInNldFBpeGVsUmF0aW8iLCJ1cGRhdGVTdHlsZSIsInNldFZpZXdwb3J0IiwiZ2V0RHJhd2luZ0J1ZmZlclNpemUiLCJwaXhlbFJhdGlvIiwiZ2V0Q3VycmVudFZpZXdwb3J0Iiwic2V0U2Npc3NvciIsImJvb2xlYW4iLCJiaXRzIiwicmVuZGVyQnVmZmVySW1tZWRpYXRlIiwiaGFzUG9zaXRpb25zIiwiaGFzTm9ybWFscyIsImhhc1V2cyIsImhhc0NvbG9ycyIsInByb2dyYW1BdHRyaWJ1dGVzIiwicG9zaXRpb25BcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJub3JtYWxBcnJheSIsInV2QXJyYXkiLCJjb2xvckFycmF5Iiwic2V0UHJvZ3JhbSIsInVwZGF0ZUJ1ZmZlcnMiLCJyYW5nZUZhY3RvciIsImlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkiLCJtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJwcm9ncmFtQXR0cmlidXRlIiwiZ2VvbWV0cnlBdHRyaWJ1dGUiLCJzdHJpZGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwiaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJ2ZXJ0ZXhBdHRyaWIyZnYiLCJ2ZXJ0ZXhBdHRyaWIzZnYiLCJ2ZXJ0ZXhBdHRyaWI0ZnYiLCJ2ZXJ0ZXhBdHRyaWIxZnYiLCJzZXR1cFZlcnRleEF0dHJpYnV0ZXMiLCJkYXRhQ291bnQiLCJyYW5nZVN0YXJ0IiwicmFuZ2VDb3VudCIsImRyYXdTdGFydCIsImRyYXdFbmQiLCJkcmF3Q291bnQiLCJpc0xpbmVTZWdtZW50cyIsImlzTGluZUxvb3AiLCJpc1Nwcml0ZSIsImNvbXBpbGUiLCJpc0xpZ2h0IiwiaW5pdE1hdGVyaWFsIiwid2FybmVkIiwicmVuZGVyT2JqZWN0cyIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJjYW1lcmEyIiwiaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QiLCJyZW5kZXJPYmplY3RJbW1lZGlhdGUiLCJtYXRlcmlhbFByb3BlcnRpZXMiLCJsaWdodHNIYXNoIiwibGlnaHRzU3RhdGVIYXNoIiwicHJvZ3JhbUNoYW5nZSIsIm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyIsIm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscyIsInByb2dVbmlmb3JtcyIsInVuaWZvcm1zTGlzdCIsInVzZUNhY2hlIiwicmVmcmVzaFByb2dyYW0iLCJyZWZyZXNoTWF0ZXJpYWwiLCJyZWZyZXNoTGlnaHRzIiwicF91bmlmb3JtcyIsIm1fdW5pZm9ybXMiLCJpc01lc2hQaG9uZ01hdGVyaWFsIiwiaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCIsInVDYW1Qb3MiLCJjYW1lcmFQb3NpdGlvbiIsImlzTWVzaExhbWJlcnRNYXRlcmlhbCIsImJvbmVUZXh0dXJlIiwiYm9uZU1hdHJpY2VzIiwiYm9uZVRleHR1cmVTaXplIiwiaXNGb2ciLCJkZW5zaXR5IiwicmVmcmVzaFVuaWZvcm1zRm9nIiwicmVmcmVzaFVuaWZvcm1zQ29tbW9uIiwicmVmcmVzaFVuaWZvcm1zTGFtYmVydCIsImlzTWVzaFRvb25NYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Bob25nIiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsImlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCIsInJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsIiwiaXNNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNNYXRjYXAiLCJyZWZyZXNoVW5pZm9ybXNEZXB0aCIsInJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlIiwiaXNNZXNoTm9ybWFsTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNOb3JtYWwiLCJpc0xpbmVCYXNpY01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTGluZSIsImlzTGluZURhc2hlZE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zRGFzaCIsImlzUG9pbnRzTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQb2ludHMiLCJpc1Nwcml0ZU1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zU3ByaXRlcyIsImlzU2hhZG93TWF0ZXJpYWwiLCJsdGNfMSIsIkxUQ18xIiwibHRjXzIiLCJMVENfMiIsInV2U2NhbGVNYXAiLCJwcm9qZWN0T2JqZWN0Iiwib3BhcXVlT2JqZWN0cyIsInRyYW5zcGFyZW50T2JqZWN0cyIsInRleHR1cmVVbml0Iiwic2V0VGV4dHVyZSIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHMiLCJyZXN0b3JlIiwidGV4dHVyZUZvcm1hdCIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJyZWFkUGl4ZWxzIiwiY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlIiwibGV2ZWwiLCJjb3B5VGV4SW1hZ2UyRCIsImNvcHlUZXh0dXJlVG9UZXh0dXJlIiwic3JjVGV4dHVyZSIsImRzdFRleHR1cmUiLCJ0ZXhTdWJJbWFnZTJEIiwiRm9nRXhwMiIsIkZvZyIsIlNjZW5lIiwiSW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsImludGVybGVhdmVkQnVmZmVyIiwiU3ByaXRlIiwiTE9EIiwibGV2ZWxzIiwiU2tlbGV0b24iLCJib25lSW52ZXJzZXMiLCJjYWxjdWxhdGVJbnZlcnNlcyIsIkJvbmUiLCJTa2lubmVkTWVzaCIsImJpbmRNb2RlIiwiYmluZE1hdHJpeCIsImJpbmRNYXRyaXhJbnZlcnNlIiwiaW5pdEJvbmVzIiwibm9ybWFsaXplU2tpbldlaWdodHMiLCJsaW5lY2FwIiwibGluZWpvaW4iLCJMaW5lIiwiTGluZVNlZ21lbnRzIiwiTGluZUxvb3AiLCJQb2ludHMiLCJWaWRlb1RleHR1cmUiLCJ2aWRlbyIsIkNvbXByZXNzZWRUZXh0dXJlIiwiQ2FudmFzVGV4dHVyZSIsIkRlcHRoVGV4dHVyZSIsIldpcmVmcmFtZUdlb21ldHJ5Iiwib2wiLCJlZGdlIiwiZWRnZXMiLCJQYXJhbWV0cmljR2VvbWV0cnkiLCJmdW5jIiwic2xpY2VzIiwic3RhY2tzIiwiUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5IiwiRVBTIiwicHUiLCJwdiIsInNsaWNlQ291bnQiLCJQb2x5aGVkcm9uR2VvbWV0cnkiLCJkZXRhaWwiLCJQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJ2ZXJ0ZXhCdWZmZXIiLCJ1dkJ1ZmZlciIsInN1YmRpdmlkZUZhY2UiLCJjb2xzIiwiYWoiLCJiaiIsInJvd3MiLCJwdXNoVmVydGV4IiwiZ2V0VmVydGV4QnlJbmRleCIsImNvcnJlY3RVViIsImF6aW11dGgiLCJpbmNsaW5hdGlvbiIsInN1YmRpdmlkZSIsImFwcHBseVJhZGl1cyIsImNlbnRyb2lkIiwiYXppIiwiY29ycmVjdFVWcyIsImNvcnJlY3RTZWFtIiwiZ2VuZXJhdGVVVnMiLCJUZXRyYWhlZHJvbkdlb21ldHJ5IiwiVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSIsIk9jdGFoZWRyb25HZW9tZXRyeSIsIk9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSIsIkljb3NhaGVkcm9uR2VvbWV0cnkiLCJJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiRG9kZWNhaGVkcm9uR2VvbWV0cnkiLCJEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSIsIlR1YmVHZW9tZXRyeSIsInR1YnVsYXJTZWdtZW50cyIsInJhZGlhbFNlZ21lbnRzIiwiY2xvc2VkIiwidGFwZXIiLCJidWZmZXJHZW9tZXRyeSIsIlR1YmVCdWZmZXJHZW9tZXRyeSIsInRhbmdlbnRzIiwiYmlub3JtYWxzIiwiZnJhbWVzIiwiY29tcHV0ZUZyZW5ldEZyYW1lcyIsIlAiLCJnZW5lcmF0ZVNlZ21lbnQiLCJnZXRQb2ludEF0IiwiTiIsIkIiLCJnZW5lcmF0ZUluZGljZXMiLCJnZW5lcmF0ZUJ1ZmZlckRhdGEiLCJUb3J1c0tub3RHZW9tZXRyeSIsInR1YmUiLCJoZWlnaHRTY2FsZSIsIlRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5IiwiUDEiLCJQMiIsIlQiLCJjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUiLCJjdSIsInN1IiwicXVPdmVyUCIsImNzIiwiVG9ydXNHZW9tZXRyeSIsImFyYyIsIlRvcnVzQnVmZmVyR2VvbWV0cnkiLCJpc0ludGVybGVhdmVkQnVmZmVyIiwiaW50ZXJzZWN0UG9pbnQiLCJ3b3JsZFNjYWxlIiwibXZQb3NpdGlvbiIsImFsaWduZWRQb3NpdGlvbiIsInJvdGF0ZWRQb3NpdGlvbiIsInZpZXdXb3JsZE1hdHJpeCIsInRyYW5zZm9ybVZlcnRleCIsInZlcnRleFBvc2l0aW9uIiwiYWRkTGV2ZWwiLCJnZXRPYmplY3RGb3JEaXN0YW5jZSIsImJvbmUiLCJpc0JvbmUiLCJnZXRCb25lQnlOYW1lIiwiZ2JvbmUiLCJwb3MiLCJyb3RxIiwic2NsIiwic3ciLCJ2ZWMiLCJza2luV2VpZ2h0IiwiY29tcHV0ZUxpbmVEaXN0YW5jZXMiLCJwb3NpdGlvbkF0dHJpYnV0ZSIsImxpbmVQcmVjaXNpb24iLCJsb2NhbFByZWNpc2lvbiIsImxvY2FsUHJlY2lzaW9uU3EiLCJ2U3RhcnQiLCJ2RW5kIiwiaW50ZXJTZWdtZW50IiwiaW50ZXJSYXkiLCJuYlZlcnRpY2VzIiwidGhyZXNob2xkIiwicGFyYW1zIiwibG9jYWxUaHJlc2hvbGQiLCJsb2NhbFRocmVzaG9sZFNxIiwidGVzdFBvaW50IiwicmF5UG9pbnREaXN0YW5jZVNxIiwiZGlzdGFuY2VUb1JheSIsInJlYWR5U3RhdGUiLCJIQVZFX0NVUlJFTlRfREFUQSIsImlzQ2FudmFzVGV4dHVyZSIsIkVhcmN1dCIsImhvbGVJbmRpY2VzIiwiZGltIiwiaW52U2l6ZSIsImhhc0hvbGVzIiwib3V0ZXJMZW4iLCJvdXRlck5vZGUiLCJsaW5rZWRMaXN0IiwicXVldWUiLCJzdGVpbmVyIiwiZ2V0TGVmdG1vc3QiLCJjb21wYXJlWCIsImVsaW1pbmF0ZUhvbGUiLCJmaWx0ZXJQb2ludHMiLCJlbGltaW5hdGVIb2xlcyIsImVhcmN1dExpbmtlZCIsImNsb2Nrd2lzZSIsImxhc3QiLCJzdW0iLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsInJlbW92ZU5vZGUiLCJhZ2FpbiIsImFyZWEiLCJwcmV2IiwiZWFyIiwicGFzcyIsInpPcmRlciIsInByZXZaIiwibmV4dFoiLCJ0YWlsIiwibnVtTWVyZ2VzIiwicFNpemUiLCJxU2l6ZSIsImluU2l6ZSIsInNvcnRMaW5rZWQiLCJpbmRleEN1cnZlIiwiaXNFYXJIYXNoZWQiLCJpc0VhciIsImN1cmVMb2NhbEludGVyc2VjdGlvbnMiLCJzcGxpdEVhcmN1dCIsInBvaW50SW5UcmlhbmdsZSIsIm1pblRYIiwibWluVFkiLCJtYXhUWCIsIm1heFRZIiwibG9jYWxseUluc2lkZSIsImlzVmFsaWREaWFnb25hbCIsInNwbGl0UG9seWdvbiIsImhvbGUiLCJoeCIsImh5IiwibXgiLCJteSIsInRhbk1pbiIsImZpbmRIb2xlQnJpZGdlIiwibGVmdG1vc3QiLCJweCIsInB5IiwiaW50ZXJzZWN0c1BvbHlnb24iLCJpbnNpZGUiLCJtaWRkbGVJbnNpZGUiLCJxMiIsIk5vZGUiLCJhbiIsImJwIiwiU2hhcGVVdGlscyIsImNvbnRvdXIiLCJpc0Nsb2NrV2lzZSIsInB0cyIsInRyaWFuZ3VsYXRlU2hhcGUiLCJob2xlcyIsInJlbW92ZUR1cEVuZFB0cyIsImFkZENvbnRvdXIiLCJob2xlSW5kZXgiLCJmb3JFYWNoIiwiRXh0cnVkZUdlb21ldHJ5IiwiRXh0cnVkZUJ1ZmZlckdlb21ldHJ5IiwidmVydGljZXNBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsU2VnbWVudHMiLCJleHRydWRlUGF0aCIsInV2Z2VuIiwiVVZHZW5lcmF0b3IiLCJXb3JsZFVWR2VuZXJhdG9yIiwiYW1vdW50IiwiZXh0cnVkZVB0cyIsInNwbGluZVR1YmUiLCJiaW5vcm1hbCIsInBvc2l0aW9uMiIsImFob2xlIiwiaGwiLCJleHRydWRlQnlQYXRoIiwiZ2V0U3BhY2VkUG9pbnRzIiwic2hhcGVQb2ludHMiLCJleHRyYWN0UG9pbnRzIiwicmV2ZXJzZSIsImNvbmNhdCIsInNjYWxlUHQyIiwicHQiLCJicyIsInZlcnQiLCJ2bGVuIiwiZmxlbiIsImdldEJldmVsVmVjIiwiaW5QdCIsImluUHJldiIsImluTmV4dCIsInZfdHJhbnNfeCIsInZfdHJhbnNfeSIsInNocmlua19ieSIsInZfcHJldl94Iiwidl9wcmV2X3kiLCJ2X25leHRfeCIsInZfbmV4dF95Iiwidl9wcmV2X2xlbnNxIiwiY29sbGluZWFyMCIsInZfcHJldl9sZW4iLCJ2X25leHRfbGVuIiwicHRQcmV2U2hpZnRfeCIsInB0UHJldlNoaWZ0X3kiLCJzZiIsInZfdHJhbnNfbGVuc3EiLCJkaXJlY3Rpb25fZXEiLCJjb250b3VyTW92ZW1lbnRzIiwib25lSG9sZU1vdmVtZW50cyIsImhvbGVzTW92ZW1lbnRzIiwidmVydGljZXNNb3ZlbWVudHMiLCJzaWRld2FsbHMiLCJsYXllcm9mZnNldCIsInNsIiwic2xlbjEiLCJzbGVuMiIsImY0IiwiZjMiLCJhZGRWZXJ0ZXgiLCJuZXh0SW5kZXgiLCJnZW5lcmF0ZVRvcFVWIiwiYWRkVVYiLCJnZW5lcmF0ZVNpZGVXYWxsVVYiLCJ2ZWN0b3IyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwiaW5kZXhBIiwiaW5kZXhCIiwiaW5kZXhDIiwiYV94IiwiYV95IiwiYl94IiwiYl95IiwiY194IiwiY195IiwiaW5kZXhEIiwiYV96IiwiYl96IiwiY196IiwiZF94IiwiZF95IiwiZF96IiwiVGV4dEdlb21ldHJ5IiwidGV4dCIsIlRleHRCdWZmZXJHZW9tZXRyeSIsImZvbnQiLCJpc0ZvbnQiLCJnZW5lcmF0ZVNoYXBlcyIsIlNwaGVyZUdlb21ldHJ5IiwicGhpU3RhcnQiLCJwaGlMZW5ndGgiLCJ0aGV0YVN0YXJ0IiwidGhldGFMZW5ndGgiLCJTcGhlcmVCdWZmZXJHZW9tZXRyeSIsInRoZXRhRW5kIiwiZ3JpZCIsInZlcnRpY2VzUm93IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsIlJpbmdCdWZmZXJHZW9tZXRyeSIsInNlZ21lbnQiLCJyYWRpdXNTdGVwIiwidGhldGFTZWdtZW50TGV2ZWwiLCJMYXRoZUdlb21ldHJ5Iiwic2VnbWVudHMiLCJMYXRoZUJ1ZmZlckdlb21ldHJ5IiwiYmFzZSIsImludmVyc2VTZWdtZW50cyIsIm4xIiwibjIiLCJTaGFwZUdlb21ldHJ5IiwiU2hhcGVCdWZmZXJHZW9tZXRyeSIsInNoYXBlSG9sZSIsImluZGV4T2Zmc2V0Iiwic2hhcGVWZXJ0aWNlcyIsInNoYXBlSG9sZXMiLCJ0b0pTT04kMSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInRocmVzaG9sZERvdCIsInNvdXJjZVZlcnRpY2VzIiwiZmFjZTEiLCJmYWNlMiIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJvcGVuRW5kZWQiLCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5IiwiaW5kZXhBcnJheSIsImdlbmVyYXRlQ2FwIiwiY2VudGVySW5kZXhTdGFydCIsImNlbnRlckluZGV4RW5kIiwiY29zVGhldGEiLCJzaW5UaGV0YSIsInNsb3BlIiwiaW5kZXhSb3ciLCJnZW5lcmF0ZVRvcnNvIiwiQ29uZUdlb21ldHJ5IiwiQ29uZUJ1ZmZlckdlb21ldHJ5IiwiQ2lyY2xlR2VvbWV0cnkiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsIkdlb21ldHJpZXMiLCJmcmVlemUiLCJSYXdTaGFkZXJNYXRlcmlhbCIsImNyZWF0ZUVsZW1lbnQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIk1hdGVyaWFscyIsIkFuaW1hdGlvblV0aWxzIiwiYXJyYXlTbGljZSIsImZyb20iLCJ0byIsImlzVHlwZWRBcnJheSIsImNvbnZlcnRBcnJheSIsImZvcmNlQ2xvbmUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkRhdGFWaWV3IiwiZ2V0S2V5ZnJhbWVPcmRlciIsInRpbWVzIiwic29ydGVkQXJyYXkiLCJuVmFsdWVzIiwic3JjT2Zmc2V0IiwiZmxhdHRlbkpTT04iLCJqc29uS2V5cyIsInZhbHVlUHJvcGVydHlOYW1lIiwiSW50ZXJwb2xhbnQiLCJwYXJhbWV0ZXJQb3NpdGlvbnMiLCJzYW1wbGVWYWx1ZXMiLCJzYW1wbGVTaXplIiwicmVzdWx0QnVmZmVyIiwiX2NhY2hlZEluZGV4IiwidmFsdWVTaXplIiwiQ3ViaWNJbnRlcnBvbGFudCIsIl93ZWlnaHRQcmV2IiwiX29mZnNldFByZXYiLCJfd2VpZ2h0TmV4dCIsIl9vZmZzZXROZXh0IiwiTGluZWFySW50ZXJwb2xhbnQiLCJEaXNjcmV0ZUludGVycG9sYW50IiwiS2V5ZnJhbWVUcmFjayIsImludGVycG9sYXRpb24iLCJUaW1lQnVmZmVyVHlwZSIsIlZhbHVlQnVmZmVyVHlwZSIsInNldEludGVycG9sYXRpb24iLCJEZWZhdWx0SW50ZXJwb2xhdGlvbiIsIkJvb2xlYW5LZXlmcmFtZVRyYWNrIiwiQ29sb3JLZXlmcmFtZVRyYWNrIiwiTnVtYmVyS2V5ZnJhbWVUcmFjayIsIlF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCIsIlF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIiwiU3RyaW5nS2V5ZnJhbWVUcmFjayIsIlZlY3RvcktleWZyYW1lVHJhY2siLCJBbmltYXRpb25DbGlwIiwiZHVyYXRpb24iLCJ0cmFja3MiLCJyZXNldER1cmF0aW9uIiwicGFyc2VLZXlmcmFtZVRyYWNrIiwianNvbiIsInRyYWNrVHlwZSIsInR5cGVOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lIiwiZXZhbHVhdGUiLCJwcCIsInZhbGlkYXRlX2ludGVydmFsIiwic2VlayIsImxpbmVhcl9zY2FuIiwiZm9yd2FyZF9zY2FuIiwiZ2l2ZVVwQXQiLCJhZnRlckVuZF8iLCJ0MWdsb2JhbCIsImJlZm9yZVN0YXJ0XyIsIm1pZCIsImludGVydmFsQ2hhbmdlZF8iLCJpbnRlcnBvbGF0ZV8iLCJzZXR0aW5ncyIsIkRlZmF1bHRTZXR0aW5nc18iLCJnZXRTZXR0aW5nc18iLCJjb3B5U2FtcGxlVmFsdWVfIiwiZW5kaW5nU3RhcnQiLCJlbmRpbmdFbmQiLCJpUHJldiIsImlOZXh0IiwidFByZXYiLCJ0TmV4dCIsImhhbGZEdCIsIm8xIiwibzAiLCJvUCIsIm9OIiwid1AiLCJ3TiIsInBwcCIsInNQIiwic04iLCJvZmZzZXQxIiwib2Zmc2V0MCIsIndlaWdodDEiLCJ3ZWlnaHQwIiwidHJhY2siLCJnZXRJbnRlcnBvbGF0aW9uIiwiVmFsdWVUeXBlTmFtZSIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlIiwiZ2V0VmFsdWVTaXplIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoIiwiZmFjdG9yeU1ldGhvZCIsImNyZWF0ZUludGVycG9sYW50Iiwic2hpZnQiLCJ0aW1lT2Zmc2V0IiwidGltZVNjYWxlIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsIm5LZXlzIiwidmFsaWRhdGUiLCJ2YWxpZCIsInByZXZUaW1lIiwiY3VyclRpbWUiLCJvcHRpbWl6ZSIsInNtb290aEludGVycG9sYXRpb24iLCJ3cml0ZUluZGV4Iiwia2VlcCIsIm9mZnNldFAiLCJvZmZzZXROIiwicmVhZE9mZnNldCIsIndyaXRlT2Zmc2V0IiwianNvblRyYWNrcyIsImZyYW1lVGltZSIsImZwcyIsImNsaXAiLCJjbGlwVHJhY2tzIiwiQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJtb3JwaFRhcmdldFNlcXVlbmNlIiwibm9Mb29wIiwibnVtTW9ycGhUYXJnZXRzIiwiZmluZEJ5TmFtZSIsIm9iamVjdE9yQ2xpcEFycmF5IiwiY2xpcEFycmF5IiwiYW5pbWF0aW9ucyIsIkNyZWF0ZUNsaXBzRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2VzIiwiYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMiLCJwYXR0ZXJuIiwicGFydHMiLCJhbmltYXRpb25Nb3JwaFRhcmdldHMiLCJjbGlwcyIsInBhcnNlQW5pbWF0aW9uIiwiYWRkTm9uZW1wdHlUcmFjayIsInRyYWNrTmFtZSIsImFuaW1hdGlvbktleXMiLCJwcm9wZXJ0eU5hbWUiLCJkZXN0VHJhY2tzIiwiY2xpcE5hbWUiLCJoaWVyYXJjaHlUcmFja3MiLCJoaWVyYXJjaHkiLCJtb3JwaFRhcmdldE5hbWVzIiwibW9ycGhUYXJnZXROYW1lIiwiYW5pbWF0aW9uS2V5IiwiYm9uZU5hbWUiLCJDYWNoZSIsImZpbGVzIiwiZmlsZSIsIkxvYWRpbmdNYW5hZ2VyIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJpc0xvYWRpbmciLCJpdGVtc0xvYWRlZCIsIml0ZW1zVG90YWwiLCJ1cmxNb2RpZmllciIsIm9uU3RhcnQiLCJpdGVtU3RhcnQiLCJpdGVtRW5kIiwiaXRlbUVycm9yIiwicmVzb2x2ZVVSTCIsInNldFVSTE1vZGlmaWVyIiwidHJhbnNmb3JtIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwibG9hZGluZyIsIkZpbGVMb2FkZXIiLCJtYW5hZ2VyIiwiQW5pbWF0aW9uTG9hZGVyIiwiQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIiLCJfcGFyc2VyIiwiRGF0YVRleHR1cmVMb2FkZXIiLCJJbWFnZUxvYWRlciIsIkN1YmVUZXh0dXJlTG9hZGVyIiwiVGV4dHVyZUxvYWRlciIsIkN1cnZlIiwiYXJjTGVuZ3RoRGl2aXNpb25zIiwiRWxsaXBzZUN1cnZlIiwiYVgiLCJhWSIsInhSYWRpdXMiLCJ5UmFkaXVzIiwiYVN0YXJ0QW5nbGUiLCJhRW5kQW5nbGUiLCJhQ2xvY2t3aXNlIiwiYVJvdGF0aW9uIiwiQXJjQ3VydmUiLCJhUmFkaXVzIiwiQ3ViaWNQb2x5IiwiYzAiLCJpbml0Q2F0bXVsbFJvbSIsIngzIiwidGVuc2lvbiIsImluaXROb251bmlmb3JtQ2F0bXVsbFJvbSIsImR0MCIsImR0MSIsImR0MiIsInQyIiwiY2FsYyIsImxvYWQiLCJjYWNoZWQiLCJzZXRUaW1lb3V0IiwiZGF0YVVyaVJlZ2V4UmVzdWx0IiwibWltZVR5cGUiLCJpc0Jhc2U2NCIsImRlY29kZVVSSUNvbXBvbmVudCIsImF0b2IiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsImNoYXJDb2RlQXQiLCJCbG9iIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiaGVhZGVyIiwib3BlbiIsImNhbGxiYWNrcyIsInN0YXR1cyIsIndpdGhDcmVkZW50aWFscyIsIm92ZXJyaWRlTWltZVR5cGUiLCJyZXF1ZXN0SGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzZXRQYXRoIiwic2V0UmVzcG9uc2VUeXBlIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0TWltZVR5cGUiLCJsb2FkZXIiLCJsb2FkVGV4dHVyZSIsInRleERhdGFzIiwibG9hZGVkIiwibWlwbWFwQ291bnQiLCJpc0N1YmVtYXAiLCJ0ZXhEYXRhIiwiY3Jvc3NPcmlnaW4iLCJvbkltYWdlTG9hZCIsIm9uSW1hZ2VFcnJvciIsInN1YnN0ciIsInNldENyb3NzT3JpZ2luIiwidXJscyIsImlzSlBFRyIsInNlYXJjaCIsImdldFBvaW50Iiwib3B0aW9uYWxUYXJnZXQiLCJnZXRVdG9UbWFwcGluZyIsImdldFBvaW50cyIsImRpdmlzaW9ucyIsImdldExlbmd0aCIsImxlbmd0aHMiLCJnZXRMZW5ndGhzIiwiY2FjaGVBcmNMZW5ndGhzIiwiY3VycmVudCIsInVwZGF0ZUFyY0xlbmd0aHMiLCJ0YXJnZXRBcmNMZW5ndGgiLCJhcmNMZW5ndGhzIiwiY29tcGFyaXNvbiIsImxlbmd0aEJlZm9yZSIsImdldFRhbmdlbnQiLCJwdDEiLCJnZXRUYW5nZW50QXQiLCJtYXQiLCJNQVhfVkFMVUUiLCJ0eiIsImZyb21KU09OIiwiaXNFbGxpcHNlQ3VydmUiLCJ0d29QaSIsImRlbHRhQW5nbGUiLCJzYW1lUG9pbnRzIiwiaXNBcmNDdXJ2ZSIsInB6IiwiQ2F0bXVsbFJvbUN1cnZlMyIsImN1cnZlVHlwZSIsIkNhdG11bGxSb20iLCJRdWFkcmF0aWNCZXppZXIiLCJRdWFkcmF0aWNCZXppZXJQMCIsIlF1YWRyYXRpY0JlemllclAxIiwiUXVhZHJhdGljQmV6aWVyUDIiLCJDdWJpY0JlemllciIsIkN1YmljQmV6aWVyUDAiLCJDdWJpY0JlemllclAxIiwiQ3ViaWNCZXppZXJQMiIsIkN1YmljQmV6aWVyUDMiLCJDdWJpY0JlemllckN1cnZlIiwidjMiLCJDdWJpY0JlemllckN1cnZlMyIsIkxpbmVDdXJ2ZSIsIkxpbmVDdXJ2ZTMiLCJRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsIlF1YWRyYXRpY0JlemllckN1cnZlMyIsIlNwbGluZUN1cnZlIiwiaXNDYXRtdWxsUm9tQ3VydmUzIiwiaW50UG9pbnQiLCJ3ZWlnaHQiLCJpc0N1YmljQmV6aWVyQ3VydmUiLCJpc0N1YmljQmV6aWVyQ3VydmUzIiwiaXNMaW5lQ3VydmUiLCJpc0xpbmVDdXJ2ZTMiLCJpc1F1YWRyYXRpY0JlemllckN1cnZlIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTMiLCJpc1NwbGluZUN1cnZlIiwiQ3VydmVzIiwiQ3VydmVQYXRoIiwiY3VydmVzIiwiYXV0b0Nsb3NlIiwiUGF0aCIsImN1cnJlbnRQb2ludCIsIlNoYXBlIiwiTGlnaHQiLCJIZW1pc3BoZXJlTGlnaHQiLCJMaWdodFNoYWRvdyIsIlNwb3RMaWdodFNoYWRvdyIsIlNwb3RMaWdodCIsInBvd2VyIiwiUG9pbnRMaWdodCIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsIkRpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJEaXJlY3Rpb25hbExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiUmVjdEFyZWFMaWdodCIsIk1hdGVyaWFsTG9hZGVyIiwiY3VydmUiLCJjbG9zZVBhdGgiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJjdXJ2ZUxlbmd0aHMiLCJnZXRDdXJ2ZUxlbmd0aHMiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJyZXNvbHV0aW9uIiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFDUHgiLCJhQ1B5IiwiYmV6aWVyQ3VydmVUbyIsImFDUDF4IiwiYUNQMXkiLCJhQ1AyeCIsImFDUDJ5Iiwic3BsaW5lVGhydSIsImFic2FyYyIsImFic2VsbGlwc2UiLCJlbGxpcHNlIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImdldFBvaW50c0hvbGVzIiwiaG9sZXNQdHMiLCJpc09ydGhvZ3JhcGhpY0NhbWVyYSIsInpvb21XIiwiem9vbUgiLCJzY2FsZVciLCJzY2FsZUgiLCJnZXRUZXh0dXJlIiwic2hhZGluZyIsInNldFRleHR1cmVzIiwiTG9hZGVyVXRpbHMiLCJkZWNvZGVUZXh0IiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJmcm9tQ2hhckNvZGUiLCJlc2NhcGUiLCJleHRyYWN0VXJsQmFzZSIsImxhc3RJbmRleE9mIiwiQnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJ0eXBlZEFycmF5IiwiVFlQRURfQVJSQVlTIiwiZHJhd2NhbGxzIiwib2Zmc2V0cyIsIkJsZW5kaW5nTW9kZSIsInRleHR1cmVMb2FkZXIiLCJtYXRlcmlhbExvYWRlciIsIkxvYWRlciIsIkpTT05Mb2FkZXIiLCJPYmplY3RMb2FkZXIiLCJyZXNvdXJjZVBhdGgiLCJIYW5kbGVycyIsImhhbmRsZXJzIiwicmVnZXgiLCJvbkxvYWRTdGFydCIsIm9uTG9hZFByb2dyZXNzIiwib25Mb2FkQ29tcGxldGUiLCJpbml0TWF0ZXJpYWxzIiwidGV4dHVyZVBhdGgiLCJjcmVhdGVNYXRlcmlhbCIsImZ1bGxQYXRoIiwibWFwRGlmZnVzZVJlcGVhdCIsIm1hcERpZmZ1c2VPZmZzZXQiLCJtYXBEaWZmdXNlV3JhcCIsIm1hcERpZmZ1c2VBbmlzb3Ryb3B5IiwibWFwRW1pc3NpdmVSZXBlYXQiLCJtYXBFbWlzc2l2ZU9mZnNldCIsIm1hcEVtaXNzaXZlV3JhcCIsIm1hcEVtaXNzaXZlQW5pc290cm9weSIsIm1hcExpZ2h0UmVwZWF0IiwibWFwTGlnaHRPZmZzZXQiLCJtYXBMaWdodFdyYXAiLCJtYXBMaWdodEFuaXNvdHJvcHkiLCJtYXBBT1JlcGVhdCIsIm1hcEFPT2Zmc2V0IiwibWFwQU9XcmFwIiwibWFwQU9Bbmlzb3Ryb3B5IiwibWFwQnVtcFJlcGVhdCIsIm1hcEJ1bXBPZmZzZXQiLCJtYXBCdW1wV3JhcCIsIm1hcEJ1bXBBbmlzb3Ryb3B5IiwibWFwTm9ybWFsUmVwZWF0IiwibWFwTm9ybWFsT2Zmc2V0IiwibWFwTm9ybWFsV3JhcCIsIm1hcE5vcm1hbEFuaXNvdHJvcHkiLCJtYXBTcGVjdWxhclJlcGVhdCIsIm1hcFNwZWN1bGFyT2Zmc2V0IiwibWFwU3BlY3VsYXJXcmFwIiwibWFwU3BlY3VsYXJBbmlzb3Ryb3B5IiwibWFwTWV0YWxuZXNzUmVwZWF0IiwibWFwTWV0YWxuZXNzT2Zmc2V0IiwibWFwTWV0YWxuZXNzV3JhcCIsIm1hcE1ldGFsbmVzc0FuaXNvdHJvcHkiLCJtYXBSb3VnaG5lc3NSZXBlYXQiLCJtYXBSb3VnaG5lc3NPZmZzZXQiLCJtYXBSb3VnaG5lc3NXcmFwIiwibWFwUm91Z2huZXNzQW5pc290cm9weSIsIm1hcEFscGhhUmVwZWF0IiwibWFwQWxwaGFPZmZzZXQiLCJtYXBBbHBoYVdyYXAiLCJtYXBBbHBoYUFuaXNvdHJvcHkiLCJzZXRSZXNvdXJjZVBhdGgiLCJpc0JpdFNldCIsImZpIiwiekxlbmd0aCIsImNvbG9ySW5kZXgiLCJub3JtYWxJbmRleCIsInV2SW5kZXgiLCJpc1F1YWQiLCJoYXNNYXRlcmlhbCIsImZhY2VBIiwiZmFjZUIiLCJ1dkxheWVyIiwiblV2TGF5ZXJzIiwicGFyc2VNb2RlbCIsImluZmx1ZW5jZXNQZXJWZXJ0ZXgiLCJwYXJzZVNraW4iLCJkc3RWZXJ0aWNlcyIsInNyY1ZlcnRpY2VzIiwibW9ycGhDb2xvcnMiLCJwYXJzZU1vcnBoaW5nIiwib3V0cHV0QW5pbWF0aW9ucyIsIm1vcnBoQW5pbWF0aW9uQ2xpcHMiLCJwYXJzZUFuaW1hdGlvbnMiLCJwYXJzZVNoYXBlIiwicGFyc2VHZW9tZXRyaWVzIiwicGFyc2VJbWFnZXMiLCJwYXJzZVRleHR1cmVzIiwicGFyc2VNYXRlcmlhbHMiLCJwYXJzZU9iamVjdCIsImdlb21ldHJ5TG9hZGVyIiwiYnVmZmVyR2VvbWV0cnlMb2FkZXIiLCJkZXRhaWxzIiwiZ2VvbWV0cnlTaGFwZXMiLCJsb2FkSW1hZ2UiLCJjdXJyZW50VXJsIiwicGFyc2VDb25zdGFudCIsIlRFWFRVUkVfTUFQUElORyIsIlRFWFRVUkVfV1JBUFBJTkciLCJURVhUVVJFX0ZJTFRFUiIsImdldEdlb21ldHJ5IiwiZ2V0TWF0ZXJpYWwiLCJJbWFnZUJpdG1hcExvYWRlciIsImNyZWF0ZUltYWdlQml0bWFwIiwiZmV0Y2giLCJTaGFwZVBhdGgiLCJzdWJQYXRocyIsImN1cnJlbnRQYXRoIiwiRm9udCIsImNyZWF0ZVBhdGgiLCJjaGFyIiwiZ2x5cGgiLCJnbHlwaHMiLCJjcHgiLCJjcHkiLCJjcHgxIiwiY3B5MSIsImNweDIiLCJjcHkyIiwib3V0bGluZSIsIl9jYWNoZWRPdXRsaW5lIiwiaGEiLCJGb250TG9hZGVyIiwic2V0T3B0aW9ucyIsInJlcyIsImJsb2IiLCJpbWFnZUJpdG1hcCIsImNhdGNoIiwidG9TaGFwZXMiLCJpc0NDVyIsIm5vSG9sZXMiLCJ0b1NoYXBlc05vSG9sZXMiLCJpblN1YnBhdGhzIiwidG1wUGF0aCIsInRtcFNoYXBlIiwiaXNQb2ludEluc2lkZVBvbHlnb24iLCJpblBvbHlnb24iLCJwb2x5TGVuIiwiZWRnZUxvd1B0IiwiZWRnZUhpZ2hQdCIsImVkZ2VEeCIsImVkZ2VEeSIsInBlcnBFZGdlIiwic29saWQiLCJob2xlc0ZpcnN0IiwidG1wUG9pbnRzIiwidG1wSG9sZXMiLCJiZXR0ZXJTaGFwZUhvbGVzIiwibmV3U2hhcGVzIiwibmV3U2hhcGVIb2xlcyIsIm1haW5JZHgiLCJhbWJpZ3VvdXMiLCJ0b0NoYW5nZSIsInNJZHgiLCJzTGVuIiwic2hvIiwiaElkeCIsImhvIiwiaG9sZV91bmFzc2lnbmVkIiwiczJJZHgiLCJmcm9tcyIsInRvcyIsInBhdGhzIiwiY2hhcnMiLCJsaW5lX2hlaWdodCIsInlNYXgiLCJ5TWluIiwidW5kZXJsaW5lVGhpY2tuZXNzIiwicmV0IiwiY3JlYXRlUGF0aHMiLCJzdWJzdHJpbmciLCJpbnN0YW5jZSIsImV5ZVNlcCIsImV5ZVJpZ2h0IiwiZXllTGVmdCIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsIkF1ZGlvTG9hZGVyIiwiU3RlcmVvQ2FtZXJhIiwiQ3ViZUNhbWVyYSIsImN1YmVSZXNvbHV0aW9uIiwiY2FtZXJhUFgiLCJjYW1lcmFOWCIsImNhbWVyYVBZIiwiY2FtZXJhTlkiLCJjYW1lcmFQWiIsImNhbWVyYU5aIiwiQ2xvY2siLCJhdXRvU3RhcnQiLCJvbGRUaW1lIiwiZWxhcHNlZFRpbWUiLCJydW5uaW5nIiwiQXVkaW9MaXN0ZW5lciIsImdhaW4iLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwidGltZURlbHRhIiwiQXVkaW8iLCJnZXRJbnB1dCIsImF1dG9wbGF5IiwibG9vcCIsInBsYXliYWNrUmF0ZSIsImlzUGxheWluZyIsImhhc1BsYXliYWNrQ29udHJvbCIsInNvdXJjZVR5cGUiLCJmaWx0ZXJzIiwiUG9zaXRpb25hbEF1ZGlvIiwicGFubmVyIiwiY3JlYXRlUGFubmVyIiwiQXVkaW9BbmFseXNlciIsImF1ZGlvIiwiZmZ0U2l6ZSIsImFuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJmcmVxdWVuY3lCaW5Db3VudCIsImdldE91dHB1dCIsIlByb3BlcnR5TWl4ZXIiLCJiaW5kaW5nIiwibWl4RnVuY3Rpb24iLCJfc2xlcnAiLCJfc2VsZWN0IiwiX2xlcnAiLCJfbWl4QnVmZmVyUmVnaW9uIiwiY3VtdWxhdGl2ZVdlaWdodCIsInVzZUNvdW50IiwicmVmZXJlbmNlQ291bnQiLCJidWZmZXJDb3B5IiwiZGVjb2RlQXVkaW9EYXRhIiwiYXVkaW9CdWZmZXIiLCJ4bWluIiwieG1heCIsImV5ZVNlcE9uUHJvamVjdGlvbiIsInltYXgiLCJwZXJmb3JtYW5jZSIsIkRhdGUiLCJub3ciLCJnZXRFbGFwc2VkVGltZSIsImdldERlbHRhIiwibmV3VGltZSIsInJlbW92ZUZpbHRlciIsImRpc2Nvbm5lY3QiLCJnZXRGaWx0ZXIiLCJzZXRGaWx0ZXIiLCJnZXRNYXN0ZXJWb2x1bWUiLCJzZXRNYXN0ZXJWb2x1bWUiLCJzZXRUYXJnZXRBdFRpbWUiLCJjdXJyZW50VGltZSIsImNsb2NrIiwicG9zaXRpb25YIiwibGluZWFyUmFtcFRvVmFsdWVBdFRpbWUiLCJwb3NpdGlvblkiLCJwb3NpdGlvbloiLCJmb3J3YXJkWCIsImZvcndhcmRZIiwiZm9yd2FyZFoiLCJ1cFgiLCJ1cFkiLCJ1cFoiLCJzZXRPcmllbnRhdGlvbiIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRCdWZmZXIiLCJwbGF5IiwiY3JlYXRlQnVmZmVyU291cmNlIiwib25lbmRlZCIsIm9uRW5kZWQiLCJzZXRWYWx1ZUF0VGltZSIsInBhdXNlIiwiZ2V0RmlsdGVycyIsInNldEZpbHRlcnMiLCJzZXRQbGF5YmFja1JhdGUiLCJnZXRQbGF5YmFja1JhdGUiLCJnZXRMb29wIiwic2V0TG9vcCIsImdldFZvbHVtZSIsInNldFZvbHVtZSIsImdldFJlZkRpc3RhbmNlIiwicmVmRGlzdGFuY2UiLCJzZXRSZWZEaXN0YW5jZSIsImdldFJvbGxvZmZGYWN0b3IiLCJyb2xsb2ZmRmFjdG9yIiwic2V0Um9sbG9mZkZhY3RvciIsImdldERpc3RhbmNlTW9kZWwiLCJkaXN0YW5jZU1vZGVsIiwic2V0RGlzdGFuY2VNb2RlbCIsImdldE1heERpc3RhbmNlIiwibWF4RGlzdGFuY2UiLCJzZXRNYXhEaXN0YW5jZSIsInNldERpcmVjdGlvbmFsQ29uZSIsImNvbmVJbm5lckFuZ2xlIiwiY29uZU91dGVyQW5nbGUiLCJjb25lT3V0ZXJHYWluIiwib3JpZW50YXRpb25YIiwib3JpZW50YXRpb25ZIiwib3JpZW50YXRpb25aIiwiZ2V0RnJlcXVlbmN5RGF0YSIsImdldEJ5dGVGcmVxdWVuY3lEYXRhIiwiZ2V0QXZlcmFnZUZyZXF1ZW5jeSIsImFjY3VtdWxhdGUiLCJhY2N1SW5kZXgiLCJjdXJyZW50V2VpZ2h0IiwibWl4Iiwib3JpZ2luYWxWYWx1ZU9mZnNldCIsInNhdmVPcmlnaW5hbFN0YXRlIiwiZ2V0VmFsdWUiLCJyZXN0b3JlT3JpZ2luYWxTdGF0ZSIsIndvcmRDaGFyT3JEb3QiLCJkaXJlY3RvcnlSZSIsIm5vZGVSZSIsIm9iamVjdFJlIiwicHJvcGVydHlSZSIsInRyYWNrUmUiLCJzdXBwb3J0ZWRPYmplY3ROYW1lcyIsInJlc2VydmVkUmUiLCJzdGFydFAiLCJzdGFydEVuZCIsImxpbmVHZW9tZXRyeSIsImNvbmVHZW9tZXRyeSIsIkNvbXBvc2l0ZSIsInRhcmdldEdyb3VwIiwib3B0aW9uYWxQYXJzZWRQYXRoIiwicGFyc2VkUGF0aCIsIlByb3BlcnR5QmluZGluZyIsInBhcnNlVHJhY2tOYW1lIiwiX3RhcmdldEdyb3VwIiwiX2JpbmRpbmdzIiwic3Vic2NyaWJlXyIsInJvb3ROb2RlIiwiZmluZE5vZGUiLCJub2RlTmFtZSIsIkFuaW1hdGlvbk9iamVjdEdyb3VwIiwibkNhY2hlZE9iamVjdHNfIiwiX2luZGljZXNCeVVVSUQiLCJfcGF0aHMiLCJfcGFyc2VkUGF0aHMiLCJfYmluZGluZ3NJbmRpY2VzQnlQYXRoIiwic3RhdHMiLCJ0b3RhbCIsIkFuaW1hdGlvbkFjdGlvbiIsIm1peGVyIiwibG9jYWxSb290IiwiX21peGVyIiwiX2NsaXAiLCJfbG9jYWxSb290IiwiblRyYWNrcyIsImludGVycG9sYW50cyIsImludGVycG9sYW50U2V0dGluZ3MiLCJpbnRlcnBvbGFudCIsIl9pbnRlcnBvbGFudFNldHRpbmdzIiwiX2ludGVycG9sYW50cyIsIl9wcm9wZXJ0eUJpbmRpbmdzIiwiX2NhY2hlSW5kZXgiLCJfYnlDbGlwQ2FjaGVJbmRleCIsIl90aW1lU2NhbGVJbnRlcnBvbGFudCIsIl93ZWlnaHRJbnRlcnBvbGFudCIsIl9sb29wQ291bnQiLCJfc3RhcnRUaW1lIiwiX2VmZmVjdGl2ZVRpbWVTY2FsZSIsIl9lZmZlY3RpdmVXZWlnaHQiLCJyZXBldGl0aW9ucyIsInBhdXNlZCIsImNsYW1wV2hlbkZpbmlzaGVkIiwiemVyb1Nsb3BlQXRTdGFydCIsInplcm9TbG9wZUF0RW5kIiwiQW5pbWF0aW9uTWl4ZXIiLCJyb290IiwiX3Jvb3QiLCJfaW5pdE1lbW9yeU1hbmFnZXIiLCJfYWNjdUluZGV4IiwiVW5pZm9ybSIsIkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwiSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJSYXljYXN0ZXIiLCJQb2ludENsb3VkIiwiYXNjU29ydCIsImludGVyc2VjdE9iamVjdCIsIlNwaGVyaWNhbCIsIkN5bGluZHJpY2FsIiwiQm94MiIsIkxpbmUzIiwiSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwiVmVydGV4Tm9ybWFsc0hlbHBlciIsIm5Ob3JtYWxzIiwib2JqR2VvbWV0cnkiLCJTcG90TGlnaHRIZWxwZXIiLCJjb25lIiwiU2tlbGV0b25IZWxwZXIiLCJnZXRCb25lTGlzdCIsImJvbmVMaXN0IiwiUG9pbnRMaWdodEhlbHBlciIsInNwaGVyZVNpemUiLCJSZWN0QXJlYUxpZ2h0SGVscGVyIiwiSGVtaXNwaGVyZUxpZ2h0SGVscGVyIiwiR3JpZEhlbHBlciIsIlBvbGFyR3JpZEhlbHBlciIsInJhZGlhbHMiLCJjaXJjbGVzIiwiRmFjZU5vcm1hbHNIZWxwZXIiLCJEaXJlY3Rpb25hbExpZ2h0SGVscGVyIiwibGlnaHRQbGFuZSIsInRhcmdldExpbmUiLCJDYW1lcmFIZWxwZXIiLCJwb2ludE1hcCIsImNvbG9yRnJ1c3R1bSIsImNvbG9yQ29uZSIsImNvbG9yVXAiLCJjb2xvclRhcmdldCIsImNvbG9yQ3Jvc3MiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJCb3hIZWxwZXIiLCJCb3gzSGVscGVyIiwiUGxhbmVIZWxwZXIiLCJBcnJvd0hlbHBlciIsImhlYWRMZW5ndGgiLCJoZWFkV2lkdGgiLCJzZXREaXJlY3Rpb24iLCJBeGVzSGVscGVyIiwiRmFjZTQiLCJmaXJzdFZhbGlkSW5kZXgiLCJiaW5kaW5ncyIsInVuYmluZCIsImlzQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJzYW5pdGl6ZU5vZGVOYW1lIiwiUmVnRXhwIiwibWF0Y2hlcyIsInJlc3VsdHMiLCJvYmplY3ROYW1lIiwib2JqZWN0SW5kZXgiLCJwcm9wZXJ0eUluZGV4IiwibGFzdERvdCIsInNlYXJjaE5vZGVTdWJ0cmVlIiwiY2hpbGROb2RlIiwic3ViVHJlZU5vZGUiLCJfZ2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfc2V0VmFsdWVfdW5hdmFpbGFibGUiLCJCaW5kaW5nVHlwZSIsIkRpcmVjdCIsIkVudGlyZUFycmF5IiwiQXJyYXlFbGVtZW50IiwiSGFzRnJvbVRvQXJyYXkiLCJWZXJzaW9uaW5nIiwiTm9uZSIsIk5lZWRzVXBkYXRlIiwiTWF0cml4V29ybGROZWVkc1VwZGF0ZSIsIkdldHRlckJ5QmluZGluZ1R5cGUiLCJyZXNvbHZlZFByb3BlcnR5IiwiU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmciLCJ0YXJnZXRPYmplY3QiLCJkZXN0IiwidGFyZ2V0QXJyYXkiLCJzb3VyY2VBcnJheSIsIm5vZGVQcm9wZXJ0eSIsInZlcnNpb25pbmciLCJiaW5kaW5nVHlwZSIsIl9nZXRWYWx1ZV91bmJvdW5kIiwiX3NldFZhbHVlX3VuYm91bmQiLCJuT2JqZWN0cyIsIm5DYWNoZWRPYmplY3RzIiwiaW5kaWNlc0J5VVVJRCIsInBhcnNlZFBhdGhzIiwibkJpbmRpbmdzIiwia25vd25PYmplY3QiLCJmaXJzdEFjdGl2ZUluZGV4IiwibGFzdENhY2hlZE9iamVjdCIsImJpbmRpbmdzRm9yUGF0aCIsImxhc3RDYWNoZWQiLCJsYXN0Q2FjaGVkSW5kZXgiLCJmaXJzdEFjdGl2ZU9iamVjdCIsImZpcnN0QWN0aXZlIiwidW5jYWNoZSIsImxhc3RPYmplY3QiLCJpbmRpY2VzQnlQYXRoIiwidW5zdWJzY3JpYmVfIiwibGFzdEJpbmRpbmdzSW5kZXgiLCJsYXN0QmluZGluZ3MiLCJfYWN0aXZhdGVBY3Rpb24iLCJfZGVhY3RpdmF0ZUFjdGlvbiIsInN0b3BGYWRpbmciLCJzdG9wV2FycGluZyIsImlzUnVubmluZyIsIl9pc0FjdGl2ZUFjdGlvbiIsImlzU2NoZWR1bGVkIiwic3RhcnRBdCIsInNldEVmZmVjdGl2ZVdlaWdodCIsImdldEVmZmVjdGl2ZVdlaWdodCIsImZhZGVJbiIsIl9zY2hlZHVsZUZhZGluZyIsImZhZGVPdXQiLCJjcm9zc0ZhZGVGcm9tIiwiZmFkZU91dEFjdGlvbiIsIndhcnAiLCJmYWRlSW5EdXJhdGlvbiIsImZhZGVPdXREdXJhdGlvbiIsInN0YXJ0RW5kUmF0aW8iLCJlbmRTdGFydFJhdGlvIiwiY3Jvc3NGYWRlVG8iLCJmYWRlSW5BY3Rpb24iLCJ3ZWlnaHRJbnRlcnBvbGFudCIsIl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCIsInNldEVmZmVjdGl2ZVRpbWVTY2FsZSIsImdldEVmZmVjdGl2ZVRpbWVTY2FsZSIsInNldER1cmF0aW9uIiwic3luY1dpdGgiLCJhY3Rpb24iLCJoYWx0Iiwic3RhcnRUaW1lU2NhbGUiLCJlbmRUaW1lU2NhbGUiLCJfbGVuZENvbnRyb2xJbnRlcnBvbGFudCIsInRpbWVTY2FsZUludGVycG9sYW50IiwiZ2V0TWl4ZXIiLCJnZXRDbGlwIiwiZ2V0Um9vdCIsIl91cGRhdGUiLCJkZWx0YVRpbWUiLCJ0aW1lRGlyZWN0aW9uIiwidGltZVJ1bm5pbmciLCJfdXBkYXRlVGltZVNjYWxlIiwiY2xpcFRpbWUiLCJfdXBkYXRlVGltZSIsIl91cGRhdGVXZWlnaHQiLCJwcm9wZXJ0eU1peGVycyIsImludGVycG9sYW50VmFsdWUiLCJsb29wQ291bnQiLCJwaW5nUG9uZyIsIl9zZXRFbmRpbmdzIiwiaGFuZGxlX3N0b3AiLCJsb29wRGVsdGEiLCJwZW5kaW5nIiwiYXRTdGFydCIsImF0RW5kIiwid2VpZ2h0Tm93Iiwid2VpZ2h0VGhlbiIsIl9iaW5kQWN0aW9uIiwicHJvdG90eXBlQWN0aW9uIiwicm9vdFV1aWQiLCJiaW5kaW5nc0J5Um9vdCIsIl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUiLCJiaW5kaW5nc0J5TmFtZSIsIl9hZGRJbmFjdGl2ZUJpbmRpbmciLCJjbGlwVXVpZCIsImFjdGlvbnNGb3JDbGlwIiwiX2FjdGlvbnNCeUNsaXAiLCJrbm93bkFjdGlvbnMiLCJfYWRkSW5hY3RpdmVBY3Rpb24iLCJfbGVuZEJpbmRpbmciLCJfbGVuZEFjdGlvbiIsIl90YWtlQmFja0JpbmRpbmciLCJfdGFrZUJhY2tBY3Rpb24iLCJfYWN0aW9ucyIsIl9uQWN0aXZlQWN0aW9ucyIsIl9uQWN0aXZlQmluZGluZ3MiLCJfY29udHJvbEludGVycG9sYW50cyIsIl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnMiLCJjb250cm9sSW50ZXJwb2xhbnRzIiwiYWN0aW9uc0J5Q2xpcCIsImFjdGlvbkJ5Um9vdCIsIl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiIsImxhc3RJbmFjdGl2ZUFjdGlvbiIsImNhY2hlSW5kZXgiLCJrbm93bkFjdGlvbnNGb3JDbGlwIiwibGFzdEtub3duQWN0aW9uIiwiYnlDbGlwQ2FjaGVJbmRleCIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uIiwiX3JlbW92ZUluYWN0aXZlQmluZGluZyIsInByZXZJbmRleCIsImxhc3RBY3RpdmVJbmRleCIsImZpcnN0SW5hY3RpdmVBY3Rpb24iLCJmaXJzdEluYWN0aXZlSW5kZXgiLCJsYXN0QWN0aXZlQWN0aW9uIiwiYmluZGluZ0J5TmFtZSIsInByb3BCaW5kaW5nIiwibGFzdEluYWN0aXZlQmluZGluZyIsInJlbW92ZV9lbXB0eV9tYXAiLCJfIiwiZmlyc3RJbmFjdGl2ZUJpbmRpbmciLCJsYXN0QWN0aXZlQmluZGluZyIsIl9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyIiwiX19jYWNoZUluZGV4IiwibGFzdEFjdGl2ZUludGVycG9sYW50IiwiY2xpcEFjdGlvbiIsIm9wdGlvbmFsUm9vdCIsImNsaXBPYmplY3QiLCJleGlzdGluZ0FjdGlvbiIsIm5ld0FjdGlvbiIsInN0b3BBbGxBY3Rpb24iLCJuQWN0aW9ucyIsInVuY2FjaGVDbGlwIiwiYWN0aW9uc1RvUmVtb3ZlIiwidW5jYWNoZVJvb3QiLCJ1bmNhY2hlQWN0aW9uIiwic2V0RnJvbUNhbWVyYSIsImNvb3JkcyIsImludGVyc2VjdE9iamVjdHMiLCJvdGhlciIsIm1ha2VTYWZlIiwic2V0RnJvbUNhcnRlc2lhbkNvb3JkcyIsImRpc3RhbmNlU3EiLCJjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyIiwiY2xhbXBUb0xpbmUiLCJzdGFydEVuZDIiLCJvYmpQb3MiLCJvYmpOb3JtIiwiY29uZUxlbmd0aCIsImNvbmVXaWR0aCIsImJvbmVNYXRyaXgiLCJtYXRyaXhXb3JsZEludiIsInNldFBvaW50Iiwic2V0Q29sb3IiLCJMaW5lU3RyaXAiLCJMaW5lUGllY2VzIiwiTWVzaEZhY2VNYXRlcmlhbCIsIk11bHRpTWF0ZXJpYWwiLCJQYXJ0aWNsZSIsIlBhcnRpY2xlU3lzdGVtIiwiUG9pbnRDbG91ZE1hdGVyaWFsIiwiUGFydGljbGVCYXNpY01hdGVyaWFsIiwiUGFydGljbGVTeXN0ZW1NYXRlcmlhbCIsIlZlcnRleCIsIkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUiLCJJbnQ4QXR0cmlidXRlIiwiVWludDhBdHRyaWJ1dGUiLCJVaW50OENsYW1wZWRBdHRyaWJ1dGUiLCJJbnQxNkF0dHJpYnV0ZSIsIlVpbnQxNkF0dHJpYnV0ZSIsIkludDMyQXR0cmlidXRlIiwiVWludDMyQXR0cmlidXRlIiwiRmxvYXQzMkF0dHJpYnV0ZSIsIkZsb2F0NjRBdHRyaWJ1dGUiLCJDbG9zZWRTcGxpbmVDdXJ2ZTMiLCJTcGxpbmVDdXJ2ZTMiLCJTcGxpbmUiLCJBeGlzSGVscGVyIiwiQm91bmRpbmdCb3hIZWxwZXIiLCJFZGdlc0hlbHBlciIsIldpcmVmcmFtZUhlbHBlciIsIlhIUkxvYWRlciIsIkJpbmFyeVRleHR1cmVMb2FkZXIiLCJjb25zdHJ1Y3QiLCJjcmVhdGVQb2ludHNHZW9tZXRyeSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkiLCJmcm9tUG9pbnRzIiwiaW5pdEZyb21BcnJheSIsImdldENvbnRyb2xQb2ludHNBcnJheSIsInJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aCIsInNldENvbG9ycyIsInNldFRleHR1cmVQYXRoIiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInJhbmRvbTE2IiwibmVhcmVzdFBvd2VyT2ZUd28iLCJuZXh0UG93ZXJPZlR3byIsImZsYXR0ZW5Ub0FycmF5T2Zmc2V0IiwibXVsdGlwbHlWZWN0b3IzIiwibXVsdGlwbHlWZWN0b3IzQXJyYXkiLCJhcHBseVRvQnVmZmVyIiwiYXBwbHlUb1ZlY3RvcjNBcnJheSIsImV4dHJhY3RQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwibXVsdGlwbHlUb0FycmF5IiwibXVsdGlwbHlWZWN0b3I0Iiwicm90YXRlQXhpcyIsImNyb3NzVmVjdG9yIiwicm90YXRlQnlBeGlzIiwibWFrZUZydXN0dW0iLCJpc0ludGVyc2VjdGlvbkxpbmUiLCJpc0ludGVyc2VjdGlvblBsYW5lIiwiYmFyeWNvb3JkRnJvbVBvaW50IiwibWlkcG9pbnQiLCJleHRyYWN0QWxsUG9pbnRzIiwiZXh0cnVkZSIsIm1ha2VHZW9tZXRyeSIsImZyb21BdHRyaWJ1dGUiLCJkaXN0YW5jZVRvTWFuaGF0dGFuIiwibGVuZ3RoTWFuaGF0dGFuIiwic2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgiLCJzZXRFdWxlckZyb21RdWF0ZXJuaW9uIiwiZ2V0UG9zaXRpb25Gcm9tTWF0cml4IiwiZ2V0U2NhbGVGcm9tTWF0cml4IiwiZ2V0Q29sdW1uRnJvbU1hdHJpeCIsImFwcGx5UHJvamVjdGlvbiIsImNvbXB1dGVUYW5nZW50cyIsImdldENoaWxkQnlOYW1lIiwicmVuZGVyRGVwdGgiLCJnZXRXb3JsZFJvdGF0aW9uIiwiZXVsZXJPcmRlciIsInVzZVF1YXRlcm5pb24iLCJzZXRMZW5zIiwib25seVNoYWRvdyIsInNoYWRvd0NhbWVyYUZvdiIsInNoYWRvd0NhbWVyYUxlZnQiLCJzaGFkb3dDYW1lcmFSaWdodCIsInNoYWRvd0NhbWVyYVRvcCIsInNoYWRvd0NhbWVyYUJvdHRvbSIsInNoYWRvd0NhbWVyYVZpc2libGUiLCJzaGFkb3dEYXJrbmVzcyIsInNoYWRvd01hcFdpZHRoIiwic2hhZG93TWFwSGVpZ2h0IiwiY29weUluZGljZXNBcnJheSIsImFkZEluZGV4IiwiYWRkRHJhd0NhbGwiLCJjbGVhckRyYXdDYWxscyIsImNvbXB1dGVPZmZzZXRzIiwiZ2V0QXJyYXlzIiwiYWRkU2hhcGVMaXN0Iiwid3JhcEFyb3VuZCIsIm92ZXJkcmF3Iiwid3JhcFJHQiIsIm1ldGFsIiwiY2xlYXJUYXJnZXQiLCJhbmltYXRlIiwiZ2V0Q3VycmVudFJlbmRlclRhcmdldCIsImdldFByZWNpc2lvbiIsInJlc2V0R0xTdGF0ZSIsInN1cHBvcnRzRmxvYXRUZXh0dXJlcyIsInN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQyIsInN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQyIsInN1cHBvcnRzQmxlbmRNaW5NYXgiLCJzdXBwb3J0c0luc3RhbmNlZEFycmF5cyIsImVuYWJsZVNjaXNzb3JUZXN0IiwiYWRkUHJlUGx1Z2luIiwiYWRkUG9zdFBsdWdpbiIsInVwZGF0ZVNoYWRvd01hcCIsInNldEZhY2VDdWxsaW5nIiwic2hhZG93TWFwQ3VsbEZhY2UiLCJyZW5kZXJSZXZlcnNlU2lkZWQiLCJyZW5kZXJTaW5nbGVTaWRlZCIsInN0YW5kaW5nIiwiZ2V0RGF0YSIsInVwZGF0ZUN1YmVNYXAiLCJHZW9tZXRyeVV0aWxzIiwiZ2VvbWV0cnkxIiwiUHJvamVjdG9yIiwicHJvamVjdFZlY3RvciIsInVucHJvamVjdFZlY3RvciIsInBpY2tpbmdSYXkiLCJDYW52YXNSZW5kZXJlciIsImxvYWRUZXh0dXJlQ3ViZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUiLCJTY2VuZVV0aWxzIiwiY3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdCIsImRldGFjaCIsImF0dGFjaCIsIkxlbnNGbGFyZSIsIlRXRUVOIiwic291bmQiLCJpY29zYWhlZHJvbiIsIm9ibGlxdWVMaW5lRnJhZ21lbnRTaGFkZXIiLCJzdW1tZWRXYXZlRnJhZ21lbnRTaGFkZXIiLCJwYXJ0aWNsZVZlcnRleFNoYWRlciIsInBhcnRpY2xlRnJhZ21lbnRTaGFkZXIiLCJtYXJjaGluZ0N1YmVzIiwicG9pbnRMaWdodCIsImFtYmllbnRMaWdodCIsImdyb3VuZEdlb21ldHJ5IiwiZ3JvdW5kTWVzaCIsInBhcnRpY2xlUG9pbnRzIiwid2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJibG9ic0NvdW50IiwiZ3JvdW5kVmVydGV4T2Zmc2V0Iiwic2hvdWxkQ2hhbmdlU2NlbmVUbzIiLCJzaG91bGRDaGFuZ2VTY2VuZVRvMyIsInNob3VsZENoYW5nZVNjZW5lVG80Iiwic2hvdWxkQ2hhbmdlU2NlbmVUbzUiLCJzaG91bGRDaGFuZ2VTY2VuZVRvNiIsImljb3NhaGVkcm9uR3JvdXAiLCJkaXJMaWdodFBvcyIsImRpckxpZ2h0Q29sb3IiLCJ1cGRhdGVHcm91bmQiLCJiYWxseCIsImJhbGx5IiwiYmFsbHoiLCJzdWJ0cmFjdCIsInN0cmVuZ3RoIiwiYWRkQmFsbCIsInVwZGF0ZUN1YmVzIiwic3BlZWQiLCJjYW1lcmFYIiwiY2FtZXJhWiIsIm9yaWdpbmFsVmVydGljZXMiLCJvcmlnaW5hbFZlcnRpY2VzQXJyYXkiLCJ0b1NjZW5lMiIsInRvU2NlbmUzIiwidG9TY2VuZTQiLCJ0b1NjZW5lNSIsInRvU2NlbmU2IiwiaW5pdGlhbFkiLCJUd2VlbiIsImVhc2luZyIsIkVhc2luZyIsIkV4cG9uZW50aWFsIiwiT3V0IiwibWF0ZXJpYWwxIiwiY29sb3JzUGVyRmFjZSIsImhleFRvUmdiIiwiZGlzdCIsInJnYkNvbG9yIiwiY29sb3JzQXJyYXkiLCJtYXRlcmlhbDIiLCJ1cGRhdGVCbG9ic0NvdW50IiwiY3JlYXRlT2JqZWN0IiwiTGluZWFyIiwib25Db21wbGV0ZSIsIm9uUmVzaXplIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImdyb3VuZE1hdGVyaWFsIiwiYm9keSIsImFwcGVuZENoaWxkIiwiTWFyY2hpbmdDdWJlcyIsImVuYWJsZVV2cyIsImVuYWJsZUNvbG9ycyIsInZsaXN0Iiwibmxpc3QiLCJWSW50WCIsImlzb2wiLCJ2YWxwMSIsInZhbHAyIiwibXUiLCJuYyIsIm5vcm1hbF9jYWNoZSIsIlZJbnRZIiwieWQiLCJWSW50WiIsInpkIiwiY29tcE5vcm0iLCJxMyIsImZpZWxkIiwicG9seWdvbml6ZSIsImZ4IiwiZnkiLCJmeiIsInJlbmRlckNhbGxiYWNrIiwicTF5IiwicTF6IiwicXl6IiwicTF5eiIsImN1YmVpbmRleCIsImZpZWxkMCIsImZpZWxkMSIsImZpZWxkMiIsImZpZWxkMyIsImZpZWxkNCIsImZpZWxkNSIsImZpZWxkNiIsImZpZWxkNyIsImVkZ2VUYWJsZSIsImZ4MiIsImZ5MiIsImZ6MiIsIm8yIiwibzMiLCJudW10cmlzIiwidHJpVGFibGUiLCJwb3Nub3JtdHJpdiIsIm5vcm0iLCJueCIsIm55IiwibnoiLCJtYXhDb3VudCIsImNvbmNhdGVuYXRlIiwiaXNvbGF0aW9uIiwic2l6ZTIiLCJzaXplMyIsImhhbGZzaXplIiwiYmVnaW4iLCJ6cyIsInlzIiwieHMiLCJtaW5feiIsIm1heF96IiwibWluX3kiLCJtYXhfeSIsIm1pbl94IiwieV9vZmZzZXQiLCJ6X29mZnNldCIsInZhbCIsIm1heF94IiwiYWRkUGxhbmVYIiwieGRpdiIsImN4eSIsImFkZFBsYW5lWSIsInlkaXYiLCJhZGRQbGFuZVoiLCJ6ZGl2IiwiY3oiLCJjeXoiLCJzbWluMiIsImdlbmVyYXRlR2VvbWV0cnkiLCJnZW5lcmF0ZUJ1ZmZlckdlb21ldHJ5IiwiZ2VvIiwicG9zQXJyYXkiLCJub3JtQXJyYXkiLCJfR3JvdXAiLCJfdHdlZW5zIiwiX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlIiwiZ2V0QWxsIiwidHdlZW5JZCIsInJlbW92ZUFsbCIsInR3ZWVuIiwiZ2V0SWQiLCJwcmVzZXJ2ZSIsInR3ZWVuSWRzIiwiX2lzUGxheWluZyIsIl9uZXh0SWQiLCJuZXh0SWQiLCJwcm9jZXNzIiwiaHJ0aW1lIiwic2VsZiIsImdldFRpbWUiLCJfb2JqZWN0IiwiX3ZhbHVlc1N0YXJ0IiwiX3ZhbHVlc0VuZCIsIl92YWx1ZXNTdGFydFJlcGVhdCIsIl9kdXJhdGlvbiIsIl9yZXBlYXQiLCJfcmVwZWF0RGVsYXlUaW1lIiwiX3lveW8iLCJfcmV2ZXJzZWQiLCJfZGVsYXlUaW1lIiwiX2Vhc2luZ0Z1bmN0aW9uIiwiX2ludGVycG9sYXRpb25GdW5jdGlvbiIsIkludGVycG9sYXRpb24iLCJfY2hhaW5lZFR3ZWVucyIsIl9vblN0YXJ0Q2FsbGJhY2siLCJfb25TdGFydENhbGxiYWNrRmlyZWQiLCJfb25VcGRhdGVDYWxsYmFjayIsIl9vblJlcGVhdENhbGxiYWNrIiwiX29uQ29tcGxldGVDYWxsYmFjayIsIl9vblN0b3BDYWxsYmFjayIsIl9ncm91cCIsInN0b3BDaGFpbmVkVHdlZW5zIiwibnVtQ2hhaW5lZFR3ZWVucyIsImRlbGF5IiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiZWFzaW5nRnVuY3Rpb24iLCJpbnRlcnBvbGF0aW9uRnVuY3Rpb24iLCJjaGFpbiIsIm9uUmVwZWF0Iiwib25TdG9wIiwiZWxhcHNlZCIsIlF1YWRyYXRpYyIsIkluIiwiSW5PdXQiLCJDdWJpYyIsIlF1YXJ0aWMiLCJRdWludGljIiwiU2ludXNvaWRhbCIsIkNpcmN1bGFyIiwiRWxhc3RpYyIsIkJhY2siLCJCb3VuY2UiLCJmbiIsIlV0aWxzIiwiQmV6aWVyIiwicHciLCJibiIsIkJlcm5zdGVpbiIsImZjIiwiRmFjdG9yaWFsIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiY3R4IiwiYmxvY2tPZmZzZXQiLCJzYW1wbGVSYXRlIiwid2N0eCIsIm51bUJsb2NrcyIsIldJRFRIIiwicGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJvdXRwdXREYXRhTCIsImdldENoYW5uZWxEYXRhIiwib3V0cHV0RGF0YVIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0Ms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SyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hFLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ25FLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3BFLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQy9ELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3BFLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQy9ELEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFLLEVBQ25ELEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ25ELEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3BFLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hFLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ25FLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQy9DLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEVBQ25ELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUFNLEVBQ3BELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ25FLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFLLEVBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2pELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3hELEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQy9DLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFLLEVBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEVBQ2xELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2hELEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hFLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hFLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ25FLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEVBQ2pELEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ25FLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEVBQ2pELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQy9DLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2hELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUFNLEVBQ3BELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEVBQ2xELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2xELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQy9DLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2hELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hFLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3BFLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2hELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2hELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3pELEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ25ELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUFNLEVBQ3BELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFLLEVBQ2pELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzVELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2pELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZFLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQy9ELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEVBQ3pELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFLLEVBQ25ELEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3hELEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2xELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzdELEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3RELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEVBQ2pELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUFNLEVBQ3BELEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2xFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzNELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3JELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ2pFLEVBQUcsRUFBRyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZFLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3BFLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQy9ELEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3BFLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQzlELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFLLEdBQUssR0FBSyxHQUFLLEVBQ3ZELEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFNLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFL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aW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIvLyBQb2x5ZmlsbHNcblxuaWYgKCBOdW1iZXIuRVBTSUxPTiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdE51bWJlci5FUFNJTE9OID0gTWF0aC5wb3coIDIsIC0gNTIgKTtcblxufVxuXG5pZiAoIE51bWJlci5pc0ludGVnZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHQvLyBNaXNzaW5nIGluIElFXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9pc0ludGVnZXJcblxuXHROdW1iZXIuaXNJbnRlZ2VyID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKCB2YWx1ZSApICYmIE1hdGguZmxvb3IoIHZhbHVlICkgPT09IHZhbHVlO1xuXG5cdH07XG5cbn1cblxuLy9cblxuaWYgKCBNYXRoLnNpZ24gPT09IHVuZGVmaW5lZCApIHtcblxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3NpZ25cblxuXHRNYXRoLnNpZ24gPSBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHRyZXR1cm4gKCB4IDwgMCApID8gLSAxIDogKCB4ID4gMCApID8gMSA6ICsgeDtcblxuXHR9O1xuXG59XG5cbmlmICggJ25hbWUnIGluIEZ1bmN0aW9uLnByb3RvdHlwZSA9PT0gZmFsc2UgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GdW5jdGlvbi9uYW1lXG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBGdW5jdGlvbi5wcm90b3R5cGUsICduYW1lJywge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnRvU3RyaW5nKCkubWF0Y2goIC9eXFxzKmZ1bmN0aW9uXFxzKihbXlxcKFxcc10qKS8gKVsgMSBdO1xuXG5cdFx0fVxuXG5cdH0gKTtcblxufVxuXG5pZiAoIE9iamVjdC5hc3NpZ24gPT09IHVuZGVmaW5lZCApIHtcblxuXHQvLyBNaXNzaW5nIGluIElFXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cblxuXHQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgb3V0cHV0ID0gT2JqZWN0KCB0YXJnZXQgKTtcblxuXHRcdFx0Zm9yICggdmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCArKyApIHtcblxuXHRcdFx0XHR2YXIgc291cmNlID0gYXJndW1lbnRzWyBpbmRleCBdO1xuXG5cdFx0XHRcdGlmICggc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIG5leHRLZXkgaW4gc291cmNlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggc291cmNlLCBuZXh0S2V5ICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0b3V0cHV0WyBuZXh0S2V5IF0gPSBzb3VyY2VbIG5leHRLZXkgXTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdFx0fTtcblxuXHR9ICkoKTtcblxufVxuXG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvZXZlbnRkaXNwYXRjaGVyLmpzL1xuICovXG5cbmZ1bmN0aW9uIEV2ZW50RGlzcGF0Y2hlcigpIHt9XG5cbk9iamVjdC5hc3NpZ24oIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUsIHtcblxuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoIHR5cGUsIGxpc3RlbmVyICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdGlmICggbGlzdGVuZXJzWyB0eXBlIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0gPSBbXTtcblxuXHRcdH1cblxuXHRcdGlmICggbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSA9PT0gLSAxICkge1xuXG5cdFx0XHRsaXN0ZW5lcnNbIHR5cGUgXS5wdXNoKCBsaXN0ZW5lciApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0aGFzRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm4gZmFsc2U7XG5cblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXG5cdFx0cmV0dXJuIGxpc3RlbmVyc1sgdHlwZSBdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSAhPT0gLSAxO1xuXG5cdH0sXG5cblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXHRcdHZhciBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzWyB0eXBlIF07XG5cblx0XHRpZiAoIGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGluZGV4ID0gbGlzdGVuZXJBcnJheS5pbmRleE9mKCBsaXN0ZW5lciApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0bGlzdGVuZXJBcnJheS5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgZXZlbnQudHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGV2ZW50LnRhcmdldCA9IHRoaXM7XG5cblx0XHRcdHZhciBhcnJheSA9IGxpc3RlbmVyQXJyYXkuc2xpY2UoIDAgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhcnJheVsgaSBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxudmFyIFJFVklTSU9OID0gJzk4JztcbnZhciBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiB9O1xudmFyIEN1bGxGYWNlTm9uZSA9IDA7XG52YXIgQ3VsbEZhY2VCYWNrID0gMTtcbnZhciBDdWxsRmFjZUZyb250ID0gMjtcbnZhciBDdWxsRmFjZUZyb250QmFjayA9IDM7XG52YXIgRnJvbnRGYWNlRGlyZWN0aW9uQ1cgPSAwO1xudmFyIEZyb250RmFjZURpcmVjdGlvbkNDVyA9IDE7XG52YXIgQmFzaWNTaGFkb3dNYXAgPSAwO1xudmFyIFBDRlNoYWRvd01hcCA9IDE7XG52YXIgUENGU29mdFNoYWRvd01hcCA9IDI7XG52YXIgRnJvbnRTaWRlID0gMDtcbnZhciBCYWNrU2lkZSA9IDE7XG52YXIgRG91YmxlU2lkZSA9IDI7XG52YXIgRmxhdFNoYWRpbmcgPSAxO1xudmFyIFNtb290aFNoYWRpbmcgPSAyO1xudmFyIE5vQ29sb3JzID0gMDtcbnZhciBGYWNlQ29sb3JzID0gMTtcbnZhciBWZXJ0ZXhDb2xvcnMgPSAyO1xudmFyIE5vQmxlbmRpbmcgPSAwO1xudmFyIE5vcm1hbEJsZW5kaW5nID0gMTtcbnZhciBBZGRpdGl2ZUJsZW5kaW5nID0gMjtcbnZhciBTdWJ0cmFjdGl2ZUJsZW5kaW5nID0gMztcbnZhciBNdWx0aXBseUJsZW5kaW5nID0gNDtcbnZhciBDdXN0b21CbGVuZGluZyA9IDU7XG52YXIgQWRkRXF1YXRpb24gPSAxMDA7XG52YXIgU3VidHJhY3RFcXVhdGlvbiA9IDEwMTtcbnZhciBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiA9IDEwMjtcbnZhciBNaW5FcXVhdGlvbiA9IDEwMztcbnZhciBNYXhFcXVhdGlvbiA9IDEwNDtcbnZhciBaZXJvRmFjdG9yID0gMjAwO1xudmFyIE9uZUZhY3RvciA9IDIwMTtcbnZhciBTcmNDb2xvckZhY3RvciA9IDIwMjtcbnZhciBPbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gMjAzO1xudmFyIFNyY0FscGhhRmFjdG9yID0gMjA0O1xudmFyIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgPSAyMDU7XG52YXIgRHN0QWxwaGFGYWN0b3IgPSAyMDY7XG52YXIgT25lTWludXNEc3RBbHBoYUZhY3RvciA9IDIwNztcbnZhciBEc3RDb2xvckZhY3RvciA9IDIwODtcbnZhciBPbmVNaW51c0RzdENvbG9yRmFjdG9yID0gMjA5O1xudmFyIFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgPSAyMTA7XG52YXIgTmV2ZXJEZXB0aCA9IDA7XG52YXIgQWx3YXlzRGVwdGggPSAxO1xudmFyIExlc3NEZXB0aCA9IDI7XG52YXIgTGVzc0VxdWFsRGVwdGggPSAzO1xudmFyIEVxdWFsRGVwdGggPSA0O1xudmFyIEdyZWF0ZXJFcXVhbERlcHRoID0gNTtcbnZhciBHcmVhdGVyRGVwdGggPSA2O1xudmFyIE5vdEVxdWFsRGVwdGggPSA3O1xudmFyIE11bHRpcGx5T3BlcmF0aW9uID0gMDtcbnZhciBNaXhPcGVyYXRpb24gPSAxO1xudmFyIEFkZE9wZXJhdGlvbiA9IDI7XG52YXIgTm9Ub25lTWFwcGluZyA9IDA7XG52YXIgTGluZWFyVG9uZU1hcHBpbmcgPSAxO1xudmFyIFJlaW5oYXJkVG9uZU1hcHBpbmcgPSAyO1xudmFyIFVuY2hhcnRlZDJUb25lTWFwcGluZyA9IDM7XG52YXIgQ2luZW9uVG9uZU1hcHBpbmcgPSA0O1xudmFyIFVWTWFwcGluZyA9IDMwMDtcbnZhciBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDE7XG52YXIgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gMzAyO1xudmFyIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nID0gMzAzO1xudmFyIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nID0gMzA0O1xudmFyIFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nID0gMzA1O1xudmFyIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nID0gMzA2O1xudmFyIEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nID0gMzA3O1xudmFyIFJlcGVhdFdyYXBwaW5nID0gMTAwMDtcbnZhciBDbGFtcFRvRWRnZVdyYXBwaW5nID0gMTAwMTtcbnZhciBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nID0gMTAwMjtcbnZhciBOZWFyZXN0RmlsdGVyID0gMTAwMztcbnZhciBOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlciA9IDEwMDQ7XG52YXIgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IDEwMDU7XG52YXIgTGluZWFyRmlsdGVyID0gMTAwNjtcbnZhciBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNztcbnZhciBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xudmFyIFVuc2lnbmVkQnl0ZVR5cGUgPSAxMDA5O1xudmFyIEJ5dGVUeXBlID0gMTAxMDtcbnZhciBTaG9ydFR5cGUgPSAxMDExO1xudmFyIFVuc2lnbmVkU2hvcnRUeXBlID0gMTAxMjtcbnZhciBJbnRUeXBlID0gMTAxMztcbnZhciBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xudmFyIEZsb2F0VHlwZSA9IDEwMTU7XG52YXIgSGFsZkZsb2F0VHlwZSA9IDEwMTY7XG52YXIgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNztcbnZhciBVbnNpZ25lZFNob3J0NTU1MVR5cGUgPSAxMDE4O1xudmFyIFVuc2lnbmVkU2hvcnQ1NjVUeXBlID0gMTAxOTtcbnZhciBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xudmFyIEFscGhhRm9ybWF0ID0gMTAyMTtcbnZhciBSR0JGb3JtYXQgPSAxMDIyO1xudmFyIFJHQkFGb3JtYXQgPSAxMDIzO1xudmFyIEx1bWluYW5jZUZvcm1hdCA9IDEwMjQ7XG52YXIgTHVtaW5hbmNlQWxwaGFGb3JtYXQgPSAxMDI1O1xudmFyIFJHQkVGb3JtYXQgPSBSR0JBRm9ybWF0O1xudmFyIERlcHRoRm9ybWF0ID0gMTAyNjtcbnZhciBEZXB0aFN0ZW5jaWxGb3JtYXQgPSAxMDI3O1xudmFyIFJlZEZvcm1hdCA9IDEwMjg7XG52YXIgUkdCX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NjtcbnZhciBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NztcbnZhciBSR0JBX1MzVENfRFhUM19Gb3JtYXQgPSAzMzc3ODtcbnZhciBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSAzMzc3OTtcbnZhciBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQwO1xudmFyIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDE7XG52YXIgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDI7XG52YXIgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDM7XG52YXIgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7XG52YXIgUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSAzNzgwODtcbnZhciBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5O1xudmFyIFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG52YXIgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSAzNzgxMTtcbnZhciBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyO1xudmFyIFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG52YXIgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSAzNzgxNDtcbnZhciBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1O1xudmFyIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xudmFyIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCA9IDM3ODE3O1xudmFyIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4O1xudmFyIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcbnZhciBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XG52YXIgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxO1xudmFyIExvb3BPbmNlID0gMjIwMDtcbnZhciBMb29wUmVwZWF0ID0gMjIwMTtcbnZhciBMb29wUGluZ1BvbmcgPSAyMjAyO1xudmFyIEludGVycG9sYXRlRGlzY3JldGUgPSAyMzAwO1xudmFyIEludGVycG9sYXRlTGluZWFyID0gMjMwMTtcbnZhciBJbnRlcnBvbGF0ZVNtb290aCA9IDIzMDI7XG52YXIgWmVyb0N1cnZhdHVyZUVuZGluZyA9IDI0MDA7XG52YXIgWmVyb1Nsb3BlRW5kaW5nID0gMjQwMTtcbnZhciBXcmFwQXJvdW5kRW5kaW5nID0gMjQwMjtcbnZhciBUcmlhbmdsZXNEcmF3TW9kZSA9IDA7XG52YXIgVHJpYW5nbGVTdHJpcERyYXdNb2RlID0gMTtcbnZhciBUcmlhbmdsZUZhbkRyYXdNb2RlID0gMjtcbnZhciBMaW5lYXJFbmNvZGluZyA9IDMwMDA7XG52YXIgc1JHQkVuY29kaW5nID0gMzAwMTtcbnZhciBHYW1tYUVuY29kaW5nID0gMzAwNztcbnZhciBSR0JFRW5jb2RpbmcgPSAzMDAyO1xudmFyIExvZ0x1dkVuY29kaW5nID0gMzAwMztcbnZhciBSR0JNN0VuY29kaW5nID0gMzAwNDtcbnZhciBSR0JNMTZFbmNvZGluZyA9IDMwMDU7XG52YXIgUkdCREVuY29kaW5nID0gMzAwNjtcbnZhciBCYXNpY0RlcHRoUGFja2luZyA9IDMyMDA7XG52YXIgUkdCQURlcHRoUGFja2luZyA9IDMyMDE7XG52YXIgVGFuZ2VudFNwYWNlTm9ybWFsTWFwID0gMDtcbnZhciBPYmplY3RTcGFjZU5vcm1hbE1hcCA9IDE7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIF9NYXRoID0ge1xuXG5cdERFRzJSQUQ6IE1hdGguUEkgLyAxODAsXG5cdFJBRDJERUc6IDE4MCAvIE1hdGguUEksXG5cblx0Z2VuZXJhdGVVVUlEOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdC8yMTk2MzEzNiMyMTk2MzEzNlxuXG5cdFx0dmFyIGx1dCA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgMjU2OyBpICsrICkge1xuXG5cdFx0XHRsdXRbIGkgXSA9ICggaSA8IDE2ID8gJzAnIDogJycgKSArICggaSApLnRvU3RyaW5nKCAxNiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcblxuXHRcdFx0dmFyIGQwID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRcdFx0dmFyIGQxID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRcdFx0dmFyIGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRcdFx0dmFyIGQzID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRcdFx0dmFyIHV1aWQgPSBsdXRbIGQwICYgMHhmZiBdICsgbHV0WyBkMCA+PiA4ICYgMHhmZiBdICsgbHV0WyBkMCA+PiAxNiAmIDB4ZmYgXSArIGx1dFsgZDAgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0XHRsdXRbIGQxICYgMHhmZiBdICsgbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgbHV0WyBkMSA+PiAxNiAmIDB4MGYgfCAweDQwIF0gKyBsdXRbIGQxID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdFx0bHV0WyBkMiAmIDB4M2YgfCAweDgwIF0gKyBsdXRbIGQyID4+IDggJiAweGZmIF0gKyAnLScgKyBsdXRbIGQyID4+IDE2ICYgMHhmZiBdICsgbHV0WyBkMiA+PiAyNCAmIDB4ZmYgXSArXG5cdFx0XHRcdGx1dFsgZDMgJiAweGZmIF0gKyBsdXRbIGQzID4+IDggJiAweGZmIF0gKyBsdXRbIGQzID4+IDE2ICYgMHhmZiBdICsgbHV0WyBkMyA+PiAyNCAmIDB4ZmYgXTtcblxuXHRcdFx0Ly8gLnRvVXBwZXJDYXNlKCkgaGVyZSBmbGF0dGVucyBjb25jYXRlbmF0ZWQgc3RyaW5ncyB0byBzYXZlIGhlYXAgbWVtb3J5IHNwYWNlLlxuXHRcdFx0cmV0dXJuIHV1aWQudG9VcHBlckNhc2UoKTtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggdmFsdWUsIG1pbiwgbWF4ICkge1xuXG5cdFx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcblxuXHR9LFxuXG5cdC8vIGNvbXB1dGUgZXVjbGlkaWFuIG1vZHVsbyBvZiBtICUgblxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb2R1bG9fb3BlcmF0aW9uXG5cblx0ZXVjbGlkZWFuTW9kdWxvOiBmdW5jdGlvbiAoIG4sIG0gKSB7XG5cblx0XHRyZXR1cm4gKCAoIG4gJSBtICkgKyBtICkgJSBtO1xuXG5cdH0sXG5cblx0Ly8gTGluZWFyIG1hcHBpbmcgZnJvbSByYW5nZSA8YTEsIGEyPiB0byByYW5nZSA8YjEsIGIyPlxuXG5cdG1hcExpbmVhcjogZnVuY3Rpb24gKCB4LCBhMSwgYTIsIGIxLCBiMiApIHtcblxuXHRcdHJldHVybiBiMSArICggeCAtIGExICkgKiAoIGIyIC0gYjEgKSAvICggYTIgLSBhMSApO1xuXG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cblxuXHRsZXJwOiBmdW5jdGlvbiAoIHgsIHksIHQgKSB7XG5cblx0XHRyZXR1cm4gKCAxIC0gdCApICogeCArIHQgKiB5O1xuXG5cdH0sXG5cblx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwXG5cblx0c21vb3Roc3RlcDogZnVuY3Rpb24gKCB4LCBtaW4sIG1heCApIHtcblxuXHRcdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0XHRpZiAoIHggPj0gbWF4ICkgcmV0dXJuIDE7XG5cblx0XHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdFx0cmV0dXJuIHggKiB4ICogKCAzIC0gMiAqIHggKTtcblxuXHR9LFxuXG5cdHNtb290aGVyc3RlcDogZnVuY3Rpb24gKCB4LCBtaW4sIG1heCApIHtcblxuXHRcdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0XHRpZiAoIHggPj0gbWF4ICkgcmV0dXJuIDE7XG5cblx0XHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdFx0cmV0dXJuIHggKiB4ICogeCAqICggeCAqICggeCAqIDYgLSAxNSApICsgMTAgKTtcblxuXHR9LFxuXG5cdC8vIFJhbmRvbSBpbnRlZ2VyIGZyb20gPGxvdywgaGlnaD4gaW50ZXJ2YWxcblxuXHRyYW5kSW50OiBmdW5jdGlvbiAoIGxvdywgaGlnaCApIHtcblxuXHRcdHJldHVybiBsb3cgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICsgMSApICk7XG5cblx0fSxcblxuXHQvLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuXG5cdHJhbmRGbG9hdDogZnVuY3Rpb24gKCBsb3csIGhpZ2ggKSB7XG5cblx0XHRyZXR1cm4gbG93ICsgTWF0aC5yYW5kb20oKSAqICggaGlnaCAtIGxvdyApO1xuXG5cdH0sXG5cblx0Ly8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbFxuXG5cdHJhbmRGbG9hdFNwcmVhZDogZnVuY3Rpb24gKCByYW5nZSApIHtcblxuXHRcdHJldHVybiByYW5nZSAqICggMC41IC0gTWF0aC5yYW5kb20oKSApO1xuXG5cdH0sXG5cblx0ZGVnVG9SYWQ6IGZ1bmN0aW9uICggZGVncmVlcyApIHtcblxuXHRcdHJldHVybiBkZWdyZWVzICogX01hdGguREVHMlJBRDtcblxuXHR9LFxuXG5cdHJhZFRvRGVnOiBmdW5jdGlvbiAoIHJhZGlhbnMgKSB7XG5cblx0XHRyZXR1cm4gcmFkaWFucyAqIF9NYXRoLlJBRDJERUc7XG5cblx0fSxcblxuXHRpc1Bvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gKCB2YWx1ZSAmICggdmFsdWUgLSAxICkgKSA9PT0gMCAmJiB2YWx1ZSAhPT0gMDtcblxuXHR9LFxuXG5cdGNlaWxQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIE1hdGgucG93KCAyLCBNYXRoLmNlaWwoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG5cdH0sXG5cblx0Zmxvb3JQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIE1hdGgucG93KCAyLCBNYXRoLmZsb29yKCBNYXRoLmxvZyggdmFsdWUgKSAvIE1hdGguTE4yICkgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXG4gKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tL1xuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICovXG5cbmZ1bmN0aW9uIFZlY3RvcjIoIHgsIHkgKSB7XG5cblx0dGhpcy54ID0geCB8fCAwO1xuXHR0aGlzLnkgPSB5IHx8IDA7XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZlY3RvcjIucHJvdG90eXBlLCB7XG5cblx0XCJ3aWR0aFwiOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMueDtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMueCA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0XCJoZWlnaHRcIjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnk7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLnkgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yMi5wcm90b3R5cGUsIHtcblxuXHRpc1ZlY3RvcjI6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsZWRWZWN0b3I6IGZ1bmN0aW9uICggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWI6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4MzogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnk7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF07XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1pbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1heDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcFNjYWxhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1pbiA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dmFyIG1heCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0XHRtaW4uc2V0KCBtaW5WYWwsIG1pblZhbCApO1xuXHRcdFx0bWF4LnNldCggbWF4VmFsLCBtYXhWYWwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2xhbXAoIG1pbiwgbWF4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcblxuXHR9LFxuXG5cdGNyb3NzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi55IC0gdGhpcy55ICogdi54O1xuXG5cdH0sXG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH0sXG5cblx0YW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXG5cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKCB0aGlzLnksIHRoaXMueCApO1xuXG5cdFx0aWYgKCBhbmdsZSA8IDAgKSBhbmdsZSArPSAyICogTWF0aC5QSTtcblxuXHRcdHJldHVybiBhbmdsZTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQ6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdjIsIHYxICkubXVsdGlwbHlTY2FsYXIoIGFscGhhICkuYWRkKCB2MSApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVBcm91bmQ6IGZ1bmN0aW9uICggY2VudGVyLCBhbmdsZSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIGFuZ2xlICksIHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRcdHZhciB4ID0gdGhpcy54IC0gY2VudGVyLng7XG5cdFx0dmFyIHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcblxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBzdXBlcmVnZ2JlcnQgLyBodHRwOi8vd3d3LnBhdWxicnVudC5jby51ay9cbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXG4gKiBAYXV0aG9yIGpvcmRpX3JvcyAvIGh0dHA6Ly9wbGF0dHNvZnQuY29tXG4gKiBAYXV0aG9yIEQxcGxvMWQgLyBodHRwOi8vZ2l0aHViLmNvbS9EMXBsbzFkXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgdGlta25pcCAvIGh0dHA6Ly93d3cuZmxvb3JwbGFubmVyLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIE1hdHJpeDQoKSB7XG5cblx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdDEsIDAsIDAsIDAsXG5cdFx0MCwgMSwgMCwgMCxcblx0XHQwLCAwLCAxLCAwLFxuXHRcdDAsIDAsIDAsIDFcblxuXHRdO1xuXG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDQucHJvdG90eXBlLCB7XG5cblx0aXNNYXRyaXg0OiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG4xMTsgdGVbIDQgXSA9IG4xMjsgdGVbIDggXSA9IG4xMzsgdGVbIDEyIF0gPSBuMTQ7XG5cdFx0dGVbIDEgXSA9IG4yMTsgdGVbIDUgXSA9IG4yMjsgdGVbIDkgXSA9IG4yMzsgdGVbIDEzIF0gPSBuMjQ7XG5cdFx0dGVbIDIgXSA9IG4zMTsgdGVbIDYgXSA9IG4zMjsgdGVbIDEwIF0gPSBuMzM7IHRlWyAxNCBdID0gbjM0O1xuXHRcdHRlWyAzIF0gPSBuNDE7IHRlWyA3IF0gPSBuNDI7IHRlWyAxMSBdID0gbjQzOyB0ZVsgMTUgXSA9IG40NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aWRlbnRpdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdOyB0ZVsgMyBdID0gbWVbIDMgXTtcblx0XHR0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTtcblx0XHR0ZVsgOCBdID0gbWVbIDggXTsgdGVbIDkgXSA9IG1lWyA5IF07IHRlWyAxMCBdID0gbWVbIDEwIF07IHRlWyAxMSBdID0gbWVbIDExIF07XG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTsgdGVbIDEzIF0gPSBtZVsgMTMgXTsgdGVbIDE0IF0gPSBtZVsgMTQgXTsgdGVbIDE1IF0gPSBtZVsgMTUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVBvc2l0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdO1xuXHRcdHRlWyAxMyBdID0gbWVbIDEzIF07XG5cdFx0dGVbIDE0IF0gPSBtZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXh0cmFjdEJhc2lzOiBmdW5jdGlvbiAoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR4QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMSApO1xuXHRcdHpBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZUJhc2lzOiBmdW5jdGlvbiAoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsXG5cdFx0XHR4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLFxuXHRcdFx0eEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHRyYWN0Um90YXRpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZXh0cmFjdFJvdGF0aW9uKCBtICkge1xuXG5cdFx0XHQvLyB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXNcblxuXHRcdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHRcdHZhciBzY2FsZVggPSAxIC8gdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdFx0dmFyIHNjYWxlWSA9IDEgLyB2MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0XHR2YXIgc2NhbGVaID0gMSAvIHYxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdFx0dGVbIDAgXSA9IG1lWyAwIF0gKiBzY2FsZVg7XG5cdFx0XHR0ZVsgMSBdID0gbWVbIDEgXSAqIHNjYWxlWDtcblx0XHRcdHRlWyAyIF0gPSBtZVsgMiBdICogc2NhbGVYO1xuXHRcdFx0dGVbIDMgXSA9IDA7XG5cblx0XHRcdHRlWyA0IF0gPSBtZVsgNCBdICogc2NhbGVZO1xuXHRcdFx0dGVbIDUgXSA9IG1lWyA1IF0gKiBzY2FsZVk7XG5cdFx0XHR0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTtcblx0XHRcdHRlWyA3IF0gPSAwO1xuXG5cdFx0XHR0ZVsgOCBdID0gbWVbIDggXSAqIHNjYWxlWjtcblx0XHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xuXHRcdFx0dGVbIDEwIF0gPSBtZVsgMTAgXSAqIHNjYWxlWjtcblx0XHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdFx0dGVbIDEyIF0gPSAwO1xuXHRcdFx0dGVbIDEzIF0gPSAwO1xuXHRcdFx0dGVbIDE0IF0gPSAwO1xuXHRcdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdG1ha2VSb3RhdGlvbkZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciApIHtcblxuXHRcdGlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlUm90YXRpb25Gcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciB4ID0gZXVsZXIueCwgeSA9IGV1bGVyLnksIHogPSBldWxlci56O1xuXHRcdHZhciBhID0gTWF0aC5jb3MoIHggKSwgYiA9IE1hdGguc2luKCB4ICk7XG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTtcblx0XHR2YXIgZSA9IE1hdGguY29zKCB6ICksIGYgPSBNYXRoLnNpbiggeiApO1xuXG5cdFx0aWYgKCBldWxlci5vcmRlciA9PT0gJ1hZWicgKSB7XG5cblx0XHRcdHZhciBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBjICogZjtcblx0XHRcdHRlWyA4IF0gPSBkO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWYgKyBiZSAqIGQ7XG5cdFx0XHR0ZVsgNSBdID0gYWUgLSBiZiAqIGQ7XG5cdFx0XHR0ZVsgOSBdID0gLSBiICogYztcblxuXHRcdFx0dGVbIDIgXSA9IGJmIC0gYWUgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGJlICsgYWYgKiBkO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVhaJyApIHtcblxuXHRcdFx0dmFyIGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSArIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSBkZSAqIGIgLSBjZjtcblx0XHRcdHRlWyA4IF0gPSBhICogZDtcblxuXHRcdFx0dGVbIDEgXSA9IGEgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYjtcblxuXHRcdFx0dGVbIDIgXSA9IGNmICogYiAtIGRlO1xuXHRcdFx0dGVbIDYgXSA9IGRmICsgY2UgKiBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0dmFyIGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSAtIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSAtIGEgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGRlICsgY2YgKiBiO1xuXG5cdFx0XHR0ZVsgMSBdID0gY2YgKyBkZSAqIGI7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gZGYgLSBjZSAqIGI7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGEgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHR2YXIgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJlICogZCAtIGFmO1xuXHRcdFx0dGVbIDggXSA9IGFlICogZCArIGJmO1xuXG5cdFx0XHR0ZVsgMSBdID0gYyAqIGY7XG5cdFx0XHR0ZVsgNSBdID0gYmYgKiBkICsgYWU7XG5cdFx0XHR0ZVsgOSBdID0gYWYgKiBkIC0gYmU7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYiAqIGM7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWlgnICkge1xuXG5cdFx0XHR2YXIgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJkIC0gYWMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGJjICogZiArIGFkO1xuXG5cdFx0XHR0ZVsgMSBdID0gZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkICogZTtcblx0XHRcdHRlWyA2IF0gPSBhZCAqIGYgKyBiYztcblx0XHRcdHRlWyAxMCBdID0gYWMgLSBiZCAqIGY7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdHZhciBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBmO1xuXHRcdFx0dGVbIDggXSA9IGQgKiBlO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWMgKiBmICsgYmQ7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gYWQgKiBmIC0gYmM7XG5cblx0XHRcdHRlWyAyIF0gPSBiYyAqIGYgLSBhZDtcblx0XHRcdHRlWyA2IF0gPSBiICogZTtcblx0XHRcdHRlWyAxMCBdID0gYmQgKiBmICsgYWM7XG5cblx0XHR9XG5cblx0XHQvLyBib3R0b20gcm93XG5cdFx0dGVbIDMgXSA9IDA7XG5cdFx0dGVbIDcgXSA9IDA7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0Ly8gbGFzdCBjb2x1bW5cblx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAxNCBdID0gMDtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgemVybyA9IG5ldyBWZWN0b3IzKCAwLCAwLCAwICk7XG5cdFx0dmFyIG9uZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNvbXBvc2UoIHplcm8sIHEsIG9uZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgeCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB6ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBsb29rQXQoIGV5ZSwgdGFyZ2V0LCB1cCApIHtcblxuXHRcdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdFx0ei5zdWJWZWN0b3JzKCBleWUsIHRhcmdldCApO1xuXG5cdFx0XHRpZiAoIHoubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBleWUgYW5kIHRhcmdldCBhcmUgaW4gdGhlIHNhbWUgcG9zaXRpb25cblxuXHRcdFx0XHR6LnogPSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdHoubm9ybWFsaXplKCk7XG5cdFx0XHR4LmNyb3NzVmVjdG9ycyggdXAsIHogKTtcblxuXHRcdFx0aWYgKCB4Lmxlbmd0aFNxKCkgPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggdXAueiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0ei54ICs9IDAuMDAwMTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ei56ICs9IDAuMDAwMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ei5ub3JtYWxpemUoKTtcblx0XHRcdFx0eC5jcm9zc1ZlY3RvcnMoIHVwLCB6ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0eC5ub3JtYWxpemUoKTtcblx0XHRcdHkuY3Jvc3NWZWN0b3JzKCB6LCB4ICk7XG5cblx0XHRcdHRlWyAwIF0gPSB4Lng7IHRlWyA0IF0gPSB5Lng7IHRlWyA4IF0gPSB6Lng7XG5cdFx0XHR0ZVsgMSBdID0geC55OyB0ZVsgNSBdID0geS55OyB0ZVsgOSBdID0gei55O1xuXHRcdFx0dGVbIDIgXSA9IHguejsgdGVbIDYgXSA9IHkuejsgdGVbIDEwIF0gPSB6Lno7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggbSwgbiApIHtcblxuXHRcdGlmICggbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseU1hdHJpY2VzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCBuICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fSxcblxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlNYXRyaWNlczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dmFyIGFlID0gYS5lbGVtZW50cztcblx0XHR2YXIgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYTExID0gYWVbIDAgXSwgYTEyID0gYWVbIDQgXSwgYTEzID0gYWVbIDggXSwgYTE0ID0gYWVbIDEyIF07XG5cdFx0dmFyIGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA1IF0sIGEyMyA9IGFlWyA5IF0sIGEyNCA9IGFlWyAxMyBdO1xuXHRcdHZhciBhMzEgPSBhZVsgMiBdLCBhMzIgPSBhZVsgNiBdLCBhMzMgPSBhZVsgMTAgXSwgYTM0ID0gYWVbIDE0IF07XG5cdFx0dmFyIGE0MSA9IGFlWyAzIF0sIGE0MiA9IGFlWyA3IF0sIGE0MyA9IGFlWyAxMSBdLCBhNDQgPSBhZVsgMTUgXTtcblxuXHRcdHZhciBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgNCBdLCBiMTMgPSBiZVsgOCBdLCBiMTQgPSBiZVsgMTIgXTtcblx0XHR2YXIgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDUgXSwgYjIzID0gYmVbIDkgXSwgYjI0ID0gYmVbIDEzIF07XG5cdFx0dmFyIGIzMSA9IGJlWyAyIF0sIGIzMiA9IGJlWyA2IF0sIGIzMyA9IGJlWyAxMCBdLCBiMzQgPSBiZVsgMTQgXTtcblx0XHR2YXIgYjQxID0gYmVbIDMgXSwgYjQyID0gYmVbIDcgXSwgYjQzID0gYmVbIDExIF0sIGI0NCA9IGJlWyAxNSBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcblx0XHR0ZVsgNCBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyICsgYTE0ICogYjQyO1xuXHRcdHRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7XG5cdFx0dGVbIDEyIF0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxICsgYTI0ICogYjQxO1xuXHRcdHRlWyA1IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XG5cdFx0dGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0Mztcblx0XHR0ZVsgMTMgXSA9IGEyMSAqIGIxNCArIGEyMiAqIGIyNCArIGEyMyAqIGIzNCArIGEyNCAqIGI0NDtcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XG5cdFx0dGVbIDYgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0Mjtcblx0XHR0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0Mztcblx0XHR0ZVsgMTQgXSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcblxuXHRcdHRlWyAzIF0gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XG5cdFx0dGVbIDcgXSA9IGE0MSAqIGIxMiArIGE0MiAqIGIyMiArIGE0MyAqIGIzMiArIGE0NCAqIGI0Mjtcblx0XHR0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0Mztcblx0XHR0ZVsgMTUgXSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOSBdICo9IHM7IHRlWyAxMyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNiBdICo9IHM7IHRlWyAxMCBdICo9IHM7IHRlWyAxNCBdICo9IHM7XG5cdFx0dGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHYxLnggPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0XHR2MS55ID0gYXR0cmlidXRlLmdldFkoIGkgKTtcblx0XHRcdFx0djEueiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdFx0djEuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0XHRcdFx0YXR0cmlidXRlLnNldFhZWiggaSwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhdHRyaWJ1dGU7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRkZXRlcm1pbmFudDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBuMTEgPSB0ZVsgMCBdLCBuMTIgPSB0ZVsgNCBdLCBuMTMgPSB0ZVsgOCBdLCBuMTQgPSB0ZVsgMTIgXTtcblx0XHR2YXIgbjIxID0gdGVbIDEgXSwgbjIyID0gdGVbIDUgXSwgbjIzID0gdGVbIDkgXSwgbjI0ID0gdGVbIDEzIF07XG5cdFx0dmFyIG4zMSA9IHRlWyAyIF0sIG4zMiA9IHRlWyA2IF0sIG4zMyA9IHRlWyAxMCBdLCBuMzQgPSB0ZVsgMTQgXTtcblx0XHR2YXIgbjQxID0gdGVbIDMgXSwgbjQyID0gdGVbIDcgXSwgbjQzID0gdGVbIDExIF0sIG40NCA9IHRlWyAxNSBdO1xuXG5cdFx0Ly9UT0RPOiBtYWtlIHRoaXMgbW9yZSBlZmZpY2llbnRcblx0XHQvLyggYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtIClcblxuXHRcdHJldHVybiAoXG5cdFx0XHRuNDEgKiAoXG5cdFx0XHRcdCsgbjE0ICogbjIzICogbjMyXG5cdFx0XHRcdCAtIG4xMyAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTQgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTIgKiBuMjMgKiBuMzRcblx0XHRcdCkgK1xuXHRcdFx0bjQyICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yMyAqIG4zNFxuXHRcdFx0XHQgLSBuMTEgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjE0ICogbjIxICogbjMzXG5cdFx0XHRcdCAtIG4xMyAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTMgKiBuMjQgKiBuMzFcblx0XHRcdFx0IC0gbjE0ICogbjIzICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40MyAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjExICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xNCAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgKyBuMTIgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjE0ICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMiAqIG4yNCAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDQgKiAoXG5cdFx0XHRcdC0gbjEzICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMSAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgKyBuMTEgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIxICogbjMyXG5cdFx0XHRcdCAtIG4xMiAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjMgKiBuMzFcblx0XHRcdClcblxuXHRcdCk7XG5cblx0fSxcblxuXHR0cmFuc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIHRtcDtcblxuXHRcdHRtcCA9IHRlWyAxIF07IHRlWyAxIF0gPSB0ZVsgNCBdOyB0ZVsgNCBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyAyIF07IHRlWyAyIF0gPSB0ZVsgOCBdOyB0ZVsgOCBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA2IF07IHRlWyA2IF0gPSB0ZVsgOSBdOyB0ZVsgOSBdID0gdG1wO1xuXG5cdFx0dG1wID0gdGVbIDMgXTsgdGVbIDMgXSA9IHRlWyAxMiBdOyB0ZVsgMTIgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgNyBdOyB0ZVsgNyBdID0gdGVbIDEzIF07IHRlWyAxMyBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyAxMSBdOyB0ZVsgMTEgXSA9IHRlWyAxNCBdOyB0ZVsgMTQgXSA9IHRtcDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UG9zaXRpb246IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMTIgXSA9IHYueDtcblx0XHR0ZVsgMTMgXSA9IHYueTtcblx0XHR0ZVsgMTQgXSA9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0SW52ZXJzZTogZnVuY3Rpb24gKCBtLCB0aHJvd09uRGVnZW5lcmF0ZSApIHtcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cdFx0XHRtZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IG1lWyAwIF0sIG4yMSA9IG1lWyAxIF0sIG4zMSA9IG1lWyAyIF0sIG40MSA9IG1lWyAzIF0sXG5cdFx0XHRuMTIgPSBtZVsgNCBdLCBuMjIgPSBtZVsgNSBdLCBuMzIgPSBtZVsgNiBdLCBuNDIgPSBtZVsgNyBdLFxuXHRcdFx0bjEzID0gbWVbIDggXSwgbjIzID0gbWVbIDkgXSwgbjMzID0gbWVbIDEwIF0sIG40MyA9IG1lWyAxMSBdLFxuXHRcdFx0bjE0ID0gbWVbIDEyIF0sIG4yNCA9IG1lWyAxMyBdLCBuMzQgPSBtZVsgMTQgXSwgbjQ0ID0gbWVbIDE1IF0sXG5cblx0XHRcdHQxMSA9IG4yMyAqIG4zNCAqIG40MiAtIG4yNCAqIG4zMyAqIG40MiArIG4yNCAqIG4zMiAqIG40MyAtIG4yMiAqIG4zNCAqIG40MyAtIG4yMyAqIG4zMiAqIG40NCArIG4yMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMiA9IG4xNCAqIG4zMyAqIG40MiAtIG4xMyAqIG4zNCAqIG40MiAtIG4xNCAqIG4zMiAqIG40MyArIG4xMiAqIG4zNCAqIG40MyArIG4xMyAqIG4zMiAqIG40NCAtIG4xMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMyA9IG4xMyAqIG4yNCAqIG40MiAtIG4xNCAqIG4yMyAqIG40MiArIG4xNCAqIG4yMiAqIG40MyAtIG4xMiAqIG4yNCAqIG40MyAtIG4xMyAqIG4yMiAqIG40NCArIG4xMiAqIG4yMyAqIG40NCxcblx0XHRcdHQxNCA9IG4xNCAqIG4yMyAqIG4zMiAtIG4xMyAqIG4yNCAqIG4zMiAtIG4xNCAqIG4yMiAqIG4zMyArIG4xMiAqIG4yNCAqIG4zMyArIG4xMyAqIG4yMiAqIG4zNCAtIG4xMiAqIG4yMyAqIG4zNDtcblxuXHRcdHZhciBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHtcblxuXHRcdFx0dmFyIG1zZyA9IFwiVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCI7XG5cblx0XHRcdGlmICggdGhyb3dPbkRlZ2VuZXJhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIG1zZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xuXG5cdFx0dGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejtcblx0XHR0ZVsgMSBdICo9IHg7IHRlWyA1IF0gKj0geTsgdGVbIDkgXSAqPSB6O1xuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xuXHRcdHRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXhTY2FsZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHR2YXIgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07XG5cdFx0dmFyIHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7XG5cblx0fSxcblxuXHRtYWtlVHJhbnNsYXRpb246IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCB4LFxuXHRcdFx0MCwgMSwgMCwgeSxcblx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25YOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uWTogZnVuY3Rpb24gKCB0aGV0YSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQgYywgMCwgcywgMCxcblx0XHRcdCAwLCAxLCAwLCAwLFxuXHRcdFx0LSBzLCAwLCBjLCAwLFxuXHRcdFx0IDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvblo6IGZ1bmN0aW9uICggdGhldGEgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0YywgLSBzLCAwLCAwLFxuXHRcdFx0cywgYywgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25BeGlzOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cdFx0dmFyIHQgPSAxIC0gYztcblx0XHR2YXIgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcblx0XHR2YXIgdHggPSB0ICogeCwgdHkgPSB0ICogeTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXG5cdFx0XHR0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0IHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0eCwgMCwgMCwgMCxcblx0XHRcdDAsIHksIDAsIDAsXG5cdFx0XHQwLCAwLCB6LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNoZWFyOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeSwgeiwgMCxcblx0XHRcdHgsIDEsIHosIDAsXG5cdFx0XHR4LCB5LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcG9zZTogZnVuY3Rpb24gKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xuXHRcdHZhciB4MiA9IHggKyB4LFx0eTIgPSB5ICsgeSwgejIgPSB6ICsgejtcblx0XHR2YXIgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHR2YXIgeXkgPSB5ICogeTIsIHl6ID0geSAqIHoyLCB6eiA9IHogKiB6Mjtcblx0XHR2YXIgd3ggPSB3ICogeDIsIHd5ID0gdyAqIHkyLCB3eiA9IHcgKiB6MjtcblxuXHRcdHZhciBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdCAgICAgICAgdGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0ICAgICAgICB0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0ICAgICAgICB0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0ICAgICAgICB0ZVsgMyBdID0gMDtcblxuXHQgICAgICAgIHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHQgICAgICAgIHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdCAgICAgICAgdGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdCAgICAgICAgdGVbIDcgXSA9IDA7XG5cblx0ICAgICAgICB0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0ICAgICAgICB0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0ICAgICAgICB0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0ICAgICAgICB0ZVsgMTEgXSA9IDA7XG5cblx0ICAgICAgICB0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdCAgICAgICAgdGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHQgICAgICAgIHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0ICAgICAgICB0ZVsgMTUgXSA9IDE7XG5cblx0ICAgICAgICByZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRlY29tcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRcdHZhciBzeCA9IHZlY3Rvci5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzeSA9IHZlY3Rvci5zZXQoIHRlWyA0IF0sIHRlWyA1IF0sIHRlWyA2IF0gKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzeiA9IHZlY3Rvci5zZXQoIHRlWyA4IF0sIHRlWyA5IF0sIHRlWyAxMCBdICkubGVuZ3RoKCk7XG5cblx0XHRcdC8vIGlmIGRldGVybWluZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXG5cdFx0XHR2YXIgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpO1xuXHRcdFx0aWYgKCBkZXQgPCAwICkgc3ggPSAtIHN4O1xuXG5cdFx0XHRwb3NpdGlvbi54ID0gdGVbIDEyIF07XG5cdFx0XHRwb3NpdGlvbi55ID0gdGVbIDEzIF07XG5cdFx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XG5cblx0XHRcdC8vIHNjYWxlIHRoZSByb3RhdGlvbiBwYXJ0XG5cdFx0XHRtYXRyaXguY29weSggdGhpcyApO1xuXG5cdFx0XHR2YXIgaW52U1ggPSAxIC8gc3g7XG5cdFx0XHR2YXIgaW52U1kgPSAxIC8gc3k7XG5cdFx0XHR2YXIgaW52U1ogPSAxIC8gc3o7XG5cblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMCBdICo9IGludlNYO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcblxuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyA0IF0gKj0gaW52U1k7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDUgXSAqPSBpbnZTWTtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNiBdICo9IGludlNZO1xuXG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDggXSAqPSBpbnZTWjtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgOSBdICo9IGludlNaO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxMCBdICo9IGludlNaO1xuXG5cdFx0XHRxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRcdHNjYWxlLnggPSBzeDtcblx0XHRcdHNjYWxlLnkgPSBzeTtcblx0XHRcdHNjYWxlLnogPSBzejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtYWtlUGVyc3BlY3RpdmU6IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHRpZiAoIGZhciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZVBlcnNwZWN0aXZlKCkgaGFzIGJlZW4gcmVkZWZpbmVkIGFuZCBoYXMgYSBuZXcgc2lnbmF0dXJlLiBQbGVhc2UgY2hlY2sgdGhlIGRvY3MuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgeCA9IDIgKiBuZWFyIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgeSA9IDIgKiBuZWFyIC8gKCB0b3AgLSBib3R0b20gKTtcblxuXHRcdHZhciBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0dmFyIGIgPSAoIHRvcCArIGJvdHRvbSApIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHR2YXIgYyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblx0XHR2YXIgZCA9IC0gMiAqIGZhciAqIG5lYXIgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHRlWyAwIF0gPSB4O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gYTtcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSB5O1x0dGVbIDkgXSA9IGI7XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gYztcdHRlWyAxNCBdID0gZDtcblx0XHR0ZVsgMyBdID0gMDtcdHRlWyA3IF0gPSAwO1x0dGVbIDExIF0gPSAtIDE7XHR0ZVsgMTUgXSA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VPcnRob2dyYXBoaWM6IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB3ID0gMS4wIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XG5cdFx0dmFyIHAgPSAxLjAgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHZhciB4ID0gKCByaWdodCArIGxlZnQgKSAqIHc7XG5cdFx0dmFyIHkgPSAoIHRvcCArIGJvdHRvbSApICogaDtcblx0XHR2YXIgeiA9ICggZmFyICsgbmVhciApICogcDtcblxuXHRcdHRlWyAwIF0gPSAyICogdztcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IDA7XHR0ZVsgMTIgXSA9IC0geDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSAyICogaDtcdHRlWyA5IF0gPSAwO1x0dGVbIDEzIF0gPSAtIHk7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gLSAyICogcDtcdHRlWyAxNCBdID0gLSB6O1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IDA7XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgOSBdID0gdGVbIDkgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTAgXSA9IHRlWyAxMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMSBdID0gdGVbIDExIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMyBdID0gdGVbIDEzIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE0IF0gPSB0ZVsgMTQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUXVhdGVybmlvbiggeCwgeSwgeiwgdyApIHtcblxuXHR0aGlzLl94ID0geCB8fCAwO1xuXHR0aGlzLl95ID0geSB8fCAwO1xuXHR0aGlzLl96ID0geiB8fCAwO1xuXHR0aGlzLl93ID0gKCB3ICE9PSB1bmRlZmluZWQgKSA/IHcgOiAxO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFF1YXRlcm5pb24sIHtcblxuXHRzbGVycDogZnVuY3Rpb24gKCBxYSwgcWIsIHFtLCB0ICkge1xuXG5cdFx0cmV0dXJuIHFtLmNvcHkoIHFhICkuc2xlcnAoIHFiLCB0ICk7XG5cblx0fSxcblxuXHRzbGVycEZsYXQ6IGZ1bmN0aW9uICggZHN0LCBkc3RPZmZzZXQsIHNyYzAsIHNyY09mZnNldDAsIHNyYzEsIHNyY09mZnNldDEsIHQgKSB7XG5cblx0XHQvLyBmdXp6LWZyZWUsIGFycmF5LWJhc2VkIFF1YXRlcm5pb24gU0xFUlAgb3BlcmF0aW9uXG5cblx0XHR2YXIgeDAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMCBdLFxuXHRcdFx0eTAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMSBdLFxuXHRcdFx0ejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdLFxuXHRcdFx0dzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdLFxuXG5cdFx0XHR4MSA9IHNyYzFbIHNyY09mZnNldDEgKyAwIF0sXG5cdFx0XHR5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF0sXG5cdFx0XHR6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sXG5cdFx0XHR3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRpZiAoIHcwICE9PSB3MSB8fCB4MCAhPT0geDEgfHwgeTAgIT09IHkxIHx8IHowICE9PSB6MSApIHtcblxuXHRcdFx0dmFyIHMgPSAxIC0gdCxcblxuXHRcdFx0XHRjb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLFxuXG5cdFx0XHRcdGRpciA9ICggY29zID49IDAgPyAxIDogLSAxICksXG5cdFx0XHRcdHNxclNpbiA9IDEgLSBjb3MgKiBjb3M7XG5cblx0XHRcdC8vIFNraXAgdGhlIFNsZXJwIGZvciB0aW55IHN0ZXBzIHRvIGF2b2lkIG51bWVyaWMgcHJvYmxlbXM6XG5cdFx0XHRpZiAoIHNxclNpbiA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZhciBzaW4gPSBNYXRoLnNxcnQoIHNxclNpbiApLFxuXHRcdFx0XHRcdGxlbiA9IE1hdGguYXRhbjIoIHNpbiwgY29zICogZGlyICk7XG5cblx0XHRcdFx0cyA9IE1hdGguc2luKCBzICogbGVuICkgLyBzaW47XG5cdFx0XHRcdHQgPSBNYXRoLnNpbiggdCAqIGxlbiApIC8gc2luO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB0RGlyID0gdCAqIGRpcjtcblxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XG5cdFx0XHR5MCA9IHkwICogcyArIHkxICogdERpcjtcblx0XHRcdHowID0gejAgKiBzICsgejEgKiB0RGlyO1xuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XG5cblx0XHRcdC8vIE5vcm1hbGl6ZSBpbiBjYXNlIHdlIGp1c3QgZGlkIGEgbGVycDpcblx0XHRcdGlmICggcyA9PT0gMSAtIHQgKSB7XG5cblx0XHRcdFx0dmFyIGYgPSAxIC8gTWF0aC5zcXJ0KCB4MCAqIHgwICsgeTAgKiB5MCArIHowICogejAgKyB3MCAqIHcwICk7XG5cblx0XHRcdFx0eDAgKj0gZjtcblx0XHRcdFx0eTAgKj0gZjtcblx0XHRcdFx0ejAgKj0gZjtcblx0XHRcdFx0dzAgKj0gZjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZHN0WyBkc3RPZmZzZXQgXSA9IHgwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUXVhdGVybmlvbi5wcm90b3R5cGUsIHtcblxuXHR4OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR3OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3c7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl93ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggUXVhdGVybmlvbi5wcm90b3R5cGUsIHtcblxuXHRpc1F1YXRlcm5pb246IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl93ID0gdztcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7XG5cblx0XHR0aGlzLl94ID0gcXVhdGVybmlvbi54O1xuXHRcdHRoaXMuX3kgPSBxdWF0ZXJuaW9uLnk7XG5cdFx0dGhpcy5feiA9IHF1YXRlcm5pb24uejtcblx0XHR0aGlzLl93ID0gcXVhdGVybmlvbi53O1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciwgdXBkYXRlICkge1xuXG5cdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5RdWF0ZXJuaW9uOiAuc2V0RnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHR9XG5cblx0XHR2YXIgeCA9IGV1bGVyLl94LCB5ID0gZXVsZXIuX3ksIHogPSBldWxlci5feiwgb3JkZXIgPSBldWxlci5vcmRlcjtcblxuXHRcdC8vIGh0dHA6Ly93d3cubWF0aHdvcmtzLmNvbS9tYXRsYWJjZW50cmFsL2ZpbGVleGNoYW5nZS9cblx0XHQvLyBcdDIwNjk2LWZ1bmN0aW9uLXRvLWNvbnZlcnQtYmV0d2Vlbi1kY20tZXVsZXItYW5nbGVzLXF1YXRlcm5pb25zLWFuZC1ldWxlci12ZWN0b3JzL1xuXHRcdC8vXHRjb250ZW50L1NwaW5DYWxjLm1cblxuXHRcdHZhciBjb3MgPSBNYXRoLmNvcztcblx0XHR2YXIgc2luID0gTWF0aC5zaW47XG5cblx0XHR2YXIgYzEgPSBjb3MoIHggLyAyICk7XG5cdFx0dmFyIGMyID0gY29zKCB5IC8gMiApO1xuXHRcdHZhciBjMyA9IGNvcyggeiAvIDIgKTtcblxuXHRcdHZhciBzMSA9IHNpbiggeCAvIDIgKTtcblx0XHR2YXIgczIgPSBzaW4oIHkgLyAyICk7XG5cdFx0dmFyIHMzID0gc2luKCB6IC8gMiApO1xuXG5cdFx0aWYgKCBvcmRlciA9PT0gJ1hZWicgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1pYWScgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1pZWCcgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZSAhPT0gZmFsc2UgKSB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUF4aXNBbmdsZTogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9hbmdsZVRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXG5cblx0XHR2YXIgaGFsZkFuZ2xlID0gYW5nbGUgLyAyLCBzID0gTWF0aC5zaW4oIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5feCA9IGF4aXMueCAqIHM7XG5cdFx0dGhpcy5feSA9IGF4aXMueSAqIHM7XG5cdFx0dGhpcy5feiA9IGF4aXMueiAqIHM7XG5cdFx0dGhpcy5fdyA9IE1hdGguY29zKCBoYWxmQW5nbGUgKTtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dmFyIHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXSxcblxuXHRcdFx0dHJhY2UgPSBtMTEgKyBtMjIgKyBtMzMsXG5cdFx0XHRzO1xuXG5cdFx0aWYgKCB0cmFjZSA+IDAgKSB7XG5cblx0XHRcdHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7XG5cblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0zMiAtIG0yMyApICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMyAtIG0zMSApICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcblxuXHRcdH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEzICsgbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTIzICsgbTMyICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Vbml0VmVjdG9yczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gYXNzdW1lcyBkaXJlY3Rpb24gdmVjdG9ycyB2RnJvbSBhbmQgdlRvIGFyZSBub3JtYWxpemVkXG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciByO1xuXG5cdFx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldEZyb21Vbml0VmVjdG9ycyggdkZyb20sIHZUbyApIHtcblxuXHRcdFx0aWYgKCB2MSA9PT0gdW5kZWZpbmVkICkgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRyID0gdkZyb20uZG90KCB2VG8gKSArIDE7XG5cblx0XHRcdGlmICggciA8IEVQUyApIHtcblxuXHRcdFx0XHRyID0gMDtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCB2RnJvbS54ICkgPiBNYXRoLmFicyggdkZyb20ueiApICkge1xuXG5cdFx0XHRcdFx0djEuc2V0KCAtIHZGcm9tLnksIHZGcm9tLngsIDAgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0djEuc2V0KCAwLCAtIHZGcm9tLnosIHZGcm9tLnkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0djEuY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5feCA9IHYxLng7XG5cdFx0XHR0aGlzLl95ID0gdjEueTtcblx0XHRcdHRoaXMuX3ogPSB2MS56O1xuXHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YW5nbGVUbzogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0cmV0dXJuIDIgKiBNYXRoLmFjb3MoIE1hdGguYWJzKCBfTWF0aC5jbGFtcCggdGhpcy5kb3QoIHEgKSwgLSAxLCAxICkgKSApO1xuXG5cdH0sXG5cblx0cm90YXRlVG93YXJkczogZnVuY3Rpb24gKCBxLCBzdGVwICkge1xuXG5cdFx0dmFyIGFuZ2xlID0gdGhpcy5hbmdsZVRvKCBxICk7XG5cblx0XHRpZiAoIGFuZ2xlID09PSAwICkgcmV0dXJuIHRoaXM7XG5cblx0XHR2YXIgdCA9IE1hdGgubWluKCAxLCBzdGVwIC8gYW5nbGUgKTtcblxuXHRcdHRoaXMuc2xlcnAoIHEsIHQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aW52ZXJzZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcXVhdGVybmlvbiBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpO1xuXG5cdH0sXG5cblx0Y29uanVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl94ICo9IC0gMTtcblx0XHR0aGlzLl95ICo9IC0gMTtcblx0XHR0aGlzLl96ICo9IC0gMTtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdi5feCArIHRoaXMuX3kgKiB2Ll95ICsgdGhpcy5feiAqIHYuX3ogKyB0aGlzLl93ICogdi5fdztcblxuXHR9LFxuXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3c7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBsID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdGlmICggbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0dGhpcy5fdyA9IDE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsID0gMSAvIGw7XG5cblx0XHRcdHRoaXMuX3ggPSB0aGlzLl94ICogbDtcblx0XHRcdHRoaXMuX3kgPSB0aGlzLl95ICogbDtcblx0XHRcdHRoaXMuX3ogPSB0aGlzLl96ICogbDtcblx0XHRcdHRoaXMuX3cgPSB0aGlzLl93ICogbDtcblxuXHRcdH1cblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBxLCBwICkge1xuXG5cdFx0aWYgKCBwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlF1YXRlcm5pb246IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5UXVhdGVybmlvbnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHEsIHAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHRoaXMsIHEgKTtcblxuXHR9LFxuXG5cdHByZW11bHRpcGx5OiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCBxLCB0aGlzICk7XG5cblx0fSxcblxuXHRtdWx0aXBseVF1YXRlcm5pb25zOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvY29kZS9pbmRleC5odG1cblxuXHRcdHZhciBxYXggPSBhLl94LCBxYXkgPSBhLl95LCBxYXogPSBhLl96LCBxYXcgPSBhLl93O1xuXHRcdHZhciBxYnggPSBiLl94LCBxYnkgPSBiLl95LCBxYnogPSBiLl96LCBxYncgPSBiLl93O1xuXG5cdFx0dGhpcy5feCA9IHFheCAqIHFidyArIHFhdyAqIHFieCArIHFheSAqIHFieiAtIHFheiAqIHFieTtcblx0XHR0aGlzLl95ID0gcWF5ICogcWJ3ICsgcWF3ICogcWJ5ICsgcWF6ICogcWJ4IC0gcWF4ICogcWJ6O1xuXHRcdHRoaXMuX3ogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XG5cdFx0dGhpcy5fdyA9IHFhdyAqIHFidyAtIHFheCAqIHFieCAtIHFheSAqIHFieSAtIHFheiAqIHFiejtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzbGVycDogZnVuY3Rpb24gKCBxYiwgdCApIHtcblxuXHRcdGlmICggdCA9PT0gMCApIHJldHVybiB0aGlzO1xuXHRcdGlmICggdCA9PT0gMSApIHJldHVybiB0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR2YXIgeCA9IHRoaXMuX3gsIHkgPSB0aGlzLl95LCB6ID0gdGhpcy5feiwgdyA9IHRoaXMuX3c7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL3NsZXJwL1xuXG5cdFx0dmFyIGNvc0hhbGZUaGV0YSA9IHcgKiBxYi5fdyArIHggKiBxYi5feCArIHkgKiBxYi5feSArIHogKiBxYi5fejtcblxuXHRcdGlmICggY29zSGFsZlRoZXRhIDwgMCApIHtcblxuXHRcdFx0dGhpcy5fdyA9IC0gcWIuX3c7XG5cdFx0XHR0aGlzLl94ID0gLSBxYi5feDtcblx0XHRcdHRoaXMuX3kgPSAtIHFiLl95O1xuXHRcdFx0dGhpcy5feiA9IC0gcWIuX3o7XG5cblx0XHRcdGNvc0hhbGZUaGV0YSA9IC0gY29zSGFsZlRoZXRhO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb3B5KCBxYiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPj0gMS4wICkge1xuXG5cdFx0XHR0aGlzLl93ID0gdztcblx0XHRcdHRoaXMuX3ggPSB4O1xuXHRcdFx0dGhpcy5feSA9IHk7XG5cdFx0XHR0aGlzLl96ID0gejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgc3FyU2luSGFsZlRoZXRhID0gMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhO1xuXG5cdFx0aWYgKCBzcXJTaW5IYWxmVGhldGEgPD0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdHZhciBzID0gMSAtIHQ7XG5cdFx0XHR0aGlzLl93ID0gcyAqIHcgKyB0ICogdGhpcy5fdztcblx0XHRcdHRoaXMuX3ggPSBzICogeCArIHQgKiB0aGlzLl94O1xuXHRcdFx0dGhpcy5feSA9IHMgKiB5ICsgdCAqIHRoaXMuX3k7XG5cdFx0XHR0aGlzLl96ID0gcyAqIHogKyB0ICogdGhpcy5fejtcblxuXHRcdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0XHR9XG5cblx0XHR2YXIgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KCBzcXJTaW5IYWxmVGhldGEgKTtcblx0XHR2YXIgaGFsZlRoZXRhID0gTWF0aC5hdGFuMiggc2luSGFsZlRoZXRhLCBjb3NIYWxmVGhldGEgKTtcblx0XHR2YXIgcmF0aW9BID0gTWF0aC5zaW4oICggMSAtIHQgKSAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhLFxuXHRcdFx0cmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuXHRcdHRoaXMuX3cgPSAoIHcgKiByYXRpb0EgKyB0aGlzLl93ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feCA9ICggeCAqIHJhdGlvQSArIHRoaXMuX3ggKiByYXRpb0IgKTtcblx0XHR0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ogPSAoIHogKiByYXRpb0EgKyB0aGlzLl96ICogcmF0aW9CICk7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7XG5cblx0XHRyZXR1cm4gKCBxdWF0ZXJuaW9uLl94ID09PSB0aGlzLl94ICkgJiYgKCBxdWF0ZXJuaW9uLl95ID09PSB0aGlzLl95ICkgJiYgKCBxdWF0ZXJuaW9uLl96ID09PSB0aGlzLl96ICkgJiYgKCBxdWF0ZXJuaW9uLl93ID09PSB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLl93ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5feDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy5fdztcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdG9uQ2hhbmdlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG9uQ2hhbmdlQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHt9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBraWxlIC8gaHR0cDovL2tpbGUuc3RyYXZhZ2FuemEub3JnL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yMyggeCwgeSwgeiApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblx0dGhpcy56ID0geiB8fCAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjMucHJvdG90eXBlLCB7XG5cblx0aXNWZWN0b3IzOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WDogZnVuY3Rpb24gKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WTogZnVuY3Rpb24gKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WjogZnVuY3Rpb24gKCB6ICkge1xuXG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0Y2FzZSAyOiByZXR1cm4gdGhpcy56O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnogKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cdFx0dGhpcy56ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsZWRWZWN0b3I6IGZ1bmN0aW9uICggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXHRcdHRoaXMueiArPSB2LnogKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWI6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXHRcdHRoaXMueiAtPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5VmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cdFx0dGhpcy56ICo9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5VmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICogYi54O1xuXHRcdHRoaXMueSA9IGEueSAqIGIueTtcblx0XHR0aGlzLnogPSBhLnogKiBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5RXVsZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseUV1bGVyKCBldWxlciApIHtcblxuXHRcdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuYXBwbHlFdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFwcGx5QXhpc0FuZ2xlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlBeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXSAqIHo7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF0gKiB6O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOCBdICogejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR2YXIgdyA9IDEgLyAoIGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICk7XG5cblx0XHR0aGlzLnggPSAoIGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0gKSAqIHc7XG5cdFx0dGhpcy55ID0gKCBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICkgKiB3O1xuXHRcdHRoaXMueiA9ICggZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKSAqIHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0dmFyIHF4ID0gcS54LCBxeSA9IHEueSwgcXogPSBxLnosIHF3ID0gcS53O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcblxuXHRcdHZhciBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcblx0XHR2YXIgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG5cdFx0dmFyIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuXHRcdHZhciBpdyA9IC0gcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuXG5cdFx0dGhpcy54ID0gaXggKiBxdyArIGl3ICogLSBxeCArIGl5ICogLSBxeiAtIGl6ICogLSBxeTtcblx0XHR0aGlzLnkgPSBpeSAqIHF3ICsgaXcgKiAtIHF5ICsgaXogKiAtIHF4IC0gaXggKiAtIHF6O1xuXHRcdHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC0gcXogKyBpeCAqIC0gcXkgLSBpeSAqIC0gcXg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHByb2plY3Q6IGZ1bmN0aW9uICggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdH0sXG5cblx0dW5wcm9qZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1bnByb2plY3QoIGNhbWVyYSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBtYXRyaXguZ2V0SW52ZXJzZSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKSApLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGlucHV0OiBUSFJFRS5NYXRyaXg0IGFmZmluZSBtYXRyaXhcblx0XHQvLyB2ZWN0b3IgaW50ZXJwcmV0ZWQgYXMgYSBkaXJlY3Rpb25cblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogejtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuXG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cdFx0dGhpcy56IC89IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlU2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fSxcblxuXHRtaW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYXg6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluLnosIE1hdGgubWluKCBtYXgueiwgdGhpcy56ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXBTY2FsYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtaW4gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtYXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdFx0bWluLnNldCggbWluVmFsLCBtaW5WYWwsIG1pblZhbCApO1xuXHRcdFx0bWF4LnNldCggbWF4VmFsLCBtYXhWYWwsIG1heFZhbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jbGFtcCggbWluLCBtYXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9LFxuXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VpbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmRUb1plcm86IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9ICggdGhpcy56IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnogKSA6IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XG5cblx0fSxcblxuXHQvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/XG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH0sXG5cblx0c2V0TGVuZ3RoOiBmdW5jdGlvbiAoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9LFxuXG5cdGxlcnA6IGZ1bmN0aW9uICggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTtcblxuXHR9LFxuXG5cdGNyb3NzOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmNyb3NzKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuY3Jvc3NWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdGhpcywgdiApO1xuXG5cdH0sXG5cblx0Y3Jvc3NWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR2YXIgYXggPSBhLngsIGF5ID0gYS55LCBheiA9IGEuejtcblx0XHR2YXIgYnggPSBiLngsIGJ5ID0gYi55LCBieiA9IGIuejtcblxuXHRcdHRoaXMueCA9IGF5ICogYnogLSBheiAqIGJ5O1xuXHRcdHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6O1xuXHRcdHRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRwcm9qZWN0T25WZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dmFyIHNjYWxhciA9IHZlY3Rvci5kb3QoIHRoaXMgKSAvIHZlY3Rvci5sZW5ndGhTcSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdmVjdG9yICkubXVsdGlwbHlTY2FsYXIoIHNjYWxhciApO1xuXG5cdH0sXG5cblx0cHJvamVjdE9uUGxhbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcHJvamVjdE9uUGxhbmUoIHBsYW5lTm9ybWFsICkge1xuXG5cdFx0XHR2MS5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zdWIoIHYxICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyZWZsZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByZWZsZWN0IGluY2lkZW50IHZlY3RvciBvZmYgcGxhbmUgb3J0aG9nb25hbCB0byBub3JtYWxcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJlZmxlY3QoIG5vcm1hbCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc3ViKCB2MS5jb3B5KCBub3JtYWwgKS5tdWx0aXBseVNjYWxhciggMiAqIHRoaXMuZG90KCBub3JtYWwgKSApICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhbmdsZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gKCBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApICk7XG5cblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xuXG5cdFx0cmV0dXJuIE1hdGguYWNvcyggX01hdGguY2xhbXAoIHRoZXRhLCAtIDEsIDEgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVRvU3F1YXJlZCggdiApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvU3F1YXJlZDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dmFyIGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueSwgZHogPSB0aGlzLnogLSB2Lno7XG5cblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9LFxuXG5cdHNldEZyb21TcGhlcmljYWw6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21TcGhlcmljYWxDb29yZHMoIHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbVNwaGVyaWNhbENvb3JkczogZnVuY3Rpb24gKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHR2YXIgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4oIHBoaSApICogcmFkaXVzO1xuXG5cdFx0dGhpcy54ID0gc2luUGhpUmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzO1xuXHRcdHRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ3lsaW5kcmljYWw6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggYy5yYWRpdXMsIGMudGhldGEsIGMueSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzOiBmdW5jdGlvbiAoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnggPSByYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4U2NhbGU6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdHZhciBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdHZhciBzeiA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGhpcy54ID0gc3g7XG5cdFx0dGhpcy55ID0gc3k7XG5cdFx0dGhpcy56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW46IGZ1bmN0aW9uICggbSwgaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogNCApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gTWF0cml4MygpIHtcblxuXHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0MSwgMCwgMCxcblx0XHQwLCAxLCAwLFxuXHRcdDAsIDAsIDFcblxuXHRdO1xuXG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDMucHJvdG90eXBlLCB7XG5cblx0aXNNYXRyaXgzOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyAxIF0gPSBuMjE7IHRlWyAyIF0gPSBuMzE7XG5cdFx0dGVbIDMgXSA9IG4xMjsgdGVbIDQgXSA9IG4yMjsgdGVbIDUgXSA9IG4zMjtcblx0XHR0ZVsgNiBdID0gbjEzOyB0ZVsgNyBdID0gbjIzOyB0ZVsgOCBdID0gbjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpZGVudGl0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTtcblx0XHR0ZVsgMyBdID0gbWVbIDMgXTsgdGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdO1xuXHRcdHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsgdGVbIDggXSA9IG1lWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyA0IF0sIG1lWyA4IF0sXG5cdFx0XHRtZVsgMSBdLCBtZVsgNSBdLCBtZVsgOSBdLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDYgXSwgbWVbIDEwIF1cblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHYxLnggPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0XHR2MS55ID0gYXR0cmlidXRlLmdldFkoIGkgKTtcblx0XHRcdFx0djEueiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdFx0djEuYXBwbHlNYXRyaXgzKCB0aGlzICk7XG5cblx0XHRcdFx0YXR0cmlidXRlLnNldFhZWiggaSwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhdHRyaWJ1dGU7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xuXG5cdH0sXG5cblx0cHJlbXVsdGlwbHk6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcblxuXHR9LFxuXG5cdG11bHRpcGx5TWF0cmljZXM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHZhciBhZSA9IGEuZWxlbWVudHM7XG5cdFx0dmFyIGJlID0gYi5lbGVtZW50cztcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyAzIF0sIGExMyA9IGFlWyA2IF07XG5cdFx0dmFyIGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA0IF0sIGEyMyA9IGFlWyA3IF07XG5cdFx0dmFyIGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA1IF0sIGEzMyA9IGFlWyA4IF07XG5cblx0XHR2YXIgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDMgXSwgYjEzID0gYmVbIDYgXTtcblx0XHR2YXIgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTtcblx0XHR2YXIgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDUgXSwgYjMzID0gYmVbIDggXTtcblxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzE7XG5cdFx0dGVbIDMgXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMjtcblx0XHR0ZVsgNiBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzO1xuXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTtcblx0XHR0ZVsgNCBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xuXHRcdHRlWyA3IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XG5cblx0XHR0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxO1xuXHRcdHRlWyA1IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XG5cdFx0dGVbIDggXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyAzIF0gKj0gczsgdGVbIDYgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgNyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA4IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYSA9IHRlWyAwIF0sIGIgPSB0ZVsgMSBdLCBjID0gdGVbIDIgXSxcblx0XHRcdGQgPSB0ZVsgMyBdLCBlID0gdGVbIDQgXSwgZiA9IHRlWyA1IF0sXG5cdFx0XHRnID0gdGVbIDYgXSwgaCA9IHRlWyA3IF0sIGkgPSB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIGEgKiBlICogaSAtIGEgKiBmICogaCAtIGIgKiBkICogaSArIGIgKiBmICogZyArIGMgKiBkICogaCAtIGMgKiBlICogZztcblxuXHR9LFxuXG5cdGdldEludmVyc2U6IGZ1bmN0aW9uICggbWF0cml4LCB0aHJvd09uRGVnZW5lcmF0ZSApIHtcblxuXHRcdGlmICggbWF0cml4ICYmIG1hdHJpeC5pc01hdHJpeDQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuTWF0cml4MzogLmdldEludmVyc2UoKSBubyBsb25nZXIgdGFrZXMgYSBNYXRyaXg0IGFyZ3VtZW50LlwiICk7XG5cblx0XHR9XG5cblx0XHR2YXIgbWUgPSBtYXRyaXguZWxlbWVudHMsXG5cdFx0XHR0ZSA9IHRoaXMuZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IG1lWyAwIF0sIG4yMSA9IG1lWyAxIF0sIG4zMSA9IG1lWyAyIF0sXG5cdFx0XHRuMTIgPSBtZVsgMyBdLCBuMjIgPSBtZVsgNCBdLCBuMzIgPSBtZVsgNSBdLFxuXHRcdFx0bjEzID0gbWVbIDYgXSwgbjIzID0gbWVbIDcgXSwgbjMzID0gbWVbIDggXSxcblxuXHRcdFx0dDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuXHRcdFx0dDEyID0gbjMyICogbjEzIC0gbjMzICogbjEyLFxuXHRcdFx0dDEzID0gbjIzICogbjEyIC0gbjIyICogbjEzLFxuXG5cdFx0XHRkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHtcblxuXHRcdFx0dmFyIG1zZyA9IFwiVEhSRUUuTWF0cml4MzogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCI7XG5cblx0XHRcdGlmICggdGhyb3dPbkRlZ2VuZXJhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIG1zZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjMxICogbjIzIC0gbjMzICogbjIxICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMyBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xuXG5cdFx0dGVbIDYgXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcblx0XHR0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdG1wLCBtID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRtcCA9IG1bIDEgXTsgbVsgMSBdID0gbVsgMyBdOyBtWyAzIF0gPSB0bXA7XG5cdFx0dG1wID0gbVsgMiBdOyBtWyAyIF0gPSBtWyA2IF07IG1bIDYgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyA1IF07IG1bIDUgXSA9IG1bIDcgXTsgbVsgNyBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXROb3JtYWxNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4NCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXg0KCBtYXRyaXg0ICkuZ2V0SW52ZXJzZSggdGhpcyApLnRyYW5zcG9zZSgpO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlSW50b0FycmF5OiBmdW5jdGlvbiAoIHIgKSB7XG5cblx0XHR2YXIgbSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRyWyAwIF0gPSBtWyAwIF07XG5cdFx0clsgMSBdID0gbVsgMyBdO1xuXHRcdHJbIDIgXSA9IG1bIDYgXTtcblx0XHRyWyAzIF0gPSBtWyAxIF07XG5cdFx0clsgNCBdID0gbVsgNCBdO1xuXHRcdHJbIDUgXSA9IG1bIDcgXTtcblx0XHRyWyA2IF0gPSBtWyAyIF07XG5cdFx0clsgNyBdID0gbVsgNSBdO1xuXHRcdHJbIDggXSA9IG1bIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VXZUcmFuc2Zvcm06IGZ1bmN0aW9uICggdHgsIHR5LCBzeCwgc3ksIHJvdGF0aW9uLCBjeCwgY3kgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIHJvdGF0aW9uICk7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHN4ICogYywgc3ggKiBzLCAtIHN4ICogKCBjICogY3ggKyBzICogY3kgKSArIGN4ICsgdHgsXG5cdFx0XHQtIHN5ICogcywgc3kgKiBjLCAtIHN5ICogKCAtIHMgKiBjeCArIGMgKiBjeSApICsgY3kgKyB0eSxcblx0XHRcdDAsIDAsIDFcblx0XHQpO1xuXG5cdH0sXG5cblx0c2NhbGU6IGZ1bmN0aW9uICggc3gsIHN5ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gc3g7IHRlWyAzIF0gKj0gc3g7IHRlWyA2IF0gKj0gc3g7XG5cdFx0dGVbIDEgXSAqPSBzeTsgdGVbIDQgXSAqPSBzeTsgdGVbIDcgXSAqPSBzeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKTtcblx0XHR2YXIgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhMTEgPSB0ZVsgMCBdLCBhMTIgPSB0ZVsgMyBdLCBhMTMgPSB0ZVsgNiBdO1xuXHRcdHZhciBhMjEgPSB0ZVsgMSBdLCBhMjIgPSB0ZVsgNCBdLCBhMjMgPSB0ZVsgNyBdO1xuXG5cdFx0dGVbIDAgXSA9IGMgKiBhMTEgKyBzICogYTIxO1xuXHRcdHRlWyAzIF0gPSBjICogYTEyICsgcyAqIGEyMjtcblx0XHR0ZVsgNiBdID0gYyAqIGExMyArIHMgKiBhMjM7XG5cblx0XHR0ZVsgMSBdID0gLSBzICogYTExICsgYyAqIGEyMTtcblx0XHR0ZVsgNCBdID0gLSBzICogYTEyICsgYyAqIGEyMjtcblx0XHR0ZVsgNyBdID0gLSBzICogYTEzICsgYyAqIGEyMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIHR4LCB0eSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICs9IHR4ICogdGVbIDIgXTsgdGVbIDMgXSArPSB0eCAqIHRlWyA1IF07IHRlWyA2IF0gKz0gdHggKiB0ZVsgOCBdO1xuXHRcdHRlWyAxIF0gKz0gdHkgKiB0ZVsgMiBdOyB0ZVsgNCBdICs9IHR5ICogdGVbIDUgXTsgdGVbIDcgXSArPSB0eSAqIHRlWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZWxlbWVudHNbIGkgXSA9IGFycmF5WyBpICsgb2Zmc2V0IF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXG4gKi9cblxudmFyIEltYWdlVXRpbHMgPSB7XG5cblx0Z2V0RGF0YVVSTDogZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdHZhciBjYW52YXM7XG5cblx0XHRpZiAoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCA9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH0gZWxzZSBpZiAoIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB7XG5cblx0XHRcdGNhbnZhcyA9IGltYWdlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnICk7XG5cdFx0XHRjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblxuXHRcdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEltYWdlRGF0YSApIHtcblxuXHRcdFx0XHRjb250ZXh0LnB1dEltYWdlRGF0YSggaW1hZ2UsIDAsIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBjYW52YXMud2lkdGggPiAyMDQ4IHx8IGNhbnZhcy5oZWlnaHQgPiAyMDQ4ICkge1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTCggJ2ltYWdlL2pwZWcnLCAwLjYgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvcG5nJyApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqL1xuXG52YXIgdGV4dHVyZUlkID0gMDtcblxuZnVuY3Rpb24gVGV4dHVyZSggaW1hZ2UsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiB0ZXh0dXJlSWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXG5cdHRoaXMuaW1hZ2UgPSBpbWFnZSAhPT0gdW5kZWZpbmVkID8gaW1hZ2UgOiBUZXh0dXJlLkRFRkFVTFRfSU1BR0U7XG5cdHRoaXMubWlwbWFwcyA9IFtdO1xuXG5cdHRoaXMubWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBUZXh0dXJlLkRFRkFVTFRfTUFQUElORztcblxuXHR0aGlzLndyYXBTID0gd3JhcFMgIT09IHVuZGVmaW5lZCA/IHdyYXBTIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblx0dGhpcy53cmFwVCA9IHdyYXBUICE9PSB1bmRlZmluZWQgPyB3cmFwVCA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cblx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IExpbmVhck1pcE1hcExpbmVhckZpbHRlcjtcblxuXHR0aGlzLmFuaXNvdHJvcHkgPSBhbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgPyBhbmlzb3Ryb3B5IDogMTtcblxuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogUkdCQUZvcm1hdDtcblx0dGhpcy50eXBlID0gdHlwZSAhPT0gdW5kZWZpbmVkID8gdHlwZSA6IFVuc2lnbmVkQnl0ZVR5cGU7XG5cblx0dGhpcy5vZmZzZXQgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xuXHR0aGlzLnJlcGVhdCA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblx0dGhpcy5yb3RhdGlvbiA9IDA7XG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4MygpO1xuXG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZTtcblx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7XG5cdHRoaXMuZmxpcFkgPSB0cnVlO1xuXHR0aGlzLnVucGFja0FsaWdubWVudCA9IDQ7XHQvLyB2YWxpZCB2YWx1ZXM6IDEsIDIsIDQsIDggKHNlZSBodHRwOi8vd3d3Lmtocm9ub3Mub3JnL29wZW5nbGVzL3Nkay9kb2NzL21hbi94aHRtbC9nbFBpeGVsU3RvcmVpLnhtbClcblxuXHQvLyBWYWx1ZXMgb2YgZW5jb2RpbmcgIT09IFRIUkVFLkxpbmVhckVuY29kaW5nIG9ubHkgc3VwcG9ydGVkIG9uIG1hcCwgZW52TWFwIGFuZCBlbWlzc2l2ZU1hcC5cblx0Ly9cblx0Ly8gQWxzbyBjaGFuZ2luZyB0aGUgZW5jb2RpbmcgYWZ0ZXIgYWxyZWFkeSB1c2VkIGJ5IGEgTWF0ZXJpYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBtYWtlIHRoZSBNYXRlcmlhbFxuXHQvLyB1cGRhdGUuICBZb3UgbmVlZCB0byBleHBsaWNpdGx5IGNhbGwgTWF0ZXJpYWwubmVlZHNVcGRhdGUgdG8gdHJpZ2dlciBpdCB0byByZWNvbXBpbGUuXG5cdHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZyAhPT0gdW5kZWZpbmVkID8gZW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZztcblxuXHR0aGlzLnZlcnNpb24gPSAwO1xuXHR0aGlzLm9uVXBkYXRlID0gbnVsbDtcblxufVxuXG5UZXh0dXJlLkRFRkFVTFRfSU1BR0UgPSB1bmRlZmluZWQ7XG5UZXh0dXJlLkRFRkFVTFRfTUFQUElORyA9IFVWTWFwcGluZztcblxuVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogVGV4dHVyZSxcblxuXHRpc1RleHR1cmU6IHRydWUsXG5cblx0dXBkYXRlTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSggdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSwgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSwgdGhpcy5yb3RhdGlvbiwgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLmltYWdlID0gc291cmNlLmltYWdlO1xuXHRcdHRoaXMubWlwbWFwcyA9IHNvdXJjZS5taXBtYXBzLnNsaWNlKCAwICk7XG5cblx0XHR0aGlzLm1hcHBpbmcgPSBzb3VyY2UubWFwcGluZztcblxuXHRcdHRoaXMud3JhcFMgPSBzb3VyY2Uud3JhcFM7XG5cdFx0dGhpcy53cmFwVCA9IHNvdXJjZS53cmFwVDtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gc291cmNlLm1hZ0ZpbHRlcjtcblx0XHR0aGlzLm1pbkZpbHRlciA9IHNvdXJjZS5taW5GaWx0ZXI7XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBzb3VyY2UuYW5pc290cm9weTtcblxuXHRcdHRoaXMuZm9ybWF0ID0gc291cmNlLmZvcm1hdDtcblx0XHR0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTtcblxuXHRcdHRoaXMub2Zmc2V0LmNvcHkoIHNvdXJjZS5vZmZzZXQgKTtcblx0XHR0aGlzLnJlcGVhdC5jb3B5KCBzb3VyY2UucmVwZWF0ICk7XG5cdFx0dGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xuXHRcdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeC5jb3B5KCBzb3VyY2UubWF0cml4ICk7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHNvdXJjZS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gc291cmNlLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0dGhpcy5mbGlwWSA9IHNvdXJjZS5mbGlwWTtcblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IHNvdXJjZS51bnBhY2tBbGlnbm1lbnQ7XG5cdFx0dGhpcy5lbmNvZGluZyA9IHNvdXJjZS5lbmNvZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTtcblxuXHRcdH1cblxuXHRcdHZhciBvdXRwdXQgPSB7XG5cblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ1RleHR1cmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdUZXh0dXJlLnRvSlNPTidcblx0XHRcdH0sXG5cblx0XHRcdHV1aWQ6IHRoaXMudXVpZCxcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblxuXHRcdFx0bWFwcGluZzogdGhpcy5tYXBwaW5nLFxuXG5cdFx0XHRyZXBlYXQ6IFsgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSBdLFxuXHRcdFx0b2Zmc2V0OiBbIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnkgXSxcblx0XHRcdGNlbnRlcjogWyB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55IF0sXG5cdFx0XHRyb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcblxuXHRcdFx0d3JhcDogWyB0aGlzLndyYXBTLCB0aGlzLndyYXBUIF0sXG5cblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXG5cdFx0XHRtaW5GaWx0ZXI6IHRoaXMubWluRmlsdGVyLFxuXHRcdFx0bWFnRmlsdGVyOiB0aGlzLm1hZ0ZpbHRlcixcblx0XHRcdGFuaXNvdHJvcHk6IHRoaXMuYW5pc290cm9weSxcblxuXHRcdFx0ZmxpcFk6IHRoaXMuZmxpcFlcblxuXHRcdH07XG5cblx0XHRpZiAoIHRoaXMuaW1hZ2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gVE9ETzogTW92ZSB0byBUSFJFRS5JbWFnZVxuXG5cdFx0XHR2YXIgaW1hZ2UgPSB0aGlzLmltYWdlO1xuXG5cdFx0XHRpZiAoIGltYWdlLnV1aWQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpbWFnZS51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7IC8vIFVHSFxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggISBpc1Jvb3RPYmplY3QgJiYgbWV0YS5pbWFnZXNbIGltYWdlLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZhciB1cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gcHJvY2VzcyBhcnJheSBvZiBpbWFnZXMgZS5nLiBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0dXJsID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbWFnZS5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggSW1hZ2VVdGlscy5nZXREYXRhVVJMKCBpbWFnZVsgaSBdICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gcHJvY2VzcyBzaW5nbGUgaW1hZ2VcblxuXHRcdFx0XHRcdHVybCA9IEltYWdlVXRpbHMuZ2V0RGF0YVVSTCggaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWV0YS5pbWFnZXNbIGltYWdlLnV1aWQgXSA9IHtcblx0XHRcdFx0XHR1dWlkOiBpbWFnZS51dWlkLFxuXHRcdFx0XHRcdHVybDogdXJsXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0cHV0LmltYWdlID0gaW1hZ2UudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdID0gb3V0cHV0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH0sXG5cblx0dHJhbnNmb3JtVXY6IGZ1bmN0aW9uICggdXYgKSB7XG5cblx0XHRpZiAoIHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nICkgcmV0dXJuIHV2O1xuXG5cdFx0dXYuYXBwbHlNYXRyaXgzKCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0aWYgKCB1di54IDwgMCB8fCB1di54ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwUyApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueCApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gTWF0aC5jZWlsKCB1di54ICkgLSB1di54O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdXYueSA8IDAgfHwgdXYueSA+IDEgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMud3JhcFQgKSB7XG5cblx0XHRcdFx0Y2FzZSBSZXBlYXRXcmFwcGluZzpcblxuXHRcdFx0XHRcdHV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgQ2xhbXBUb0VkZ2VXcmFwcGluZzpcblxuXHRcdFx0XHRcdHV2LnkgPSB1di55IDwgMCA/IDAgOiAxO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgTWlycm9yZWRSZXBlYXRXcmFwcGluZzpcblxuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIE1hdGguZmxvb3IoIHV2LnkgKSAlIDIgKSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0dXYueSA9IE1hdGguY2VpbCggdXYueSApIC0gdXYueTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmxpcFkgKSB7XG5cblx0XHRcdHV2LnkgPSAxIC0gdXYueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1djtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBUZXh0dXJlLnByb3RvdHlwZSwgXCJuZWVkc1VwZGF0ZVwiLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHN1cGVyZWdnYmVydCAvIGh0dHA6Ly93d3cucGF1bGJydW50LmNvLnVrL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yNCggeCwgeSwgeiwgdyApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblx0dGhpcy56ID0geiB8fCAwO1xuXHR0aGlzLncgPSAoIHcgIT09IHVuZGVmaW5lZCApID8gdyA6IDE7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yNC5wcm90b3R5cGUsIHtcblxuXHRpc1ZlY3RvcjQ6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cdFx0dGhpcy53ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRXOiBmdW5jdGlvbiAoIHcgKSB7XG5cblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMzogdGhpcy53ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGNhc2UgMzogcmV0dXJuIHRoaXMudztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXHRcdHRoaXMudyA9ICggdi53ICE9PSB1bmRlZmluZWQgKSA/IHYudyA6IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblx0XHR0aGlzLncgKz0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXHRcdHRoaXMudyArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblx0XHR0aGlzLncgPSBhLncgKyBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cdFx0dGhpcy53ICs9IHYudyAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblx0XHR0aGlzLncgLT0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXHRcdHRoaXMudyAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblx0XHR0aGlzLncgPSBhLncgLSBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXHRcdHRoaXMudyAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLnosIHcgPSB0aGlzLnc7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSAqIHc7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSAqIHc7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKiB3O1xuXHRcdHRoaXMudyA9IGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlU2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fSxcblxuXHRzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bVxuXG5cdFx0Ly8gcSBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMudyA9IDIgKiBNYXRoLmFjb3MoIHEudyApO1xuXG5cdFx0dmFyIHMgPSBNYXRoLnNxcnQoIDEgLSBxLncgKiBxLncgKTtcblxuXHRcdGlmICggcyA8IDAuMDAwMSApIHtcblxuXHRcdFx0dGhpcy54ID0gMTtcblx0XHRcdHRoaXMueSA9IDA7XG5cdFx0XHR0aGlzLnogPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy54ID0gcS54IC8gcztcblx0XHRcdHRoaXMueSA9IHEueSAvIHM7XG5cdFx0XHR0aGlzLnogPSBxLnogLyBzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb0FuZ2xlL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdHZhciBhbmdsZSwgeCwgeSwgeixcdFx0Ly8gdmFyaWFibGVzIGZvciByZXN1bHRcblx0XHRcdGVwc2lsb24gPSAwLjAxLFx0XHQvLyBtYXJnaW4gdG8gYWxsb3cgZm9yIHJvdW5kaW5nIGVycm9yc1xuXHRcdFx0ZXBzaWxvbjIgPSAwLjEsXHRcdC8vIG1hcmdpbiB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIDAgYW5kIDE4MCBkZWdyZWVzXG5cblx0XHRcdHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdGlmICggKCBNYXRoLmFicyggbTEyIC0gbTIxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0xMyAtIG0zMSApIDwgZXBzaWxvbiApICYmXG5cdFx0ICAgICAoIE1hdGguYWJzKCBtMjMgLSBtMzIgKSA8IGVwc2lsb24gKSApIHtcblxuXHRcdFx0Ly8gc2luZ3VsYXJpdHkgZm91bmRcblx0XHRcdC8vIGZpcnN0IGNoZWNrIGZvciBpZGVudGl0eSBtYXRyaXggd2hpY2ggbXVzdCBoYXZlICsxIGZvciBhbGwgdGVybXNcblx0XHRcdC8vIGluIGxlYWRpbmcgZGlhZ29uYWwgYW5kIHplcm8gaW4gb3RoZXIgdGVybXNcblxuXHRcdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgKyBtMjEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTEzICsgbTMxICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0yMyArIG0zMiApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTEgKyBtMjIgKyBtMzMgLSAzICkgPCBlcHNpbG9uMiApICkge1xuXG5cdFx0XHRcdC8vIHRoaXMgc2luZ3VsYXJpdHkgaXMgaWRlbnRpdHkgbWF0cml4IHNvIGFuZ2xlID0gMFxuXG5cdFx0XHRcdHRoaXMuc2V0KCAxLCAwLCAwLCAwICk7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7IC8vIHplcm8gYW5nbGUsIGFyYml0cmFyeSBheGlzXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRoaXMgc2luZ3VsYXJpdHkgaXMgYW5nbGUgPSAxODBcblxuXHRcdFx0YW5nbGUgPSBNYXRoLlBJO1xuXG5cdFx0XHR2YXIgeHggPSAoIG0xMSArIDEgKSAvIDI7XG5cdFx0XHR2YXIgeXkgPSAoIG0yMiArIDEgKSAvIDI7XG5cdFx0XHR2YXIgenogPSAoIG0zMyArIDEgKSAvIDI7XG5cdFx0XHR2YXIgeHkgPSAoIG0xMiArIG0yMSApIC8gNDtcblx0XHRcdHZhciB4eiA9ICggbTEzICsgbTMxICkgLyA0O1xuXHRcdFx0dmFyIHl6ID0gKCBtMjMgKyBtMzIgKSAvIDQ7XG5cblx0XHRcdGlmICggKCB4eCA+IHl5ICkgJiYgKCB4eCA+IHp6ICkgKSB7XG5cblx0XHRcdFx0Ly8gbTExIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm1cblxuXHRcdFx0XHRpZiAoIHh4IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMC43MDcxMDY3ODE7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHggPSBNYXRoLnNxcnQoIHh4ICk7XG5cdFx0XHRcdFx0eSA9IHh5IC8geDtcblx0XHRcdFx0XHR6ID0geHogLyB4O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggeXkgPiB6eiApIHtcblxuXHRcdFx0XHQvLyBtMjIgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeXkgPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eSA9IE1hdGguc3FydCggeXkgKTtcblx0XHRcdFx0XHR4ID0geHkgLyB5O1xuXHRcdFx0XHRcdHogPSB5eiAvIHk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG0zMyBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtIHNvIGJhc2UgcmVzdWx0IG9uIHRoaXNcblxuXHRcdFx0XHRpZiAoIHp6IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eiA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHogPSBNYXRoLnNxcnQoIHp6ICk7XG5cdFx0XHRcdFx0eCA9IHh6IC8gejtcblx0XHRcdFx0XHR5ID0geXogLyB6O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldCggeCwgeSwgeiwgYW5nbGUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7IC8vIHJldHVybiAxODAgZGVnIHJvdGF0aW9uXG5cblx0XHR9XG5cblx0XHQvLyBhcyB3ZSBoYXZlIHJlYWNoZWQgaGVyZSB0aGVyZSBhcmUgbm8gc2luZ3VsYXJpdGllcyBzbyB3ZSBjYW4gaGFuZGxlIG5vcm1hbGx5XG5cblx0XHR2YXIgcyA9IE1hdGguc3FydCggKCBtMzIgLSBtMjMgKSAqICggbTMyIC0gbTIzICkgK1xuXHRcdCAgICAgICAgICAgICAgICAgICAoIG0xMyAtIG0zMSApICogKCBtMTMgLSBtMzEgKSArXG5cdFx0ICAgICAgICAgICAgICAgICAgICggbTIxIC0gbTEyICkgKiAoIG0yMSAtIG0xMiApICk7IC8vIHVzZWQgdG8gbm9ybWFsaXplXG5cblx0XHRpZiAoIE1hdGguYWJzKCBzICkgPCAwLjAwMSApIHMgPSAxO1xuXG5cdFx0Ly8gcHJldmVudCBkaXZpZGUgYnkgemVybywgc2hvdWxkIG5vdCBoYXBwZW4gaWYgbWF0cml4IGlzIG9ydGhvZ29uYWwgYW5kIHNob3VsZCBiZVxuXHRcdC8vIGNhdWdodCBieSBzaW5ndWxhcml0eSB0ZXN0IGFib3ZlLCBidXQgSSd2ZSBsZWZ0IGl0IGluIGp1c3QgaW4gY2FzZVxuXG5cdFx0dGhpcy54ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0dGhpcy55ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0dGhpcy56ID0gKCBtMjEgLSBtMTIgKSAvIHM7XG5cdFx0dGhpcy53ID0gTWF0aC5hY29zKCAoIG0xMSArIG0yMiArIG0zMyAtIDEgKSAvIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1pbiggdGhpcy56LCB2LnogKTtcblx0XHR0aGlzLncgPSBNYXRoLm1pbiggdGhpcy53LCB2LncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggdGhpcy56LCB2LnogKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggdGhpcy53LCB2LncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7XG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIG1pbi53LCBNYXRoLm1pbiggbWF4LncsIHRoaXMudyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWluLCBtYXg7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0XHRpZiAoIG1pbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1pbiA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0XHRcdG1heCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0bWluLnNldCggbWluVmFsLCBtaW5WYWwsIG1pblZhbCwgbWluVmFsICk7XG5cdFx0XHRtYXguc2V0KCBtYXhWYWwsIG1heFZhbCwgbWF4VmFsLCBtYXhWYWwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2xhbXAoIG1pbiwgbWF4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5mbG9vciggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGguY2VpbCggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLnJvdW5kKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmRUb1plcm86IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9ICggdGhpcy56IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnogKSA6IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9ICggdGhpcy53IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLncgKSA6IE1hdGguZmxvb3IoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXHRcdHRoaXMudyA9IC0gdGhpcy53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7XG5cblx0fSxcblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudztcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53ICk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICkgKyBNYXRoLmFicyggdGhpcy53ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fSxcblxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXHRcdHRoaXMudyArPSAoIHYudyAtIHRoaXMudyApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnBWZWN0b3JzOiBmdW5jdGlvbiAoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2MiwgdjEgKS5tdWx0aXBseVNjYWxhciggYWxwaGEgKS5hZGQoIHYxICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICYmICggdi53ID09PSB0aGlzLncgKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy53ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMudztcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xuXHRcdHRoaXMudyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgTWFyaXVzIEtpbnRlbCAvIGh0dHBzOi8vZ2l0aHViLmNvbS9raW50ZWxcbiAqL1xuXG4vKlxuIEluIG9wdGlvbnMsIHdlIGNhbiBzcGVjaWZ5OlxuICogVGV4dHVyZSBwYXJhbWV0ZXJzIGZvciBhbiBhdXRvLWdlbmVyYXRlZCB0YXJnZXQgdGV4dHVyZVxuICogZGVwdGhCdWZmZXIvc3RlbmNpbEJ1ZmZlcjogQm9vbGVhbnMgdG8gaW5kaWNhdGUgaWYgd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZXNlIGJ1ZmZlcnNcbiovXG5mdW5jdGlvbiBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdHRoaXMuc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdHRoaXMuc2Npc3NvclRlc3QgPSBmYWxzZTtcblxuXHR0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRpZiAoIG9wdGlvbnMubWluRmlsdGVyID09PSB1bmRlZmluZWQgKSBvcHRpb25zLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHR0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSggdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9wdGlvbnMud3JhcFMsIG9wdGlvbnMud3JhcFQsIG9wdGlvbnMubWFnRmlsdGVyLCBvcHRpb25zLm1pbkZpbHRlciwgb3B0aW9ucy5mb3JtYXQsIG9wdGlvbnMudHlwZSwgb3B0aW9ucy5hbmlzb3Ryb3B5LCBvcHRpb25zLmVuY29kaW5nICk7XG5cblx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IHRydWU7XG5cblx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhCdWZmZXIgOiB0cnVlO1xuXHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnN0ZW5jaWxCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciA6IHRydWU7XG5cdHRoaXMuZGVwdGhUZXh0dXJlID0gb3B0aW9ucy5kZXB0aFRleHR1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhUZXh0dXJlIDogbnVsbDtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogV2ViR0xSZW5kZXJUYXJnZXQsXG5cblx0aXNXZWJHTFJlbmRlclRhcmdldDogdHJ1ZSxcblxuXHRzZXRTaXplOiBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgKSB7XG5cblx0XHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gc291cmNlLnRleHR1cmUuY2xvbmUoKTtcblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBzb3VyY2UuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7XG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJUYXJnZXRDdWJlKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdFdlYkdMUmVuZGVyVGFyZ2V0LmNhbGwoIHRoaXMsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHR0aGlzLmFjdGl2ZUN1YmVGYWNlID0gMDsgLy8gUFggMCwgTlggMSwgUFkgMiwgTlkgMywgUFogNCwgTlogNVxuXHR0aGlzLmFjdGl2ZU1pcE1hcExldmVsID0gMDtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlICk7XG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2ViR0xSZW5kZXJUYXJnZXRDdWJlO1xuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHR0aGlzLnVucGFja0FsaWdubWVudCA9IDE7XG5cbn1cblxuRGF0YVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRhdGFUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFUZXh0dXJlO1xuXG5EYXRhVGV4dHVyZS5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gQm94MyggbWluLCBtYXggKSB7XG5cblx0dGhpcy5taW4gPSAoIG1pbiAhPT0gdW5kZWZpbmVkICkgPyBtaW4gOiBuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApO1xuXHR0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IzKCAtIEluZmluaXR5LCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHtcblxuXHRpc0JveDM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdHZhciB4ID0gYXJyYXlbIGkgXTtcblx0XHRcdHZhciB5ID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHR2YXIgeiA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRpZiAoIHogPCBtaW5aICkgbWluWiA9IHo7XG5cblx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblx0XHRcdGlmICggeiA+IG1heFogKSBtYXhaID0gejtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApO1xuXHRcdHRoaXMubWF4LnNldCggbWF4WCwgbWF4WSwgbWF4WiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgeCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHR2YXIgeSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG5cdFx0XHR2YXIgeiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdGlmICggeiA8IG1pblogKSBtaW5aID0gejtcblxuXHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXHRcdFx0aWYgKCB6ID4gbWF4WiApIG1heFogPSB6O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4uc2V0KCBtaW5YLCBtaW5ZLCBtaW5aICk7XG5cdFx0dGhpcy5tYXguc2V0KCBtYXhYLCBtYXhZLCBtYXhaICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdFx0dmFyIGhhbGZTaXplID0gdjEuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdHJldHVybiB0aGlzLmV4cGFuZEJ5T2JqZWN0KCBvYmplY3QgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSB0aGlzLm1pbi56ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICkgfHwgKCB0aGlzLm1heC56IDwgdGhpcy5taW4ueiApO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fSxcblxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlPYmplY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIENvbXB1dGVzIHRoZSB3b3JsZC1heGlzLWFsaWduZWQgYm91bmRpbmcgYm94IG9mIGFuIG9iamVjdCAoaW5jbHVkaW5nIGl0cyBjaGlsZHJlbiksXG5cdFx0Ly8gYWNjb3VudGluZyBmb3IgYm90aCB0aGUgb2JqZWN0J3MsIGFuZCBjaGlsZHJlbidzLCB3b3JsZCB0cmFuc2Zvcm1zXG5cblx0XHR2YXIgc2NvcGUsIGksIGw7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gdHJhdmVyc2UoIG5vZGUgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5vZGUuZ2VvbWV0cnk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0djEuY29weSggdmVydGljZXNbIGkgXSApO1xuXHRcdFx0XHRcdFx0djEuYXBwbHlNYXRyaXg0KCBub2RlLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHYxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaSApLmFwcGx5TWF0cml4NCggbm9kZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBleHBhbmRCeU9iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0XHRzY29wZSA9IHRoaXM7XG5cblx0XHRcdG9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHRvYmplY3QudHJhdmVyc2UoIHRyYXZlcnNlICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdHBvaW50LnogPCB0aGlzLm1pbi56IHx8IHBvaW50LnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueSAmJlxuXHRcdFx0dGhpcy5taW4ueiA8PSBib3gubWluLnogJiYgYm94Lm1heC56IDw9IHRoaXMubWF4Lno7XG5cblx0fSxcblxuXHRnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxuXHRcdFx0KCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApXG5cdFx0KTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Ly8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XG5cdFx0XHRib3gubWF4LnogPCB0aGlzLm1pbi56IHx8IGJveC5taW4ueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBjbG9zZXN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdFx0Ly8gRmluZCB0aGUgcG9pbnQgb24gdGhlIEFBQkIgY2xvc2VzdCB0byB0aGUgc3BoZXJlIGNlbnRlci5cblx0XHRcdHRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgY2xvc2VzdFBvaW50ICk7XG5cblx0XHRcdC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuXHRcdFx0cmV0dXJuIGNsb3Nlc3RQb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlc1xuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXG5cdFx0dmFyIG1pbiwgbWF4O1xuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueCA+IDAgKSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnkgPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gKCBtaW4gPD0gLSBwbGFuZS5jb25zdGFudCAmJiBtYXggPj0gLSBwbGFuZS5jb25zdGFudCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1RyaWFuZ2xlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzXG5cdFx0dmFyIHYwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcblx0XHR2YXIgZjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBmMSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB0ZXN0QXhpcyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZXh0ZW50cyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdHJpYW5nbGVOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gc2F0Rm9yQXhlcyggYXhlcyApIHtcblxuXHRcdFx0dmFyIGksIGo7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR0ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcblx0XHRcdFx0Ly8gcHJvamVjdCB0aGUgYWFiYiBvbnRvIHRoZSBzZXBlcmF0aW5nIGF4aXNcblx0XHRcdFx0dmFyIHIgPSBleHRlbnRzLnggKiBNYXRoLmFicyggdGVzdEF4aXMueCApICsgZXh0ZW50cy55ICogTWF0aC5hYnMoIHRlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCB0ZXN0QXhpcy56ICk7XG5cdFx0XHRcdC8vIHByb2plY3QgYWxsIDMgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdFx0XHR2YXIgcDAgPSB2MC5kb3QoIHRlc3RBeGlzICk7XG5cdFx0XHRcdHZhciBwMSA9IHYxLmRvdCggdGVzdEF4aXMgKTtcblx0XHRcdFx0dmFyIHAyID0gdjIuZG90KCB0ZXN0QXhpcyApO1xuXHRcdFx0XHQvLyBhY3R1YWwgdGVzdCwgYmFzaWNhbGx5IHNlZSBpZiBlaXRoZXIgb2YgdGhlIG1vc3QgZXh0cmVtZSBvZiB0aGUgdHJpYW5nbGUgcG9pbnRzIGludGVyc2VjdHMgclxuXHRcdFx0XHRpZiAoIE1hdGgubWF4KCAtIE1hdGgubWF4KCBwMCwgcDEsIHAyICksIE1hdGgubWluKCBwMCwgcDEsIHAyICkgKSA+IHIgKSB7XG5cblx0XHRcdFx0XHQvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiXG5cdFx0XHRcdFx0Ly8gdGhlIGF4aXMgaXMgc2VwZXJhdGluZyBhbmQgd2UgY2FuIGV4aXRcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNUcmlhbmdsZSggdHJpYW5nbGUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbXB1dGUgYm94IGNlbnRlciBhbmQgZXh0ZW50c1xuXHRcdFx0dGhpcy5nZXRDZW50ZXIoIGNlbnRlciApO1xuXHRcdFx0ZXh0ZW50cy5zdWJWZWN0b3JzKCB0aGlzLm1heCwgY2VudGVyICk7XG5cblx0XHRcdC8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpblxuXHRcdFx0djAuc3ViVmVjdG9ycyggdHJpYW5nbGUuYSwgY2VudGVyICk7XG5cdFx0XHR2MS5zdWJWZWN0b3JzKCB0cmlhbmdsZS5iLCBjZW50ZXIgKTtcblx0XHRcdHYyLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmMsIGNlbnRlciApO1xuXG5cdFx0XHQvLyBjb21wdXRlIGVkZ2UgdmVjdG9ycyBmb3IgdHJpYW5nbGVcblx0XHRcdGYwLnN1YlZlY3RvcnMoIHYxLCB2MCApO1xuXHRcdFx0ZjEuc3ViVmVjdG9ycyggdjIsIHYxICk7XG5cdFx0XHRmMi5zdWJWZWN0b3JzKCB2MCwgdjIgKTtcblxuXHRcdFx0Ly8gdGVzdCBhZ2FpbnN0IGF4ZXMgdGhhdCBhcmUgZ2l2ZW4gYnkgY3Jvc3MgcHJvZHVjdCBjb21iaW5hdGlvbnMgb2YgdGhlIGVkZ2VzIG9mIHRoZSB0cmlhbmdsZSBhbmQgdGhlIGVkZ2VzIG9mIHRoZSBhYWJiXG5cdFx0XHQvLyBtYWtlIGFuIGF4aXMgdGVzdGluZyBvZiBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSBhYWJiIGFnYWluc3QgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgdHJpYW5nbGUgPSA5IGF4aXMgb2Ygc2VwYXJhdGlvblxuXHRcdFx0Ly8gYXhpc19paiA9IHVfaSB4IGZfaiAodTAsIHUxLCB1MiA9IGZhY2Ugbm9ybWFscyBvZiBhYWJiID0geCx5LHogYXhlcyB2ZWN0b3JzIHNpbmNlIGFhYmIgaXMgYXhpcyBhbGlnbmVkKVxuXHRcdFx0dmFyIGF4ZXMgPSBbXG5cdFx0XHRcdDAsIC0gZjAueiwgZjAueSwgMCwgLSBmMS56LCBmMS55LCAwLCAtIGYyLnosIGYyLnksXG5cdFx0XHRcdGYwLnosIDAsIC0gZjAueCwgZjEueiwgMCwgLSBmMS54LCBmMi56LCAwLCAtIGYyLngsXG5cdFx0XHRcdC0gZjAueSwgZjAueCwgMCwgLSBmMS55LCBmMS54LCAwLCAtIGYyLnksIGYyLngsIDBcblx0XHRcdF07XG5cdFx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcyApICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0ZXN0IDMgZmFjZSBub3JtYWxzIGZyb20gdGhlIGFhYmJcblx0XHRcdGF4ZXMgPSBbIDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEgXTtcblx0XHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZpbmFsbHkgdGVzdGluZyB0aGUgZmFjZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0XHQvLyB1c2UgYWxyZWFkeSBleGlzdGluZyB0cmlhbmdsZSBlZGdlIHZlY3RvcnMgaGVyZVxuXHRcdFx0dHJpYW5nbGVOb3JtYWwuY3Jvc3NWZWN0b3JzKCBmMCwgZjEgKTtcblx0XHRcdGF4ZXMgPSBbIHRyaWFuZ2xlTm9ybWFsLngsIHRyaWFuZ2xlTm9ybWFsLnksIHRyaWFuZ2xlTm9ybWFsLnogXTtcblx0XHRcdHJldHVybiBzYXRGb3JBeGVzKCBheGVzICk7XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGNsYW1wUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jbGFtcFBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRcdHZhciBjbGFtcGVkUG9pbnQgPSB2MS5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblx0XHRcdHJldHVybiBjbGFtcGVkUG9pbnQuc3ViKCBwb2ludCApLmxlbmd0aCgpO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0Qm91bmRpbmdTcGhlcmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0Qm91bmRpbmdTcGhlcmUoIHRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuZ2V0Qm91bmRpbmdTcGhlcmUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nZXRDZW50ZXIoIHRhcmdldC5jZW50ZXIgKTtcblxuXHRcdFx0dGFyZ2V0LnJhZGl1cyA9IHRoaXMuZ2V0U2l6ZSggdjEgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdC8vIGVuc3VyZSB0aGF0IGlmIHRoZXJlIGlzIG5vIG92ZXJsYXAsIHRoZSByZXN1bHQgaXMgZnVsbHkgZW1wdHksIG5vdCBzbGlnaHRseSBlbXB0eSB3aXRoIG5vbi1pbmYvK2luZiB2YWx1ZXMgdGhhdCB3aWxsIGNhdXNlIHN1YnNlcXVlbmNlIGludGVyc2VjdHMgdG8gZXJyb25lb3VzbHkgcmV0dXJuIHZhbGlkIHZhbHVlcy5cblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkgdGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dW5pb246IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvaW50cyA9IFtcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpLFxuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpLFxuXHRcdFx0bmV3IFZlY3RvcjMoKSxcblx0XHRcdG5ldyBWZWN0b3IzKCksXG5cdFx0XHRuZXcgVmVjdG9yMygpXG5cdFx0XTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdFx0Ly8gdHJhbnNmb3JtIG9mIGVtcHR5IGJveCBpcyBhbiBlbXB0eSBib3guXG5cdFx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkgcmV0dXJuIHRoaXM7XG5cblx0XHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XG5cdFx0XHRwb2ludHNbIDAgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMDBcblx0XHRcdHBvaW50c1sgMSBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMVxuXHRcdFx0cG9pbnRzWyAyIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDEwXG5cdFx0XHRwb2ludHNbIDMgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTFcblx0XHRcdHBvaW50c1sgNCBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDEwMFxuXHRcdFx0cG9pbnRzWyA1IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAxXG5cdFx0XHRwb2ludHNbIDYgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMTBcblx0XHRcdHBvaW50c1sgNyBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMVxuXG5cdFx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTcGhlcmUoIGNlbnRlciwgcmFkaXVzICkge1xuXG5cdHRoaXMuY2VudGVyID0gKCBjZW50ZXIgIT09IHVuZGVmaW5lZCApID8gY2VudGVyIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5yYWRpdXMgPSAoIHJhZGl1cyAhPT0gdW5kZWZpbmVkICkgPyByYWRpdXMgOiAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyZS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBjZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJveCA9IG5ldyBCb3gzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVBvaW50cyggcG9pbnRzLCBvcHRpb25hbENlbnRlciApIHtcblxuXHRcdFx0dmFyIGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0XHRpZiAoIG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2VudGVyLmNvcHkoIG9wdGlvbmFsQ2VudGVyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ym94LnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1heFJhZGl1c1NxID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludHNbIGkgXSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuY29weSggc3BoZXJlLmNlbnRlciApO1xuXHRcdHRoaXMucmFkaXVzID0gc3BoZXJlLnJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAoIHRoaXMucmFkaXVzIDw9IDAgKTtcblxuXHR9LFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUbyggdGhpcy5jZW50ZXIgKSAtIHRoaXMucmFkaXVzICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHZhciByYWRpdXNTdW0gPSB0aGlzLnJhZGl1cyArIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHJhZGl1c1N1bSAqIHJhZGl1c1N1bSApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNQbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLmNlbnRlciApICkgPD0gdGhpcy5yYWRpdXM7XG5cblx0fSxcblxuXHRjbGFtcFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgZGVsdGFMZW5ndGhTcSA9IHRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BoZXJlOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmNvcHkoIHBvaW50ICk7XG5cblx0XHRpZiAoIGRlbHRhTGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHtcblxuXHRcdFx0dGFyZ2V0LnN1YiggdGhpcy5jZW50ZXIgKS5ub3JtYWxpemUoKTtcblx0XHRcdHRhcmdldC5tdWx0aXBseVNjYWxhciggdGhpcy5yYWRpdXMgKS5hZGQoIHRoaXMuY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0Z2V0Qm91bmRpbmdCb3g6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BoZXJlOiAuZ2V0Qm91bmRpbmdCb3goKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IEJveDMoKTtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5zZXQoIHRoaXMuY2VudGVyLCB0aGlzLmNlbnRlciApO1xuXHRcdHRhcmdldC5leHBhbmRCeVNjYWxhciggdGhpcy5yYWRpdXMgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLnJhZGl1cyA9IHRoaXMucmFkaXVzICogbWF0cml4LmdldE1heFNjYWxlT25BeGlzKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZXF1YWxzKCB0aGlzLmNlbnRlciApICYmICggc3BoZXJlLnJhZGl1cyA9PT0gdGhpcy5yYWRpdXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUGxhbmUoIG5vcm1hbCwgY29uc3RhbnQgKSB7XG5cblx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdHRoaXMubm9ybWFsID0gKCBub3JtYWwgIT09IHVuZGVmaW5lZCApID8gbm9ybWFsIDogbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcblx0dGhpcy5jb25zdGFudCA9ICggY29uc3RhbnQgIT09IHVuZGVmaW5lZCApID8gY29uc3RhbnQgOiAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFBsYW5lLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBub3JtYWwsIGNvbnN0YW50ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IGNvbnN0YW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnRzOiBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5zZXQoIHgsIHksIHogKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggbm9ybWFsLCBwb2ludCApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSAtIHBvaW50LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNvcGxhbmFyUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCBhLCBiLCBjICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsID0gdjEuc3ViVmVjdG9ycyggYywgYiApLmNyb3NzKCB2Mi5zdWJWZWN0b3JzKCBhLCBiICkgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gUTogc2hvdWxkIGFuIGVycm9yIGJlIHRocm93biBpZiBub3JtYWwgaXMgemVybyAoZS5nLiBkZWdlbmVyYXRlIHBsYW5lKT9cblxuXHRcdFx0dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBwbGFuZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gTm90ZTogd2lsbCBsZWFkIHRvIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIHBsYW5lIGlzIGludmFsaWQuXG5cblx0XHR2YXIgaW52ZXJzZU5vcm1hbExlbmd0aCA9IDEuMCAvIHRoaXMubm9ybWFsLmxlbmd0aCgpO1xuXHRcdHRoaXMubm9ybWFsLm11bHRpcGx5U2NhbGFyKCBpbnZlcnNlTm9ybWFsTGVuZ3RoICk7XG5cdFx0dGhpcy5jb25zdGFudCAqPSBpbnZlcnNlTm9ybWFsTGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgKj0gLSAxO1xuXHRcdHRoaXMubm9ybWFsLm5lZ2F0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWwuZG90KCBwb2ludCApICsgdGhpcy5jb25zdGFudDtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBzcGhlcmUuY2VudGVyICkgLSBzcGhlcmUucmFkaXVzO1xuXG5cdH0sXG5cblx0cHJvamVjdFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLnByb2plY3RQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAtIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBwb2ludCApICkuYWRkKCBwb2ludCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RMaW5lKCBsaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pbnRlcnNlY3RMaW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGlyZWN0aW9uID0gbGluZS5kZWx0YSggdjEgKTtcblxuXHRcdFx0dmFyIGRlbm9taW5hdG9yID0gdGhpcy5ub3JtYWwuZG90KCBkaXJlY3Rpb24gKTtcblxuXHRcdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luXG5cdFx0XHRcdGlmICggdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVbnN1cmUgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBtZXRob2QgdG8gaGFuZGxlIHRoaXMgY2FzZS5cblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdCA9IC0gKCBsaW5lLnN0YXJ0LmRvdCggdGhpcy5ub3JtYWwgKSArIHRoaXMuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0XHRpZiAoIHQgPCAwIHx8IHQgPiAxICkge1xuXG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBkaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggbGluZS5zdGFydCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0c0xpbmU6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdC8vIE5vdGU6IHRoaXMgdGVzdHMgaWYgYSBsaW5lIGludGVyc2VjdHMgdGhlIHBsYW5lLCBub3Qgd2hldGhlciBpdCAob3IgaXRzIGVuZC1wb2ludHMpIGFyZSBjb3BsYW5hciB3aXRoIGl0LlxuXG5cdFx0dmFyIHN0YXJ0U2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dmFyIGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5pbnRlcnNlY3RzUGxhbmUoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcGxhbmFyUG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5jb3BsYW5hclBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5jb25zdGFudCApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXgzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlNYXRyaXg0KCBtYXRyaXgsIG9wdGlvbmFsTm9ybWFsTWF0cml4ICkge1xuXG5cdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gb3B0aW9uYWxOb3JtYWxNYXRyaXggfHwgbTEuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0dmFyIHJlZmVyZW5jZVBvaW50ID0gdGhpcy5jb3BsYW5hclBvaW50KCB2MSApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRcdHZhciBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHR0aGlzLmNvbnN0YW50ID0gLSByZWZlcmVuY2VQb2ludC5kb3QoIG5vcm1hbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50IC09IG9mZnNldC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBwbGFuZS5ub3JtYWwuZXF1YWxzKCB0aGlzLm5vcm1hbCApICYmICggcGxhbmUuY29uc3RhbnQgPT09IHRoaXMuY29uc3RhbnQgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBGcnVzdHVtKCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkge1xuXG5cdHRoaXMucGxhbmVzID0gW1xuXG5cdFx0KCBwMCAhPT0gdW5kZWZpbmVkICkgPyBwMCA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDEgIT09IHVuZGVmaW5lZCApID8gcDEgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHAyICE9PSB1bmRlZmluZWQgKSA/IHAyIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwMyAhPT0gdW5kZWZpbmVkICkgPyBwMyA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDQgIT09IHVuZGVmaW5lZCApID8gcDQgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHA1ICE9PSB1bmRlZmluZWQgKSA/IHA1IDogbmV3IFBsYW5lKClcblxuXHRdO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZydXN0dW0ucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRwbGFuZXNbIDAgXS5jb3B5KCBwMCApO1xuXHRcdHBsYW5lc1sgMSBdLmNvcHkoIHAxICk7XG5cdFx0cGxhbmVzWyAyIF0uY29weSggcDIgKTtcblx0XHRwbGFuZXNbIDMgXS5jb3B5KCBwMyApO1xuXHRcdHBsYW5lc1sgNCBdLmNvcHkoIHA0ICk7XG5cdFx0cGxhbmVzWyA1IF0uY29weSggcDUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggZnJ1c3R1bSApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdHBsYW5lc1sgaSBdLmNvcHkoIGZydXN0dW0ucGxhbmVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cdFx0dmFyIG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07XG5cdFx0dmFyIG1lNCA9IG1lWyA0IF0sIG1lNSA9IG1lWyA1IF0sIG1lNiA9IG1lWyA2IF0sIG1lNyA9IG1lWyA3IF07XG5cdFx0dmFyIG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdHZhciBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07XG5cblx0XHRwbGFuZXNbIDAgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTAsIG1lNyAtIG1lNCwgbWUxMSAtIG1lOCwgbWUxNSAtIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDEgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTAsIG1lNyArIG1lNCwgbWUxMSArIG1lOCwgbWUxNSArIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDIgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDMgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSwgbWUxNSAtIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDQgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTIsIG1lNyAtIG1lNiwgbWUxMSAtIG1lMTAsIG1lMTUgLSBtZTE0ICkubm9ybWFsaXplKCk7XG5cdFx0cGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzT2JqZWN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNPYmplY3QoIG9iamVjdCApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsIClcblx0XHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApXG5cdFx0XHRcdC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcHJpdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c1Nwcml0ZSggc3ByaXRlICkge1xuXG5cdFx0XHRzcGhlcmUuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdFx0c3BoZXJlLnJhZGl1cyA9IDAuNzA3MTA2NzgxMTg2NTQ3Njtcblx0XHRcdHNwaGVyZS5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xuXHRcdHZhciBuZWdSYWRpdXMgPSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIGNlbnRlciApO1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbmVnUmFkaXVzICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHBsYW5lID0gcGxhbmVzWyBpIF07XG5cblx0XHRcdFx0Ly8gY29ybmVyIGF0IG1heCBkaXN0YW5jZVxuXG5cdFx0XHRcdHAueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcblx0XHRcdFx0cC55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gYm94Lm1heC55IDogYm94Lm1pbi55O1xuXHRcdFx0XHRwLnogPSBwbGFuZS5ub3JtYWwueiA+IDAgPyBib3gubWF4LnogOiBib3gubWluLno7XG5cblx0XHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHAgKSA8IDAgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGlmICggcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxufSApO1xuXG52YXIgYWxwaGFtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgYWxwaGFtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgYWxwaGF0ZXN0X2ZyYWdtZW50ID0gXCIjaWZkZWYgQUxQSEFURVNUXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IEFMUEhBVEVTVCApIGRpc2NhcmQ7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBhb21hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBiZWdpbl92ZXJ0ZXggPSBcIlxcbnZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1xcblwiO1xuXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJcXG52ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcblwiO1xuXG52YXIgYnNkZnMgPSBcImZsb2F0IHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGNvbnN0IGluIGZsb2F0IGxpZ2h0RGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGN1dG9mZkRpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBkZWNheUV4cG9uZW50ICkge1xcbiNpZiBkZWZpbmVkICggUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUyApXFxuXFx0ZmxvYXQgZGlzdGFuY2VGYWxsb2ZmID0gMS4wIC8gbWF4KCBwb3coIGxpZ2h0RGlzdGFuY2UsIGRlY2F5RXhwb25lbnQgKSwgMC4wMSApO1xcblxcdGlmKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCApIHtcXG5cXHRcXHRkaXN0YW5jZUZhbGxvZmYgKj0gcG93Miggc2F0dXJhdGUoIDEuMCAtIHBvdzQoIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApICkgKTtcXG5cXHR9XFxuXFx0cmV0dXJuIGRpc3RhbmNlRmFsbG9mZjtcXG4jZWxzZVxcblxcdGlmKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCAmJiBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcdFxcdHJldHVybiBwb3coIHNhdHVyYXRlKCAtbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICsgMS4wICksIGRlY2F5RXhwb25lbnQgKTtcXG5cXHR9XFxuXFx0cmV0dXJuIDEuMDtcXG4jZW5kaWZcXG59XFxudmVjMyBCUkRGX0RpZmZ1c2VfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IGRvdExIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TEggLSA2Ljk4MzE2ICkgKiBkb3RMSCApO1xcblxcdHJldHVybiAoIDEuMCAtIHNwZWN1bGFyQ29sb3IgKSAqIGZyZXNuZWwgKyBzcGVjdWxhckNvbG9yO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROTCArIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRyZXR1cm4gMS4wIC8gKCBnbCAqIGd2ICk7XFxufVxcbmZsb2F0IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyAgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40MTc1OTQwICsgKCA0LjE2MTY3MjQgKyB5ICkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHRmbG9hdCByZXN1bHQgPSBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHZlY3RvckZvcm1GYWN0b3IgKTtcXG5cXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRjb25zdCB2ZWM0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcXG5cXHRjb25zdCB2ZWM0IGMxID0gdmVjNCggMSwgMC4wNDI1LCAxLjA0LCAtIDAuMDQgKTtcXG5cXHR2ZWM0IHIgPSByb3VnaG5lc3MgKiBjMCArIGMxO1xcblxcdGZsb2F0IGEwMDQgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xcblxcdHZlYzIgQUIgPSB2ZWMyKCAtMS4wNCwgMS4wNCApICogYTAwNCArIHIuenc7XFxuXFx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBBQi54ICsgQUIueTtcXG59XFxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcXG5cXHRyZXR1cm4gMC4yNTtcXG59XFxuZmxvYXQgRF9CbGlublBob25nKCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcbn1cXG52ZWMzIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcyApIHtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgZ2VvbWV0cnkudmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XFxuXFx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcXG5cXHRmbG9hdCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbmZsb2F0IEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggY29uc3QgaW4gZmxvYXQgZ2d4Um91Z2huZXNzICkge1xcblxcdHJldHVybiAoIDIuMCAvIHBvdzIoIGdneFJvdWdobmVzcyArIDAuMDAwMSApIC0gMi4wICk7XFxufVxcbmZsb2F0IEJsaW5uRXhwb25lbnRUb0dHWFJvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgYmxpbm5FeHBvbmVudCApIHtcXG5cXHRyZXR1cm4gc3FydCggMi4wIC8gKCBibGlubkV4cG9uZW50ICsgMi4wICkgKTtcXG59XFxuXCI7XG5cbnZhciBidW1wbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKTtcXG5cXHRcXHRmRGV0ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHR2ZWMzIHZHcmFkID0gc2lnbiggZkRldCApICogKCBkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XFxuXFx0fVxcbiNlbmRpZlxcblwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHR2ZWM0IHBsYW5lO1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBVTklPTl9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdGlmICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSBkaXNjYXJkO1xcblxcdH1cXG5cXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdGJvb2wgY2xpcHBlZCA9IHRydWU7XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdH1cXG5cXHRcXHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdCNpZiAhIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgISBkZWZpbmVkKCBQSE9ORyApICYmICEgZGVmaW5lZCggTUFUQ0FQIClcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIHZlYzQgY2xpcHBpbmdQbGFuZXNbIE5VTV9DTElQUElOR19QTEFORVMgXTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwICYmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwICYmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcblwiO1xuXG52YXIgY29sb3JfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgY29sb3JfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0NPTE9SXFxuXFx0dkNvbG9yLnh5eiA9IGNvbG9yLnh5ejtcXG4jZW5kaWZcIjtcblxudmFyIGNvbW1vbiA9IFwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxuI2RlZmluZSBQSTIgNi4yODMxODUzMDcxOFxcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDlcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuI2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNkZWZpbmUgd2hpdGVDb21wbGltZW50KGEpICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxcbmZsb2F0IHBvdzQoIGNvbnN0IGluIGZsb2F0IHggKSB7IGZsb2F0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cXG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkgeyByZXR1cm4gZG90KCBjb2xvciwgdmVjMyggMC4zMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdChzaW4oc24pICogYyk7XFxufVxcbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcXG5cXHR2ZWMzIGNvbG9yO1xcblxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdGJvb2wgdmlzaWJsZTtcXG59O1xcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XFxuXFx0dmVjMyBkaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgZGlyZWN0U3BlY3VsYXI7XFxuXFx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBpbmRpcmVjdFNwZWN1bGFyO1xcbn07XFxuc3RydWN0IEdlb21ldHJpY0NvbnRleHQge1xcblxcdHZlYzMgcG9zaXRpb247XFxuXFx0dmVjMyBub3JtYWw7XFxuXFx0dmVjMyB2aWV3RGlyO1xcbn07XFxudmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcXG59XFxudmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XFxufVxcbnZlYzMgcHJvamVjdE9uUGxhbmUoaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2UgPSBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludCAtIHBvaW50T25QbGFuZSApO1xcblxcdHJldHVybiAtIGRpc3RhbmNlICogcGxhbmVOb3JtYWwgKyBwb2ludDtcXG59XFxuZmxvYXQgc2lkZU9mUGxhbmUoIGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBzaWduKCBkb3QoIHBvaW50IC0gcG9pbnRPblBsYW5lLCBwbGFuZU5vcm1hbCApICk7XFxufVxcbnZlYzMgbGluZVBsYW5lSW50ZXJzZWN0KCBpbiB2ZWMzIHBvaW50T25MaW5lLCBpbiB2ZWMzIGxpbmVEaXJlY3Rpb24sIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBsaW5lRGlyZWN0aW9uICogKCBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludE9uUGxhbmUgLSBwb2ludE9uTGluZSApIC8gZG90KCBwbGFuZU5vcm1hbCwgbGluZURpcmVjdGlvbiApICkgKyBwb2ludE9uTGluZTtcXG59XFxubWF0MyB0cmFuc3Bvc2VNYXQzKCBjb25zdCBpbiBtYXQzIG0gKSB7XFxuXFx0bWF0MyB0bXA7XFxuXFx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XFxuXFx0dG1wWyAxIF0gPSB2ZWMzKCBtWyAwIF0ueSwgbVsgMSBdLnksIG1bIDIgXS55ICk7XFxuXFx0dG1wWyAyIF0gPSB2ZWMzKCBtWyAwIF0ueiwgbVsgMSBdLnosIG1bIDIgXS56ICk7XFxuXFx0cmV0dXJuIHRtcDtcXG59XFxuZmxvYXQgbGluZWFyVG9SZWxhdGl2ZUx1bWluYW5jZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHtcXG5cXHR2ZWMzIHdlaWdodHMgPSB2ZWMzKCAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyICk7XFxuXFx0cmV0dXJuIGRvdCggd2VpZ2h0cywgY29sb3IucmdiICk7XFxufVxcblwiO1xuXG52YXIgY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50ID0gXCIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcbiNkZWZpbmUgY3ViZVVWX3RleHR1cmVTaXplICgxMDI0LjApXFxuaW50IGdldEZhY2VGcm9tRGlyZWN0aW9uKHZlYzMgZGlyZWN0aW9uKSB7XFxuXFx0dmVjMyBhYnNEaXJlY3Rpb24gPSBhYnMoZGlyZWN0aW9uKTtcXG5cXHRpbnQgZmFjZSA9IC0xO1xcblxcdGlmKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi56ICkge1xcblxcdFxcdGlmKGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAgOiAzO1xcblxcdFxcdGVsc2VcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxIDogNDtcXG5cXHR9XFxuXFx0ZWxzZSB7XFxuXFx0XFx0aWYoYWJzRGlyZWN0aW9uLnogPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi56ID4gMC4wID8gMiA6IDU7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEgOiA0O1xcblxcdH1cXG5cXHRyZXR1cm4gZmFjZTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczEgIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDEuMClcXG4jZGVmaW5lIGN1YmVVVl9yYW5nZUNsYW1wIChleHAyKCg2LjAgLSAxLjApICogMi4wKSlcXG52ZWMyIE1pcExldmVsSW5mbyggdmVjMyB2ZWMsIGZsb2F0IHJvdWdobmVzc0xldmVsLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgc2NhbGUgPSBleHAyKGN1YmVVVl9tYXhMb2RzMSAtIHJvdWdobmVzc0xldmVsKTtcXG5cXHRmbG9hdCBkeFJvdWdobmVzcyA9IGRGZHgocm91Z2huZXNzKTtcXG5cXHRmbG9hdCBkeVJvdWdobmVzcyA9IGRGZHkocm91Z2huZXNzKTtcXG5cXHR2ZWMzIGR4ID0gZEZkeCggdmVjICogc2NhbGUgKiBkeFJvdWdobmVzcyApO1xcblxcdHZlYzMgZHkgPSBkRmR5KCB2ZWMgKiBzY2FsZSAqIGR5Um91Z2huZXNzICk7XFxuXFx0ZmxvYXQgZCA9IG1heCggZG90KCBkeCwgZHggKSwgZG90KCBkeSwgZHkgKSApO1xcblxcdGQgPSBjbGFtcChkLCAxLjAsIGN1YmVVVl9yYW5nZUNsYW1wKTtcXG5cXHRmbG9hdCBtaXBMZXZlbCA9IDAuNSAqIGxvZzIoZCk7XFxuXFx0cmV0dXJuIHZlYzIoZmxvb3IobWlwTGV2ZWwpLCBmcmFjdChtaXBMZXZlbCkpO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMiAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAyLjApXFxuI2RlZmluZSBjdWJlVVZfcmNwVGV4dHVyZVNpemUgKDEuMCAvIGN1YmVVVl90ZXh0dXJlU2l6ZSlcXG52ZWMyIGdldEN1YmVVVih2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzTGV2ZWwsIGZsb2F0IG1pcExldmVsKSB7XFxuXFx0bWlwTGV2ZWwgPSByb3VnaG5lc3NMZXZlbCA+IGN1YmVVVl9tYXhMb2RzMiAtIDMuMCA/IDAuMCA6IG1pcExldmVsO1xcblxcdGZsb2F0IGEgPSAxNi4wICogY3ViZVVWX3JjcFRleHR1cmVTaXplO1xcblxcdHZlYzIgZXhwMl9wYWNrZWQgPSBleHAyKCB2ZWMyKCByb3VnaG5lc3NMZXZlbCwgbWlwTGV2ZWwgKSApO1xcblxcdHZlYzIgcmNwX2V4cDJfcGFja2VkID0gdmVjMiggMS4wICkgLyBleHAyX3BhY2tlZDtcXG5cXHRmbG9hdCBwb3dTY2FsZSA9IGV4cDJfcGFja2VkLnggKiBleHAyX3BhY2tlZC55O1xcblxcdGZsb2F0IHNjYWxlID0gcmNwX2V4cDJfcGFja2VkLnggKiByY3BfZXhwMl9wYWNrZWQueSAqIDAuMjU7XFxuXFx0ZmxvYXQgbWlwT2Zmc2V0ID0gMC43NSooMS4wIC0gcmNwX2V4cDJfcGFja2VkLnkpICogcmNwX2V4cDJfcGFja2VkLng7XFxuXFx0Ym9vbCBiUmVzID0gbWlwTGV2ZWwgPT0gMC4wO1xcblxcdHNjYWxlID0gIGJSZXMgJiYgKHNjYWxlIDwgYSkgPyBhIDogc2NhbGU7XFxuXFx0dmVjMyByO1xcblxcdHZlYzIgb2Zmc2V0O1xcblxcdGludCBmYWNlID0gZ2V0RmFjZUZyb21EaXJlY3Rpb24oZGlyZWN0aW9uKTtcXG5cXHRmbG9hdCByY3BQb3dTY2FsZSA9IDEuMCAvIHBvd1NjYWxlO1xcblxcdGlmKCBmYWNlID09IDApIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueCwgLWRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigwLjArbWlwT2Zmc2V0LDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAxKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnksIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAyKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigyLjAqc2NhbGUrbWlwT2Zmc2V0LCAwLjc1ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyBhIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gMykge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMC4wK21pcE9mZnNldCwwLjUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IDAuMCA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDQpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueSwgZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2Uge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi56LCAtZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDIuMCpzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdHIgPSBub3JtYWxpemUocik7XFxuXFx0ZmxvYXQgdGV4ZWxPZmZzZXQgPSAwLjUgKiBjdWJlVVZfcmNwVGV4dHVyZVNpemU7XFxuXFx0dmVjMiBzID0gKCByLnl6IC8gYWJzKCByLnggKSArIHZlYzIoIDEuMCApICkgKiAwLjU7XFxuXFx0dmVjMiBiYXNlID0gb2Zmc2V0ICsgdmVjMiggdGV4ZWxPZmZzZXQgKTtcXG5cXHRyZXR1cm4gYmFzZSArIHMgKiAoIHNjYWxlIC0gMi4wICogdGV4ZWxPZmZzZXQgKTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczMgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMy4wKVxcbnZlYzQgdGV4dHVyZUN1YmVVViggc2FtcGxlcjJEIGVudk1hcCwgdmVjMyByZWZsZWN0ZWREaXJlY3Rpb24sIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCByb3VnaG5lc3NWYWwgPSByb3VnaG5lc3MqIGN1YmVVVl9tYXhMb2RzMztcXG5cXHRmbG9hdCByMSA9IGZsb29yKHJvdWdobmVzc1ZhbCk7XFxuXFx0ZmxvYXQgcjIgPSByMSArIDEuMDtcXG5cXHRmbG9hdCB0ID0gZnJhY3Qocm91Z2huZXNzVmFsKTtcXG5cXHR2ZWMyIG1pcEluZm8gPSBNaXBMZXZlbEluZm8ocmVmbGVjdGVkRGlyZWN0aW9uLCByMSwgcm91Z2huZXNzKTtcXG5cXHRmbG9hdCBzID0gbWlwSW5mby55O1xcblxcdGZsb2F0IGxldmVsMCA9IG1pcEluZm8ueDtcXG5cXHRmbG9hdCBsZXZlbDEgPSBsZXZlbDAgKyAxLjA7XFxuXFx0bGV2ZWwxID0gbGV2ZWwxID4gNS4wID8gNS4wIDogbGV2ZWwxO1xcblxcdGxldmVsMCArPSBtaW4oIGZsb29yKCBzICsgMC41ICksIDUuMCApO1xcblxcdHZlYzIgdXZfMTAgPSBnZXRDdWJlVVYocmVmbGVjdGVkRGlyZWN0aW9uLCByMSwgbGV2ZWwwKTtcXG5cXHR2ZWM0IGNvbG9yMTAgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2XzEwKSk7XFxuXFx0dmVjMiB1dl8yMCA9IGdldEN1YmVVVihyZWZsZWN0ZWREaXJlY3Rpb24sIHIyLCBsZXZlbDApO1xcblxcdHZlYzQgY29sb3IyMCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXZfMjApKTtcXG5cXHR2ZWM0IHJlc3VsdCA9IG1peChjb2xvcjEwLCBjb2xvcjIwLCB0KTtcXG5cXHRyZXR1cm4gdmVjNChyZXN1bHQucmdiLCAxLjApO1xcbn1cXG4jZW5kaWZcXG5cIjtcblxudmFyIGRlZmF1bHRub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIHRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsTWF0cml4ICogb2JqZWN0Tm9ybWFsO1xcbiNpZmRlZiBGTElQX1NJREVEXFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSAtIHRyYW5zZm9ybWVkTm9ybWFsO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpc3BsYWNlbWVudE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudFNjYWxlO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50QmlhcztcXG4jZW5kaWZcXG5cIjtcblxudmFyIGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dHJhbnNmb3JtZWQgKz0gbm9ybWFsaXplKCBvYmplY3ROb3JtYWwgKSAqICggdGV4dHVyZTJEKCBkaXNwbGFjZW1lbnRNYXAsIHV2ICkueCAqIGRpc3BsYWNlbWVudFNjYWxlICsgZGlzcGxhY2VtZW50QmlhcyApO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgZW1pc3NpdmVtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR2ZWM0IGVtaXNzaXZlQ29sb3IgPSB0ZXh0dXJlMkQoIGVtaXNzaXZlTWFwLCB2VXYgKTtcXG5cXHRlbWlzc2l2ZUNvbG9yLnJnYiA9IGVtaXNzaXZlTWFwVGV4ZWxUb0xpbmVhciggZW1pc3NpdmVDb2xvciApLnJnYjtcXG5cXHR0b3RhbEVtaXNzaXZlUmFkaWFuY2UgKj0gZW1pc3NpdmVDb2xvci5yZ2I7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbmNvZGluZ3NfZnJhZ21lbnQgPSBcIiAgZ2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZ2xfRnJhZ0NvbG9yICk7XFxuXCI7XG5cbnZhciBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCA9IFwiXFxudmVjNCBMaW5lYXJUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgR2FtbWFUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCBnYW1tYUZhY3RvciApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBMaW5lYXJUb0dhbW1hKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcXG5cXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUuYSApO1xcbn1cXG52ZWM0IHNSR0JUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB2YWx1ZS5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBSR0JFVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIGV4cDIoIHZhbHVlLmEgKiAyNTUuMCAtIDEyOC4wICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRSggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgoIG1heCggdmFsdWUuciwgdmFsdWUuZyApLCB2YWx1ZS5iICk7XFxuXFx0ZmxvYXQgZkV4cCA9IGNsYW1wKCBjZWlsKCBsb2cyKCBtYXhDb21wb25lbnQgKSApLCAtMTI4LjAsIDEyNy4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvIGV4cDIoIGZFeHAgKSwgKCBmRXhwICsgMTI4LjAgKSAvIDI1NS4wICk7XFxufVxcbnZlYzQgUkdCTVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogdmFsdWUuYSAqIG1heFJhbmdlLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQk0oIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdGZsb2F0IG1heFJHQiA9IG1heCggdmFsdWUuciwgbWF4KCB2YWx1ZS5nLCB2YWx1ZS5iICkgKTtcXG5cXHRmbG9hdCBNID0gY2xhbXAoIG1heFJHQiAvIG1heFJhbmdlLCAwLjAsIDEuMCApO1xcblxcdE0gPSBjZWlsKCBNICogMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyAoIE0gKiBtYXhSYW5nZSApLCBNICk7XFxufVxcbnZlYzQgUkdCRFRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogKCAoIG1heFJhbmdlIC8gMjU1LjAgKSAvIHZhbHVlLmEgKSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JEKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLnIsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgRCA9IG1heCggbWF4UmFuZ2UgLyBtYXhSR0IsIDEuMCApO1xcblxcdEQgPSBtaW4oIGZsb29yKCBEICkgLyAyNTUuMCwgMS4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggRCAqICggMjU1LjAgLyBtYXhSYW5nZSApICksIEQgKTtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2TSA9IG1hdDMoIDAuMjIwOSwgMC4zMzkwLCAwLjQxODQsIDAuMTEzOCwgMC42NzgwLCAwLjczMTksIDAuMDEwMiwgMC4xMTMwLCAwLjI5NjkgKTtcXG52ZWM0IExpbmVhclRvTG9nTHV2KCBpbiB2ZWM0IHZhbHVlICkgIHtcXG5cXHR2ZWMzIFhwX1lfWFlacCA9IHZhbHVlLnJnYiAqIGNMb2dMdXZNO1xcblxcdFhwX1lfWFlacCA9IG1heCggWHBfWV9YWVpwLCB2ZWMzKCAxZS02LCAxZS02LCAxZS02ICkgKTtcXG5cXHR2ZWM0IHZSZXN1bHQ7XFxuXFx0dlJlc3VsdC54eSA9IFhwX1lfWFlacC54eSAvIFhwX1lfWFlacC56O1xcblxcdGZsb2F0IExlID0gMi4wICogbG9nMihYcF9ZX1hZWnAueSkgKyAxMjcuMDtcXG5cXHR2UmVzdWx0LncgPSBmcmFjdCggTGUgKTtcXG5cXHR2UmVzdWx0LnogPSAoIExlIC0gKCBmbG9vciggdlJlc3VsdC53ICogMjU1LjAgKSApIC8gMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2UmVzdWx0O1xcbn1cXG5jb25zdCBtYXQzIGNMb2dMdXZJbnZlcnNlTSA9IG1hdDMoIDYuMDAxNCwgLTIuNzAwOCwgLTEuNzk5NiwgLTEuMzMyMCwgMy4xMDI5LCAtNS43NzIxLCAwLjMwMDgsIC0xLjA4ODIsIDUuNjI2OCApO1xcbnZlYzQgTG9nTHV2VG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0ZmxvYXQgTGUgPSB2YWx1ZS56ICogMjU1LjAgKyB2YWx1ZS53O1xcblxcdHZlYzMgWHBfWV9YWVpwO1xcblxcdFhwX1lfWFlacC55ID0gZXhwMiggKCBMZSAtIDEyNy4wICkgLyAyLjAgKTtcXG5cXHRYcF9ZX1hZWnAueiA9IFhwX1lfWFlacC55IC8gdmFsdWUueTtcXG5cXHRYcF9ZX1hZWnAueCA9IHZhbHVlLnggKiBYcF9ZX1hZWnAuejtcXG5cXHR2ZWMzIHZSR0IgPSBYcF9ZX1hZWnAucmdiICogY0xvZ0x1dkludmVyc2VNO1xcblxcdHJldHVybiB2ZWM0KCBtYXgoIHZSR0IsIDAuMCApLCAxLjAgKTtcXG59XFxuXCI7XG5cbnZhciBlbnZtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwgMC4wLCAxLjAgKSApO1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHRlbnZDb2xvciA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudkNvbG9yICk7XFxuXFx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIG91dGdvaW5nTGlnaHQgKiBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbnZtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XFxuXFx0dW5pZm9ybSBmbG9hdCBlbnZNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICggZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSApXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBlbnZNYXA7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xcblxcdHVuaWZvcm0gaW50IG1heE1pcExldmVsO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIGVudm1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIGVudm1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggd29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIGZvZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0Zm9nRGVwdGggPSAtbXZQb3NpdGlvbi56O1xcbiNlbmRpZlxcblwiO1xuXG52YXIgZm9nX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBmb2dfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gd2hpdGVDb21wbGltZW50KCBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZm9nRGVwdGggKiBmb2dEZXB0aCAqIExPRzIgKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGZvZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBUT09OXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZ3JhZGllbnRNYXA7XFxuXFx0dmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGxpZ2h0RGlyZWN0aW9uICk7XFxuXFx0XFx0dmVjMiBjb29yZCA9IHZlYzIoIGRvdE5MICogMC41ICsgMC41LCAwLjAgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkucmdiO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuICggY29vcmQueCA8IDAuNyApID8gdmVjMyggMC43ICkgOiB2ZWMzKCAxLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBQSSAqIHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gXCJ2ZWMzIGRpZmZ1c2UgPSB2ZWMzKCAxLjAgKTtcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSBub3JtYWxpemUoIC1tdlBvc2l0aW9uLnh5eiApO1xcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xcbmJhY2tHZW9tZXRyeS5wb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcbmJhY2tHZW9tZXRyeS5ub3JtYWwgPSAtZ2VvbWV0cnkubm9ybWFsO1xcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG52TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2TGlnaHRCYWNrID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5mbG9hdCBkb3ROTDtcXG52ZWMzIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBQSSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZMaWdodEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGJhY2tHZW9tZXRyeSApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0c19wYXJzX2JlZ2luID0gXCJ1bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHR9O1xcblxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0c1sgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFBvaW50TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gUG9pbnRMaWdodCBwb2ludExpZ2h0c1sgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFBvaW50TGlnaHQgcG9pbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gcG9pbnRMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHBvaW50TGlnaHQuY29sb3I7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSApO1xcblxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSAoIGRpcmVjdExpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFNwb3RMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdFxcdGZsb2F0IGNvbmVDb3M7XFxuXFx0XFx0ZmxvYXQgcGVudW1icmFDb3M7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGlmICggYW5nbGVDb3MgPiBzcG90TGlnaHQuY29uZUNvcyApIHtcXG5cXHRcXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvcjtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBzcG90RWZmZWN0ICogcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IGZhbHNlO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0O1xcblxcdH07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzE7XFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzI7XFxuXFx0dW5pZm9ybSBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHRzWyBOVU1fUkVDVF9BUkVBX0xJR0hUUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IEhlbWlzcGhlcmVMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBza3lDb2xvcjtcXG5cXHRcXHR2ZWMzIGdyb3VuZENvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XFxuXFx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5ICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IG1peCggaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLCBoZW1pTGlnaHQuc2t5Q29sb3IsIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG5cXHR9XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0dmVjMyBnZXRMaWdodFByb2JlSW5kaXJlY3RJcnJhZGlhbmNlKCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGdlb21ldHJ5Lm5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiB3b3JsZE5vcm1hbC54LCB3b3JsZE5vcm1hbC55eiApO1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVMb2RFWFQoIGVudk1hcCwgcXVlcnlWZWMsIGZsb2F0KCBtYXhNSVBMZXZlbCApICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgcXVlcnlWZWMsIGZsb2F0KCBtYXhNSVBMZXZlbCApICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiB3b3JsZE5vcm1hbC54LCB3b3JsZE5vcm1hbC55eiApO1xcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZVVWKCBlbnZNYXAsIHF1ZXJ5VmVjLCAxLjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gUEkgKiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFNwZWN1bGFyTUlQTGV2ZWwoIGNvbnN0IGluIGZsb2F0IGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHRmbG9hdCBtYXhNSVBMZXZlbFNjYWxhciA9IGZsb2F0KCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdGZsb2F0IGRlc2lyZWRNSVBMZXZlbCA9IG1heE1JUExldmVsU2NhbGFyICsgMC43OTI0OCAtIDAuNSAqIGxvZzIoIHBvdzIoIGJsaW5uU2hpbmluZXNzRXhwb25lbnQgKSArIDEuMCApO1xcblxcdFxcdHJldHVybiBjbGFtcCggZGVzaXJlZE1JUExldmVsLCAwLjAsIG1heE1JUExldmVsU2NhbGFyICk7XFxuXFx0fVxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIGZsb2F0IGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIC1nZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIC1nZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJlZmxlY3RWZWMgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCByZWZsZWN0VmVjLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJNSVBMZXZlbCA9IGdldFNwZWN1bGFyTUlQTGV2ZWwoIGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIG1heE1JUExldmVsICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlSZWZsZWN0VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApO1xcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZVVWKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKGJsaW5uU2hpbmluZXNzRXhwb25lbnQgKSk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRcXHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIHJlZmxlY3RWZWMueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdFxcdFxcdHNhbXBsZVVWLnggPSBhdGFuKCByZWZsZWN0VmVjLnosIHJlZmxlY3RWZWMueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkRMb2RFWFQoIGVudk1hcCwgc2FtcGxlVVYsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZpZXcgPSBub3JtYWxpemUoICggdmlld01hdHJpeCAqIHZlYzQoIHJlZmxlY3RWZWMsIDAuMCApICkueHl6ICsgdmVjMyggMC4wLDAuMCwxLjAgKSApO1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJETG9kRVhUKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41LCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41LCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHR9XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodHNfcGhvbmdfZnJhZ21lbnQgPSBcIkJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiO1xcbm1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhcjtcXG5tYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyA9IHNoaW5pbmVzcztcXG5tYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoID0gc3BlY3VsYXJTdHJlbmd0aDtcXG5cIjtcblxudmFyIGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuc3RydWN0IEJsaW5uUGhvbmdNYXRlcmlhbCB7XFxuXFx0dmVjM1xcdGRpZmZ1c2VDb2xvcjtcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdFxcdHNwZWN1bGFyU2hpbmluZXNzO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJTdHJlbmd0aDtcXG59O1xcbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0I2lmZGVmIFRPT05cXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2VuZGlmXFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyApICogbWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aDtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9CbGlublBob25nXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgTWF0ZXJpYWxfTGlnaHRQcm9iZUxPRCggbWF0ZXJpYWwgKVxcdCgwKVxcblwiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50ID0gXCJQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIDEuMCAtIG1ldGFsbmVzc0ZhY3RvciApO1xcbm1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzID0gY2xhbXAoIHJvdWdobmVzc0ZhY3RvciwgMC4wNCwgMS4wICk7XFxuI2lmZGVmIFNUQU5EQVJEXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG4jZWxzZVxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzMoIE1BWElNVU1fU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKiBwb3cyKCByZWZsZWN0aXZpdHkgKSApLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG5cXHRtYXRlcmlhbC5jbGVhckNvYXQgPSBzYXR1cmF0ZSggY2xlYXJDb2F0ICk7XFx0bWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzID0gY2xhbXAoIGNsZWFyQ29hdFJvdWdobmVzcywgMC4wNCwgMS4wICk7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9IFwic3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclJvdWdobmVzcztcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0O1xcblxcdFxcdGZsb2F0IGNsZWFyQ29hdFJvdWdobmVzcztcXG5cXHQjZW5kaWZcXG59O1xcbiNkZWZpbmUgTUFYSU1VTV9TUEVDVUxBUl9DT0VGRklDSUVOVCAwLjE2XFxuI2RlZmluZSBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UIDAuMDRcXG5mbG9hdCBjbGVhckNvYXRESFJBcHByb3goIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkwgKSB7XFxuXFx0cmV0dXJuIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKyAoIDEuMCAtIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSAqICggcG93KCAxLjAgLSBkb3ROTCwgNS4wICkgKiBwb3coIDEuMCAtIHJvdWdobmVzcywgMi4wICkgKTtcXG59XFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHZvaWQgUkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsKCBjb25zdCBpbiBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbm9ybWFsID0gZ2VvbWV0cnkubm9ybWFsO1xcblxcdFxcdHZlYzMgdmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgbGlnaHRQb3MgPSByZWN0QXJlYUxpZ2h0LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoID0gcmVjdEFyZWFMaWdodC5oYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0ID0gcmVjdEFyZWFMaWdodC5oYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IHJlY3RBcmVhTGlnaHQuY29sb3I7XFxuXFx0XFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3M7XFxuXFx0XFx0dmVjMyByZWN0Q29vcmRzWyA0IF07XFxuXFx0XFx0cmVjdENvb3Jkc1sgMCBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcdFxcdHJlY3RDb29yZHNbIDEgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAyIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMyBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzIgdXYgPSBMVENfVXYoIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0XFx0dmVjNCB0MSA9IHRleHR1cmUyRCggbHRjXzEsIHV2ICk7XFxuXFx0XFx0dmVjNCB0MiA9IHRleHR1cmUyRCggbHRjXzIsIHV2ICk7XFxuXFx0XFx0bWF0MyBtSW52ID0gbWF0MyhcXG5cXHRcXHRcXHR2ZWMzKCB0MS54LCAwLCB0MS55ICksXFxuXFx0XFx0XFx0dmVjMyggICAgMCwgMSwgICAgMCApLFxcblxcdFxcdFxcdHZlYzMoIHQxLnosIDAsIHQxLncgKVxcblxcdFxcdCk7XFxuXFx0XFx0dmVjMyBmcmVzbmVsID0gKCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICogdDIueCArICggdmVjMyggMS4wICkgLSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICkgKiB0Mi55ICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gbGlnaHRDb2xvciAqIGZyZXNuZWwgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1JbnYsIHJlY3RDb29yZHMgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGxpZ2h0Q29sb3IgKiBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKiBMVENfRXZhbHVhdGUoIG5vcm1hbCwgdmlld0RpciwgcG9zaXRpb24sIG1hdDMoIDEuMCApLCByZWN0Q29vcmRzICk7XFxuXFx0fVxcbiNlbmRpZlxcbnZvaWQgUkVfRGlyZWN0X1BoeXNpY2FsKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IG1hdGVyaWFsLmNsZWFyQ29hdCAqIGNsZWFyQ29hdERIUkFwcHJveCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzLCBkb3ROTCApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gMC4wO1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9ICggMS4wIC0gY2xlYXJDb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1goIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9ICggMS4wIC0gY2xlYXJDb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogbWF0ZXJpYWwuY2xlYXJDb2F0ICogQlJERl9TcGVjdWxhcl9HR1goIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyByYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBjbGVhckNvYXRSYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdE5WO1xcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IG1hdGVyaWFsLmNsZWFyQ29hdCAqIGNsZWFyQ29hdERIUkFwcHJveCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzLCBkb3ROTCApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gMC4wO1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhckNvYXRESFIgKSAqIHJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IGNsZWFyQ29hdFJhZGlhbmNlICogbWF0ZXJpYWwuY2xlYXJDb2F0ICogQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfRGlyZWN0X1JlY3RBcmVhXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0U3BlY3VsYXJcXHRcXHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXFxuI2RlZmluZSBNYXRlcmlhbF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApICAgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApXFxuI2RlZmluZSBNYXRlcmlhbF9DbGVhckNvYXRfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSAgIEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzIClcXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcXG59XFxuXCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfYmVnaW4gPSBcIlxcbkdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnk7XFxuZ2VvbWV0cnkucG9zaXRpb24gPSAtIHZWaWV3UG9zaXRpb247XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5JbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0O1xcbiNpZiAoIE5VTV9QT0lOVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggcG9pbnRMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUgKSApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX1NQT1RfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0U3BvdExpZ2h0IHNwb3RMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggc3BvdExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSApICkgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSApICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0X1JlY3RBcmVhIClcXG5cXHRSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9SRUNUX0FSRUFfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHJlY3RBcmVhTGlnaHQgPSByZWN0QXJlYUxpZ2h0c1sgaSBdO1xcblxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYSggcmVjdEFyZWFMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdCNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0XFx0aXJyYWRpYW5jZSArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGdlb21ldHJ5ICk7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHR2ZWMzIHJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBjbGVhckNvYXRSYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X21hcHMgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRsaWdodE1hcElycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBsaWdodE1hcElycmFkaWFuY2U7XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBQSFlTSUNBTCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggZ2VvbWV0cnksIG1heE1pcExldmVsICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggZ2VvbWV0cnksIE1hdGVyaWFsX0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICksIG1heE1pcExldmVsICk7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGNsZWFyQ29hdFJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeSwgTWF0ZXJpYWxfQ2xlYXJDb2F0X0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICksIG1heE1pcExldmVsICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfZW5kID0gXCIjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHRSRV9JbmRpcmVjdERpZmZ1c2UoIGlycmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0UkVfSW5kaXJlY3RTcGVjdWxhciggcmFkaWFuY2UsIGNsZWFyQ29hdFJhZGlhbmNlLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApICYmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRl9FWFQgKVxcblxcdGdsX0ZyYWdEZXB0aEVYVCA9IGxvZzIoIHZGcmFnRGVwdGggKSAqIGxvZ0RlcHRoQnVmRkMgKiAwLjU7XFxuI2VuZGlmXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdHZGcmFnRGVwdGggPSAxLjAgKyBnbF9Qb3NpdGlvbi53O1xcblxcdCNlbHNlXFxuXFx0XFx0Z2xfUG9zaXRpb24ueiA9IGxvZzIoIG1heCggRVBTSUxPTiwgZ2xfUG9zaXRpb24udyArIDEuMCApICkgKiBsb2dEZXB0aEJ1ZkZDIC0gMS4wO1xcblxcdFxcdGdsX1Bvc2l0aW9uLnogKj0gZ2xfUG9zaXRpb24udztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWM0IHRleGVsQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlV2ICk7XFxuXFx0dGV4ZWxDb2xvciA9IG1hcFRleGVsVG9MaW5lYXIoIHRleGVsQ29sb3IgKTtcXG5cXHRkaWZmdXNlQ29sb3IgKj0gdGV4ZWxDb2xvcjtcXG4jZW5kaWZcXG5cIjtcblxudmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcXG5cIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWMyIHV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIGdsX1BvaW50Q29vcmQueCwgMS4wIC0gZ2xfUG9pbnRDb29yZC55LCAxICkgKS54eTtcXG5cXHR2ZWM0IG1hcFRleGVsID0gdGV4dHVyZTJEKCBtYXAsIHV2ICk7XFxuXFx0ZGlmZnVzZUNvbG9yICo9IG1hcFRleGVsVG9MaW5lYXIoIG1hcFRleGVsICk7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBtZXRhbG5lc3NGYWN0b3IgPSBtZXRhbG5lc3M7XFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR2ZWM0IHRleGVsTWV0YWxuZXNzID0gdGV4dHVyZTJEKCBtZXRhbG5lc3NNYXAsIHZVdiApO1xcblxcdG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxuZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGhub3JtYWxfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBITk9STUFMU1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMCAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwxIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDIgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMyAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgOCBdO1xcblxcdCNlbHNlXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG1vcnBodGFyZ2V0X3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0MyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDUgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NiAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDYgXTtcXG5cXHR0cmFuc2Zvcm1lZCArPSAoIG1vcnBoVGFyZ2V0NyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDcgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIG5vcm1hbF9mcmFnbWVudF9iZWdpbiA9IFwiI2lmZGVmIEZMQVRfU0hBREVEXFxuXFx0dmVjMyBmZHggPSB2ZWMzKCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnggKSwgZEZkeCggdlZpZXdQb3NpdGlvbi55ICksIGRGZHgoIHZWaWV3UG9zaXRpb24ueiApICk7XFxuXFx0dmVjMyBmZHkgPSB2ZWMzKCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnggKSwgZEZkeSggdlZpZXdQb3NpdGlvbi55ICksIGRGZHkoIHZWaWV3UG9zaXRpb24ueiApICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuI2Vsc2VcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBub3JtYWxfZnJhZ21lbnRfbWFwcyA9IFwiI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXHQjaWZkZWYgT0JKRUNUU1BBQ0VfTk9STUFMTUFQXFxuXFx0XFx0bm9ybWFsID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHQjaWZkZWYgRkxJUF9TSURFRFxcblxcdFxcdFxcdG5vcm1hbCA9IC0gbm9ybWFsO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHRub3JtYWwgPSBub3JtYWwgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0bm9ybWFsID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBub3JtYWwgKTtcXG5cXHQjZWxzZVxcblxcdFxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsICk7XFxuXFx0I2VuZGlmXFxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWxBcmIoIC12Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpICk7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBub3JtYWxtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XFxuXFx0dW5pZm9ybSB2ZWMyIG5vcm1hbFNjYWxlO1xcblxcdCNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcXG5cXHRcXHR1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSApIHtcXG5cXHRcXHRcXHR2ZWMzIHEwID0gdmVjMyggZEZkeCggZXllX3Bvcy54ICksIGRGZHgoIGV5ZV9wb3MueSApLCBkRmR4KCBleWVfcG9zLnogKSApO1xcblxcdFxcdFxcdHZlYzMgcTEgPSB2ZWMzKCBkRmR5KCBleWVfcG9zLnggKSwgZEZkeSggZXllX3Bvcy55ICksIGRGZHkoIGV5ZV9wb3MueiApICk7XFxuXFx0XFx0XFx0dmVjMiBzdDAgPSBkRmR4KCB2VXYuc3QgKTtcXG5cXHRcXHRcXHR2ZWMyIHN0MSA9IGRGZHkoIHZVdi5zdCApO1xcblxcdFxcdFxcdGZsb2F0IHNjYWxlID0gc2lnbiggc3QxLnQgKiBzdDAucyAtIHN0MC50ICogc3QxLnMgKTtcXG5cXHRcXHRcXHR2ZWMzIFMgPSBub3JtYWxpemUoICggcTAgKiBzdDEudCAtIHExICogc3QwLnQgKSAqIHNjYWxlICk7XFxuXFx0XFx0XFx0dmVjMyBUID0gbm9ybWFsaXplKCAoIC0gcTAgKiBzdDEucyArIHExICogc3QwLnMgKSAqIHNjYWxlICk7XFxuXFx0XFx0XFx0dmVjMyBOID0gbm9ybWFsaXplKCBzdXJmX25vcm0gKTtcXG5cXHRcXHRcXHRtYXQzIHRzbiA9IG1hdDMoIFMsIFQsIE4gKTtcXG5cXHRcXHRcXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdFxcdFxcdG1hcE4ueHkgKj0gbm9ybWFsU2NhbGU7XFxuXFx0XFx0XFx0bWFwTi54eSAqPSAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggdHNuICogbWFwTiApO1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIHBhY2tpbmcgPSBcInZlYzMgcGFja05vcm1hbFRvUkdCKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCBub3JtYWwgKSAqIDAuNSArIDAuNTtcXG59XFxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XFxuXFx0cmV0dXJuIDIuMCAqIHJnYi54eXogLSAxLjA7XFxufVxcbmNvbnN0IGZsb2F0IFBhY2tVcHNjYWxlID0gMjU2LiAvIDI1NS47Y29uc3QgZmxvYXQgVW5wYWNrRG93bnNjYWxlID0gMjU1LiAvIDI1Ni47XFxuY29uc3QgdmVjMyBQYWNrRmFjdG9ycyA9IHZlYzMoIDI1Ni4gKiAyNTYuICogMjU2LiwgMjU2LiAqIDI1Ni4sICAyNTYuICk7XFxuY29uc3QgdmVjNCBVbnBhY2tGYWN0b3JzID0gVW5wYWNrRG93bnNjYWxlIC8gdmVjNCggUGFja0ZhY3RvcnMsIDEuICk7XFxuY29uc3QgZmxvYXQgU2hpZnRSaWdodDggPSAxLiAvIDI1Ni47XFxudmVjNCBwYWNrRGVwdGhUb1JHQkEoIGNvbnN0IGluIGZsb2F0IHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggZnJhY3QoIHYgKiBQYWNrRmFjdG9ycyApLCB2ICk7XFxuXFx0ci55encgLT0gci54eXogKiBTaGlmdFJpZ2h0ODtcXHRyZXR1cm4gciAqIFBhY2tVcHNjYWxlO1xcbn1cXG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xcblxcdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnMgKTtcXG59XFxuZmxvYXQgdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XFxufVxcbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgbGluZWFyQ2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gbGluZWFyQ2xpcFogKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XFxufVxcbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoKCBuZWFyICsgdmlld1ogKSAqIGZhciApIC8gKCggZmFyIC0gbmVhciApICogdmlld1ogKTtcXG59XFxuZmxvYXQgcGVyc3BlY3RpdmVEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGludkNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuICggbmVhciAqIGZhciApIC8gKCAoIGZhciAtIG5lYXIgKSAqIGludkNsaXBaIC0gZmFyICk7XFxufVxcblwiO1xuXG52YXIgcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCA9IFwiI2lmZGVmIFBSRU1VTFRJUExJRURfQUxQSEFcXG5cXHRnbF9GcmFnQ29sb3IucmdiICo9IGdsX0ZyYWdDb2xvci5hO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgcHJvamVjdF92ZXJ0ZXggPSBcInZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5nbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblwiO1xuXG52YXIgZGl0aGVyaW5nX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggRElUSEVSSU5HIClcXG4gIGdsX0ZyYWdDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggRElUSEVSSU5HIClcXG5cXHR2ZWMzIGRpdGhlcmluZyggdmVjMyBjb2xvciApIHtcXG5cXHRcXHRmbG9hdCBncmlkX3Bvc2l0aW9uID0gcmFuZCggZ2xfRnJhZ0Nvb3JkLnh5ICk7XFxuXFx0XFx0dmVjMyBkaXRoZXJfc2hpZnRfUkdCID0gdmVjMyggMC4yNSAvIDI1NS4wLCAtMC4yNSAvIDI1NS4wLCAwLjI1IC8gMjU1LjAgKTtcXG5cXHRcXHRkaXRoZXJfc2hpZnRfUkdCID0gbWl4KCAyLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCAtMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgZ3JpZF9wb3NpdGlvbiApO1xcblxcdFxcdHJldHVybiBjb2xvciArIGRpdGhlcl9zaGlmdF9SR0I7XFxuXFx0fVxcbiNlbmRpZlxcblwiO1xuXG52YXIgcm91Z2huZXNzbWFwX2ZyYWdtZW50ID0gXCJmbG9hdCByb3VnaG5lc3NGYWN0b3IgPSByb3VnaG5lc3M7XFxuI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR2ZWM0IHRleGVsUm91Z2huZXNzID0gdGV4dHVyZTJEKCByb3VnaG5lc3NNYXAsIHZVdiApO1xcblxcdHJvdWdobmVzc0ZhY3RvciAqPSB0ZXhlbFJvdWdobmVzcy5nO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgcm91Z2huZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RTaGFkb3dNYXBbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBwb2ludFNoYWRvd01hcFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdGZsb2F0IHRleHR1cmUyRENvbXBhcmUoIHNhbXBsZXIyRCBkZXB0aHMsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKSB7XFxuXFx0XFx0cmV0dXJuIHN0ZXAoIGNvbXBhcmUsIHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIGRlcHRocywgdXYgKSApICk7XFxuXFx0fVxcblxcdGZsb2F0IHRleHR1cmUyRFNoYWRvd0xlcnAoIHNhbXBsZXIyRCBkZXB0aHMsIHZlYzIgc2l6ZSwgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRjb25zdCB2ZWMyIG9mZnNldCA9IHZlYzIoIDAuMCwgMS4wICk7XFxuXFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNpemU7XFxuXFx0XFx0dmVjMiBjZW50cm9pZFVWID0gZmxvb3IoIHV2ICogc2l6ZSArIDAuNSApIC8gc2l6ZTtcXG5cXHRcXHRmbG9hdCBsYiA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC54eCwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IGx0ID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnh5LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgcmIgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueXgsIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCBydCA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC55eSwgY29tcGFyZSApO1xcblxcdFxcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNpemUgKyAwLjUgKTtcXG5cXHRcXHRmbG9hdCBhID0gbWl4KCBsYiwgbHQsIGYueSApO1xcblxcdFxcdGZsb2F0IGIgPSBtaXgoIHJiLCBydCwgZi55ICk7XFxuXFx0XFx0ZmxvYXQgYyA9IG1peCggYSwgYiwgZi54ICk7XFxuXFx0XFx0cmV0dXJuIGM7XFxuXFx0fVxcblxcdGZsb2F0IGdldFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQgKSB7XFxuXFx0XFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdFxcdHNoYWRvd0Nvb3JkLnh5eiAvPSBzaGFkb3dDb29yZC53O1xcblxcdFxcdHNoYWRvd0Nvb3JkLnogKz0gc2hhZG93QmlhcztcXG5cXHRcXHRidmVjNCBpbkZydXN0dW1WZWMgPSBidmVjNCAoIHNoYWRvd0Nvb3JkLnggPj0gMC4wLCBzaGFkb3dDb29yZC54IDw9IDEuMCwgc2hhZG93Q29vcmQueSA+PSAwLjAsIHNoYWRvd0Nvb3JkLnkgPD0gMS4wICk7XFxuXFx0XFx0Ym9vbCBpbkZydXN0dW0gPSBhbGwoIGluRnJ1c3R1bVZlYyApO1xcblxcdFxcdGJ2ZWMyIGZydXN0dW1UZXN0VmVjID0gYnZlYzIoIGluRnJ1c3R1bSwgc2hhZG93Q29vcmQueiA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGZydXN0dW1UZXN0ID0gYWxsKCBmcnVzdHVtVGVzdFZlYyApO1xcblxcdFxcdGlmICggZnJ1c3R1bVRlc3QgKSB7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApXFxuXFx0XFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgZHgwID0gLSB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTAgPSAtIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkxID0gKyB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0c2hhZG93ID0gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICksIHNoYWRvd0Nvb3JkLnogKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0c2hhZG93ID0gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gc2hhZG93O1xcblxcdH1cXG5cXHR2ZWMyIGN1YmVUb1VWKCB2ZWMzIHYsIGZsb2F0IHRleGVsU2l6ZVkgKSB7XFxuXFx0XFx0dmVjMyBhYnNWID0gYWJzKCB2ICk7XFxuXFx0XFx0ZmxvYXQgc2NhbGVUb0N1YmUgPSAxLjAgLyBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICk7XFxuXFx0XFx0YWJzViAqPSBzY2FsZVRvQ3ViZTtcXG5cXHRcXHR2ICo9IHNjYWxlVG9DdWJlICogKCAxLjAgLSAyLjAgKiB0ZXhlbFNpemVZICk7XFxuXFx0XFx0dmVjMiBwbGFuYXIgPSB2Lnh5O1xcblxcdFxcdGZsb2F0IGFsbW9zdEFUZXhlbCA9IDEuNSAqIHRleGVsU2l6ZVk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0T25lID0gMS4wIC0gYWxtb3N0QVRleGVsO1xcblxcdFxcdGlmICggYWJzVi56ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRpZiAoIHYueiA+IDAuMCApXFxuXFx0XFx0XFx0XFx0cGxhbmFyLnggPSA0LjAgLSB2Lng7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi54ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWCA9IHNpZ24oIHYueCApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnkgPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25ZID0gc2lnbiggdi55ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnggKyAyLjAgKiBzaWduWSArIDIuMDtcXG5cXHRcXHRcXHRwbGFuYXIueSA9IHYueiAqIHNpZ25ZIC0gMi4wO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFBvaW50U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCwgZmxvYXQgc2hhZG93Q2FtZXJhTmVhciwgZmxvYXQgc2hhZG93Q2FtZXJhRmFyICkge1xcblxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyAoIHNoYWRvd01hcFNpemUgKiB2ZWMyKCA0LjAsIDIuMCApICk7XFxuXFx0XFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSBzaGFkb3dDb29yZC54eXo7XFxuXFx0XFx0ZmxvYXQgZHAgPSAoIGxlbmd0aCggbGlnaHRUb1Bvc2l0aW9uICkgLSBzaGFkb3dDYW1lcmFOZWFyICkgLyAoIHNoYWRvd0NhbWVyYUZhciAtIHNoYWRvd0NhbWVyYU5lYXIgKTtcXHRcXHRkcCArPSBzaGFkb3dCaWFzO1xcblxcdFxcdHZlYzMgYmQzRCA9IG5vcm1hbGl6ZSggbGlnaHRUb1Bvc2l0aW9uICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIG9mZnNldCA9IHZlYzIoIC0gMSwgMSApICogc2hhZG93UmFkaXVzICogdGV4ZWxTaXplLnk7XFxuXFx0XFx0XFx0cmV0dXJuIChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHgsIHRleGVsU2l6ZS55ICksIGRwIClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG5cIjtcblxudmFyIHNoYWRvd21hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBzcG90U2hhZG93TWF0cml4WyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlNwb3RTaGFkb3dDb29yZFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IHBvaW50U2hhZG93TWF0cml4WyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBzaGFkb3dtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0dkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSA9IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0dlNwb3RTaGFkb3dDb29yZFsgaSBdID0gc3BvdFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0dlBvaW50U2hhZG93Q29vcmRbIGkgXSA9IHBvaW50U2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCA9IFwiZmxvYXQgZ2V0U2hhZG93TWFzaygpIHtcXG5cXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodHNbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gYm9vbCggZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0U3BvdExpZ2h0IHNwb3RMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gYm9vbCggc3BvdExpZ2h0LnNoYWRvdyApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodC5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHQuc2hhZG93Qmlhcywgc3BvdExpZ2h0LnNoYWRvd1JhZGl1cywgdlNwb3RTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gYm9vbCggcG9pbnRMaWdodC5zaGFkb3cgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIHNoYWRvdztcXG59XFxuXCI7XG5cbnZhciBza2luYmFzZV92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IGJvbmVNYXRYID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnggKTtcXG5cXHRtYXQ0IGJvbmVNYXRZID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnkgKTtcXG5cXHRtYXQ0IGJvbmVNYXRaID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnogKTtcXG5cXHRtYXQ0IGJvbmVNYXRXID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LncgKTtcXG4jZW5kaWZcIjtcblxudmFyIHNraW5uaW5nX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXg7XFxuXFx0dW5pZm9ybSBtYXQ0IGJpbmRNYXRyaXhJbnZlcnNlO1xcblxcdCNpZmRlZiBCT05FX1RFWFRVUkVcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcXG5cXHRcXHR1bmlmb3JtIGludCBib25lVGV4dHVyZVNpemU7XFxuXFx0XFx0bWF0NCBnZXRCb25lTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xcblxcdFxcdFxcdGZsb2F0IGogPSBpICogNC4wO1xcblxcdFxcdFxcdGZsb2F0IHggPSBtb2QoIGosIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKSApO1xcblxcdFxcdFxcdGZsb2F0IHkgPSBmbG9vciggaiAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKSApO1xcblxcdFxcdFxcdGZsb2F0IGR4ID0gMS4wIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApO1xcblxcdFxcdFxcdGZsb2F0IGR5ID0gMS4wIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApO1xcblxcdFxcdFxcdHkgPSBkeSAqICggeSArIDAuNSApO1xcblxcdFxcdFxcdHZlYzQgdjEgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDAuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHYyID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAxLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MyA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMi41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjQgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDMuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHRtYXQ0IGJvbmUgPSBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xcblxcdFxcdFxcdHJldHVybiBib25lO1xcblxcdFxcdH1cXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gbWF0NCBib25lTWF0cmljZXNbIE1BWF9CT05FUyBdO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRtYXQ0IGJvbmUgPSBib25lTWF0cmljZXNbIGludChpKSBdO1xcblxcdFxcdFxcdHJldHVybiBib25lO1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIHNraW5uaW5nX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuXFx0dmVjNCBza2lubmVkID0gdmVjNCggMC4wICk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WCAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lng7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WSAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lno7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0VyAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnc7XFxuXFx0dHJhbnNmb3JtZWQgPSAoIGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbm5lZCApLnh5ejtcXG4jZW5kaWZcXG5cIjtcblxudmFyIHNraW5ub3JtYWxfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnggKiBib25lTWF0WDtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueSAqIGJvbmVNYXRZO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LncgKiBib25lTWF0VztcXG5cXHRza2luTWF0cml4ICA9IGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbk1hdHJpeCAqIGJpbmRNYXRyaXg7XFxuXFx0b2JqZWN0Tm9ybWFsID0gdmVjNCggc2tpbk1hdHJpeCAqIHZlYzQoIG9iamVjdE5vcm1hbCwgMC4wICkgKS54eXo7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9mcmFnbWVudCA9IFwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG4jZWxzZVxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuI2VuZGlmXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFRPTkVfTUFQUElORyApXFxuICBnbF9GcmFnQ29sb3IucmdiID0gdG9uZU1hcHBpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIHRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZm5kZWYgc2F0dXJhdGVcXG5cXHQjZGVmaW5lIHNhdHVyYXRlKGEpIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2VuZGlmXFxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ0V4cG9zdXJlO1xcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdXaGl0ZVBvaW50O1xcbnZlYzMgTGluZWFyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0cmV0dXJuIHRvbmVNYXBwaW5nRXhwb3N1cmUgKiBjb2xvcjtcXG59XFxudmVjMyBSZWluaGFyZFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBjb2xvciAvICggdmVjMyggMS4wICkgKyBjb2xvciApICk7XFxufVxcbiNkZWZpbmUgVW5jaGFydGVkMkhlbHBlciggeCApIG1heCggKCAoIHggKiAoIDAuMTUgKiB4ICsgMC4xMCAqIDAuNTAgKSArIDAuMjAgKiAwLjAyICkgLyAoIHggKiAoIDAuMTUgKiB4ICsgMC41MCApICsgMC4yMCAqIDAuMzAgKSApIC0gMC4wMiAvIDAuMzAsIHZlYzMoIDAuMCApIClcXG52ZWMzIFVuY2hhcnRlZDJUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggVW5jaGFydGVkMkhlbHBlciggY29sb3IgKSAvIFVuY2hhcnRlZDJIZWxwZXIoIHZlYzMoIHRvbmVNYXBwaW5nV2hpdGVQb2ludCApICkgKTtcXG59XFxudmVjMyBPcHRpbWl6ZWRDaW5lb25Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdGNvbG9yID0gbWF4KCB2ZWMzKCAwLjAgKSwgY29sb3IgLSAwLjAwNCApO1xcblxcdHJldHVybiBwb3coICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMC41ICkgKSAvICggY29sb3IgKiAoIDYuMiAqIGNvbG9yICsgMS43ICkgKyAwLjA2ICksIHZlYzMoIDIuMiApICk7XFxufVxcblwiO1xuXG52YXIgdXZfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKSB8fCBkZWZpbmVkKCBVU0VfRU1JU1NJVkVNQVAgKSB8fCBkZWZpbmVkKCBVU0VfUk9VR0hORVNTTUFQICkgfHwgZGVmaW5lZCggVVNFX01FVEFMTkVTU01BUCApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG4jZW5kaWZcIjtcblxudmFyIHV2X3BhcnNfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIHV2X3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKSB8fCBkZWZpbmVkKCBVU0VfRU1JU1NJVkVNQVAgKSB8fCBkZWZpbmVkKCBVU0VfUk9VR0hORVNTTUFQICkgfHwgZGVmaW5lZCggVVNFX01FVEFMTkVTU01BUCApXFxuXFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG4jZW5kaWZcIjtcblxudmFyIHV2Ml9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG4jZW5kaWZcIjtcblxudmFyIHV2Ml9wYXJzX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFx0YXR0cmlidXRlIHZlYzIgdXYyO1xcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFx0dlV2MiA9IHV2MjtcXG4jZW5kaWZcIjtcblxudmFyIHdvcmxkcG9zX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBESVNUQU5DRSApIHx8IGRlZmluZWQgKCBVU0VfU0hBRE9XTUFQIClcXG5cXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGJhY2tncm91bmRfZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdDJEO1xcbnZhcnlpbmcgdmVjMiB2VXY7XFxudm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdDJELCB2VXYgKTtcXG59XFxuXCI7XG5cbnZhciBiYWNrZ3JvdW5kX3ZlcnQgPSBcInZhcnlpbmcgdmVjMiB2VXY7XFxudW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xcblxcdGdsX1Bvc2l0aW9uLnogPSAxLjA7XFxufVxcblwiO1xuXG52YXIgY3ViZV9mcmFnID0gXCJ1bmlmb3JtIHNhbXBsZXJDdWJlIHRDdWJlO1xcbnVuaWZvcm0gZmxvYXQgdEZsaXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxudm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcbn1cXG5cIjtcblxudmFyIGN1YmVfdmVydCA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1Bvc2l0aW9uLnogPSBnbF9Qb3NpdGlvbi53O1xcbn1cXG5cIjtcblxudmFyIGRlcHRoX2ZyYWcgPSBcIiNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHR1bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XFxuXFx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdFxcdGRpZmZ1c2VDb2xvci5hID0gb3BhY2l0eTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyggMS4wIC0gZ2xfRnJhZ0Nvb3JkLnogKSwgb3BhY2l0eSApO1xcblxcdCNlbGlmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMVxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHBhY2tEZXB0aFRvUkdCQSggZ2xfRnJhZ0Nvb3JkLnogKTtcXG5cXHQjZW5kaWZcXG59XFxuXCI7XG5cbnZhciBkZXB0aF92ZXJ0ID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgZGlzdGFuY2VSR0JBX2ZyYWcgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG51bmlmb3JtIHZlYzMgcmVmZXJlbmNlUG9zaXRpb247XFxudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XFxudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbiAoKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xcblxcdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcXG5cXHRkaXN0ID0gc2F0dXJhdGUoIGRpc3QgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcXG59XFxuXCI7XG5cbnZhciBkaXN0YW5jZVJHQkFfdmVydCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbn1cXG5cIjtcblxudmFyIGVxdWlyZWN0X2ZyYWcgPSBcInVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcXG5cXHR2ZWMyIHNhbXBsZVVWO1xcblxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggZGlyZWN0aW9uLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRzYW1wbGVVVi54ID0gYXRhbiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcXG59XFxuXCI7XG5cbnZhciBlcXVpcmVjdF92ZXJ0ID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgbGluZWRhc2hlZF9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIjtcblxudmFyIGxpbmVkYXNoZWRfdmVydCA9IFwidW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIG1lc2hiYXNpY19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0I2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XFxuXCI7XG5cbnZhciBtZXNoYmFzaWNfdmVydCA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCI7XG5cbnZhciBtZXNobGFtYmVydF9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdCNpbmNsdWRlIDxsaWdodG1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9ICggZ2xfRnJvbnRGYWNpbmcgKSA/IHZMaWdodEZyb250IDogdkxpZ2h0QmFjaztcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSB2TGlnaHRGcm9udDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICo9IEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBkaWZmdXNlQ29sb3IucmdiICkgKiBnZXRTaGFkb3dNYXNrKCk7XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XFxuXCI7XG5cbnZhciBtZXNobGFtYmVydF92ZXJ0ID0gXCIjZGVmaW5lIExBTUJFUlRcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2xhbWJlcnRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIG1lc2htYXRjYXBfZnJhZyA9IFwiI2RlZmluZSBNQVRDQVBcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBzYW1wbGVyMkQgbWF0Y2FwO1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdHZlYzMgdmlld0RpciA9IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xcblxcdHZlYzMgeCA9IG5vcm1hbGl6ZSggdmVjMyggdmlld0Rpci56LCAwLjAsIC0gdmlld0Rpci54ICkgKTtcXG5cXHR2ZWMzIHkgPSBjcm9zcyggdmlld0RpciwgeCApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCBkb3QoIHgsIG5vcm1hbCApLCBkb3QoIHksIG5vcm1hbCApICkgKiAwLjQ5NSArIDAuNTtcXG5cXHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XFxuXFx0bWF0Y2FwQ29sb3IgPSBtYXRjYXBUZXhlbFRvTGluZWFyKCBtYXRjYXBDb2xvciApO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIjtcblxudmFyIG1lc2htYXRjYXBfdmVydCA9IFwiI2RlZmluZSBNQVRDQVBcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0XFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG59XFxuXCI7XG5cbnZhciBtZXNocGhvbmdfZnJhZyA9IFwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3Bob25nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVxcblwiO1xuXG52YXIgbWVzaHBob25nX3ZlcnQgPSBcIiNkZWZpbmUgUEhPTkdcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIG1lc2hwaHlzaWNhbF9mcmFnID0gXCIjZGVmaW5lIFBIWVNJQ0FMXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgcm91Z2huZXNzO1xcbnVuaWZvcm0gZmxvYXQgbWV0YWxuZXNzO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIFNUQU5EQVJEXFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhckNvYXQ7XFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhckNvYXRSb3VnaG5lc3M7XFxuI2VuZGlmXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVxcblwiO1xuXG52YXIgbWVzaHBoeXNpY2FsX3ZlcnQgPSBcIiNkZWZpbmUgUEhZU0lDQUxcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCI7XG5cbnZhciBub3JtYWxfZnJhZyA9IFwiI2RlZmluZSBOT1JNQUxcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCAoIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIE9CSkVDVFNQQUNFX05PUk1BTE1BUCApIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrTm9ybWFsVG9SR0IoIG5vcm1hbCApLCBvcGFjaXR5ICk7XFxufVxcblwiO1xuXG52YXIgbm9ybWFsX3ZlcnQgPSBcIiNkZWZpbmUgTk9STUFMXFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCAoIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIE9CSkVDVFNQQUNFX05PUk1BTE1BUCApIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8ICggZGVmaW5lZCggVVNFX05PUk1BTE1BUCApICYmICEgZGVmaW5lZCggT0JKRUNUU1BBQ0VfTk9STUFMTUFQICkgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cXG5cIjtcblxudmFyIHBvaW50c19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVxcblwiO1xuXG52YXIgcG9pbnRzX3ZlcnQgPSBcInVuaWZvcm0gZmxvYXQgc2l6ZTtcXG51bmlmb3JtIGZsb2F0IHNjYWxlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9ICggcHJvamVjdGlvbk1hdHJpeFsgMiBdWyAzIF0gPT0gLSAxLjAgKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBnbF9Qb2ludFNpemUgKj0gKCBzY2FsZSAvIC0gbXZQb3NpdGlvbi56ICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIHNoYWRvd19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgY29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIGNvbG9yLCBvcGFjaXR5ICogKCAxLjAgLSBnZXRTaGFkb3dNYXNrKCkgKSApO1xcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVxcblwiO1xuXG52YXIgc2hhZG93X3ZlcnQgPSBcIiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCI7XG5cbnZhciBzcHJpdGVfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVxcblwiO1xuXG52YXIgc3ByaXRlX3ZlcnQgPSBcInVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIGNlbnRlcjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcblxcdHZlYzIgc2NhbGU7XFxuXFx0c2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54LCBtb2RlbE1hdHJpeFsgMCBdLnksIG1vZGVsTWF0cml4WyAwIF0ueiApICk7XFxuXFx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XFxuXFx0I2lmbmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gKCBwcm9qZWN0aW9uTWF0cml4WyAyIF1bIDMgXSA9PSAtIDEuMCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIHNjYWxlICo9IC0gbXZQb3NpdGlvbi56O1xcblxcdCNlbmRpZlxcblxcdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XFxuXFx0dmVjMiByb3RhdGVkUG9zaXRpb247XFxuXFx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRtdlBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFvbWFwX2ZyYWdtZW50OiBhb21hcF9mcmFnbWVudCxcblx0YW9tYXBfcGFyc19mcmFnbWVudDogYW9tYXBfcGFyc19mcmFnbWVudCxcblx0YmVnaW5fdmVydGV4OiBiZWdpbl92ZXJ0ZXgsXG5cdGJlZ2lubm9ybWFsX3ZlcnRleDogYmVnaW5ub3JtYWxfdmVydGV4LFxuXHRic2RmczogYnNkZnMsXG5cdGJ1bXBtYXBfcGFyc19mcmFnbWVudDogYnVtcG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCxcblx0Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCxcblx0Y29sb3JfZnJhZ21lbnQ6IGNvbG9yX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX2ZyYWdtZW50OiBjb2xvcl9wYXJzX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX3ZlcnRleDogY29sb3JfcGFyc192ZXJ0ZXgsXG5cdGNvbG9yX3ZlcnRleDogY29sb3JfdmVydGV4LFxuXHRjb21tb246IGNvbW1vbixcblx0Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50OiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQsXG5cdGRlZmF1bHRub3JtYWxfdmVydGV4OiBkZWZhdWx0bm9ybWFsX3ZlcnRleCxcblx0ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgsXG5cdGVtaXNzaXZlbWFwX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9mcmFnbWVudCxcblx0ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudDogZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCxcblx0ZW5jb2RpbmdzX2ZyYWdtZW50OiBlbmNvZGluZ3NfZnJhZ21lbnQsXG5cdGVuY29kaW5nc19wYXJzX2ZyYWdtZW50OiBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX2ZyYWdtZW50OiBlbnZtYXBfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsXG5cdGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcblx0Zm9nX3ZlcnRleDogZm9nX3ZlcnRleCxcblx0Zm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxuXHRmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsXG5cdGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX2ZyYWdtZW50OiBsaWdodG1hcF9mcmFnbWVudCxcblx0bGlnaHRtYXBfcGFyc19mcmFnbWVudDogbGlnaHRtYXBfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2xhbWJlcnRfdmVydGV4OiBsaWdodHNfbGFtYmVydF92ZXJ0ZXgsXG5cdGxpZ2h0c19wYXJzX2JlZ2luOiBsaWdodHNfcGFyc19iZWdpbixcblx0bGlnaHRzX3Bob25nX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2ZyYWdtZW50X2JlZ2luOiBsaWdodHNfZnJhZ21lbnRfYmVnaW4sXG5cdGxpZ2h0c19mcmFnbWVudF9tYXBzOiBsaWdodHNfZnJhZ21lbnRfbWFwcyxcblx0bGlnaHRzX2ZyYWdtZW50X2VuZDogbGlnaHRzX2ZyYWdtZW50X2VuZCxcblx0bG9nZGVwdGhidWZfZnJhZ21lbnQ6IGxvZ2RlcHRoYnVmX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleDogbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXG5cdGxvZ2RlcHRoYnVmX3ZlcnRleDogbG9nZGVwdGhidWZfdmVydGV4LFxuXHRtYXBfZnJhZ21lbnQ6IG1hcF9mcmFnbWVudCxcblx0bWFwX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRtYXBfcGFydGljbGVfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFxuXHRtZXRhbG5lc3NtYXBfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50LFxuXHRtb3JwaG5vcm1hbF92ZXJ0ZXg6IG1vcnBobm9ybWFsX3ZlcnRleCxcblx0bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg6IG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFxuXHRtb3JwaHRhcmdldF92ZXJ0ZXg6IG1vcnBodGFyZ2V0X3ZlcnRleCxcblx0bm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdG5vcm1hbF9mcmFnbWVudF9tYXBzOiBub3JtYWxfZnJhZ21lbnRfbWFwcyxcblx0bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ6IG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0dXYyX3BhcnNfZnJhZ21lbnQ6IHV2Ml9wYXJzX2ZyYWdtZW50LFxuXHR1djJfcGFyc192ZXJ0ZXg6IHV2Ml9wYXJzX3ZlcnRleCxcblx0dXYyX3ZlcnRleDogdXYyX3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF9mcmFnOiBiYWNrZ3JvdW5kX2ZyYWcsXG5cdGJhY2tncm91bmRfdmVydDogYmFja2dyb3VuZF92ZXJ0LFxuXHRjdWJlX2ZyYWc6IGN1YmVfZnJhZyxcblx0Y3ViZV92ZXJ0OiBjdWJlX3ZlcnQsXG5cdGRlcHRoX2ZyYWc6IGRlcHRoX2ZyYWcsXG5cdGRlcHRoX3ZlcnQ6IGRlcHRoX3ZlcnQsXG5cdGRpc3RhbmNlUkdCQV9mcmFnOiBkaXN0YW5jZVJHQkFfZnJhZyxcblx0ZGlzdGFuY2VSR0JBX3ZlcnQ6IGRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRlcXVpcmVjdF9mcmFnOiBlcXVpcmVjdF9mcmFnLFxuXHRlcXVpcmVjdF92ZXJ0OiBlcXVpcmVjdF92ZXJ0LFxuXHRsaW5lZGFzaGVkX2ZyYWc6IGxpbmVkYXNoZWRfZnJhZyxcblx0bGluZWRhc2hlZF92ZXJ0OiBsaW5lZGFzaGVkX3ZlcnQsXG5cdG1lc2hiYXNpY19mcmFnOiBtZXNoYmFzaWNfZnJhZyxcblx0bWVzaGJhc2ljX3ZlcnQ6IG1lc2hiYXNpY192ZXJ0LFxuXHRtZXNobGFtYmVydF9mcmFnOiBtZXNobGFtYmVydF9mcmFnLFxuXHRtZXNobGFtYmVydF92ZXJ0OiBtZXNobGFtYmVydF92ZXJ0LFxuXHRtZXNobWF0Y2FwX2ZyYWc6IG1lc2htYXRjYXBfZnJhZyxcblx0bWVzaG1hdGNhcF92ZXJ0OiBtZXNobWF0Y2FwX3ZlcnQsXG5cdG1lc2hwaG9uZ19mcmFnOiBtZXNocGhvbmdfZnJhZyxcblx0bWVzaHBob25nX3ZlcnQ6IG1lc2hwaG9uZ192ZXJ0LFxuXHRtZXNocGh5c2ljYWxfZnJhZzogbWVzaHBoeXNpY2FsX2ZyYWcsXG5cdG1lc2hwaHlzaWNhbF92ZXJ0OiBtZXNocGh5c2ljYWxfdmVydCxcblx0bm9ybWFsX2ZyYWc6IG5vcm1hbF9mcmFnLFxuXHRub3JtYWxfdmVydDogbm9ybWFsX3ZlcnQsXG5cdHBvaW50c19mcmFnOiBwb2ludHNfZnJhZyxcblx0cG9pbnRzX3ZlcnQ6IHBvaW50c192ZXJ0LFxuXHRzaGFkb3dfZnJhZzogc2hhZG93X2ZyYWcsXG5cdHNoYWRvd192ZXJ0OiBzaGFkb3dfdmVydCxcblx0c3ByaXRlX2ZyYWc6IHNwcml0ZV9mcmFnLFxuXHRzcHJpdGVfdmVydDogc3ByaXRlX3ZlcnRcbn07XG5cbi8qKlxuICogVW5pZm9ybSBVdGlsaXRpZXNcbiAqL1xuXG52YXIgVW5pZm9ybXNVdGlscyA9IHtcblxuXHRtZXJnZTogZnVuY3Rpb24gKCB1bmlmb3JtcyApIHtcblxuXHRcdHZhciBtZXJnZWQgPSB7fTtcblxuXHRcdGZvciAoIHZhciB1ID0gMDsgdSA8IHVuaWZvcm1zLmxlbmd0aDsgdSArKyApIHtcblxuXHRcdFx0dmFyIHRtcCA9IHRoaXMuY2xvbmUoIHVuaWZvcm1zWyB1IF0gKTtcblxuXHRcdFx0Zm9yICggdmFyIHAgaW4gdG1wICkge1xuXG5cdFx0XHRcdG1lcmdlZFsgcCBdID0gdG1wWyBwIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtZXJnZWQ7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCB1bmlmb3Jtc19zcmMgKSB7XG5cblx0XHR2YXIgdW5pZm9ybXNfZHN0ID0ge307XG5cblx0XHRmb3IgKCB2YXIgdSBpbiB1bmlmb3Jtc19zcmMgKSB7XG5cblx0XHRcdHVuaWZvcm1zX2RzdFsgdSBdID0ge307XG5cblx0XHRcdGZvciAoIHZhciBwIGluIHVuaWZvcm1zX3NyY1sgdSBdICkge1xuXG5cdFx0XHRcdHZhciBwYXJhbWV0ZXJfc3JjID0gdW5pZm9ybXNfc3JjWyB1IF1bIHAgXTtcblxuXHRcdFx0XHRpZiAoIHBhcmFtZXRlcl9zcmMgJiYgKCBwYXJhbWV0ZXJfc3JjLmlzQ29sb3IgfHxcblx0XHRcdFx0XHRwYXJhbWV0ZXJfc3JjLmlzTWF0cml4MyB8fCBwYXJhbWV0ZXJfc3JjLmlzTWF0cml4NCB8fFxuXHRcdFx0XHRcdHBhcmFtZXRlcl9zcmMuaXNWZWN0b3IyIHx8IHBhcmFtZXRlcl9zcmMuaXNWZWN0b3IzIHx8IHBhcmFtZXRlcl9zcmMuaXNWZWN0b3I0IHx8XG5cdFx0XHRcdFx0cGFyYW1ldGVyX3NyYy5pc1RleHR1cmUgKSApIHtcblxuXHRcdFx0XHRcdHVuaWZvcm1zX2RzdFsgdSBdWyBwIF0gPSBwYXJhbWV0ZXJfc3JjLmNsb25lKCk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggcGFyYW1ldGVyX3NyYyApICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNfZHN0WyB1IF1bIHAgXSA9IHBhcmFtZXRlcl9zcmMuc2xpY2UoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNfZHN0WyB1IF1bIHAgXSA9IHBhcmFtZXRlcl9zcmM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5pZm9ybXNfZHN0O1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBDb2xvcktleXdvcmRzID0geyAnYWxpY2VibHVlJzogMHhGMEY4RkYsICdhbnRpcXVld2hpdGUnOiAweEZBRUJENywgJ2FxdWEnOiAweDAwRkZGRiwgJ2FxdWFtYXJpbmUnOiAweDdGRkZENCwgJ2F6dXJlJzogMHhGMEZGRkYsXG5cdCdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMixcblx0J2Jyb3duJzogMHhBNTJBMkEsICdidXJseXdvb2QnOiAweERFQjg4NywgJ2NhZGV0Ymx1ZSc6IDB4NUY5RUEwLCAnY2hhcnRyZXVzZSc6IDB4N0ZGRjAwLCAnY2hvY29sYXRlJzogMHhEMjY5MUUsICdjb3JhbCc6IDB4RkY3RjUwLFxuXHQnY29ybmZsb3dlcmJsdWUnOiAweDY0OTVFRCwgJ2Nvcm5zaWxrJzogMHhGRkY4REMsICdjcmltc29uJzogMHhEQzE0M0MsICdjeWFuJzogMHgwMEZGRkYsICdkYXJrYmx1ZSc6IDB4MDAwMDhCLCAnZGFya2N5YW4nOiAweDAwOEI4Qixcblx0J2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsXG5cdCdkYXJrb2xpdmVncmVlbic6IDB4NTU2QjJGLCAnZGFya29yYW5nZSc6IDB4RkY4QzAwLCAnZGFya29yY2hpZCc6IDB4OTkzMkNDLCAnZGFya3JlZCc6IDB4OEIwMDAwLCAnZGFya3NhbG1vbic6IDB4RTk5NjdBLCAnZGFya3NlYWdyZWVuJzogMHg4RkJDOEYsXG5cdCdkYXJrc2xhdGVibHVlJzogMHg0ODNEOEIsICdkYXJrc2xhdGVncmF5JzogMHgyRjRGNEYsICdkYXJrc2xhdGVncmV5JzogMHgyRjRGNEYsICdkYXJrdHVycXVvaXNlJzogMHgwMENFRDEsICdkYXJrdmlvbGV0JzogMHg5NDAwRDMsXG5cdCdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLFxuXHQnZmxvcmFsd2hpdGUnOiAweEZGRkFGMCwgJ2ZvcmVzdGdyZWVuJzogMHgyMjhCMjIsICdmdWNoc2lhJzogMHhGRjAwRkYsICdnYWluc2Jvcm8nOiAweERDRENEQywgJ2dob3N0d2hpdGUnOiAweEY4RjhGRiwgJ2dvbGQnOiAweEZGRDcwMCxcblx0J2dvbGRlbnJvZCc6IDB4REFBNTIwLCAnZ3JheSc6IDB4ODA4MDgwLCAnZ3JlZW4nOiAweDAwODAwMCwgJ2dyZWVueWVsbG93JzogMHhBREZGMkYsICdncmV5JzogMHg4MDgwODAsICdob25leWRldyc6IDB4RjBGRkYwLCAnaG90cGluayc6IDB4RkY2OUI0LFxuXHQnaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLFxuXHQnbGVtb25jaGlmZm9uJzogMHhGRkZBQ0QsICdsaWdodGJsdWUnOiAweEFERDhFNiwgJ2xpZ2h0Y29yYWwnOiAweEYwODA4MCwgJ2xpZ2h0Y3lhbic6IDB4RTBGRkZGLCAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiAweEZBRkFEMiwgJ2xpZ2h0Z3JheSc6IDB4RDNEM0QzLFxuXHQnbGlnaHRncmVlbic6IDB4OTBFRTkwLCAnbGlnaHRncmV5JzogMHhEM0QzRDMsICdsaWdodHBpbmsnOiAweEZGQjZDMSwgJ2xpZ2h0c2FsbW9uJzogMHhGRkEwN0EsICdsaWdodHNlYWdyZWVuJzogMHgyMEIyQUEsICdsaWdodHNreWJsdWUnOiAweDg3Q0VGQSxcblx0J2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMixcblx0J2xpbmVuJzogMHhGQUYwRTYsICdtYWdlbnRhJzogMHhGRjAwRkYsICdtYXJvb24nOiAweDgwMDAwMCwgJ21lZGl1bWFxdWFtYXJpbmUnOiAweDY2Q0RBQSwgJ21lZGl1bWJsdWUnOiAweDAwMDBDRCwgJ21lZGl1bW9yY2hpZCc6IDB4QkE1NUQzLFxuXHQnbWVkaXVtcHVycGxlJzogMHg5MzcwREIsICdtZWRpdW1zZWFncmVlbic6IDB4M0NCMzcxLCAnbWVkaXVtc2xhdGVibHVlJzogMHg3QjY4RUUsICdtZWRpdW1zcHJpbmdncmVlbic6IDB4MDBGQTlBLCAnbWVkaXVtdHVycXVvaXNlJzogMHg0OEQxQ0MsXG5cdCdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELFxuXHQnbmF2eSc6IDB4MDAwMDgwLCAnb2xkbGFjZSc6IDB4RkRGNUU2LCAnb2xpdmUnOiAweDgwODAwMCwgJ29saXZlZHJhYic6IDB4NkI4RTIzLCAnb3JhbmdlJzogMHhGRkE1MDAsICdvcmFuZ2VyZWQnOiAweEZGNDUwMCwgJ29yY2hpZCc6IDB4REE3MEQ2LFxuXHQncGFsZWdvbGRlbnJvZCc6IDB4RUVFOEFBLCAncGFsZWdyZWVuJzogMHg5OEZCOTgsICdwYWxldHVycXVvaXNlJzogMHhBRkVFRUUsICdwYWxldmlvbGV0cmVkJzogMHhEQjcwOTMsICdwYXBheWF3aGlwJzogMHhGRkVGRDUsICdwZWFjaHB1ZmYnOiAweEZGREFCOSxcblx0J3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4Rixcblx0J3JveWFsYmx1ZSc6IDB4NDE2OUUxLCAnc2FkZGxlYnJvd24nOiAweDhCNDUxMywgJ3NhbG1vbic6IDB4RkE4MDcyLCAnc2FuZHlicm93bic6IDB4RjRBNDYwLCAnc2VhZ3JlZW4nOiAweDJFOEI1NywgJ3NlYXNoZWxsJzogMHhGRkY1RUUsXG5cdCdzaWVubmEnOiAweEEwNTIyRCwgJ3NpbHZlcic6IDB4QzBDMEMwLCAnc2t5Ymx1ZSc6IDB4ODdDRUVCLCAnc2xhdGVibHVlJzogMHg2QTVBQ0QsICdzbGF0ZWdyYXknOiAweDcwODA5MCwgJ3NsYXRlZ3JleSc6IDB4NzA4MDkwLCAnc25vdyc6IDB4RkZGQUZBLFxuXHQnc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLFxuXHQndmlvbGV0JzogMHhFRTgyRUUsICd3aGVhdCc6IDB4RjVERUIzLCAnd2hpdGUnOiAweEZGRkZGRiwgJ3doaXRlc21va2UnOiAweEY1RjVGNSwgJ3llbGxvdyc6IDB4RkZGRjAwLCAneWVsbG93Z3JlZW4nOiAweDlBQ0QzMiB9O1xuXG5mdW5jdGlvbiBDb2xvciggciwgZywgYiApIHtcblxuXHRpZiAoIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHQvLyByIGlzIFRIUkVFLkNvbG9yLCBoZXggb3Igc3RyaW5nXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCByICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzLnNldFJHQiggciwgZywgYiApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbG9yLnByb3RvdHlwZSwge1xuXG5cdGlzQ29sb3I6IHRydWUsXG5cblx0cjogMSwgZzogMSwgYjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdHRoaXMuY29weSggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHRoaXMuc2V0SGV4KCB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0dGhpcy5zZXRTdHlsZSggdmFsdWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMuciA9IHNjYWxhcjtcblx0XHR0aGlzLmcgPSBzY2FsYXI7XG5cdFx0dGhpcy5iID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIZXg6IGZ1bmN0aW9uICggaGV4ICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSR0I6IGZ1bmN0aW9uICggciwgZywgYiApIHtcblxuXHRcdHRoaXMuciA9IHI7XG5cdFx0dGhpcy5nID0gZztcblx0XHR0aGlzLmIgPSBiO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIU0w6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIHQgKSB7XG5cblx0XHRcdGlmICggdCA8IDAgKSB0ICs9IDE7XG5cdFx0XHRpZiAoIHQgPiAxICkgdCAtPSAxO1xuXHRcdFx0aWYgKCB0IDwgMSAvIDYgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiB0O1xuXHRcdFx0aWYgKCB0IDwgMSAvIDIgKSByZXR1cm4gcTtcblx0XHRcdGlmICggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTtcblx0XHRcdHJldHVybiBwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldEhTTCggaCwgcywgbCApIHtcblxuXHRcdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblx0XHRcdGggPSBfTWF0aC5ldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTtcblx0XHRcdHMgPSBfTWF0aC5jbGFtcCggcywgMCwgMSApO1xuXHRcdFx0bCA9IF9NYXRoLmNsYW1wKCBsLCAwLCAxICk7XG5cblx0XHRcdGlmICggcyA9PT0gMCApIHtcblxuXHRcdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBwID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSAoIGwgKiBzICk7XG5cdFx0XHRcdHZhciBxID0gKCAyICogbCApIC0gcDtcblxuXHRcdFx0XHR0aGlzLnIgPSBodWUycmdiKCBxLCBwLCBoICsgMSAvIDMgKTtcblx0XHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0XHR0aGlzLmIgPSBodWUycmdiKCBxLCBwLCBoIC0gMSAvIDMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldFN0eWxlOiBmdW5jdGlvbiAoIHN0eWxlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0dmFyIG07XG5cblx0XHRpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVxcKFxccyooW15cXCldKilcXCkvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIHJnYiAvIGhzbFxuXG5cdFx0XHR2YXIgY29sb3I7XG5cdFx0XHR2YXIgbmFtZSA9IG1bIDEgXTtcblx0XHRcdHZhciBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDI1NSwwLDApIHJnYmEoMjU1LDAsMCwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDI1NTtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAyNTU7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDEwMDtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAxMDA7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaHNsJzpcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL14oWzAtOV0qXFwuP1swLTldKylcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBoc2woMTIwLDUwJSw1MCUpIGhzbGEoMTIwLDUwJSw1MCUsMC41KVxuXHRcdFx0XHRcdFx0dmFyIGggPSBwYXJzZUZsb2F0KCBjb2xvclsgMSBdICkgLyAzNjA7XG5cdFx0XHRcdFx0XHR2YXIgcyA9IHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dmFyIGwgPSBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSAvIDEwMDtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbSA9IC9eXFwjKFtBLUZhLWYwLTldKykkLy5leGVjKCBzdHlsZSApICkge1xuXG5cdFx0XHQvLyBoZXggY29sb3JcblxuXHRcdFx0dmFyIGhleCA9IG1bIDEgXTtcblx0XHRcdHZhciBzaXplID0gaGV4Lmxlbmd0aDtcblxuXHRcdFx0aWYgKCBzaXplID09PSAzICkge1xuXG5cdFx0XHRcdC8vICNmZjBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDIgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0fSBlbHNlIGlmICggc2l6ZSA9PT0gNiApIHtcblxuXHRcdFx0XHQvLyAjZmYwMDAwXG5cdFx0XHRcdHRoaXMuciA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAwICkgKyBoZXguY2hhckF0KCAxICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuZyA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAyICkgKyBoZXguY2hhckF0KCAzICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuYiA9IHBhcnNlSW50KCBoZXguY2hhckF0KCA0ICkgKyBoZXguY2hhckF0KCA1ICksIDE2ICkgLyAyNTU7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gY29sb3Iga2V5d29yZHNcblx0XHRcdHZhciBoZXggPSBDb2xvcktleXdvcmRzWyBzdHlsZSBdO1xuXG5cdFx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIHJlZFxuXHRcdFx0XHR0aGlzLnNldEhleCggaGV4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gdW5rbm93biBjb2xvclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlHYW1tYVRvTGluZWFyOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dGhpcy5yID0gTWF0aC5wb3coIGNvbG9yLnIsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5nID0gTWF0aC5wb3coIGNvbG9yLmcsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5iID0gTWF0aC5wb3coIGNvbG9yLmIsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dmFyIHNhZmVJbnZlcnNlID0gKCBnYW1tYUZhY3RvciA+IDAgKSA/ICggMS4wIC8gZ2FtbWFGYWN0b3IgKSA6IDEuMDtcblxuXHRcdHRoaXMuciA9IE1hdGgucG93KCBjb2xvci5yLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuZyA9IE1hdGgucG93KCBjb2xvci5nLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBzYWZlSW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKCBnYW1tYUZhY3RvciApIHtcblxuXHRcdHRoaXMuY29weUdhbW1hVG9MaW5lYXIoIHRoaXMsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGdhbW1hRmFjdG9yICkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9HYW1tYSggdGhpcywgZ2FtbWFGYWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0ZnVuY3Rpb24gU1JHQlRvTGluZWFyKCBjICkge1xuXG5cdFx0XHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb3B5U1JHQlRvTGluZWFyKCBjb2xvciApIHtcblxuXHRcdFx0dGhpcy5yID0gU1JHQlRvTGluZWFyKCBjb2xvci5yICk7XG5cdFx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHRcdHRoaXMuYiA9IFNSR0JUb0xpbmVhciggY29sb3IuYiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNvcHlMaW5lYXJUb1NSR0I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZ1bmN0aW9uIExpbmVhclRvU1JHQiggYyApIHtcblxuXHRcdFx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvcHlMaW5lYXJUb1NSR0IoIGNvbG9yICkge1xuXG5cdFx0XHR0aGlzLnIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLnIgKTtcblx0XHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdFx0dGhpcy5iID0gTGluZWFyVG9TUkdCKCBjb2xvci5iICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udmVydFNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb3B5U1JHQlRvTGluZWFyKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb1NSR0I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29weUxpbmVhclRvU1JHQiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRIZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAoIHRoaXMuciAqIDI1NSApIDw8IDE2IF4gKCB0aGlzLmcgKiAyNTUgKSA8PCA4IF4gKCB0aGlzLmIgKiAyNTUgKSA8PCAwO1xuXG5cdH0sXG5cblx0Z2V0SGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gKCAnMDAwMDAwJyArIHRoaXMuZ2V0SGV4KCkudG9TdHJpbmcoIDE2ICkgKS5zbGljZSggLSA2ICk7XG5cblx0fSxcblxuXHRnZXRIU0w6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiAuZ2V0SFNMKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmI7XG5cblx0XHR2YXIgbWF4ID0gTWF0aC5tYXgoIHIsIGcsIGIgKTtcblx0XHR2YXIgbWluID0gTWF0aC5taW4oIHIsIGcsIGIgKTtcblxuXHRcdHZhciBodWUsIHNhdHVyYXRpb247XG5cdFx0dmFyIGxpZ2h0bmVzcyA9ICggbWluICsgbWF4ICkgLyAyLjA7XG5cblx0XHRpZiAoIG1pbiA9PT0gbWF4ICkge1xuXG5cdFx0XHRodWUgPSAwO1xuXHRcdFx0c2F0dXJhdGlvbiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgZGVsdGEgPSBtYXggLSBtaW47XG5cblx0XHRcdHNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAoIG1heCArIG1pbiApIDogZGVsdGEgLyAoIDIgLSBtYXggLSBtaW4gKTtcblxuXHRcdFx0c3dpdGNoICggbWF4ICkge1xuXG5cdFx0XHRcdGNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgZzogaHVlID0gKCBiIC0gciApIC8gZGVsdGEgKyAyOyBicmVhaztcblx0XHRcdFx0Y2FzZSBiOiBodWUgPSAoIHIgLSBnICkgLyBkZWx0YSArIDQ7IGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGh1ZSAvPSA2O1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmggPSBodWU7XG5cdFx0dGFyZ2V0LnMgPSBzYXR1cmF0aW9uO1xuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGdldFN0eWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gJ3JnYignICsgKCAoIHRoaXMuciAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuZyAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuYiAqIDI1NSApIHwgMCApICsgJyknO1xuXG5cdH0sXG5cblx0b2Zmc2V0SFNMOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaHNsID0ge307XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gKCBoLCBzLCBsICkge1xuXG5cdFx0XHR0aGlzLmdldEhTTCggaHNsICk7XG5cblx0XHRcdGhzbC5oICs9IGg7IGhzbC5zICs9IHM7IGhzbC5sICs9IGw7XG5cblx0XHRcdHRoaXMuc2V0SFNMKCBoc2wuaCwgaHNsLnMsIGhzbC5sICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YWRkOiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICs9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICs9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICs9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZENvbG9yczogZnVuY3Rpb24gKCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgY29sb3IyLnI7XG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyBjb2xvcjIuZztcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMuciArPSBzO1xuXHRcdHRoaXMuZyArPSBzO1xuXHRcdHRoaXMuYiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWI6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IE1hdGgubWF4KCAwLCB0aGlzLmcgLSBjb2xvci5nICk7XG5cdFx0dGhpcy5iID0gTWF0aC5tYXgoIDAsIHRoaXMuYiAtIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgKj0gY29sb3Iucjtcblx0XHR0aGlzLmcgKj0gY29sb3IuZztcblx0XHR0aGlzLmIgKj0gY29sb3IuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMuciAqPSBzO1xuXHRcdHRoaXMuZyAqPSBzO1xuXHRcdHRoaXMuYiAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhO1xuXHRcdHRoaXMuZyArPSAoIGNvbG9yLmcgLSB0aGlzLmcgKSAqIGFscGhhO1xuXHRcdHRoaXMuYiArPSAoIGNvbG9yLmIgLSB0aGlzLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwSFNMOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaHNsQSA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXHRcdHZhciBoc2xCID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbGVycEhTTCggY29sb3IsIGFscGhhICkge1xuXG5cdFx0XHR0aGlzLmdldEhTTCggaHNsQSApO1xuXHRcdFx0Y29sb3IuZ2V0SFNMKCBoc2xCICk7XG5cblx0XHRcdHZhciBoID0gX01hdGgubGVycCggaHNsQS5oLCBoc2xCLmgsIGFscGhhICk7XG5cdFx0XHR2YXIgcyA9IF9NYXRoLmxlcnAoIGhzbEEucywgaHNsQi5zLCBhbHBoYSApO1xuXHRcdFx0dmFyIGwgPSBfTWF0aC5sZXJwKCBoc2xBLmwsIGhzbEIubCwgYWxwaGEgKTtcblxuXHRcdFx0dGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHJldHVybiAoIGMuciA9PT0gdGhpcy5yICkgJiYgKCBjLmcgPT09IHRoaXMuZyApICYmICggYy5iID09PSB0aGlzLmIgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLnIgPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5nID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5yO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLmc7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuYjtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0SGV4KCk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbiAqL1xuXG52YXIgVW5pZm9ybXNMaWIgPSB7XG5cblx0Y29tbW9uOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZWVlZWVlICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXG5cdH0sXG5cblx0c3BlY3VsYXJtYXA6IHtcblxuXHRcdHNwZWN1bGFyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cblx0fSxcblxuXHRlbnZtYXA6IHtcblxuXHRcdGVudk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGZsaXBFbnZNYXA6IHsgdmFsdWU6IC0gMSB9LFxuXHRcdHJlZmxlY3Rpdml0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0cmVmcmFjdGlvblJhdGlvOiB7IHZhbHVlOiAwLjk4IH0sXG5cdFx0bWF4TWlwTGV2ZWw6IHsgdmFsdWU6IDAgfVxuXG5cdH0sXG5cblx0YW9tYXA6IHtcblxuXHRcdGFvTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0ZW1pc3NpdmVtYXA6IHtcblxuXHRcdGVtaXNzaXZlTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDEsIDEgKSB9XG5cblx0fSxcblxuXHRkaXNwbGFjZW1lbnRtYXA6IHtcblxuXHRcdGRpc3BsYWNlbWVudE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRyb3VnaG5lc3NtYXA6IHtcblxuXHRcdHJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRtZXRhbG5lc3NtYXA6IHtcblxuXHRcdG1ldGFsbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfVxuXG5cdH0sXG5cblx0bGlnaHRzOiB7XG5cblx0XHRhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRzcG90TGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblx0XHRcdGNvbmVDb3M6IHt9LFxuXHRcdFx0cGVudW1icmFDb3M6IHt9LFxuXHRcdFx0ZGVjYXk6IHt9LFxuXG5cdFx0XHRzaGFkb3c6IHt9LFxuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRwb2ludExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRlY2F5OiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9LFxuXHRcdFx0c2hhZG93Q2FtZXJhTmVhcjoge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFGYXI6IHt9XG5cdFx0fSB9LFxuXG5cdFx0cG9pbnRTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0cG9pbnRTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRoZW1pc3BoZXJlTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdHNreUNvbG9yOiB7fSxcblx0XHRcdGdyb3VuZENvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IEJSREYgZGF0YSBuZWVkcyB0byBiZSBtb3ZlZCBmcm9tIGV4YW1wbGUgdG8gbWFpbiBzcmNcblx0XHRyZWN0QXJlYUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdHdpZHRoOiB7fSxcblx0XHRcdGhlaWdodDoge31cblx0XHR9IH1cblxuXHR9LFxuXG5cdHBvaW50czoge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGVlZWVlZSApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2l6ZTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2NhbGU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGVlZWVlZSApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0Y2VudGVyOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSB9LFxuXHRcdHJvdGF0aW9uOiB7IHZhbHVlOiAwLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqL1xuXG52YXIgU2hhZGVyTGliID0ge1xuXG5cdGJhc2ljOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX2ZyYWdcblxuXHR9LFxuXG5cdGxhbWJlcnQ6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF9mcmFnXG5cblx0fSxcblxuXHRwaG9uZzoge1xuXG5cdFx0dW5pZm9ybXM6IFVuaWZvcm1zVXRpbHMubWVyZ2UoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmdyYWRpZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MTExMTExICkgfSxcblx0XHRcdFx0c2hpbmluZXNzOiB7IHZhbHVlOiAzMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBob25nX2ZyYWdcblxuXHR9LFxuXG5cdHN0YW5kYXJkOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLnJvdWdobmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLm1ldGFsbmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRyb3VnaG5lc3M6IHsgdmFsdWU6IDAuNSB9LFxuXHRcdFx0XHRtZXRhbG5lc3M6IHsgdmFsdWU6IDAuNSB9LFxuXHRcdFx0XHRlbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSAvLyB0ZW1wb3Jhcnlcblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG5cdH0sXG5cblx0bWF0Y2FwOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0bWF0Y2FwOiB7IHZhbHVlOiBudWxsIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF9mcmFnXG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5wb2ludHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZ1xuXG5cdH0sXG5cblx0ZGFzaGVkOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRzY2FsZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRkYXNoU2l6ZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHR0b3RhbFNpemU6IHsgdmFsdWU6IDIgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX2ZyYWdcblxuXHR9LFxuXG5cdGRlcHRoOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF9mcmFnXG5cblx0fSxcblxuXHRub3JtYWw6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubm9ybWFsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm5vcm1hbF9mcmFnXG5cblx0fSxcblxuXHRzcHJpdGU6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcHJpdGUsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfZnJhZ1xuXG5cdH0sXG5cblx0YmFja2dyb3VuZDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0MkQ6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfZnJhZ1xuXG5cdH0sXG5cdC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly9cdEN1YmUgbWFwIHNoYWRlclxuXHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdGN1YmU6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR0Q3ViZTogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dEZsaXA6IHsgdmFsdWU6IC0gMSB9LFxuXHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfZnJhZ1xuXG5cdH0sXG5cblx0ZXF1aXJlY3Q6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF9mcmFnXG5cblx0fSxcblxuXHRkaXN0YW5jZVJHQkE6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdHJlZmVyZW5jZVBvc2l0aW9uOiB7IHZhbHVlOiBuZXcgVmVjdG9yMygpIH0sXG5cdFx0XHRcdG5lYXJEaXN0YW5jZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRmYXJEaXN0YW5jZTogeyB2YWx1ZTogMTAwMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGlzdGFuY2VSR0JBX2ZyYWdcblxuXHR9LFxuXG5cdHNoYWRvdzoge1xuXG5cdFx0dW5pZm9ybXM6IFVuaWZvcm1zVXRpbHMubWVyZ2UoIFtcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0Y29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMCApIH0sXG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9LFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd19mcmFnXG5cblx0fVxuXG59O1xuXG5TaGFkZXJMaWIucGh5c2ljYWwgPSB7XG5cblx0dW5pZm9ybXM6IFVuaWZvcm1zVXRpbHMubWVyZ2UoIFtcblx0XHRTaGFkZXJMaWIuc3RhbmRhcmQudW5pZm9ybXMsXG5cdFx0e1xuXHRcdFx0Y2xlYXJDb2F0OiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRjbGVhckNvYXRSb3VnaG5lc3M6IHsgdmFsdWU6IDAgfVxuXHRcdH1cblx0XSApLFxuXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xBbmltYXRpb24oKSB7XG5cblx0dmFyIGNvbnRleHQgPSBudWxsO1xuXHR2YXIgaXNBbmltYXRpbmcgPSBmYWxzZTtcblx0dmFyIGFuaW1hdGlvbkxvb3AgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0aWYgKCBpc0FuaW1hdGluZyA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRhbmltYXRpb25Mb29wKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0Y29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSByZXR1cm47XG5cdFx0XHRpZiAoIGFuaW1hdGlvbkxvb3AgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0c2V0QW5pbWF0aW9uTG9vcDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdFx0YW5pbWF0aW9uTG9vcCA9IGNhbGxiYWNrO1xuXG5cdFx0fSxcblxuXHRcdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnRleHQgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEF0dHJpYnV0ZXMoIGdsICkge1xuXG5cdHZhciBidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHR2YXIgdXNhZ2UgPSBhdHRyaWJ1dGUuZHluYW1pYyA/IDM1MDQ4IDogMzUwNDQ7XG5cblx0XHR2YXIgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKTtcblxuXHRcdGF0dHJpYnV0ZS5vblVwbG9hZENhbGxiYWNrKCk7XG5cblx0XHR2YXIgdHlwZSA9IDUxMjY7XG5cblx0XHRpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5ICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGRhdGEgYnVmZmVyIGZvcm1hdDogRmxvYXQ2NEFycmF5LicgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTIzO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTI1O1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjE7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YnVmZmVyOiBidWZmZXIsXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0Ynl0ZXNQZXJFbGVtZW50OiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdHZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHR2YXIgdXBkYXRlUmFuZ2UgPSBhdHRyaWJ1dGUudXBkYXRlUmFuZ2U7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblxuXHRcdGlmICggYXR0cmlidXRlLmR5bmFtaWMgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgMzUwNDQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHVwZGF0ZVJhbmdlLmNvdW50ID09PSAtIDEgKSB7XG5cblx0XHRcdC8vIE5vdCB1c2luZyB1cGRhdGUgcmFuZ2VzXG5cblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIDAsIGFycmF5ICk7XG5cblx0XHR9IGVsc2UgaWYgKCB1cGRhdGVSYW5nZS5jb3VudCA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMT2JqZWN0cy51cGRhdGVCdWZmZXI6IGR5bmFtaWMgVEhSRUUuQnVmZmVyQXR0cmlidXRlIG1hcmtlZCBhcyBuZWVkc1VwZGF0ZSBidXQgdXBkYXRlUmFuZ2UuY291bnQgaXMgMCwgZW5zdXJlIHlvdSBhcmUgdXNpbmcgc2V0IG1ldGhvZHMgb3IgdXBkYXRpbmcgbWFudWFsbHkuJyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdGFycmF5LnN1YmFycmF5KCB1cGRhdGVSYW5nZS5vZmZzZXQsIHVwZGF0ZVJhbmdlLm9mZnNldCArIHVwZGF0ZVJhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0dXBkYXRlUmFuZ2UuY291bnQgPSAtIDE7IC8vIHJlc2V0IHJhbmdlXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZ2V0KCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRyZXR1cm4gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdHZhciBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhICkge1xuXG5cdFx0XHRnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7XG5cblx0XHRcdGJ1ZmZlcnMuZGVsZXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHR2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkYXRhLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0dXBkYXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICk7XG5cblx0XHRcdGRhdGEudmVyc2lvbiA9IGF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRmFjZTMoIGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0dGhpcy5hID0gYTtcblx0dGhpcy5iID0gYjtcblx0dGhpcy5jID0gYztcblxuXHR0aGlzLm5vcm1hbCA9ICggbm9ybWFsICYmIG5vcm1hbC5pc1ZlY3RvcjMgKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudmVydGV4Tm9ybWFscyA9IEFycmF5LmlzQXJyYXkoIG5vcm1hbCApID8gbm9ybWFsIDogW107XG5cblx0dGhpcy5jb2xvciA9ICggY29sb3IgJiYgY29sb3IuaXNDb2xvciApID8gY29sb3IgOiBuZXcgQ29sb3IoKTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBBcnJheS5pc0FycmF5KCBjb2xvciApID8gY29sb3IgOiBbXTtcblxuXHR0aGlzLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGYWNlMy5wcm90b3R5cGUsIHtcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmEgPSBzb3VyY2UuYTtcblx0XHR0aGlzLmIgPSBzb3VyY2UuYjtcblx0XHR0aGlzLmMgPSBzb3VyY2UuYztcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHNvdXJjZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbEluZGV4ID0gc291cmNlLm1hdGVyaWFsSW5kZXg7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gc291cmNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4Tm9ybWFsc1sgaSBdID0gc291cmNlLnZlcnRleE5vcm1hbHNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4Q29sb3JzWyBpIF0gPSBzb3VyY2UudmVydGV4Q29sb3JzWyBpIF0uY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBFdWxlciggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0dGhpcy5feCA9IHggfHwgMDtcblx0dGhpcy5feSA9IHkgfHwgMDtcblx0dGhpcy5feiA9IHogfHwgMDtcblx0dGhpcy5fb3JkZXIgPSBvcmRlciB8fCBFdWxlci5EZWZhdWx0T3JkZXI7XG5cbn1cblxuRXVsZXIuUm90YXRpb25PcmRlcnMgPSBbICdYWVonLCAnWVpYJywgJ1pYWScsICdYWlknLCAnWVhaJywgJ1pZWCcgXTtcblxuRXVsZXIuRGVmYXVsdE9yZGVyID0gJ1hZWic7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFdWxlci5wcm90b3R5cGUsIHtcblxuXHR4OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRvcmRlcjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl9vcmRlcjtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX29yZGVyID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggRXVsZXIucHJvdG90eXBlLCB7XG5cblx0aXNFdWxlcjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xuXHRcdHRoaXMuX3kgPSBldWxlci5feTtcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAoIG0sIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHR2YXIgY2xhbXAgPSBfTWF0aC5jbGFtcDtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR2YXIgdGUgPSBtLmVsZW1lbnRzO1xuXHRcdHZhciBtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdO1xuXHRcdHZhciBtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdO1xuXHRcdHZhciBtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdG9yZGVyID0gb3JkZXIgfHwgdGhpcy5fb3JkZXI7XG5cblx0XHRpZiAoIG9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggY2xhbXAoIG0xMywgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTEzICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0yMywgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTIzICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCBjbGFtcCggbTMyLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggLSBjbGFtcCggbTMxLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzEgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIGNsYW1wKCBtMjEsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0yMSApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMTIsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZ2l2ZW4gdW5zdXBwb3J0ZWQgb3JkZXI6ICcgKyBvcmRlciApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVF1YXRlcm5pb24oIHEsIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHRcdG1hdHJpeC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoIG1hdHJpeCwgb3JkZXIsIHVwZGF0ZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiwgb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyIHx8IHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRyZW9yZGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBXQVJOSU5HOiB0aGlzIGRpc2NhcmRzIHJldm9sdXRpb24gaW5mb3JtYXRpb24gLWJob3VzdG9uXG5cblx0XHR2YXIgcSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmVvcmRlciggbmV3T3JkZXIgKSB7XG5cblx0XHRcdHEuc2V0RnJvbUV1bGVyKCB0aGlzICk7XG5cblx0XHRcdHJldHVybiB0aGlzLnNldEZyb21RdWF0ZXJuaW9uKCBxLCBuZXdPcmRlciApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0cmV0dXJuICggZXVsZXIuX3ggPT09IHRoaXMuX3ggKSAmJiAoIGV1bGVyLl95ID09PSB0aGlzLl95ICkgJiYgKCBldWxlci5feiA9PT0gdGhpcy5feiApICYmICggZXVsZXIuX29yZGVyID09PSB0aGlzLl9vcmRlciApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyAwIF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyAyIF07XG5cdFx0aWYgKCBhcnJheVsgMyBdICE9PSB1bmRlZmluZWQgKSB0aGlzLl9vcmRlciA9IGFycmF5WyAzIF07XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0dG9WZWN0b3IzOiBmdW5jdGlvbiAoIG9wdGlvbmFsUmVzdWx0ICkge1xuXG5cdFx0aWYgKCBvcHRpb25hbFJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbmFsUmVzdWx0LnNldCggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRvbkNoYW5nZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMYXllcnMoKSB7XG5cblx0dGhpcy5tYXNrID0gMSB8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGF5ZXJzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrID0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9LFxuXG5cdGVuYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fSxcblxuXHR0b2dnbGU6IGZ1bmN0aW9uICggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayBePSAxIDw8IGNoYW5uZWwgfCAwO1xuXG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrICY9IH4gKCAxIDw8IGNoYW5uZWwgfCAwICk7XG5cblx0fSxcblxuXHR0ZXN0OiBmdW5jdGlvbiAoIGxheWVycyApIHtcblxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGVsZXBoYW50YXR3b3JrIC8gd3d3LmVsZXBoYW50YXR3b3JrLmNoXG4gKi9cblxudmFyIG9iamVjdDNESWQgPSAwO1xuXG5mdW5jdGlvbiBPYmplY3QzRCgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IG9iamVjdDNESWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xuXG5cdHRoaXMucGFyZW50ID0gbnVsbDtcblx0dGhpcy5jaGlsZHJlbiA9IFtdO1xuXG5cdHRoaXMudXAgPSBPYmplY3QzRC5EZWZhdWx0VXAuY2xvbmUoKTtcblxuXHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuXG5cdGZ1bmN0aW9uIG9uUm90YXRpb25DaGFuZ2UoKSB7XG5cblx0XHRxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggcm90YXRpb24sIGZhbHNlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUXVhdGVybmlvbkNoYW5nZSgpIHtcblxuXHRcdHJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLCB1bmRlZmluZWQsIGZhbHNlICk7XG5cblx0fVxuXG5cdHJvdGF0aW9uLm9uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XG5cdHF1YXRlcm5pb24ub25DaGFuZ2UoIG9uUXVhdGVybmlvbkNoYW5nZSApO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0cG9zaXRpb246IHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogcG9zaXRpb25cblx0XHR9LFxuXHRcdHJvdGF0aW9uOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHJvdGF0aW9uXG5cdFx0fSxcblx0XHRxdWF0ZXJuaW9uOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHF1YXRlcm5pb25cblx0XHR9LFxuXHRcdHNjYWxlOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHNjYWxlXG5cdFx0fSxcblx0XHRtb2RlbFZpZXdNYXRyaXg6IHtcblx0XHRcdHZhbHVlOiBuZXcgTWF0cml4NCgpXG5cdFx0fSxcblx0XHRub3JtYWxNYXRyaXg6IHtcblx0XHRcdHZhbHVlOiBuZXcgTWF0cml4MygpXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLm1hdHJpeFdvcmxkID0gbmV3IE1hdHJpeDQoKTtcblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTtcblx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cblx0dGhpcy5jYXN0U2hhZG93ID0gZmFsc2U7XG5cdHRoaXMucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG5cdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xuXG5cdHRoaXMudXNlckRhdGEgPSB7fTtcblxufVxuXG5PYmplY3QzRC5EZWZhdWx0VXAgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuT2JqZWN0M0QuRGVmYXVsdE1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXG5PYmplY3QzRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogT2JqZWN0M0QsXG5cblx0aXNPYmplY3QzRDogdHJ1ZSxcblxuXHRvbkJlZm9yZVJlbmRlcjogZnVuY3Rpb24gKCkge30sXG5cdG9uQWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdGFwcGx5TWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMubWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdHRoaXMubWF0cml4LmRlY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0fSxcblxuXHRhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGU6IGZ1bmN0aW9uICggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyLCB0cnVlICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHQvLyBhc3N1bWVzIHEgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHEgKTtcblxuXHR9LFxuXG5cdHJvdGF0ZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIG9iamVjdCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR2YXIgcTEgPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZU9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5tdWx0aXBseSggcTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVPbldvcmxkQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIHdvcmxkIHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblx0XHQvLyBtZXRob2QgYXNzdW1lcyBubyByb3RhdGVkIHBhcmVudFxuXG5cdFx0dmFyIHExID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVgoIGFuZ2xlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIHYxLCBhbmdsZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCB2MSwgYW5nbGUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggdjEsIGFuZ2xlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVPbkF4aXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkge1xuXG5cdFx0XHR2MS5jb3B5KCBheGlzICkuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLnF1YXRlcm5pb24gKTtcblxuXHRcdFx0dGhpcy5wb3NpdGlvbi5hZGQoIHYxLm11bHRpcGx5U2NhbGFyKCBkaXN0YW5jZSApICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVYKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCB2MSwgZGlzdGFuY2UgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlWSggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggdjEsIGRpc3RhbmNlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZVooIGRpc3RhbmNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIHYxLCBkaXN0YW5jZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9jYWxUb1dvcmxkOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fSxcblxuXHR3b3JsZFRvTG9jYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gd29ybGRUb0xvY2FsKCB2ZWN0b3IgKSB7XG5cblx0XHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtMS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBvYmplY3RzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBwYXJlbnQocylcblxuXHRcdHZhciBxMSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggeCwgeSwgeiApIHtcblxuXHRcdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0XHR0YXJnZXQuY29weSggeCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRhcmdldC5zZXQoIHgsIHksIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdHBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRpZiAoIHRoaXMuaXNDYW1lcmEgKSB7XG5cblx0XHRcdFx0bTEubG9va0F0KCBwb3NpdGlvbiwgdGFyZ2V0LCB0aGlzLnVwICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bTEubG9va0F0KCB0YXJnZXQsIHBvc2l0aW9uLCB0aGlzLnVwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbTEgKTtcblxuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0bTEuZXh0cmFjdFJvdGF0aW9uKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0cTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtMSApO1xuXHRcdFx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHExLmludmVyc2UoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhZGQ6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmFkZCggYXJndW1lbnRzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0ID09PSB0aGlzICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IGNhbid0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLlwiLCBvYmplY3QgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIG9iamVjdCAmJiBvYmplY3QuaXNPYmplY3QzRCApICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5wYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0b2JqZWN0LnBhcmVudC5yZW1vdmUoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2FkZGVkJyB9ICk7XG5cblx0XHRcdHRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC5cIiwgb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMucmVtb3ZlKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKCBvYmplY3QgKTtcblxuXHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XG5cblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdyZW1vdmVkJyB9ICk7XG5cblx0XHRcdHRoaXMuY2hpbGRyZW4uc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRPYmplY3RCeUlkOiBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ2lkJywgaWQgKTtcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ25hbWUnLCBuYW1lICk7XG5cblx0fSxcblxuXHRnZXRPYmplY3RCeVByb3BlcnR5OiBmdW5jdGlvbiAoIG5hbWUsIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzWyBuYW1lIF0gPT09IHZhbHVlICkgcmV0dXJuIHRoaXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5bIGkgXTtcblx0XHRcdHZhciBvYmplY3QgPSBjaGlsZC5nZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBvYmplY3Q7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0fSxcblxuXHRnZXRXb3JsZFBvc2l0aW9uOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRQb3NpdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9LFxuXG5cdGdldFdvcmxkUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRRdWF0ZXJuaW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgdGFyZ2V0LCBzY2FsZSApO1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0V29ybGRTY2FsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0V29ybGRTY2FsZSggdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRTY2FsZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHRhcmdldCApO1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0V29ybGREaXJlY3Rpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZERpcmVjdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0dmFyIGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIGVbIDggXSwgZVsgOSBdLCBlWyAxMCBdICkubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoKSB7fSxcblxuXHR0cmF2ZXJzZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZSggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHRyYXZlcnNlVmlzaWJsZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS50cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR0cmF2ZXJzZUFuY2VzdG9yczogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdGlmICggcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRjYWxsYmFjayggcGFyZW50ICk7XG5cblx0XHRcdHBhcmVudC50cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5tYXRyaXguY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSB8fCBmb3JjZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0Zm9yY2UgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGNoaWxkcmVuXG5cblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4OiBmdW5jdGlvbiAoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkge1xuXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCB1cGRhdGVQYXJlbnRzID09PSB0cnVlICYmIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBjaGlsZHJlblxuXG5cdFx0aWYgKCB1cGRhdGVDaGlsZHJlbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdC8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeVxuXHRcdHZhciBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdHZhciBvdXRwdXQgPSB7fTtcblxuXHRcdC8vIG1ldGEgaXMgYSBoYXNoIHVzZWQgdG8gY29sbGVjdCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMuXG5cdFx0Ly8gbm90IHByb3ZpZGluZyBpdCBpbXBsaWVzIHRoYXQgdGhpcyBpcyB0aGUgcm9vdCBvYmplY3Rcblx0XHQvLyBiZWluZyBzZXJpYWxpemVkLlxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXplIG1ldGEgb2JqXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHRnZW9tZXRyaWVzOiB7fSxcblx0XHRcdFx0bWF0ZXJpYWxzOiB7fSxcblx0XHRcdFx0dGV4dHVyZXM6IHt9LFxuXHRcdFx0XHRpbWFnZXM6IHt9LFxuXHRcdFx0XHRzaGFwZXM6IHt9XG5cdFx0XHR9O1xuXG5cdFx0XHRvdXRwdXQubWV0YWRhdGEgPSB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ09iamVjdCcsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ09iamVjdDNELnRvSlNPTidcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHQvLyBzdGFuZGFyZCBPYmplY3QzRCBzZXJpYWxpemF0aW9uXG5cblx0XHR2YXIgb2JqZWN0ID0ge307XG5cblx0XHRvYmplY3QudXVpZCA9IHRoaXMudXVpZDtcblx0XHRvYmplY3QudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIG9iamVjdC5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggdGhpcy5jYXN0U2hhZG93ID09PSB0cnVlICkgb2JqZWN0LmNhc3RTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5yZWNlaXZlU2hhZG93ID09PSB0cnVlICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIG9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLmZydXN0dW1DdWxsZWQgPT09IGZhbHNlICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMucmVuZGVyT3JkZXIgIT09IDAgKSBvYmplY3QucmVuZGVyT3JkZXIgPSB0aGlzLnJlbmRlck9yZGVyO1xuXHRcdGlmICggSlNPTi5zdHJpbmdpZnkoIHRoaXMudXNlckRhdGEgKSAhPT0gJ3t9JyApIG9iamVjdC51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRvYmplY3QubGF5ZXJzID0gdGhpcy5sYXllcnMubWFzaztcblx0XHRvYmplY3QubWF0cml4ID0gdGhpcy5tYXRyaXgudG9BcnJheSgpO1xuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IGZhbHNlICkgb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBzZXJpYWxpemUoIGxpYnJhcnksIGVsZW1lbnQgKSB7XG5cblx0XHRcdGlmICggbGlicmFyeVsgZWxlbWVudC51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9IGVsZW1lbnQudG9KU09OKCBtZXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1lbnQudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc01lc2ggfHwgdGhpcy5pc0xpbmUgfHwgdGhpcy5pc1BvaW50cyApIHtcblxuXHRcdFx0b2JqZWN0Lmdlb21ldHJ5ID0gc2VyaWFsaXplKCBtZXRhLmdlb21ldHJpZXMsIHRoaXMuZ2VvbWV0cnkgKTtcblxuXHRcdFx0dmFyIHBhcmFtZXRlcnMgPSB0aGlzLmdlb21ldHJ5LnBhcmFtZXRlcnM7XG5cblx0XHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHNoYXBlcyA9IHBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdGVyaWFsICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdGhpcy5tYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdHZhciB1dWlkcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMubWF0ZXJpYWwubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHV1aWRzLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWxbIGkgXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHV1aWRzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuY2hpbGRyZW4gPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmNoaWxkcmVuLnB1c2goIHRoaXMuY2hpbGRyZW5bIGkgXS50b0pTT04oIG1ldGEgKS5vYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5nZW9tZXRyaWVzICk7XG5cdFx0XHR2YXIgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5tYXRlcmlhbHMgKTtcblx0XHRcdHZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcblx0XHRcdHZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApO1xuXHRcdFx0dmFyIHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2hhcGVzICk7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xuXHRcdFx0aWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzO1xuXHRcdFx0aWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRvdXRwdXQub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXG5cdFx0Ly8gcmVtb3ZlIG1ldGFkYXRhIG9uIGVhY2ggaXRlbVxuXHRcdC8vIGFuZCByZXR1cm4gYXMgYXJyYXlcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZXM7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCByZWN1cnNpdmUgKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzLCByZWN1cnNpdmUgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRpZiAoIHJlY3Vyc2l2ZSA9PT0gdW5kZWZpbmVkICkgcmVjdXJzaXZlID0gdHJ1ZTtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy51cC5jb3B5KCBzb3VyY2UudXAgKTtcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggc291cmNlLnBvc2l0aW9uICk7XG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHNvdXJjZS5xdWF0ZXJuaW9uICk7XG5cdFx0dGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gc291cmNlLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7XG5cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gc291cmNlLnJlbmRlck9yZGVyO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGNoaWxkID0gc291cmNlLmNoaWxkcmVuWyBpIF07XG5cdFx0XHRcdHRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG52YXIgZ2VvbWV0cnlJZCA9IDA7IC8vIEdlb21ldHJ5IHVzZXMgZXZlbiBudW1iZXJzIGFzIElkXG5cbmZ1bmN0aW9uIEdlb21ldHJ5KCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogZ2VvbWV0cnlJZCArPSAyIH0gKTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblx0dGhpcy50eXBlID0gJ0dlb21ldHJ5JztcblxuXHR0aGlzLnZlcnRpY2VzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMuZmFjZXMgPSBbXTtcblx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IFtdO1xuXG5cdHRoaXMuc2tpbldlaWdodHMgPSBbXTtcblx0dGhpcy5za2luSW5kaWNlcyA9IFtdO1xuXG5cdHRoaXMubGluZURpc3RhbmNlcyA9IFtdO1xuXG5cdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHQvLyB1cGRhdGUgZmxhZ3NcblxuXHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxufVxuXG5HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR2VvbWV0cnksXG5cblx0aXNHZW9tZXRyeTogdHJ1ZSxcblxuXHRhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzWyBpIF07XG5cdFx0XHR2ZXJ0ZXguYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGkgXTtcblx0XHRcdGZhY2Uubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0ZmFjZS52ZXJ0ZXhOb3JtYWxzWyBqIF0uYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVYKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWCggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWSggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVaKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWiggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBnZW9tZXRyeVxuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGUoIHgsIHksIHogKSB7XG5cblx0XHRcdG0xLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzY2FsZSggeCwgeSwgeiApIHtcblxuXHRcdFx0bTEubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbG9va0F0KCB2ZWN0b3IgKSB7XG5cblx0XHRcdG9iai5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0XHRvYmoudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG9iai5tYXRyaXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGZyb21CdWZmZXJHZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4ICE9PSBudWxsID8gZ2VvbWV0cnkuaW5kZXguYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cdFx0dmFyIG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIGNvbG9ycyA9IGF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMuY29sb3IuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIHV2cyA9IGF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMudXYuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIHV2czIgPSBhdHRyaWJ1dGVzLnV2MiAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51djIuYXJyYXkgOiB1bmRlZmluZWQ7XG5cblx0XHRpZiAoIHV2czIgIT09IHVuZGVmaW5lZCApIHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgaSArPSAzLCBqICs9IDIgKSB7XG5cblx0XHRcdHNjb3BlLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKSApO1xuXG5cdFx0XHRpZiAoIGNvbG9ycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLmNvbG9ycy5wdXNoKCBuZXcgQ29sb3IoKS5mcm9tQXJyYXkoIGNvbG9ycywgaSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZEZhY2UoIGEsIGIsIGMsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXhDb2xvcnMgPSAoIGNvbG9ycyA9PT0gdW5kZWZpbmVkICkgPyBbXSA6IFtcblx0XHRcdFx0c2NvcGUuY29sb3JzWyBhIF0uY2xvbmUoKSxcblx0XHRcdFx0c2NvcGUuY29sb3JzWyBiIF0uY2xvbmUoKSxcblx0XHRcdFx0c2NvcGUuY29sb3JzWyBjIF0uY2xvbmUoKSBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9ICggbm9ybWFscyA9PT0gdW5kZWZpbmVkICkgPyBbXSA6IFtcblx0XHRcdFx0bmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIG5vcm1hbHMsIGEgKiAzICksXG5cdFx0XHRcdG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBub3JtYWxzLCBiICogMyApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYyAqIDMgKVxuXHRcdFx0XTtcblxuXHRcdFx0dmFyIGZhY2UgPSBuZXcgRmFjZTMoIGEsIGIsIGMsIHZlcnRleE5vcm1hbHMsIHZlcnRleENvbG9ycywgbWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRzY29wZS5mYWNlcy5wdXNoKCBmYWNlICk7XG5cblx0XHRcdGlmICggdXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUuZmFjZVZlcnRleFV2c1sgMCBdLnB1c2goIFtcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzLCBhICogMiApLFxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGIgKiAyICksXG5cdFx0XHRcdFx0bmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHV2cywgYyAqIDIgKVxuXHRcdFx0XHRdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1dnMyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUuZmFjZVZlcnRleFV2c1sgMSBdLnB1c2goIFtcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYSAqIDIgKSxcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYiAqIDIgKSxcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzMiwgYyAqIDIgKVxuXHRcdFx0XHRdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRcdHZhciBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuXHRcdFx0XHR2YXIgY291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpbmRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGFkZEZhY2UoIGluZGljZXNbIGogXSwgaW5kaWNlc1sgaiArIDEgXSwgaW5kaWNlc1sgaiArIDIgXSwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0YWRkRmFjZSggaiwgaiArIDEsIGogKyAyLCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGluZGljZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0YWRkRmFjZSggaW5kaWNlc1sgaSBdLCBpbmRpY2VzWyBpICsgMSBdLCBpbmRpY2VzWyBpICsgMiBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRhZGRGYWNlKCBpLCBpICsgMSwgaSArIDIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNlbnRlcigpIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIG9mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0XHR0aGlzLnRyYW5zbGF0ZSggb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdHZhciBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcblx0XHR2YXIgcmFkaXVzID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXM7XG5cblx0XHR2YXIgcyA9IHJhZGl1cyA9PT0gMCA/IDEgOiAxLjAgLyByYWRpdXM7XG5cblx0XHR2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHRtYXRyaXguc2V0KFxuXHRcdFx0cywgMCwgMCwgLSBzICogY2VudGVyLngsXG5cdFx0XHQwLCBzLCAwLCAtIHMgKiBjZW50ZXIueSxcblx0XHRcdDAsIDAsIHMsIC0gcyAqIGNlbnRlci56LFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4KCBtYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUZhY2VOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmb3IgKCB2YXIgZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdHZhciB2QSA9IHRoaXMudmVydGljZXNbIGZhY2UuYSBdO1xuXHRcdFx0dmFyIHZCID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5iIF07XG5cdFx0XHR2YXIgdkMgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0Y2Iuc3ViVmVjdG9ycyggdkMsIHZCICk7XG5cdFx0XHRhYi5zdWJWZWN0b3JzKCB2QSwgdkIgKTtcblx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRjYi5ub3JtYWxpemUoKTtcblxuXHRcdFx0ZmFjZS5ub3JtYWwuY29weSggY2IgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVWZXJ0ZXhOb3JtYWxzOiBmdW5jdGlvbiAoIGFyZWFXZWlnaHRlZCApIHtcblxuXHRcdGlmICggYXJlYVdlaWdodGVkID09PSB1bmRlZmluZWQgKSBhcmVhV2VpZ2h0ZWQgPSB0cnVlO1xuXG5cdFx0dmFyIHYsIHZsLCBmLCBmbCwgZmFjZSwgdmVydGljZXM7XG5cblx0XHR2ZXJ0aWNlcyA9IG5ldyBBcnJheSggdGhpcy52ZXJ0aWNlcy5sZW5ndGggKTtcblxuXHRcdGZvciAoIHYgPSAwLCB2bCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7XG5cblx0XHRcdHZlcnRpY2VzWyB2IF0gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhcmVhV2VpZ2h0ZWQgKSB7XG5cblx0XHRcdC8vIHZlcnRleCBub3JtYWxzIHdlaWdodGVkIGJ5IHRyaWFuZ2xlIGFyZWFzXG5cdFx0XHQvLyBodHRwOi8vd3d3LmlxdWlsZXpsZXMub3JnL3d3dy9hcnRpY2xlcy9ub3JtYWxzL25vcm1hbHMuaHRtXG5cblx0XHRcdHZhciB2QSwgdkIsIHZDO1xuXHRcdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdFx0dkEgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmEgXTtcblx0XHRcdFx0dkIgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmIgXTtcblx0XHRcdFx0dkMgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0XHRjYi5zdWJWZWN0b3JzKCB2QywgdkIgKTtcblx0XHRcdFx0YWIuc3ViVmVjdG9ycyggdkEsIHZCICk7XG5cdFx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmEgXS5hZGQoIGNiICk7XG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmIgXS5hZGQoIGNiICk7XG5cdFx0XHRcdHZlcnRpY2VzWyBmYWNlLmMgXS5hZGQoIGNiICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0XHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5hIF0uYWRkKCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5iIF0uYWRkKCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5jIF0uYWRkKCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2ID0gMCwgdmwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgdiA8IHZsOyB2ICsrICkge1xuXG5cdFx0XHR2ZXJ0aWNlc1sgdiBdLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmEgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAxIF0uY29weSggdmVydGljZXNbIGZhY2UuYiBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0gPSB2ZXJ0aWNlc1sgZmFjZS5hIF0uY2xvbmUoKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdID0gdmVydGljZXNbIGZhY2UuYiBdLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXSA9IHZlcnRpY2VzWyBmYWNlLmMgXS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmFjZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlRmxhdFZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBmLCBmbCwgZmFjZTtcblxuXHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcblxuXHRcdFx0aWYgKCB2ZXJ0ZXhOb3JtYWxzLmxlbmd0aCA9PT0gMyApIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0uY29weSggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXS5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDAgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDIgXSA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mYWNlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVNb3JwaE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpLCBpbCwgZiwgZmwsIGZhY2U7XG5cblx0XHQvLyBzYXZlIG9yaWdpbmFsIG5vcm1hbHNcblx0XHQvLyAtIGNyZWF0ZSB0ZW1wIHZhcmlhYmxlcyBvbiBmaXJzdCBhY2Nlc3Ncblx0XHQvLyAgIG90aGVyd2lzZSBqdXN0IGNvcHkgKGZvciBmYXN0ZXIgcmVwZWF0ZWQgY2FsbHMpXG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRpZiAoICEgZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbCApIHtcblxuXHRcdFx0XHRmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsID0gZmFjZS5ub3JtYWwuY2xvbmUoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHMgKSBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoICEgZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1sgaSBdICkge1xuXG5cdFx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1sgaSBdID0gZmFjZS52ZXJ0ZXhOb3JtYWxzWyBpIF0uY2xvbmUoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1sgaSBdLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyB1c2UgdGVtcCBnZW9tZXRyeSB0byBjb21wdXRlIGZhY2UgYW5kIHZlcnRleCBub3JtYWxzIGZvciBlYWNoIG1vcnBoXG5cblx0XHR2YXIgdG1wR2VvID0gbmV3IEdlb21ldHJ5KCk7XG5cdFx0dG1wR2VvLmZhY2VzID0gdGhpcy5mYWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMubW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBjcmVhdGUgb24gZmlyc3QgYWNjZXNzXG5cblx0XHRcdGlmICggISB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdICkge1xuXG5cdFx0XHRcdHRoaXMubW9ycGhOb3JtYWxzWyBpIF0gPSB7fTtcblx0XHRcdFx0dGhpcy5tb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscyA9IFtdO1xuXHRcdFx0XHR0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHR2YXIgZHN0Tm9ybWFsc0ZhY2UgPSB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzO1xuXHRcdFx0XHR2YXIgZHN0Tm9ybWFsc1ZlcnRleCA9IHRoaXMubW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscztcblxuXHRcdFx0XHR2YXIgZmFjZU5vcm1hbCwgdmVydGV4Tm9ybWFscztcblxuXHRcdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZU5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRcdFx0dmVydGV4Tm9ybWFscyA9IHsgYTogbmV3IFZlY3RvcjMoKSwgYjogbmV3IFZlY3RvcjMoKSwgYzogbmV3IFZlY3RvcjMoKSB9O1xuXG5cdFx0XHRcdFx0ZHN0Tm9ybWFsc0ZhY2UucHVzaCggZmFjZU5vcm1hbCApO1xuXHRcdFx0XHRcdGRzdE5vcm1hbHNWZXJ0ZXgucHVzaCggdmVydGV4Tm9ybWFscyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbW9ycGhOb3JtYWxzID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXTtcblxuXHRcdFx0Ly8gc2V0IHZlcnRpY2VzIHRvIG1vcnBoIHRhcmdldFxuXG5cdFx0XHR0bXBHZW8udmVydGljZXMgPSB0aGlzLm1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzO1xuXG5cdFx0XHQvLyBjb21wdXRlIG1vcnBoIG5vcm1hbHNcblxuXHRcdFx0dG1wR2VvLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXHRcdFx0dG1wR2VvLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cblx0XHRcdC8vIHN0b3JlIG1vcnBoIG5vcm1hbHNcblxuXHRcdFx0dmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0XHRmYWNlTm9ybWFsID0gbW9ycGhOb3JtYWxzLmZhY2VOb3JtYWxzWyBmIF07XG5cdFx0XHRcdHZlcnRleE5vcm1hbHMgPSBtb3JwaE5vcm1hbHMudmVydGV4Tm9ybWFsc1sgZiBdO1xuXG5cdFx0XHRcdGZhY2VOb3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzLmEuY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyAwIF0gKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFscy5iLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgMSBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHMuYy5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDIgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXN0b3JlIG9yaWdpbmFsIG5vcm1hbHNcblxuXHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdGZhY2Uubm9ybWFsID0gZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbDtcblx0XHRcdGZhY2UudmVydGV4Tm9ybWFscyA9IGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHM7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlQm91bmRpbmdCb3g6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21Qb2ludHMoIHRoaXMudmVydGljZXMgKTtcblxuXHR9LFxuXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5zZXRGcm9tUG9pbnRzKCB0aGlzLnZlcnRpY2VzICk7XG5cblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24gKCBnZW9tZXRyeSwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkge1xuXG5cdFx0aWYgKCAhICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkdlb21ldHJ5LicsIGdlb21ldHJ5ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR2YXIgbm9ybWFsTWF0cml4LFxuXHRcdFx0dmVydGV4T2Zmc2V0ID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGgsXG5cdFx0XHR2ZXJ0aWNlczEgPSB0aGlzLnZlcnRpY2VzLFxuXHRcdFx0dmVydGljZXMyID0gZ2VvbWV0cnkudmVydGljZXMsXG5cdFx0XHRmYWNlczEgPSB0aGlzLmZhY2VzLFxuXHRcdFx0ZmFjZXMyID0gZ2VvbWV0cnkuZmFjZXMsXG5cdFx0XHR1dnMxID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF0sXG5cdFx0XHR1dnMyID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgMCBdLFxuXHRcdFx0Y29sb3JzMSA9IHRoaXMuY29sb3JzLFxuXHRcdFx0Y29sb3JzMiA9IGdlb21ldHJ5LmNvbG9ycztcblxuXHRcdGlmICggbWF0ZXJpYWxJbmRleE9mZnNldCA9PT0gdW5kZWZpbmVkICkgbWF0ZXJpYWxJbmRleE9mZnNldCA9IDA7XG5cblx0XHRpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHZlcnRpY2VzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHZlcnRpY2VzMlsgaSBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Q29weSA9IHZlcnRleC5jbG9uZSgpO1xuXG5cdFx0XHRpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkgdmVydGV4Q29weS5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0XHR2ZXJ0aWNlczEucHVzaCggdmVydGV4Q29weSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY29sb3JzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29sb3JzMS5wdXNoKCBjb2xvcnMyWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2VzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlczJbIGkgXSwgZmFjZUNvcHksIG5vcm1hbCwgY29sb3IsXG5cdFx0XHRcdGZhY2VWZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLFxuXHRcdFx0XHRmYWNlVmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdGZhY2VDb3B5ID0gbmV3IEZhY2UzKCBmYWNlLmEgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYiArIHZlcnRleE9mZnNldCwgZmFjZS5jICsgdmVydGV4T2Zmc2V0ICk7XG5cdFx0XHRmYWNlQ29weS5ub3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0aWYgKCBub3JtYWxNYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmYWNlQ29weS5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZVZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0bm9ybWFsID0gZmFjZVZlcnRleE5vcm1hbHNbIGogXS5jbG9uZSgpO1xuXG5cdFx0XHRcdGlmICggbm9ybWFsTWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmFjZUNvcHkudmVydGV4Tm9ybWFscy5wdXNoKCBub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmYWNlQ29weS5jb2xvci5jb3B5KCBmYWNlLmNvbG9yICk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlVmVydGV4Q29sb3JzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdGNvbG9yID0gZmFjZVZlcnRleENvbG9yc1sgaiBdO1xuXHRcdFx0XHRmYWNlQ29weS52ZXJ0ZXhDb2xvcnMucHVzaCggY29sb3IuY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZhY2VDb3B5Lm1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXggKyBtYXRlcmlhbEluZGV4T2Zmc2V0O1xuXG5cdFx0XHRmYWNlczEucHVzaCggZmFjZUNvcHkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHV2c1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdXZzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHV2ID0gdXZzMlsgaSBdLCB1dkNvcHkgPSBbXTtcblxuXHRcdFx0aWYgKCB1diA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSB1di5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR1dkNvcHkucHVzaCggdXZbIGogXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dXZzMS5wdXNoKCB1dkNvcHkgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG1lcmdlTWVzaDogZnVuY3Rpb24gKCBtZXNoICkge1xuXG5cdFx0aWYgKCAhICggbWVzaCAmJiBtZXNoLmlzTWVzaCApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnkubWVyZ2VNZXNoKCk6IG1lc2ggbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk1lc2guJywgbWVzaCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtZXNoLm1hdHJpeEF1dG9VcGRhdGUgKSBtZXNoLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5tZXJnZSggbWVzaC5nZW9tZXRyeSwgbWVzaC5tYXRyaXggKTtcblxuXHR9LFxuXG5cdC8qXG5cdCAqIENoZWNrcyBmb3IgZHVwbGljYXRlIHZlcnRpY2VzIHdpdGggaGFzaG1hcC5cblx0ICogRHVwbGljYXRlZCB2ZXJ0aWNlcyBhcmUgcmVtb3ZlZFxuXHQgKiBhbmQgZmFjZXMnIHZlcnRpY2VzIGFyZSB1cGRhdGVkLlxuXHQgKi9cblxuXHRtZXJnZVZlcnRpY2VzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmVydGljZXNNYXAgPSB7fTsgLy8gSGFzaG1hcCBmb3IgbG9va2luZyB1cCB2ZXJ0aWNlcyBieSBwb3NpdGlvbiBjb29yZGluYXRlcyAoYW5kIG1ha2luZyBzdXJlIHRoZXkgYXJlIHVuaXF1ZSlcblx0XHR2YXIgdW5pcXVlID0gW10sIGNoYW5nZXMgPSBbXTtcblxuXHRcdHZhciB2LCBrZXk7XG5cdFx0dmFyIHByZWNpc2lvblBvaW50cyA9IDQ7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBvaW50cywgZS5nLiA0IGZvciBlcHNpbG9uIG9mIDAuMDAwMVxuXHRcdHZhciBwcmVjaXNpb24gPSBNYXRoLnBvdyggMTAsIHByZWNpc2lvblBvaW50cyApO1xuXHRcdHZhciBpLCBpbCwgZmFjZTtcblx0XHR2YXIgaW5kaWNlcywgaiwgamw7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2ID0gdGhpcy52ZXJ0aWNlc1sgaSBdO1xuXHRcdFx0a2V5ID0gTWF0aC5yb3VuZCggdi54ICogcHJlY2lzaW9uICkgKyAnXycgKyBNYXRoLnJvdW5kKCB2LnkgKiBwcmVjaXNpb24gKSArICdfJyArIE1hdGgucm91bmQoIHYueiAqIHByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHZlcnRpY2VzTWFwWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzTWFwWyBrZXkgXSA9IGk7XG5cdFx0XHRcdHVuaXF1ZS5wdXNoKCB0aGlzLnZlcnRpY2VzWyBpIF0gKTtcblx0XHRcdFx0Y2hhbmdlc1sgaSBdID0gdW5pcXVlLmxlbmd0aCAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnRHVwbGljYXRlIHZlcnRleCBmb3VuZC4gJywgaSwgJyBjb3VsZCBiZSB1c2luZyAnLCB2ZXJ0aWNlc01hcFtrZXldKTtcblx0XHRcdFx0Y2hhbmdlc1sgaSBdID0gY2hhbmdlc1sgdmVydGljZXNNYXBbIGtleSBdIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0Ly8gaWYgZmFjZXMgYXJlIGNvbXBsZXRlbHkgZGVnZW5lcmF0ZSBhZnRlciBtZXJnaW5nIHZlcnRpY2VzLCB3ZVxuXHRcdC8vIGhhdmUgdG8gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZ2VvbWV0cnkuXG5cdFx0dmFyIGZhY2VJbmRpY2VzVG9SZW1vdmUgPSBbXTtcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBpIF07XG5cblx0XHRcdGZhY2UuYSA9IGNoYW5nZXNbIGZhY2UuYSBdO1xuXHRcdFx0ZmFjZS5iID0gY2hhbmdlc1sgZmFjZS5iIF07XG5cdFx0XHRmYWNlLmMgPSBjaGFuZ2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0aW5kaWNlcyA9IFsgZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyBdO1xuXG5cdFx0XHQvLyBpZiBhbnkgZHVwbGljYXRlIHZlcnRpY2VzIGFyZSBmb3VuZCBpbiBhIEZhY2UzXG5cdFx0XHQvLyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGUgZmFjZSBhcyBub3RoaW5nIGNhbiBiZSBzYXZlZFxuXHRcdFx0Zm9yICggdmFyIG4gPSAwOyBuIDwgMzsgbiArKyApIHtcblxuXHRcdFx0XHRpZiAoIGluZGljZXNbIG4gXSA9PT0gaW5kaWNlc1sgKCBuICsgMSApICUgMyBdICkge1xuXG5cdFx0XHRcdFx0ZmFjZUluZGljZXNUb1JlbW92ZS5wdXNoKCBpICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBpID0gZmFjZUluZGljZXNUb1JlbW92ZS5sZW5ndGggLSAxOyBpID49IDA7IGkgLS0gKSB7XG5cblx0XHRcdHZhciBpZHggPSBmYWNlSW5kaWNlc1RvUmVtb3ZlWyBpIF07XG5cblx0XHRcdHRoaXMuZmFjZXMuc3BsaWNlKCBpZHgsIDEgKTtcblxuXHRcdFx0Zm9yICggaiA9IDAsIGpsID0gdGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1sgaiBdLnNwbGljZSggaWR4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFVzZSB1bmlxdWUgc2V0IG9mIHZlcnRpY2VzXG5cblx0XHR2YXIgZGlmZiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gdW5pcXVlLmxlbmd0aDtcblx0XHR0aGlzLnZlcnRpY2VzID0gdW5pcXVlO1xuXHRcdHJldHVybiBkaWZmO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLnZlcnRpY2VzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzb3J0RmFjZXNCeU1hdGVyaWFsSW5kZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBmYWNlcyA9IHRoaXMuZmFjZXM7XG5cdFx0dmFyIGxlbmd0aCA9IGZhY2VzLmxlbmd0aDtcblxuXHRcdC8vIHRhZyBmYWNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRmYWNlc1sgaSBdLl9pZCA9IGk7XG5cblx0XHR9XG5cblx0XHQvLyBzb3J0IGZhY2VzXG5cblx0XHRmdW5jdGlvbiBtYXRlcmlhbEluZGV4U29ydCggYSwgYiApIHtcblxuXHRcdFx0cmV0dXJuIGEubWF0ZXJpYWxJbmRleCAtIGIubWF0ZXJpYWxJbmRleDtcblxuXHRcdH1cblxuXHRcdGZhY2VzLnNvcnQoIG1hdGVyaWFsSW5kZXhTb3J0ICk7XG5cblx0XHQvLyBzb3J0IHV2c1xuXG5cdFx0dmFyIHV2czEgPSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDAgXTtcblx0XHR2YXIgdXZzMiA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdO1xuXG5cdFx0dmFyIG5ld1V2czEsIG5ld1V2czI7XG5cblx0XHRpZiAoIHV2czEgJiYgdXZzMS5sZW5ndGggPT09IGxlbmd0aCApIG5ld1V2czEgPSBbXTtcblx0XHRpZiAoIHV2czIgJiYgdXZzMi5sZW5ndGggPT09IGxlbmd0aCApIG5ld1V2czIgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGlkID0gZmFjZXNbIGkgXS5faWQ7XG5cblx0XHRcdGlmICggbmV3VXZzMSApIG5ld1V2czEucHVzaCggdXZzMVsgaWQgXSApO1xuXHRcdFx0aWYgKCBuZXdVdnMyICkgbmV3VXZzMi5wdXNoKCB1dnMyWyBpZCBdICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5ld1V2czEgKSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDAgXSA9IG5ld1V2czE7XG5cdFx0aWYgKCBuZXdVdnMyICkgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBuZXdVdnMyO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0dlb21ldHJ5Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnR2VvbWV0cnkudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBHZW9tZXRyeSBzZXJpYWxpemF0aW9uXG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblxuXHRcdGlmICggdGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdFx0aWYgKCBwYXJhbWV0ZXJzWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH1cblxuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzWyBpIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgZmFjZXMgPSBbXTtcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXHRcdHZhciBub3JtYWxzSGFzaCA9IHt9O1xuXHRcdHZhciBjb2xvcnMgPSBbXTtcblx0XHR2YXIgY29sb3JzSGFzaCA9IHt9O1xuXHRcdHZhciB1dnMgPSBbXTtcblx0XHR2YXIgdXZzSGFzaCA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5mYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1sgaSBdO1xuXG5cdFx0XHR2YXIgaGFzTWF0ZXJpYWwgPSB0cnVlO1xuXHRcdFx0dmFyIGhhc0ZhY2VVdiA9IGZhbHNlOyAvLyBkZXByZWNhdGVkXG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleFV2ID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXSAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0dmFyIGhhc0ZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5sZW5ndGgoKSA+IDA7XG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleE5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGggPiAwO1xuXHRcdFx0dmFyIGhhc0ZhY2VDb2xvciA9IGZhY2UuY29sb3IuciAhPT0gMSB8fCBmYWNlLmNvbG9yLmcgIT09IDEgfHwgZmFjZS5jb2xvci5iICE9PSAxO1xuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhDb2xvciA9IGZhY2UudmVydGV4Q29sb3JzLmxlbmd0aCA+IDA7XG5cblx0XHRcdHZhciBmYWNlVHlwZSA9IDA7XG5cblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMCwgMCApOyAvLyBpc1F1YWRcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMSwgaGFzTWF0ZXJpYWwgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMiwgaGFzRmFjZVV2ICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDMsIGhhc0ZhY2VWZXJ0ZXhVdiApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA0LCBoYXNGYWNlTm9ybWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDUsIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgNiwgaGFzRmFjZUNvbG9yICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDcsIGhhc0ZhY2VWZXJ0ZXhDb2xvciApO1xuXG5cdFx0XHRmYWNlcy5wdXNoKCBmYWNlVHlwZSApO1xuXHRcdFx0ZmFjZXMucHVzaCggZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyApO1xuXHRcdFx0ZmFjZXMucHVzaCggZmFjZS5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleFV2ICkge1xuXG5cdFx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXTtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDAgXSApLFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDEgXSApLFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDIgXSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlTm9ybWFsICkge1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goIGdldE5vcm1hbEluZGV4KCBmYWNlLm5vcm1hbCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Tm9ybWFsICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goXG5cdFx0XHRcdFx0Z2V0Tm9ybWFsSW5kZXgoIHZlcnRleE5vcm1hbHNbIDAgXSApLFxuXHRcdFx0XHRcdGdldE5vcm1hbEluZGV4KCB2ZXJ0ZXhOb3JtYWxzWyAxIF0gKSxcblx0XHRcdFx0XHRnZXROb3JtYWxJbmRleCggdmVydGV4Tm9ybWFsc1sgMiBdIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VDb2xvciApIHtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKCBnZXRDb2xvckluZGV4KCBmYWNlLmNvbG9yICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhDb2xvciApIHtcblxuXHRcdFx0XHR2YXIgdmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdFx0ZmFjZXMucHVzaChcblx0XHRcdFx0XHRnZXRDb2xvckluZGV4KCB2ZXJ0ZXhDb2xvcnNbIDAgXSApLFxuXHRcdFx0XHRcdGdldENvbG9ySW5kZXgoIHZlcnRleENvbG9yc1sgMSBdICksXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAyIF0gKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzZXRCaXQoIHZhbHVlLCBwb3NpdGlvbiwgZW5hYmxlZCApIHtcblxuXHRcdFx0cmV0dXJuIGVuYWJsZWQgPyB2YWx1ZSB8ICggMSA8PCBwb3NpdGlvbiApIDogdmFsdWUgJiAoIH4gKCAxIDw8IHBvc2l0aW9uICkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE5vcm1hbEluZGV4KCBub3JtYWwgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gbm9ybWFsLngudG9TdHJpbmcoKSArIG5vcm1hbC55LnRvU3RyaW5nKCkgKyBub3JtYWwuei50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIG5vcm1hbHNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbm9ybWFsc0hhc2hbIGhhc2ggXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRub3JtYWxzSGFzaFsgaGFzaCBdID0gbm9ybWFscy5sZW5ndGggLyAzO1xuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdHJldHVybiBub3JtYWxzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q29sb3JJbmRleCggY29sb3IgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gY29sb3Iuci50b1N0cmluZygpICsgY29sb3IuZy50b1N0cmluZygpICsgY29sb3IuYi50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIGNvbG9yc0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBjb2xvcnNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y29sb3JzSGFzaFsgaGFzaCBdID0gY29sb3JzLmxlbmd0aDtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5nZXRIZXgoKSApO1xuXG5cdFx0XHRyZXR1cm4gY29sb3JzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0VXZJbmRleCggdXYgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gdXYueC50b1N0cmluZygpICsgdXYueS50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIHV2c0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiB1dnNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dXZzSGFzaFsgaGFzaCBdID0gdXZzLmxlbmd0aCAvIDI7XG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRyZXR1cm4gdXZzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5kYXRhID0ge307XG5cblx0XHRkYXRhLmRhdGEudmVydGljZXMgPSB2ZXJ0aWNlcztcblx0XHRkYXRhLmRhdGEubm9ybWFscyA9IG5vcm1hbHM7XG5cdFx0aWYgKCBjb2xvcnMubGVuZ3RoID4gMCApIGRhdGEuZGF0YS5jb2xvcnMgPSBjb2xvcnM7XG5cdFx0aWYgKCB1dnMubGVuZ3RoID4gMCApIGRhdGEuZGF0YS51dnMgPSBbIHV2cyBdOyAvLyB0ZW1wb3JhbCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdFx0ZGF0YS5kYXRhLmZhY2VzID0gZmFjZXM7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvKlxuXHRcdCAvLyBIYW5kbGUgcHJpbWl0aXZlc1xuXG5cdFx0IHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0IGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0IHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdCBmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHQgdmFsdWVzLnB1c2goIHBhcmFtZXRlcnNbIGtleSBdICk7XG5cblx0XHQgfVxuXG5cdFx0IHZhciBnZW9tZXRyeSA9IE9iamVjdC5jcmVhdGUoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlICk7XG5cdFx0IHRoaXMuY29uc3RydWN0b3IuYXBwbHkoIGdlb21ldHJ5LCB2YWx1ZXMgKTtcblx0XHQgcmV0dXJuIGdlb21ldHJ5O1xuXG5cdFx0IH1cblxuXHRcdCByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cdFx0ICovXG5cblx0XHRyZXR1cm4gbmV3IEdlb21ldHJ5KCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR2YXIgaSwgaWwsIGosIGpsLCBrLCBrbDtcblxuXHRcdC8vIHJlc2V0XG5cblx0XHR0aGlzLnZlcnRpY2VzID0gW107XG5cdFx0dGhpcy5jb2xvcnMgPSBbXTtcblx0XHR0aGlzLmZhY2VzID0gW107XG5cdFx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblx0XHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHRcdHRoaXMubW9ycGhOb3JtYWxzID0gW107XG5cdFx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xuXHRcdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcblx0XHR0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gdmVydGljZXNcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IHNvdXJjZS52ZXJ0aWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHR2YXIgY29sb3JzID0gc291cmNlLmNvbG9ycztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbG9ycy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2xvcnMucHVzaCggY29sb3JzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZXNcblxuXHRcdHZhciBmYWNlcyA9IHNvdXJjZS5mYWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmZhY2VzLnB1c2goIGZhY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZSB2ZXJ0ZXggdXZzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBzb3VyY2UuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2VWZXJ0ZXhVdnMgPSBzb3VyY2UuZmFjZVZlcnRleFV2c1sgaSBdO1xuXG5cdFx0XHRpZiAoIHRoaXMuZmFjZVZlcnRleFV2c1sgaSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzWyBpIF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBqID0gMCwgamwgPSBmYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciB1dnMgPSBmYWNlVmVydGV4VXZzWyBqIF0sIHV2c0NvcHkgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBrID0gMCwga2wgPSB1dnMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdXYgPSB1dnNbIGsgXTtcblxuXHRcdFx0XHRcdHV2c0NvcHkucHVzaCggdXYuY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXS5wdXNoKCB1dnNDb3B5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIHRhcmdldHNcblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSB7fTtcblx0XHRcdG1vcnBoVGFyZ2V0Lm5hbWUgPSBtb3JwaFRhcmdldHNbIGkgXS5uYW1lO1xuXG5cdFx0XHQvLyB2ZXJ0aWNlc1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhUYXJnZXQudmVydGljZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0LnZlcnRpY2VzLnB1c2goIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBub3JtYWxzXG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFscyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0Lm5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbIGkgXS5ub3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0bW9ycGhUYXJnZXQubm9ybWFscy5wdXNoKCBtb3JwaFRhcmdldHNbIGkgXS5ub3JtYWxzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggbm9ybWFsc1xuXG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBtb3JwaE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBtb3JwaE5vcm1hbCA9IHt9O1xuXG5cdFx0XHQvLyB2ZXJ0ZXggbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb3JwaE5vcm1hbC52ZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdHZhciBzcmNWZXJ0ZXhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzWyBqIF07XG5cdFx0XHRcdFx0dmFyIGRlc3RWZXJ0ZXhOb3JtYWwgPSB7fTtcblxuXHRcdFx0XHRcdGRlc3RWZXJ0ZXhOb3JtYWwuYSA9IHNyY1ZlcnRleE5vcm1hbC5hLmNsb25lKCk7XG5cdFx0XHRcdFx0ZGVzdFZlcnRleE5vcm1hbC5iID0gc3JjVmVydGV4Tm9ybWFsLmIuY2xvbmUoKTtcblx0XHRcdFx0XHRkZXN0VmVydGV4Tm9ybWFsLmMgPSBzcmNWZXJ0ZXhOb3JtYWwuYy5jbG9uZSgpO1xuXG5cdFx0XHRcdFx0bW9ycGhOb3JtYWwudmVydGV4Tm9ybWFscy5wdXNoKCBkZXN0VmVydGV4Tm9ybWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZhY2Ugbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhOb3JtYWwuZmFjZU5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzLnB1c2goIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoTm9ybWFscy5wdXNoKCBtb3JwaE5vcm1hbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbiB3ZWlnaHRzXG5cblx0XHR2YXIgc2tpbldlaWdodHMgPSBzb3VyY2Uuc2tpbldlaWdodHM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBza2luV2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNraW4gaW5kaWNlc1xuXG5cdFx0dmFyIHNraW5JbmRpY2VzID0gc291cmNlLnNraW5JbmRpY2VzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc2tpbkluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHQvLyBsaW5lIGRpc3RhbmNlc1xuXG5cdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBzb3VyY2UubGluZURpc3RhbmNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGxpbmVEaXN0YW5jZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMubGluZURpc3RhbmNlcy5wdXNoKCBsaW5lRGlzdGFuY2VzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdW5kaW5nIGJveFxuXG5cdFx0dmFyIGJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94O1xuXG5cdFx0aWYgKCBib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBzcGhlcmVcblxuXHRcdHZhciBib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGZsYWdzXG5cblx0XHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IHNvdXJjZS5lbGVtZW50c05lZWRVcGRhdGU7XG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBzb3VyY2UudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IHNvdXJjZS51dnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBzb3VyY2Uubm9ybWFsc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gc291cmNlLmNvbG9yc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IHNvdXJjZS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBzb3VyY2UuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0fVxuXG5cdHRoaXMubmFtZSA9ICcnO1xuXG5cdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0dGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplO1xuXHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIGl0ZW1TaXplIDogMDtcblx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxuXHR0aGlzLmR5bmFtaWMgPSBmYWxzZTtcblx0dGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XG5cblx0dGhpcy52ZXJzaW9uID0gMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0aXNCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0b25VcGxvYWRDYWxsYmFjazogZnVuY3Rpb24gKCkge30sXG5cblx0c2V0QXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gdGhpcy5pdGVtU2l6ZSA6IDA7XG5cdFx0dGhpcy5hcnJheSA9IGFycmF5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREeW5hbWljOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5keW5hbWljID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDtcblxuXHRcdHRoaXMuZHluYW1pYyA9IHNvdXJjZS5keW5hbWljO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5QXQ6IGZ1bmN0aW9uICggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcblxuXHRcdGluZGV4MSAqPSB0aGlzLml0ZW1TaXplO1xuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5hcnJheVsgaW5kZXgxICsgaSBdID0gYXR0cmlidXRlLmFycmF5WyBpbmRleDIgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlBcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCBhcnJheSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5Q29sb3JzQXJyYXk6IGZ1bmN0aW9uICggY29sb3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNvbG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY29sb3IgPSBjb2xvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoKTogY29sb3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHRjb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLnI7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5nO1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3IuYjtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVZlY3RvcjJzQXJyYXk6IGZ1bmN0aW9uICggdmVjdG9ycyApIHtcblxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Iyc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVZlY3RvcjNzQXJyYXk6IGZ1bmN0aW9uICggdmVjdG9ycyApIHtcblxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5VmVjdG9yNHNBcnJheTogZnVuY3Rpb24gKCB2ZWN0b3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjRzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLno7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IudztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlLCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF07XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIGluZGV4LCB4ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRZOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXTtcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggaW5kZXgsIHkgKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRaOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXTtcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggaW5kZXgsIHogKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRXOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXTtcblxuXHR9LFxuXG5cdHNldFc6IGZ1bmN0aW9uICggaW5kZXgsIHcgKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWTogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVo6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZWlc6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvblVwbG9hZDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmFycmF5LCB0aGlzLml0ZW1TaXplICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBJbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDhCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDhCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50OENsYW1wZWRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5JbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5VaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDE2QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEludDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50MzJCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgRmxvYXQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGbG9hdDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEZsb2F0NjRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5GbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdEdlb21ldHJ5KCkge1xuXG5cdHRoaXMudmVydGljZXMgPSBbXTtcblx0dGhpcy5ub3JtYWxzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMudXZzID0gW107XG5cdHRoaXMudXZzMiA9IFtdO1xuXG5cdHRoaXMuZ3JvdXBzID0gW107XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSB7fTtcblxuXHR0aGlzLnNraW5XZWlnaHRzID0gW107XG5cdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcblxuXHQvLyB0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0Ly8gdXBkYXRlIGZsYWdzXG5cblx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy51dnNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIERpcmVjdEdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGNvbXB1dGVHcm91cHM6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgZ3JvdXA7XG5cdFx0dmFyIGdyb3VwcyA9IFtdO1xuXHRcdHZhciBtYXRlcmlhbEluZGV4ID0gdW5kZWZpbmVkO1xuXG5cdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0Ly8gbWF0ZXJpYWxzXG5cblx0XHRcdGlmICggZmFjZS5tYXRlcmlhbEluZGV4ICE9PSBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Z3JvdXAuY291bnQgPSAoIGkgKiAzICkgLSBncm91cC5zdGFydDtcblx0XHRcdFx0XHRncm91cHMucHVzaCggZ3JvdXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z3JvdXAgPSB7XG5cdFx0XHRcdFx0c3RhcnQ6IGkgKiAzLFxuXHRcdFx0XHRcdG1hdGVyaWFsSW5kZXg6IG1hdGVyaWFsSW5kZXhcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRncm91cC5jb3VudCA9ICggaSAqIDMgKSAtIGdyb3VwLnN0YXJ0O1xuXHRcdFx0Z3JvdXBzLnB1c2goIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmdyb3VwcyA9IGdyb3VwcztcblxuXHR9LFxuXG5cdGZyb21HZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdHZhciBmYWNlVmVydGV4VXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2cztcblxuXHRcdHZhciBoYXNGYWNlVmVydGV4VXYgPSBmYWNlVmVydGV4VXZzWyAwIF0gJiYgZmFjZVZlcnRleFV2c1sgMCBdLmxlbmd0aCA+IDA7XG5cdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdjIgPSBmYWNlVmVydGV4VXZzWyAxIF0gJiYgZmFjZVZlcnRleFV2c1sgMSBdLmxlbmd0aCA+IDA7XG5cblx0XHQvLyBtb3JwaHNcblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cdFx0dmFyIG1vcnBoVGFyZ2V0c0xlbmd0aCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzUG9zaXRpb247XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0c0xlbmd0aCA+IDAgKSB7XG5cblx0XHRcdG1vcnBoVGFyZ2V0c1Bvc2l0aW9uID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG1vcnBoVGFyZ2V0c0xlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvblsgaSBdID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUsXG5cdFx0XHRcdCBcdGRhdGE6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucG9zaXRpb24gPSBtb3JwaFRhcmdldHNQb3NpdGlvbjtcblxuXHRcdH1cblxuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBnZW9tZXRyeS5tb3JwaE5vcm1hbHM7XG5cdFx0dmFyIG1vcnBoTm9ybWFsc0xlbmd0aCA9IG1vcnBoTm9ybWFscy5sZW5ndGg7XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzTm9ybWFsO1xuXG5cdFx0aWYgKCBtb3JwaE5vcm1hbHNMZW5ndGggPiAwICkge1xuXG5cdFx0XHRtb3JwaFRhcmdldHNOb3JtYWwgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c05vcm1hbFsgaSBdID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1vcnBoTm9ybWFsc1sgaSBdLm5hbWUsXG5cdFx0XHRcdCBcdGRhdGE6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMubm9ybWFsID0gbW9ycGhUYXJnZXRzTm9ybWFsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbnNcblxuXHRcdHZhciBza2luSW5kaWNlcyA9IGdlb21ldHJ5LnNraW5JbmRpY2VzO1xuXHRcdHZhciBza2luV2VpZ2h0cyA9IGdlb21ldHJ5LnNraW5XZWlnaHRzO1xuXG5cdFx0dmFyIGhhc1NraW5JbmRpY2VzID0gc2tpbkluZGljZXMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XG5cdFx0dmFyIGhhc1NraW5XZWlnaHRzID0gc2tpbldlaWdodHMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB2ZXJ0aWNlcy5sZW5ndGggPiAwICYmIGZhY2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5OiBGYWNlbGVzcyBnZW9tZXRyaWVzIGFyZSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGZhY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBmYWNlLmEgXSwgdmVydGljZXNbIGZhY2UuYiBdLCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2goIHZlcnRleE5vcm1hbHNbIDAgXSwgdmVydGV4Tm9ybWFsc1sgMSBdLCB2ZXJ0ZXhOb3JtYWxzWyAyIF0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS5ub3JtYWw7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2goIG5vcm1hbCwgbm9ybWFsLCBub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdGlmICggdmVydGV4Q29sb3JzLmxlbmd0aCA9PT0gMyApIHtcblxuXHRcdFx0XHR0aGlzLmNvbG9ycy5wdXNoKCB2ZXJ0ZXhDb2xvcnNbIDAgXSwgdmVydGV4Q29sb3JzWyAxIF0sIHZlcnRleENvbG9yc1sgMiBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIGNvbG9yID0gZmFjZS5jb2xvcjtcblxuXHRcdFx0XHR0aGlzLmNvbG9ycy5wdXNoKCBjb2xvciwgY29sb3IsIGNvbG9yICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4VXYgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDAgXVsgaSBdO1xuXG5cdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnV2cy5wdXNoKCB2ZXJ0ZXhVdnNbIDAgXSwgdmVydGV4VXZzWyAxIF0sIHZlcnRleFV2c1sgMiBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYgJywgaSApO1xuXG5cdFx0XHRcdFx0dGhpcy51dnMucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdjIgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDEgXVsgaSBdO1xuXG5cdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaCggdmVydGV4VXZzWyAwIF0sIHZlcnRleFV2c1sgMSBdLCB2ZXJ0ZXhVdnNbIDIgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2MiAnLCBpICk7XG5cblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBtb3JwaHNcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhUYXJnZXRzTGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaiBdLnZlcnRpY2VzO1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c1Bvc2l0aW9uWyBqIF0uZGF0YS5wdXNoKCBtb3JwaFRhcmdldFsgZmFjZS5hIF0sIG1vcnBoVGFyZ2V0WyBmYWNlLmIgXSwgbW9ycGhUYXJnZXRbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaE5vcm1hbCA9IG1vcnBoTm9ybWFsc1sgaiBdLnZlcnRleE5vcm1hbHNbIGkgXTtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNOb3JtYWxbIGogXS5kYXRhLnB1c2goIG1vcnBoTm9ybWFsLmEsIG1vcnBoTm9ybWFsLmIsIG1vcnBoTm9ybWFsLmMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBza2luc1xuXG5cdFx0XHRpZiAoIGhhc1NraW5JbmRpY2VzICkge1xuXG5cdFx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGZhY2UuYSBdLCBza2luSW5kaWNlc1sgZmFjZS5iIF0sIHNraW5JbmRpY2VzWyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2tpbldlaWdodHMgKSB7XG5cblx0XHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgZmFjZS5hIF0sIHNraW5XZWlnaHRzWyBmYWNlLmIgXSwgc2tpbldlaWdodHNbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcHV0ZUdyb3VwcyggZ2VvbWV0cnkgKTtcblxuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnV2c05lZWRVcGRhdGU7XG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gYXJyYXlNYXgoIGFycmF5ICkge1xuXG5cdGlmICggYXJyYXkubGVuZ3RoID09PSAwICkgcmV0dXJuIC0gSW5maW5pdHk7XG5cblx0dmFyIG1heCA9IGFycmF5WyAwIF07XG5cblx0Zm9yICggdmFyIGkgPSAxLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgKysgaSApIHtcblxuXHRcdGlmICggYXJyYXlbIGkgXSA+IG1heCApIG1heCA9IGFycmF5WyBpIF07XG5cblx0fVxuXG5cdHJldHVybiBtYXg7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgYnVmZmVyR2VvbWV0cnlJZCA9IDE7IC8vIEJ1ZmZlckdlb21ldHJ5IHVzZXMgb2RkIG51bWJlcnMgYXMgSWRcblxuZnVuY3Rpb24gQnVmZmVyR2VvbWV0cnkoKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBidWZmZXJHZW9tZXRyeUlkICs9IDIgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMuaW5kZXggPSBudWxsO1xuXHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblxuXHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXG5cdHRoaXMuZ3JvdXBzID0gW107XG5cblx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XG5cblx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG59XG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBCdWZmZXJHZW9tZXRyeSxcblxuXHRpc0J1ZmZlckdlb21ldHJ5OiB0cnVlLFxuXG5cdGdldEluZGV4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbmRleDtcblxuXHR9LFxuXG5cdHNldEluZGV4OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbmRleCApICkge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gbmV3ICggYXJyYXlNYXgoIGluZGV4ICkgPiA2NTUzNSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSApKCBpbmRleCwgMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5pbmRleCA9IGluZGV4O1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0YWRkQXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUsIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggISAoIGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUuaXNCdWZmZXJBdHRyaWJ1dGUgKSAmJiAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS4nICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJndW1lbnRzWyAxIF0sIGFyZ3VtZW50c1sgMiBdICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbmFtZSA9PT0gJ2luZGV4JyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuYWRkQXR0cmlidXRlOiBVc2UgLnNldEluZGV4KCkgZm9yIGluZGV4IGF0dHJpYnV0ZS4nICk7XG5cdFx0XHR0aGlzLnNldEluZGV4KCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0fSxcblxuXHRyZW1vdmVBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkR3JvdXA6IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0dGhpcy5ncm91cHMucHVzaCgge1xuXG5cdFx0XHRzdGFydDogc3RhcnQsXG5cdFx0XHRjb3VudDogY291bnQsXG5cdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMFxuXG5cdFx0fSApO1xuXG5cdH0sXG5cblx0Y2xlYXJHcm91cHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0fSxcblxuXHRzZXREcmF3UmFuZ2U6IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblx0XHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHZhciBub3JtYWwgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsTWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbCApO1xuXHRcdFx0bm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB4LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblgoIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB5LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB6LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlKCB4LCB5LCB6ICkge1xuXG5cdFx0XHRtMS5tYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRzY2FsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gc2NhbGUgZ2VvbWV0cnlcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHRcdG0xLm1ha2VTY2FsZSggeCwgeSwgeiApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iaiA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggdmVjdG9yICkge1xuXG5cdFx0XHRvYmoubG9va0F0KCB2ZWN0b3IgKTtcblxuXHRcdFx0b2JqLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBvYmoubWF0cml4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNlbnRlcigpIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIG9mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0XHR0aGlzLnRyYW5zbGF0ZSggb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5zZXRGcm9tT2JqZWN0KCkuIENvbnZlcnRpbmcnLCBvYmplY3QsIHRoaXMgKTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggb2JqZWN0LmlzUG9pbnRzIHx8IG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMywgMyApO1xuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoICogMywgMyApO1xuXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS52ZXJ0aWNlcyApICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgY29sb3JzLmNvcHlDb2xvcnNBcnJheSggZ2VvbWV0cnkuY29sb3JzICkgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICYmIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMubGVuZ3RoID09PSBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkubGluZURpc3RhbmNlcy5sZW5ndGgsIDEgKTtcblxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIGxpbmVEaXN0YW5jZXMuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR0aGlzLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0cG9zaXRpb24ucHVzaCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCAzICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlRnJvbU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdHZhciBkaXJlY3QgPSBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkaXJlY3QgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGlyZWN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRpcmVjdC52ZXJ0aWNlc05lZWRVcGRhdGUgPSBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3Qubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC51dnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdFx0Z2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRnZW9tZXRyeSA9IGRpcmVjdDtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdGlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS5ub3JtYWxzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmNvbG9yO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnV2O1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmxpbmVEaXN0YW5jZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUdyb3Vwcyggb2JqZWN0Lmdlb21ldHJ5ICk7XG5cdFx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ID0gbmV3IERpcmVjdEdlb21ldHJ5KCkuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbURpcmVjdEdlb21ldHJ5KCBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ICk7XG5cblx0fSxcblxuXHRmcm9tRGlyZWN0R2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMyApO1xuXHRcdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggKiAzICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkubm9ybWFscyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmNvbG9ycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudXZzLmxlbmd0aCAqIDIgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzMi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzMiA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnV2czIubGVuZ3RoICogMiApO1xuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1djInLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMyLCAyICkuY29weVZlY3RvcjJzQXJyYXkoIGdlb21ldHJ5LnV2czIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdC8vIG1vcnBoc1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldC5kYXRhLmxlbmd0aCAqIDMsIDMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5hbWUgPSBtb3JwaFRhcmdldC5uYW1lO1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggbW9ycGhUYXJnZXQuZGF0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbm5pbmdcblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5JbmRpY2VzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnc2tpbkluZGV4Jywgc2tpbkluZGljZXMuY29weVZlY3RvcjRzQXJyYXkoIGdlb21ldHJ5LnNraW5JbmRpY2VzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5XZWlnaHRzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnc2tpbldlaWdodCcsIHNraW5XZWlnaHRzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luV2VpZ2h0cyApICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueCApIHx8IGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi55ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnogKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveDogQ29tcHV0ZWQgbWluL21heCBoYXZlIE5hTiB2YWx1ZXMuIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJywgdGhpcyApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblx0XHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb21wdXRlQm91bmRpbmdTcGhlcmUoKSB7XG5cblx0XHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0XHR2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XG5cblx0XHRcdFx0Ym94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cdFx0XHRcdGJveC5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0XHRcdC8vIGhvcGluZyB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcblxuXHRcdFx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVjdG9yLnggPSBwb3NpdGlvbi5nZXRYKCBpICk7XG5cdFx0XHRcdFx0dmVjdG9yLnkgPSBwb3NpdGlvbi5nZXRZKCBpICk7XG5cdFx0XHRcdFx0dmVjdG9yLnogPSBwb3NpdGlvbi5nZXRaKCBpICk7XG5cdFx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdmVjdG9yICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblx0fSxcblxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdGlmICggYXR0cmlidXRlcy5wb3NpdGlvbiApIHtcblxuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9ucy5sZW5ndGggKSwgMyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVzZXQgZXhpc3Rpbmcgbm9ybWFscyB0byB6ZXJvXG5cblx0XHRcdFx0dmFyIGFycmF5ID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0YXJyYXlbIGkgXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cblx0XHRcdHZhciB2QSwgdkIsIHZDO1xuXHRcdFx0dmFyIHBBID0gbmV3IFZlY3RvcjMoKSwgcEIgPSBuZXcgVmVjdG9yMygpLCBwQyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgY2IgPSBuZXcgVmVjdG9yMygpLCBhYiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdC8vIGluZGV4ZWQgZWxlbWVudHNcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHR2QSA9IGluZGljZXNbIGkgKyAwIF0gKiAzO1xuXHRcdFx0XHRcdHZCID0gaW5kaWNlc1sgaSArIDEgXSAqIDM7XG5cdFx0XHRcdFx0dkMgPSBpbmRpY2VzWyBpICsgMiBdICogMztcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCB2QSApO1xuXHRcdFx0XHRcdHBCLmZyb21BcnJheSggcG9zaXRpb25zLCB2QiApO1xuXHRcdFx0XHRcdHBDLmZyb21BcnJheSggcG9zaXRpb25zLCB2QyApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRub3JtYWxzWyB2QSBdICs9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkEgKyAxIF0gKz0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyB2QSArIDIgXSArPSBjYi56O1xuXG5cdFx0XHRcdFx0bm9ybWFsc1sgdkIgXSArPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZCICsgMSBdICs9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkIgKyAyIF0gKz0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIHZDIF0gKz0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyB2QyArIDEgXSArPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZDICsgMiBdICs9IGNiLno7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWw7IGkgKz0gOSApIHtcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCBpICk7XG5cdFx0XHRcdFx0cEIuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyAzICk7XG5cdFx0XHRcdFx0cEMuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyA2ICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgXSA9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDEgXSA9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDIgXSA9IGNiLno7XG5cblx0XHRcdFx0XHRub3JtYWxzWyBpICsgMyBdID0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNCBdID0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNSBdID0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA2IF0gPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA3IF0gPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA4IF0gPSBjYi56O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcblxuXHRcdFx0YXR0cmlidXRlcy5ub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2Zmc2V0ID0gMDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHQnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogT3ZlcndyaXRpbmcgb3JpZ2luYWwgZ2VvbWV0cnksIHN0YXJ0aW5nIGF0IG9mZnNldD0wLiAnXG5cdFx0XHRcdCsgJ1VzZSBCdWZmZXJHZW9tZXRyeVV0aWxzLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZvciBsb3NzbGVzcyBtZXJnZS4nXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MSA9IGF0dHJpYnV0ZTEuYXJyYXk7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUyID0gZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHR2YXIgYXR0cmlidXRlQXJyYXkyID0gYXR0cmlidXRlMi5hcnJheTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZVNpemUgPSBhdHRyaWJ1dGUyLml0ZW1TaXplO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGogPSBhdHRyaWJ1dGVTaXplICogb2Zmc2V0OyBpIDwgYXR0cmlidXRlQXJyYXkyLmxlbmd0aDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVBcnJheTFbIGogXSA9IGF0dHJpYnV0ZUFycmF5MlsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIG5vcm1hbGl6ZU5vcm1hbHMoKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2ZWN0b3IueCA9IG5vcm1hbHMuZ2V0WCggaSApO1xuXHRcdFx0XHR2ZWN0b3IueSA9IG5vcm1hbHMuZ2V0WSggaSApO1xuXHRcdFx0XHR2ZWN0b3IueiA9IG5vcm1hbHMuZ2V0WiggaSApO1xuXG5cdFx0XHRcdHZlY3Rvci5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnNldFhZWiggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0b05vbkluZGV4ZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHR2YXIgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0XHR2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRcdHZhciBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGluZGljZXMubGVuZ3RoICogaXRlbVNpemUgKTtcblxuXHRcdFx0dmFyIGluZGV4ID0gMCwgaW5kZXgyID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc1sgaSBdICogaXRlbVNpemU7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Mi5hZGRBdHRyaWJ1dGUoIG5hbWUsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0Z2VvbWV0cnkyLmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTI7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnQnVmZmVyR2VvbWV0cnknLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdCdWZmZXJHZW9tZXRyeS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIEJ1ZmZlckdlb21ldHJ5IHNlcmlhbGl6YXRpb25cblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHRkYXRhLmRhdGEgPSB7IGF0dHJpYnV0ZXM6IHt9IH07XG5cblx0XHR2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGluZGV4LmFycmF5ICk7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IGFycmF5XG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0dmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGF0dHJpYnV0ZS5hcnJheSApO1xuXG5cdFx0XHRkYXRhLmRhdGEuYXR0cmlidXRlc1sga2V5IF0gPSB7XG5cdFx0XHRcdGl0ZW1TaXplOiBhdHRyaWJ1dGUuaXRlbVNpemUsXG5cdFx0XHRcdHR5cGU6IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogYXJyYXksXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IGF0dHJpYnV0ZS5ub3JtYWxpemVkXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRyYWRpdXM6IGJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qXG5cdFx0IC8vIEhhbmRsZSBwcmltaXRpdmVzXG5cblx0XHQgdmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHQgaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQgdmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0IGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdCB2YWx1ZXMucHVzaCggcGFyYW1ldGVyc1sga2V5IF0gKTtcblxuXHRcdCB9XG5cblx0XHQgdmFyIGdlb21ldHJ5ID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTtcblx0XHQgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSggZ2VvbWV0cnksIHZhbHVlcyApO1xuXHRcdCByZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHQgfVxuXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblx0XHQgKi9cblxuXHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHZhciBuYW1lLCBpLCBsO1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc2V0SW5kZXgoIGluZGV4LmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR2YXIgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGRyYXcgcmFuZ2VcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IHNvdXJjZS5kcmF3UmFuZ2UuY291bnQ7XG5cblx0XHQvLyB1c2VyIGRhdGFcblxuXHRcdHRoaXMudXNlckRhdGEgPSBzb3VyY2UudXNlckRhdGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEJveEdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQm94QnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkJveEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuQm94R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94R2VvbWV0cnk7XG5cbi8vIEJveEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblx0ZGVwdGggPSBkZXB0aCB8fCAxO1xuXG5cdC8vIHNlZ21lbnRzXG5cblx0d2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCAxO1xuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTtcblx0ZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIGRlcHRoU2VnbWVudHMgKSB8fCAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblxuXHQvLyBidWlsZCBlYWNoIHNpZGUgb2YgdGhlIGJveCBnZW9tZXRyeVxuXG5cdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIC0gMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDAgKTsgLy8gcHhcblx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCAtIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMSApOyAvLyBueFxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAxLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMiApOyAvLyBweVxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAtIDEsIHdpZHRoLCBkZXB0aCwgLSBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDMgKTsgLy8gbnlcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLSAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHR2YXIgc2VnbWVudFdpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHR2YXIgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0dmFyIHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcblx0XHR2YXIgaGVpZ2h0SGFsZiA9IGhlaWdodCAvIDI7XG5cdFx0dmFyIGRlcHRoSGFsZiA9IGRlcHRoIC8gMjtcblxuXHRcdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0dmFyIGdyaWRZMSA9IGdyaWRZICsgMTtcblxuXHRcdHZhciB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHR2YXIgaXgsIGl5O1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0dmFyIHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmO1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0XHR2YXIgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSB4ICogdWRpcjtcblx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcblx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7XG5cblx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyXG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSAwO1xuXHRcdFx0XHR2ZWN0b3JbIHYgXSA9IDA7XG5cdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcblxuXHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHQvLyB1dnNcblxuXHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHRcdFx0Ly8gY291bnRlcnNcblxuXHRcdFx0XHR2ZXJ0ZXhDb3VudGVyICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdC8vIDEuIHlvdSBuZWVkIHRocmVlIGluZGljZXMgdG8gZHJhdyBhIHNpbmdsZSBmYWNlXG5cdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcblx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdHZhciBhID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogaXk7XG5cdFx0XHRcdHZhciBiID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0dmFyIGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdHZhciBkID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiBpeTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIG1hdGVyaWFsSW5kZXggKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0Ly8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xuXG5cdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xuXG5cdH1cblxufVxuXG5Cb3hCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkJveEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFBsYW5lR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblBsYW5lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lR2VvbWV0cnk7XG5cbi8vIFBsYW5lQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVCdWZmZXJHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHR2YXIgd2lkdGhfaGFsZiA9IHdpZHRoIC8gMjtcblx0dmFyIGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHR2YXIgZ3JpZFggPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgMTtcblx0dmFyIGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCAxO1xuXG5cdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdHZhciBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0dmFyIHNlZ21lbnRfd2lkdGggPSB3aWR0aCAvIGdyaWRYO1xuXHR2YXIgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdHZhciB5ID0gaXkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmO1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7XG5cblx0XHRcdHZhciB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgLSB5LCAwICk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XG5cblx0XHRcdHZhciBhID0gaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdHZhciBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0dmFyIGMgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdHZhciBkID0gKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG52YXIgbWF0ZXJpYWxJZCA9IDA7XG5cbmZ1bmN0aW9uIE1hdGVyaWFsKCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogbWF0ZXJpYWxJZCArKyB9ICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XG5cblx0dGhpcy5mb2cgPSB0cnVlO1xuXHR0aGlzLmxpZ2h0cyA9IHRydWU7XG5cblx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xuXHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XG5cdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBOb0NvbG9yczsgLy8gVEhSRUUuTm9Db2xvcnMsIFRIUkVFLlZlcnRleENvbG9ycywgVEhSRUUuRmFjZUNvbG9yc1xuXG5cdHRoaXMub3BhY2l0eSA9IDE7XG5cdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuXHR0aGlzLmJsZW5kU3JjID0gU3JjQWxwaGFGYWN0b3I7XG5cdHRoaXMuYmxlbmREc3QgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yO1xuXHR0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0dGhpcy5ibGVuZFNyY0FscGhhID0gbnVsbDtcblx0dGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDtcblx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXG5cdHRoaXMuZGVwdGhGdW5jID0gTGVzc0VxdWFsRGVwdGg7XG5cdHRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTtcblx0dGhpcy5kZXB0aFdyaXRlID0gdHJ1ZTtcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcblx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gZmFsc2U7XG5cdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcblxuXHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xuXG5cdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XG5cblx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxuXG5cdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XG5cblx0dGhpcy5kaXRoZXJpbmcgPSBmYWxzZTtcblxuXHR0aGlzLmFscGhhVGVzdCA9IDA7XG5cdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE1hdGVyaWFsLFxuXG5cdGlzTWF0ZXJpYWw6IHRydWUsXG5cblx0b25CZWZvcmVDb21waWxlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRzZXRWYWx1ZXM6IGZ1bmN0aW9uICggdmFsdWVzICkge1xuXG5cdFx0aWYgKCB2YWx1ZXMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGZvciAoIHZhciBrZXkgaW4gdmFsdWVzICkge1xuXG5cdFx0XHR2YXIgbmV3VmFsdWUgPSB2YWx1ZXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdGVyaWFsOiAnXCIgKyBrZXkgKyBcIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cIiApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBmb3IgYmFja3dhcmQgY29tcGF0YWJpbGl0eSBpZiBzaGFkaW5nIGlzIHNldCBpbiB0aGUgY29uc3RydWN0b3Jcblx0XHRcdGlmICgga2V5ID09PSAnc2hhZGluZycgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZmxhdFNoYWRpbmcgPSAoIG5ld1ZhbHVlID09PSBGbGF0U2hhZGluZyApID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3VycmVudFZhbHVlID0gdGhpc1sga2V5IF07XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLlwiICsgdGhpcy50eXBlICsgXCI6ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5zZXQoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgKSAmJiAoIG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMyApICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5jb3B5KCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gbmV3VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGlzUm9vdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlICYmIHRoaXMuZW1pc3NpdmUuaXNDb2xvciApIGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAhPT0gMSApIGRhdGEuZW1pc3NpdmVJbnRlbnNpdHkgPSB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyICYmIHRoaXMuc3BlY3VsYXIuaXNDb2xvciApIGRhdGEuc3BlY3VsYXIgPSB0aGlzLnNwZWN1bGFyLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuc2hpbmluZXNzID0gdGhpcy5zaGluaW5lc3M7XG5cdFx0aWYgKCB0aGlzLmNsZWFyQ29hdCAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhckNvYXQgPSB0aGlzLmNsZWFyQ29hdDtcblx0XHRpZiAoIHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLmNsZWFyQ29hdFJvdWdobmVzcyA9IHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzO1xuXG5cdFx0aWYgKCB0aGlzLm1hcCAmJiB0aGlzLm1hcC5pc1RleHR1cmUgKSBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmFscGhhTWFwICYmIHRoaXMuYWxwaGFNYXAuaXNUZXh0dXJlICkgZGF0YS5hbHBoYU1hcCA9IHRoaXMuYWxwaGFNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubGlnaHRNYXAgJiYgdGhpcy5saWdodE1hcC5pc1RleHR1cmUgKSBkYXRhLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmFvTWFwICYmIHRoaXMuYW9NYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5hb01hcEludGVuc2l0eSA9IHRoaXMuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ub3JtYWxNYXAgPSB0aGlzLm5vcm1hbE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5ub3JtYWxNYXBUeXBlID0gdGhpcy5ub3JtYWxNYXBUeXBlO1xuXHRcdFx0ZGF0YS5ub3JtYWxTY2FsZSA9IHRoaXMubm9ybWFsU2NhbGUudG9BcnJheSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRpc3BsYWNlbWVudE1hcCAmJiB0aGlzLmRpc3BsYWNlbWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50TWFwID0gdGhpcy5kaXNwbGFjZW1lbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50U2NhbGUgPSB0aGlzLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzc01hcCAmJiB0aGlzLnJvdWdobmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLm1ldGFsbmVzc01hcCA9IHRoaXMubWV0YWxuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVNYXAgJiYgdGhpcy5lbWlzc2l2ZU1hcC5pc1RleHR1cmUgKSBkYXRhLmVtaXNzaXZlTWFwID0gdGhpcy5lbWlzc2l2ZU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJNYXAgPSB0aGlzLnNwZWN1bGFyTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW52TWFwICYmIHRoaXMuZW52TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eTsgLy8gU2NhbGUgYmVoaW5kIGVudk1hcFxuXG5cdFx0XHRpZiAoIHRoaXMuY29tYmluZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5jb21iaW5lID0gdGhpcy5jb21iaW5lO1xuXHRcdFx0aWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ncmFkaWVudE1hcCA9IHRoaXMuZ3JhZGllbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5zaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLnNpemUgPSB0aGlzLnNpemU7XG5cdFx0aWYgKCB0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdGlmICggdGhpcy5ibGVuZGluZyAhPT0gTm9ybWFsQmxlbmRpbmcgKSBkYXRhLmJsZW5kaW5nID0gdGhpcy5ibGVuZGluZztcblx0XHRpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSBkYXRhLmZsYXRTaGFkaW5nID0gdGhpcy5mbGF0U2hhZGluZztcblx0XHRpZiAoIHRoaXMuc2lkZSAhPT0gRnJvbnRTaWRlICkgZGF0YS5zaWRlID0gdGhpcy5zaWRlO1xuXHRcdGlmICggdGhpcy52ZXJ0ZXhDb2xvcnMgIT09IE5vQ29sb3JzICkgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0aGlzLnZlcnRleENvbG9ycztcblxuXHRcdGlmICggdGhpcy5vcGFjaXR5IDwgMSApIGRhdGEub3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IHRydWUgKSBkYXRhLnRyYW5zcGFyZW50ID0gdGhpcy50cmFuc3BhcmVudDtcblxuXHRcdGRhdGEuZGVwdGhGdW5jID0gdGhpcy5kZXB0aEZ1bmM7XG5cdFx0ZGF0YS5kZXB0aFRlc3QgPSB0aGlzLmRlcHRoVGVzdDtcblx0XHRkYXRhLmRlcHRoV3JpdGUgPSB0aGlzLmRlcHRoV3JpdGU7XG5cblx0XHQvLyByb3RhdGlvbiAoU3ByaXRlTWF0ZXJpYWwpXG5cdFx0aWYgKCB0aGlzLnJvdGF0aW9uICE9PSAwICkgZGF0YS5yb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG5cblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIGRhdGEucG9seWdvbk9mZnNldCA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIHRoaXMubGluZXdpZHRoICE9PSAxICkgZGF0YS5saW5ld2lkdGggPSB0aGlzLmxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMuZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZGFzaFNpemUgPSB0aGlzLmRhc2hTaXplO1xuXHRcdGlmICggdGhpcy5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLmdhcFNpemUgPSB0aGlzLmdhcFNpemU7XG5cdFx0aWYgKCB0aGlzLnNjYWxlICE9PSB1bmRlZmluZWQgKSBkYXRhLnNjYWxlID0gdGhpcy5zY2FsZTtcblxuXHRcdGlmICggdGhpcy5kaXRoZXJpbmcgPT09IHRydWUgKSBkYXRhLmRpdGhlcmluZyA9IHRydWU7XG5cblx0XHRpZiAoIHRoaXMuYWxwaGFUZXN0ID4gMCApIGRhdGEuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3Q7XG5cdFx0aWYgKCB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIGRhdGEucHJlbXVsdGlwbGllZEFscGhhID0gdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lID09PSB0cnVlICkgZGF0YS53aXJlZnJhbWUgPSB0aGlzLndpcmVmcmFtZTtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVjYXAgIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVjYXAgPSB0aGlzLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVqb2luICE9PSAncm91bmQnICkgZGF0YS53aXJlZnJhbWVMaW5lam9pbiA9IHRoaXMud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIHRoaXMubW9ycGhUYXJnZXRzID09PSB0cnVlICkgZGF0YS5tb3JwaFRhcmdldHMgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5za2lubmluZyA9PT0gdHJ1ZSApIGRhdGEuc2tpbm5pbmcgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgZGF0YS52aXNpYmxlID0gZmFsc2U7XG5cdFx0aWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHQvLyBUT0RPOiBDb3BpZWQgZnJvbSBPYmplY3QzRC50b0pTT05cblxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkge1xuXG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBjYWNoZVsga2V5IF07XG5cdFx0XHRcdGRlbGV0ZSBkYXRhLm1ldGFkYXRhO1xuXHRcdFx0XHR2YWx1ZXMucHVzaCggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzUm9vdCApIHtcblxuXHRcdFx0dmFyIHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0dmFyIGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7XG5cblx0XHRcdGlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIGRhdGEudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBkYXRhLmltYWdlcyA9IGltYWdlcztcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cdFx0dGhpcy5saWdodHMgPSBzb3VyY2UubGlnaHRzO1xuXG5cdFx0dGhpcy5ibGVuZGluZyA9IHNvdXJjZS5ibGVuZGluZztcblx0XHR0aGlzLnNpZGUgPSBzb3VyY2Uuc2lkZTtcblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gc291cmNlLmZsYXRTaGFkaW5nO1xuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gc291cmNlLnZlcnRleENvbG9ycztcblxuXHRcdHRoaXMub3BhY2l0eSA9IHNvdXJjZS5vcGFjaXR5O1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSBzb3VyY2UudHJhbnNwYXJlbnQ7XG5cblx0XHR0aGlzLmJsZW5kU3JjID0gc291cmNlLmJsZW5kU3JjO1xuXHRcdHRoaXMuYmxlbmREc3QgPSBzb3VyY2UuYmxlbmREc3Q7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uID0gc291cmNlLmJsZW5kRXF1YXRpb247XG5cdFx0dGhpcy5ibGVuZFNyY0FscGhhID0gc291cmNlLmJsZW5kU3JjQWxwaGE7XG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gc291cmNlLmJsZW5kRHN0QWxwaGE7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBzb3VyY2UuYmxlbmRFcXVhdGlvbkFscGhhO1xuXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBzb3VyY2UuZGVwdGhGdW5jO1xuXHRcdHRoaXMuZGVwdGhUZXN0ID0gc291cmNlLmRlcHRoVGVzdDtcblx0XHR0aGlzLmRlcHRoV3JpdGUgPSBzb3VyY2UuZGVwdGhXcml0ZTtcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uO1xuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBzb3VyY2UuZGl0aGVyaW5nO1xuXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuXHRcdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gc291cmNlLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cdFx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gc291cmNlLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHR2YXIgc3JjUGxhbmVzID0gc291cmNlLmNsaXBwaW5nUGxhbmVzLFxuXHRcdFx0ZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgbiA9IHNyY1BsYW5lcy5sZW5ndGg7XG5cdFx0XHRkc3RQbGFuZXMgPSBuZXcgQXJyYXkoIG4gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpIClcblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lcztcblxuXHRcdHRoaXMuc2hhZG93U2lkZSA9IHNvdXJjZS5zaGFkb3dTaWRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZGVmaW5lczogeyBcImxhYmVsXCIgOiBcInZhbHVlXCIgfSxcbiAqICB1bmlmb3JtczogeyBcInBhcmFtZXRlcjFcIjogeyB2YWx1ZTogMS4wIH0sIFwicGFyYW1ldGVyMlwiOiB7IHZhbHVlMjogMiB9IH0sXG4gKlxuICogIGZyYWdtZW50U2hhZGVyOiA8c3RyaW5nPixcbiAqICB2ZXJ0ZXhTaGFkZXI6IDxzdHJpbmc+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIGxpZ2h0czogPGJvb2w+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU2hhZGVyTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFkZXJNYXRlcmlhbCc7XG5cblx0dGhpcy5kZWZpbmVzID0ge307XG5cdHRoaXMudW5pZm9ybXMgPSB7fTtcblxuXHR0aGlzLnZlcnRleFNoYWRlciA9ICd2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn0nO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gJ3ZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59JztcblxuXHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgZm9nXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgbGlnaHRzXG5cdHRoaXMuY2xpcHBpbmcgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSB1c2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzXG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNraW5uaW5nIGF0dHJpYnV0ZSBzdHJlYW1zXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7IC8vIHNldCB0byB1c2UgbW9ycGggdGFyZ2V0c1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIG5vcm1hbHNcblxuXHR0aGlzLmV4dGVuc2lvbnMgPSB7XG5cdFx0ZGVyaXZhdGl2ZXM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRlcml2YXRpdmVzXG5cdFx0ZnJhZ0RlcHRoOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBmcmFnbWVudCBkZXB0aCB2YWx1ZXNcblx0XHRkcmF3QnVmZmVyczogZmFsc2UsIC8vIHNldCB0byB1c2UgZHJhdyBidWZmZXJzXG5cdFx0c2hhZGVyVGV4dHVyZUxPRDogZmFsc2UgLy8gc2V0IHRvIHVzZSBzaGFkZXIgdGV4dHVyZSBMT0Rcblx0fTtcblxuXHQvLyBXaGVuIHJlbmRlcmVkIGdlb21ldHJ5IGRvZXNuJ3QgaW5jbHVkZSB0aGVzZSBhdHRyaWJ1dGVzIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lcyxcblx0Ly8gdXNlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGluIFdlYkdMLiBUaGlzIGF2b2lkcyBlcnJvcnMgd2hlbiBidWZmZXIgZGF0YSBpcyBtaXNzaW5nLlxuXHR0aGlzLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSB7XG5cdFx0J2NvbG9yJzogWyAxLCAxLCAxIF0sXG5cdFx0J3V2JzogWyAwLCAwIF0sXG5cdFx0J3V2Mic6IFsgMCwgMCBdXG5cdH07XG5cblx0dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lID0gdW5kZWZpbmVkO1xuXHR0aGlzLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmF0dHJpYnV0ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNoYWRlck1hdGVyaWFsOiBhdHRyaWJ1dGVzIHNob3VsZCBub3cgYmUgZGVmaW5lZCBpbiBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG59XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhZGVyTWF0ZXJpYWw7XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc291cmNlLmZyYWdtZW50U2hhZGVyO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7XG5cblx0dGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMuY2xvbmUoIHNvdXJjZS51bmlmb3JtcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UuZGVmaW5lcyApO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblx0dGhpcy5jbGlwcGluZyA9IHNvdXJjZS5jbGlwcGluZztcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHRoaXMuZXh0ZW5zaW9ucyA9IHNvdXJjZS5leHRlbnNpb25zO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdHZhciBkYXRhID0gTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0ZGF0YS51bmlmb3JtcyA9IHt9O1xuXG5cdGZvciAoIHZhciBuYW1lIGluIHRoaXMudW5pZm9ybXMgKSB7XG5cblx0XHR2YXIgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTtcblx0XHR2YXIgdmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0aWYgKCB2YWx1ZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ3QnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9KU09OKCBtZXRhICkudXVpZFxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ2MnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUuZ2V0SGV4KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjIgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ3YyJyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yMyApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAndjMnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICd2NCcsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDQgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ200Jyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXJcblxuXHRcdH1cblxuXHR9XG5cblx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy5kZWZpbmVzICkubGVuZ3RoID4gMCApIGRhdGEuZGVmaW5lcyA9IHRoaXMuZGVmaW5lcztcblxuXHRkYXRhLnZlcnRleFNoYWRlciA9IHRoaXMudmVydGV4U2hhZGVyO1xuXHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUmF5KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHR0aGlzLm9yaWdpbiA9ICggb3JpZ2luICE9PSB1bmRlZmluZWQgKSA/IG9yaWdpbiA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuZGlyZWN0aW9uID0gKCBkaXJlY3Rpb24gIT09IHVuZGVmaW5lZCApID8gZGlyZWN0aW9uIDogbmV3IFZlY3RvcjMoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBSYXkucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG9yaWdpbiwgZGlyZWN0aW9uICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggb3JpZ2luICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggZGlyZWN0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHJheSApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIHJheS5vcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCByYXkuZGlyZWN0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmF0KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fSxcblxuXHRsb29rQXQ6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIHYgKS5zdWIoIHRoaXMub3JpZ2luICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJlY2FzdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByZWNhc3QoIHQgKSB7XG5cblx0XHRcdHRoaXMub3JpZ2luLmNvcHkoIHRoaXMuYXQoIHQsIHYxICkgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICk7XG5cblx0XHR2YXIgZGlyZWN0aW9uRGlzdGFuY2UgPSB0YXJnZXQuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5vcmlnaW4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVNxVG9Qb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBkaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRcdHZhciBkaXJlY3Rpb25EaXN0YW5jZSA9IHYxLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdFx0Ly8gcG9pbnQgYmVoaW5kIHRoZSByYXlcblxuXHRcdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHYxLmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIGRpcmVjdGlvbkRpc3RhbmNlICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0XHRyZXR1cm4gdjEuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRkaXN0YW5jZVNxVG9TZWdtZW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc2VnQ2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgc2VnRGlyID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZGlmZiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGlzdGFuY2VTcVRvU2VnbWVudCggdjAsIHYxLCBvcHRpb25hbFBvaW50T25SYXksIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHRcdC8vIGZyb20gaHR0cDovL3d3dy5nZW9tZXRyaWN0b29scy5jb20vR1RFbmdpbmUvSW5jbHVkZS9NYXRoZW1hdGljcy9HdGVEaXN0UmF5U2VnbWVudC5oXG5cdFx0XHQvLyBJdCByZXR1cm5zIHRoZSBtaW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcmF5IGFuZCB0aGUgc2VnbWVudFxuXHRcdFx0Ly8gZGVmaW5lZCBieSB2MCBhbmQgdjFcblx0XHRcdC8vIEl0IGNhbiBhbHNvIHNldCB0d28gb3B0aW9uYWwgdGFyZ2V0cyA6XG5cdFx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXlcblx0XHRcdC8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHNlZ21lbnRcblxuXHRcdFx0c2VnQ2VudGVyLmNvcHkoIHYwICkuYWRkKCB2MSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRcdHNlZ0Rpci5jb3B5KCB2MSApLnN1YiggdjAgKS5ub3JtYWxpemUoKTtcblx0XHRcdGRpZmYuY29weSggdGhpcy5vcmlnaW4gKS5zdWIoIHNlZ0NlbnRlciApO1xuXG5cdFx0XHR2YXIgc2VnRXh0ZW50ID0gdjAuZGlzdGFuY2VUbyggdjEgKSAqIDAuNTtcblx0XHRcdHZhciBhMDEgPSAtIHRoaXMuZGlyZWN0aW9uLmRvdCggc2VnRGlyICk7XG5cdFx0XHR2YXIgYjAgPSBkaWZmLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRcdHZhciBiMSA9IC0gZGlmZi5kb3QoIHNlZ0RpciApO1xuXHRcdFx0dmFyIGMgPSBkaWZmLmxlbmd0aFNxKCk7XG5cdFx0XHR2YXIgZGV0ID0gTWF0aC5hYnMoIDEgLSBhMDEgKiBhMDEgKTtcblx0XHRcdHZhciBzMCwgczEsIHNxckRpc3QsIGV4dERldDtcblxuXHRcdFx0aWYgKCBkZXQgPiAwICkge1xuXG5cdFx0XHRcdC8vIFRoZSByYXkgYW5kIHNlZ21lbnQgYXJlIG5vdCBwYXJhbGxlbC5cblxuXHRcdFx0XHRzMCA9IGEwMSAqIGIxIC0gYjA7XG5cdFx0XHRcdHMxID0gYTAxICogYjAgLSBiMTtcblx0XHRcdFx0ZXh0RGV0ID0gc2VnRXh0ZW50ICogZGV0O1xuXG5cdFx0XHRcdGlmICggczAgPj0gMCApIHtcblxuXHRcdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggczEgPD0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAwXG5cdFx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cblxuXHRcdFx0XHRcdFx0XHR2YXIgaW52RGV0ID0gMSAvIGRldDtcblx0XHRcdFx0XHRcdFx0czAgKj0gaW52RGV0O1xuXHRcdFx0XHRcdFx0XHRzMSAqPSBpbnZEZXQ7XG5cdFx0XHRcdFx0XHRcdHNxckRpc3QgPSBzMCAqICggczAgKyBhMDEgKiBzMSArIDIgKiBiMCApICsgczEgKiAoIGEwMSAqIHMwICsgczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDFcblxuXHRcdFx0XHRcdFx0XHRzMSA9IHNlZ0V4dGVudDtcblx0XHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gNVxuXG5cdFx0XHRcdFx0XHRzMSA9IC0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBzMSA8PSAtIGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDRcblxuXHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIC0gYTAxICogc2VnRXh0ZW50ICsgYjAgKSApO1xuXHRcdFx0XHRcdFx0czEgPSAoIHMwID4gMCApID8gLSBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDNcblxuXHRcdFx0XHRcdFx0czAgPSAwO1xuXHRcdFx0XHRcdFx0czEgPSBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAyXG5cblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzZWdFeHRlbnQgKyBiMCApICk7XG5cdFx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmF5IGFuZCBzZWdtZW50IGFyZSBwYXJhbGxlbC5cblxuXHRcdFx0XHRzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7XG5cdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblJheSApIHtcblxuXHRcdFx0XHRvcHRpb25hbFBvaW50T25SYXkuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggczAgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkge1xuXG5cdFx0XHRcdG9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggc2VnRGlyICkubXVsdGlwbHlTY2FsYXIoIHMxICkuYWRkKCBzZWdDZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc3FyRGlzdDtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdFNwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RTcGhlcmUoIHNwaGVyZSwgdGFyZ2V0ICkge1xuXG5cdFx0XHR2MS5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLm9yaWdpbiApO1xuXHRcdFx0dmFyIHRjYSA9IHYxLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRcdHZhciBkMiA9IHYxLmRvdCggdjEgKSAtIHRjYSAqIHRjYTtcblx0XHRcdHZhciByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRcdGlmICggZDIgPiByYWRpdXMyICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdHZhciB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApO1xuXG5cdFx0XHQvLyB0MCA9IGZpcnN0IGludGVyc2VjdCBwb2ludCAtIGVudHJhbmNlIG9uIGZyb250IG9mIHNwaGVyZVxuXHRcdFx0dmFyIHQwID0gdGNhIC0gdGhjO1xuXG5cdFx0XHQvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXG5cdFx0XHR2YXIgdDEgPSB0Y2EgKyB0aGM7XG5cblx0XHRcdC8vIHRlc3QgdG8gc2VlIGlmIGJvdGggdDAgYW5kIHQxIGFyZSBiZWhpbmQgdGhlIHJheSAtIGlmIHNvLCByZXR1cm4gbnVsbFxuXHRcdFx0aWYgKCB0MCA8IDAgJiYgdDEgPCAwICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdC8vIHRlc3QgdG8gc2VlIGlmIHQwIGlzIGJlaGluZCB0aGUgcmF5OlxuXHRcdFx0Ly8gaWYgaXQgaXMsIHRoZSByYXkgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHNvIHJldHVybiB0aGUgc2Vjb25kIGV4aXQgcG9pbnQgc2NhbGVkIGJ5IHQxLFxuXHRcdFx0Ly8gaW4gb3JkZXIgdG8gYWx3YXlzIHJldHVybiBhbiBpbnRlcnNlY3QgcG9pbnQgdGhhdCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LlxuXHRcdFx0aWYgKCB0MCA8IDAgKSByZXR1cm4gdGhpcy5hdCggdDEsIHRhcmdldCApO1xuXG5cdFx0XHQvLyBlbHNlIHQwIGlzIGluIGZyb250IG9mIHRoZSByYXksIHNvIHJldHVybiB0aGUgZmlyc3QgY29sbGlzaW9uIHBvaW50IHNjYWxlZCBieSB0MFxuXHRcdFx0cmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICkgPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTnVsbCBpcyBwcmVmZXJhYmxlIHRvIHVuZGVmaW5lZCBzaW5jZSB1bmRlZmluZWQgbWVhbnMuLi4uIGl0IGlzIHVuZGVmaW5lZFxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHZhciB0ID0gLSAoIHRoaXMub3JpZ2luLmRvdCggcGxhbmUubm9ybWFsICkgKyBwbGFuZS5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBSZXR1cm4gaWYgdGhlIHJheSBuZXZlciBpbnRlcnNlY3RzIHRoZSBwbGFuZVxuXG5cdFx0cmV0dXJuIHQgPj0gMCA/IHQgOiBudWxsO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0UGxhbmU6IGZ1bmN0aW9uICggcGxhbmUsIHRhcmdldCApIHtcblxuXHRcdHZhciB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7XG5cblx0XHRpZiAoIHQgPT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQsIHRhcmdldCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gY2hlY2sgaWYgdGhlIHJheSBsaWVzIG9uIHRoZSBwbGFuZSBmaXJzdFxuXG5cdFx0dmFyIGRpc3RUb1BvaW50ID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0aWYgKCBkaXN0VG9Qb2ludCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciAqIGRpc3RUb1BvaW50IDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyByYXkgb3JpZ2luIGlzIGJlaGluZCB0aGUgcGxhbmUgKGFuZCBpcyBwb2ludGluZyBiZWhpbmQgaXQpXG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RCb3g6IGZ1bmN0aW9uICggYm94LCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdG1pbiwgdG1heCwgdHltaW4sIHR5bWF4LCB0em1pbiwgdHptYXg7XG5cblx0XHR2YXIgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxuXHRcdFx0aW52ZGlyeSA9IDEgLyB0aGlzLmRpcmVjdGlvbi55LFxuXHRcdFx0aW52ZGlyeiA9IDEgLyB0aGlzLmRpcmVjdGlvbi56O1xuXG5cdFx0dmFyIG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuXG5cdFx0aWYgKCBpbnZkaXJ4ID49IDAgKSB7XG5cblx0XHRcdHRtaW4gPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXHRcdFx0dG1heCA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnZkaXJ5ID49IDAgKSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHltYXggKSB8fCAoIHR5bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBUaGVzZSBsaW5lcyBhbHNvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0bWluIG9yIHRtYXggaXMgTmFOXG5cdFx0Ly8gKHJlc3VsdCBvZiAwICogSW5maW5pdHkpLiB4ICE9PSB4IHJldHVybnMgdHJ1ZSBpZiB4IGlzIE5hTlxuXG5cdFx0aWYgKCB0eW1pbiA+IHRtaW4gfHwgdG1pbiAhPT0gdG1pbiApIHRtaW4gPSB0eW1pbjtcblxuXHRcdGlmICggdHltYXggPCB0bWF4IHx8IHRtYXggIT09IHRtYXggKSB0bWF4ID0gdHltYXg7XG5cblx0XHRpZiAoIGludmRpcnogPj0gMCApIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRtaW4gPiB0em1heCApIHx8ICggdHptaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdHptaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHptaW47XG5cblx0XHRpZiAoIHR6bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR6bWF4O1xuXG5cdFx0Ly9yZXR1cm4gcG9pbnQgY2xvc2VzdCB0byB0aGUgcmF5IChwb3NpdGl2ZSBzaWRlKVxuXG5cdFx0aWYgKCB0bWF4IDwgMCApIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHRtaW4gPj0gMCA/IHRtaW4gOiB0bWF4LCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0Qm94KCBib3gsIHYgKSAhPT0gbnVsbDtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0aW50ZXJzZWN0VHJpYW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIENvbXB1dGUgdGhlIG9mZnNldCBvcmlnaW4sIGVkZ2VzLCBhbmQgbm9ybWFsLlxuXHRcdHZhciBkaWZmID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZWRnZTEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlZGdlMiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0VHJpYW5nbGUoIGEsIGIsIGMsIGJhY2tmYWNlQ3VsbGluZywgdGFyZ2V0ICkge1xuXG5cdFx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZ2VvbWV0cmljdG9vbHMuY29tL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaFxuXG5cdFx0XHRlZGdlMS5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0XHRlZGdlMi5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0XHRub3JtYWwuY3Jvc3NWZWN0b3JzKCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0Ly8gU29sdmUgUSArIHQqRCA9IGIxKkUxICsgYjIqRTIgKFEgPSBrRGlmZiwgRCA9IHJheSBkaXJlY3Rpb24sXG5cdFx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XG5cdFx0XHQvLyAgIHxEb3QoRCxOKXwqYjEgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhRLEUyKSlcblx0XHRcdC8vICAgfERvdChELE4pfCpiMiA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKEUxLFEpKVxuXHRcdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcblx0XHRcdHZhciBEZE4gPSB0aGlzLmRpcmVjdGlvbi5kb3QoIG5vcm1hbCApO1xuXHRcdFx0dmFyIHNpZ247XG5cblx0XHRcdGlmICggRGROID4gMCApIHtcblxuXHRcdFx0XHRpZiAoIGJhY2tmYWNlQ3VsbGluZyApIHJldHVybiBudWxsO1xuXHRcdFx0XHRzaWduID0gMTtcblxuXHRcdFx0fSBlbHNlIGlmICggRGROIDwgMCApIHtcblxuXHRcdFx0XHRzaWduID0gLSAxO1xuXHRcdFx0XHREZE4gPSAtIERkTjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0XHRkaWZmLnN1YlZlY3RvcnMoIHRoaXMub3JpZ2luLCBhICk7XG5cdFx0XHR2YXIgRGRReEUyID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggZWRnZTIuY3Jvc3NWZWN0b3JzKCBkaWZmLCBlZGdlMiApICk7XG5cblx0XHRcdC8vIGIxIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpZiAoIERkUXhFMiA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIERkRTF4USA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIGVkZ2UxLmNyb3NzKCBkaWZmICkgKTtcblxuXHRcdFx0Ly8gYjIgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICggRGRFMXhRIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBiMStiMiA+IDEsIG5vIGludGVyc2VjdGlvblxuXHRcdFx0aWYgKCBEZFF4RTIgKyBEZEUxeFEgPiBEZE4gKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTGluZSBpbnRlcnNlY3RzIHRyaWFuZ2xlLCBjaGVjayBpZiByYXkgZG9lcy5cblx0XHRcdHZhciBRZE4gPSAtIHNpZ24gKiBkaWZmLmRvdCggbm9ybWFsICk7XG5cblx0XHRcdC8vIHQgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICggUWROIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS5cblx0XHRcdHJldHVybiB0aGlzLmF0KCBRZE4gLyBEZE4sIHRhcmdldCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeDQgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoIG1hdHJpeDQgKTtcblx0XHR0aGlzLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeDQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHJheSApIHtcblxuXHRcdHJldHVybiByYXkub3JpZ2luLmVxdWFscyggdGhpcy5vcmlnaW4gKSAmJiByYXkuZGlyZWN0aW9uLmVxdWFscyggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFRyaWFuZ2xlKCBhLCBiLCBjICkge1xuXG5cdHRoaXMuYSA9ICggYSAhPT0gdW5kZWZpbmVkICkgPyBhIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5iID0gKCBiICE9PSB1bmRlZmluZWQgKSA/IGIgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLmMgPSAoIGMgIT09IHVuZGVmaW5lZCApID8gYyA6IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUsIHtcblxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXROb3JtYWwoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0XHR2MC5zdWJWZWN0b3JzKCBhLCBiICk7XG5cdFx0XHR0YXJnZXQuY3Jvc3MoIHYwICk7XG5cblx0XHRcdHZhciB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xuXHRcdFx0aWYgKCB0YXJnZXRMZW5ndGhTcSA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRhcmdldC5tdWx0aXBseVNjYWxhciggMSAvIE1hdGguc3FydCggdGFyZ2V0TGVuZ3RoU3EgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHQvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xuXHQvLyBiYXNlZCBvbjogaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbFxuXHRnZXRCYXJ5Y29vcmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdFx0djAuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdFx0djEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdFx0djIuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTtcblxuXHRcdFx0dmFyIGRvdDAwID0gdjAuZG90KCB2MCApO1xuXHRcdFx0dmFyIGRvdDAxID0gdjAuZG90KCB2MSApO1xuXHRcdFx0dmFyIGRvdDAyID0gdjAuZG90KCB2MiApO1xuXHRcdFx0dmFyIGRvdDExID0gdjEuZG90KCB2MSApO1xuXHRcdFx0dmFyIGRvdDEyID0gdjEuZG90KCB2MiApO1xuXG5cdFx0XHR2YXIgZGVub20gPSAoIGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxICk7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRCYXJ5Y29vcmQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbGxpbmVhciBvciBzaW5ndWxhciB0cmlhbmdsZVxuXHRcdFx0aWYgKCBkZW5vbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBhcmJpdHJhcnkgbG9jYXRpb24gb3V0c2lkZSBvZiB0cmlhbmdsZT9cblx0XHRcdFx0Ly8gbm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgYmVzdCBpZGVhLCBtYXliZSBzaG91bGQgYmUgcmV0dXJuaW5nIHVuZGVmaW5lZFxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCggLSAyLCAtIDEsIC0gMSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBpbnZEZW5vbSA9IDEgLyBkZW5vbTtcblx0XHRcdHZhciB1ID0gKCBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMiApICogaW52RGVub207XG5cdFx0XHR2YXIgdiA9ICggZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDIgKSAqIGludkRlbm9tO1xuXG5cdFx0XHQvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMVxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb250YWluc1BvaW50KCBwb2ludCwgYSwgYiwgYyApIHtcblxuXHRcdFx0VHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdjEgKTtcblxuXHRcdFx0cmV0dXJuICggdjEueCA+PSAwICkgJiYgKCB2MS55ID49IDAgKSAmJiAoICggdjEueCArIHYxLnkgKSA8PSAxICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRVVjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJhcnljb29yZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0VVYoIHBvaW50LCBwMSwgcDIsIHAzLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKSB7XG5cblx0XHRcdHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgcDEsIHAyLCBwMywgYmFyeWNvb3JkICk7XG5cblx0XHRcdHRhcmdldC5zZXQoIDAsIDAgKTtcblx0XHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MSwgYmFyeWNvb3JkLnggKTtcblx0XHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MiwgYmFyeWNvb3JkLnkgKTtcblx0XHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MywgYmFyeWNvb3JkLnogKTtcblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblxuXHRcdH07XG5cblx0fSgpXG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG5cblx0XHR0aGlzLmEuY29weSggYSApO1xuXHRcdHRoaXMuYi5jb3B5KCBiICk7XG5cdFx0dGhpcy5jLmNvcHkoIGMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXM6IGZ1bmN0aW9uICggcG9pbnRzLCBpMCwgaTEsIGkyICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApO1xuXHRcdHRoaXMuYi5jb3B5KCBwb2ludHNbIGkxIF0gKTtcblx0XHR0aGlzLmMuY29weSggcG9pbnRzWyBpMiBdICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTtcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xuXHRcdHRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRBcmVhKCkge1xuXG5cdFx0XHR2MC5zdWJWZWN0b3JzKCB0aGlzLmMsIHRoaXMuYiApO1xuXHRcdFx0djEuc3ViVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKTtcblxuXHRcdFx0cmV0dXJuIHYwLmNyb3NzKCB2MSApLmxlbmd0aCgpICogMC41O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Z2V0TWlkcG9pbnQ6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRNaWRwb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLmEsIHRoaXMuYiApLmFkZCggdGhpcy5jICkubXVsdGlwbHlTY2FsYXIoIDEgLyAzICk7XG5cblx0fSxcblxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRnZXRQbGFuZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmdldFBsYW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21Db3BsYW5hclBvaW50cyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApO1xuXG5cdH0sXG5cblx0Z2V0QmFyeWNvb3JkOiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XG5cblx0fSxcblxuXHRnZXRVVjogZnVuY3Rpb24gKCBwb2ludCwgdXYxLCB1djIsIHV2MywgcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldFVWKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdXYxLCB1djIsIHV2MywgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1RyaWFuZ2xlKCB0aGlzICk7XG5cblx0fSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFiID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmFjID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmJjID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmFwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmJwID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmNwID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYSA9IHRoaXMuYSwgYiA9IHRoaXMuYiwgYyA9IHRoaXMuYztcblx0XHRcdHZhciB2LCB3O1xuXG5cdFx0XHQvLyBhbGdvcml0aG0gdGhhbmtzIHRvIFJlYWwtVGltZSBDb2xsaXNpb24gRGV0ZWN0aW9uIGJ5IENocmlzdGVyIEVyaWNzb24sXG5cdFx0XHQvLyBwdWJsaXNoZWQgYnkgTW9yZ2FuIEthdWZtYW5uIFB1Ymxpc2hlcnMsIChjKSAyMDA1IEVsc2V2aWVyIEluYy4sXG5cdFx0XHQvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi5cblx0XHRcdC8vIGJhc2ljYWxseSwgd2UncmUgZGlzdGluZ3Vpc2hpbmcgd2hpY2ggb2YgdGhlIHZvcm9ub2kgcmVnaW9ucyBvZiB0aGUgdHJpYW5nbGVcblx0XHRcdC8vIHRoZSBwb2ludCBsaWVzIGluIHdpdGggdGhlIG1pbmltdW0gYW1vdW50IG9mIHJlZHVuZGFudCBjb21wdXRhdGlvbi5cblxuXHRcdFx0dmFiLnN1YlZlY3RvcnMoIGIsIGEgKTtcblx0XHRcdHZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0XHR2YXAuc3ViVmVjdG9ycyggcCwgYSApO1xuXHRcdFx0dmFyIGQxID0gdmFiLmRvdCggdmFwICk7XG5cdFx0XHR2YXIgZDIgPSB2YWMuZG90KCB2YXAgKTtcblx0XHRcdGlmICggZDEgPD0gMCAmJiBkMiA8PSAwICkge1xuXG5cdFx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQTsgYmFyeWNlbnRyaWMgY29vcmRzICgxLCAwLCAwKVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YnAuc3ViVmVjdG9ycyggcCwgYiApO1xuXHRcdFx0dmFyIGQzID0gdmFiLmRvdCggdmJwICk7XG5cdFx0XHR2YXIgZDQgPSB2YWMuZG90KCB2YnAgKTtcblx0XHRcdGlmICggZDMgPj0gMCAmJiBkNCA8PSBkMyApIHtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEI7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMSwgMClcblx0XHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBiICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHZjID0gZDEgKiBkNCAtIGQzICogZDI7XG5cdFx0XHRpZiAoIHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwICkge1xuXG5cdFx0XHRcdHYgPSBkMSAvICggZDEgLSBkMyApO1xuXHRcdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBBQjsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXYsIHYsIDApXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggdmFiLCB2ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmNwLnN1YlZlY3RvcnMoIHAsIGMgKTtcblx0XHRcdHZhciBkNSA9IHZhYi5kb3QoIHZjcCApO1xuXHRcdFx0dmFyIGQ2ID0gdmFjLmRvdCggdmNwICk7XG5cdFx0XHRpZiAoIGQ2ID49IDAgJiYgZDUgPD0gZDYgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBDOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDAsIDAsIDEpXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB2YiA9IGQ1ICogZDIgLSBkMSAqIGQ2O1xuXHRcdFx0aWYgKCB2YiA8PSAwICYmIGQyID49IDAgJiYgZDYgPD0gMCApIHtcblxuXHRcdFx0XHR3ID0gZDIgLyAoIGQyIC0gZDYgKTtcblx0XHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUM7IGJhcnljZW50cmljIGNvb3JkcyAoMS13LCAwLCB3KVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIHZhYywgdyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xuXHRcdFx0aWYgKCB2YSA8PSAwICYmICggZDQgLSBkMyApID49IDAgJiYgKCBkNSAtIGQ2ICkgPj0gMCApIHtcblxuXHRcdFx0XHR2YmMuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0XHR3ID0gKCBkNCAtIGQzICkgLyAoICggZDQgLSBkMyApICsgKCBkNSAtIGQ2ICkgKTtcblx0XHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQkM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMS13LCB3KVxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIHZiYywgdyApOyAvLyBlZGdlIHJlZ2lvbiBvZiBCQ1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZhY2UgcmVnaW9uXG5cdFx0XHR2YXIgZGVub20gPSAxIC8gKCB2YSArIHZiICsgdmMgKTtcblx0XHRcdC8vIHUgPSB2YSAqIGRlbm9tXG5cdFx0XHR2ID0gdmIgKiBkZW5vbTtcblx0XHRcdHcgPSB2YyAqIGRlbm9tO1xuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCB2YWIsIHYgKS5hZGRTY2FsZWRWZWN0b3IoIHZhYywgdyApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICBkZXB0aFRlc3Q6IDxib29sPixcbiAqICBkZXB0aFdyaXRlOiA8Ym9vbD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaEJhc2ljTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGVtaXNzaXZlXG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcblx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hCYXNpY01hdGVyaWFsO1xuXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoQmFzaWNNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdHRoaXMuY29tYmluZSA9IHNvdXJjZS5jb21iaW5lO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cblx0dGhpcy5kcmF3TW9kZSA9IFRyaWFuZ2xlc0RyYXdNb2RlO1xuXG5cdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cbn1cblxuTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBNZXNoLFxuXG5cdGlzTWVzaDogdHJ1ZSxcblxuXHRzZXREcmF3TW9kZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZHJhd01vZGUgPSB2YWx1ZTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRyYXdNb2RlID0gc291cmNlLmRyYXdNb2RlO1xuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdHZhciBtLCBtbCwgbmFtZTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0XHRpZiAoIGtleXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xuXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRmb3IgKCBtID0gMCwgbWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7XG5cblx0XHRcdFx0XHRuYW1lID0gbW9ycGhUYXJnZXRzWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHZhciB2QSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHRlbXBBID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdGVtcEIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB0ZW1wQyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdXZBID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHZhciBpbnRlcnNlY3Rpb25Qb2ludCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGludGVyc2VjdGlvblBvaW50V29ybGQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwQSwgcEIsIHBDLCBwb2ludCApIHtcblxuXHRcdFx0dmFyIGludGVyc2VjdDtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHtcblxuXHRcdFx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBDLCBwQiwgcEEsIHRydWUsIHBvaW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQSwgcEIsIHBDLCBtYXRlcmlhbC5zaWRlICE9PSBEb3VibGVTaWRlLCBwb2ludCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdGludGVyc2VjdGlvblBvaW50V29ybGQuY29weSggcG9pbnQgKTtcblx0XHRcdGludGVyc2VjdGlvblBvaW50V29ybGQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCApO1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuIG51bGw7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0cG9pbnQ6IGludGVyc2VjdGlvblBvaW50V29ybGQuY2xvbmUoKSxcblx0XHRcdFx0b2JqZWN0OiBvYmplY3Rcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIHV2LCBhLCBiLCBjICkge1xuXG5cdFx0XHR2QS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYSApO1xuXHRcdFx0dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGIgKTtcblx0XHRcdHZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBjICk7XG5cblx0XHRcdHZhciBpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHZBLCB2QiwgdkMsIGludGVyc2VjdGlvblBvaW50ICk7XG5cblx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdGlmICggdXYgKSB7XG5cblx0XHRcdFx0XHR1dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGEgKTtcblx0XHRcdFx0XHR1dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGIgKTtcblx0XHRcdFx0XHR1dkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGMgKTtcblxuXHRcdFx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBpbnRlcnNlY3Rpb25Qb2ludCwgdkEsIHZCLCB2QywgdXZBLCB1dkIsIHV2QywgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZmFjZSA9IG5ldyBGYWNlMyggYSwgYiwgYyApO1xuXHRcdFx0XHRUcmlhbmdsZS5nZXROb3JtYWwoIHZBLCB2QiwgdkMsIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpbnRlcnNlY3Rpb247XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdFx0dmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblx0XHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0c3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0XHRzcGhlcmUuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnZlcnNlTWF0cml4LmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0XHQvLyBDaGVjayBib3VuZGluZ0JveCBiZWZvcmUgY29udGludWluZ1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcmF5LmludGVyc2VjdHNCb3goIGdlb21ldHJ5LmJvdW5kaW5nQm94ICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBpbnRlcnNlY3Rpb247XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgYSwgYiwgYztcblx0XHRcdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdHZhciB1diA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXY7XG5cdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cdFx0XHRcdHZhciBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cdFx0XHRcdHZhciBpLCBqLCBpbCwgamw7XG5cdFx0XHRcdHZhciBncm91cCwgZ3JvdXBNYXRlcmlhbDtcblx0XHRcdFx0dmFyIHN0YXJ0LCBlbmQ7XG5cblx0XHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIGluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0YSA9IGluZGV4LmdldFgoIGogKTtcblx0XHRcdFx0XHRcdFx0XHRiID0gaW5kZXguZ2V0WCggaiArIDEgKTtcblx0XHRcdFx0XHRcdFx0XHRjID0gaW5kZXguZ2V0WCggaiArIDIgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgdXYsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0XHRcdGIgPSBpbmRleC5nZXRYKCBpICsgMSApO1xuXHRcdFx0XHRcdFx0XHRjID0gaW5kZXguZ2V0WCggaSArIDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBub24taW5kZXhlZCBidWZmZXIgZ2VvbWV0cnlcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRcdGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIGdyb3VwLnN0YXJ0LCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggaiA9IHN0YXJ0LCBqbCA9IGVuZDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRhID0gajtcblx0XHRcdFx0XHRcdFx0XHRiID0gaiArIDE7XG5cdFx0XHRcdFx0XHRcdFx0YyA9IGogKyAyO1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uLmNvdW50LCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGEgPSBpO1xuXHRcdFx0XHRcdFx0XHRiID0gaSArIDE7XG5cdFx0XHRcdFx0XHRcdGMgPSBpICsgMjtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIGZ2QSwgZnZCLCBmdkM7XG5cdFx0XHRcdHZhciBpc011bHRpTWF0ZXJpYWwgPSBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdFx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcblx0XHRcdFx0dmFyIHV2cztcblxuXHRcdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIDAgXTtcblx0XHRcdFx0aWYgKCBmYWNlVmVydGV4VXZzLmxlbmd0aCA+IDAgKSB1dnMgPSBmYWNlVmVydGV4VXZzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBmID0gMCwgZmwgPSBmYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGYgXTtcblx0XHRcdFx0XHR2YXIgZmFjZU1hdGVyaWFsID0gaXNNdWx0aU1hdGVyaWFsID8gbWF0ZXJpYWxbIGZhY2UubWF0ZXJpYWxJbmRleCBdIDogbWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRpZiAoIGZhY2VNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0XHRmdkEgPSB2ZXJ0aWNlc1sgZmFjZS5hIF07XG5cdFx0XHRcdFx0ZnZCID0gdmVydGljZXNbIGZhY2UuYiBdO1xuXHRcdFx0XHRcdGZ2QyA9IHZlcnRpY2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0XHRcdGlmICggZmFjZU1hdGVyaWFsLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cztcblx0XHRcdFx0XHRcdHZhciBtb3JwaEluZmx1ZW5jZXMgPSB0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdFx0XHRcdFx0dkEuc2V0KCAwLCAwLCAwICk7XG5cdFx0XHRcdFx0XHR2Qi5zZXQoIDAsIDAsIDAgKTtcblx0XHRcdFx0XHRcdHZDLnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgdCA9IDAsIHRsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgdCA8IHRsOyB0ICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBpbmZsdWVuY2UgPSBtb3JwaEluZmx1ZW5jZXNbIHQgXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRcdHZhciB0YXJnZXRzID0gbW9ycGhUYXJnZXRzWyB0IF0udmVydGljZXM7XG5cblx0XHRcdFx0XHRcdFx0dkEuYWRkU2NhbGVkVmVjdG9yKCB0ZW1wQS5zdWJWZWN0b3JzKCB0YXJnZXRzWyBmYWNlLmEgXSwgZnZBICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRcdFx0XHR2Qi5hZGRTY2FsZWRWZWN0b3IoIHRlbXBCLnN1YlZlY3RvcnMoIHRhcmdldHNbIGZhY2UuYiBdLCBmdkIgKSwgaW5mbHVlbmNlICk7XG5cdFx0XHRcdFx0XHRcdHZDLmFkZFNjYWxlZFZlY3RvciggdGVtcEMuc3ViVmVjdG9ycyggdGFyZ2V0c1sgZmFjZS5jIF0sIGZ2QyApLCBpbmZsdWVuY2UgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2QS5hZGQoIGZ2QSApO1xuXHRcdFx0XHRcdFx0dkIuYWRkKCBmdkIgKTtcblx0XHRcdFx0XHRcdHZDLmFkZCggZnZDICk7XG5cblx0XHRcdFx0XHRcdGZ2QSA9IHZBO1xuXHRcdFx0XHRcdFx0ZnZCID0gdkI7XG5cdFx0XHRcdFx0XHRmdkMgPSB2QztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCBmYWNlTWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBmdkEsIGZ2QiwgZnZDLCBpbnRlcnNlY3Rpb25Qb2ludCApO1xuXG5cdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdXZzICYmIHV2c1sgZiBdICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciB1dnNfZiA9IHV2c1sgZiBdO1xuXHRcdFx0XHRcdFx0XHR1dkEuY29weSggdXZzX2ZbIDAgXSApO1xuXHRcdFx0XHRcdFx0XHR1dkIuY29weSggdXZzX2ZbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHR1dkMuY29weSggdXZzX2ZbIDIgXSApO1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBpbnRlcnNlY3Rpb25Qb2ludCwgZnZBLCBmdkIsIGZ2QywgdXZBLCB1dkIsIHV2QywgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBmO1xuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpICksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQmFja2dyb3VuZCggcmVuZGVyZXIsIHN0YXRlLCBvYmplY3RzLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0dmFyIGNsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHZhciBjbGVhckFscGhhID0gMDtcblxuXHR2YXIgcGxhbmVNZXNoO1xuXHR2YXIgYm94TWVzaDtcblxuXHRmdW5jdGlvbiByZW5kZXIoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIgKSB7XG5cblx0XHR2YXIgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7XG5cblx0XHRpZiAoIGJhY2tncm91bmQgPT09IG51bGwgKSB7XG5cblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cblx0XHR9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0c2V0Q2xlYXIoIGJhY2tncm91bmQsIDEgKTtcblx0XHRcdGZvcmNlQ2xlYXIgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJlci5hdXRvQ2xlYXIgfHwgZm9yY2VDbGVhciApIHtcblxuXHRcdFx0cmVuZGVyZXIuY2xlYXIoIHJlbmRlcmVyLmF1dG9DbGVhckNvbG9yLCByZW5kZXJlci5hdXRvQ2xlYXJEZXB0aCwgcmVuZGVyZXIuYXV0b0NsZWFyU3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICYmICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlIHx8IGJhY2tncm91bmQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSApIHtcblxuXHRcdFx0aWYgKCBib3hNZXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ym94TWVzaCA9IG5ldyBNZXNoKFxuXHRcdFx0XHRcdG5ldyBCb3hCdWZmZXJHZW9tZXRyeSggMSwgMSwgMSApLFxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ0JhY2tncm91bmRDdWJlTWF0ZXJpYWwnLFxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IFVuaWZvcm1zVXRpbHMuY2xvbmUoIFNoYWRlckxpYi5jdWJlLnVuaWZvcm1zICksXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5jdWJlLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuY3ViZS5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiB0cnVlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMudEN1YmUudmFsdWUgPSAoIGJhY2tncm91bmQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSA/IGJhY2tncm91bmQudGV4dHVyZSA6IGJhY2tncm91bmQ7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLnRGbGlwLnZhbHVlID0gKCBiYWNrZ3JvdW5kLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkgPyAxIDogLSAxO1xuXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdC5wdXNoKCBib3hNZXNoLCBib3hNZXNoLmdlb21ldHJ5LCBib3hNZXNoLm1hdGVyaWFsLCAwLCBudWxsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHBsYW5lTWVzaCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBsYW5lTWVzaCA9IG5ldyBNZXNoKFxuXHRcdFx0XHRcdG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCAyLCAyICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnQmFja2dyb3VuZE1hdGVyaWFsJyxcblx0XHRcdFx0XHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLmNsb25lKCBTaGFkZXJMaWIuYmFja2dyb3VuZC51bmlmb3JtcyApLFxuXHRcdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRcdFx0XHRzaWRlOiBGcm9udFNpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IHRydWUsXG5cdFx0XHRcdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZvZzogZmFsc2Vcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRwbGFuZU1lc2guZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAnbm9ybWFsJyApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBwbGFuZU1lc2ggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudDJELnZhbHVlID0gYmFja2dyb3VuZDtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0YmFja2dyb3VuZC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggYmFja2dyb3VuZC5tYXRyaXggKTtcblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QucHVzaCggcGxhbmVNZXNoLCBwbGFuZU1lc2guZ2VvbWV0cnksIHBsYW5lTWVzaC5tYXRlcmlhbCwgMCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDbGVhciggY29sb3IsIGFscGhhICkge1xuXG5cdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgYWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJDb2xvcjtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHRcdGNsZWFyQ29sb3Iuc2V0KCBjb2xvciApO1xuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhICE9PSB1bmRlZmluZWQgPyBhbHBoYSA6IDE7XG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSxcblx0XHRnZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckFscGhhO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckFscGhhOiBmdW5jdGlvbiAoIGFscGhhICkge1xuXG5cdFx0XHRjbGVhckFscGhhID0gYWxwaGE7XG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSxcblx0XHRyZW5kZXI6IHJlbmRlclxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0FycmF5cyggbW9kZSwgc3RhcnQsIGNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBnbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRleHRlbnNpb25bIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/ICdkcmF3QXJyYXlzSW5zdGFuY2VkJyA6ICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnIF0oIG1vZGUsIHN0YXJ0LCBjb3VudCwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLnNldE1vZGUgPSBzZXRNb2RlO1xuXHR0aGlzLnJlbmRlciA9IHJlbmRlcjtcblx0dGhpcy5yZW5kZXJJbnN0YW5jZXMgPSByZW5kZXJJbnN0YW5jZXM7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQ2FwYWJpbGl0aWVzKCBnbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyApIHtcblxuXHR2YXIgbWF4QW5pc290cm9weTtcblxuXHRmdW5jdGlvbiBnZXRNYXhBbmlzb3Ryb3B5KCkge1xuXG5cdFx0aWYgKCBtYXhBbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblxuXHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRtYXhBbmlzb3Ryb3B5ID0gZ2wuZ2V0UGFyYW1ldGVyKCBleHRlbnNpb24uTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtYXhBbmlzb3Ryb3B5ID0gMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXhBbmlzb3Ryb3B5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApIHtcblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnaGlnaHAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzMsIDM2MzM4ICkucHJlY2lzaW9uID4gMCAmJlxuXHRcdFx0ICAgICBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMyLCAzNjMzOCApLnByZWNpc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuICdoaWdocCc7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJlY2lzaW9uID0gJ21lZGl1bXAnO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcmVjaXNpb24gPT09ICdtZWRpdW1wJyApIHtcblxuXHRcdFx0aWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMzLCAzNjMzNyApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdCAgICAgZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMiwgMzYzMzcgKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnbWVkaXVtcCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiAnbG93cCc7XG5cblx0fVxuXG5cdHZhciBpc1dlYkdMMiA9IHR5cGVvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG5cblx0dmFyIHByZWNpc2lvbiA9IHBhcmFtZXRlcnMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZWNpc2lvbiA6ICdoaWdocCc7XG5cdHZhciBtYXhQcmVjaXNpb24gPSBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApO1xuXG5cdGlmICggbWF4UHJlY2lzaW9uICE9PSBwcmVjaXNpb24gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOicsIHByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgbWF4UHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cdFx0cHJlY2lzaW9uID0gbWF4UHJlY2lzaW9uO1xuXG5cdH1cblxuXHR2YXIgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9PT0gdHJ1ZTtcblxuXHR2YXIgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM0OTMwICk7XG5cdHZhciBtYXhWZXJ0ZXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzU2NjAgKTtcblx0dmFyIG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzMzc5ICk7XG5cdHZhciBtYXhDdWJlbWFwU2l6ZSA9IGdsLmdldFBhcmFtZXRlciggMzQwNzYgKTtcblxuXHR2YXIgbWF4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTtcblx0dmFyIG1heFZlcnRleFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0NyApO1xuXHR2YXIgbWF4VmFyeWluZ3MgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ4ICk7XG5cdHZhciBtYXhGcmFnbWVudFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0OSApO1xuXG5cdHZhciB2ZXJ0ZXhUZXh0dXJlcyA9IG1heFZlcnRleFRleHR1cmVzID4gMDtcblx0dmFyIGZsb2F0RnJhZ21lbnRUZXh0dXJlcyA9IGlzV2ViR0wyIHx8ICEhIGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cdHZhciBmbG9hdFZlcnRleFRleHR1cmVzID0gdmVydGV4VGV4dHVyZXMgJiYgZmxvYXRGcmFnbWVudFRleHR1cmVzO1xuXG5cdHJldHVybiB7XG5cblx0XHRpc1dlYkdMMjogaXNXZWJHTDIsXG5cblx0XHRnZXRNYXhBbmlzb3Ryb3B5OiBnZXRNYXhBbmlzb3Ryb3B5LFxuXHRcdGdldE1heFByZWNpc2lvbjogZ2V0TWF4UHJlY2lzaW9uLFxuXG5cdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXG5cdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcixcblxuXHRcdG1heFRleHR1cmVzOiBtYXhUZXh0dXJlcyxcblx0XHRtYXhWZXJ0ZXhUZXh0dXJlczogbWF4VmVydGV4VGV4dHVyZXMsXG5cdFx0bWF4VGV4dHVyZVNpemU6IG1heFRleHR1cmVTaXplLFxuXHRcdG1heEN1YmVtYXBTaXplOiBtYXhDdWJlbWFwU2l6ZSxcblxuXHRcdG1heEF0dHJpYnV0ZXM6IG1heEF0dHJpYnV0ZXMsXG5cdFx0bWF4VmVydGV4VW5pZm9ybXM6IG1heFZlcnRleFVuaWZvcm1zLFxuXHRcdG1heFZhcnlpbmdzOiBtYXhWYXJ5aW5ncyxcblx0XHRtYXhGcmFnbWVudFVuaWZvcm1zOiBtYXhGcmFnbWVudFVuaWZvcm1zLFxuXG5cdFx0dmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxuXHRcdGZsb2F0RnJhZ21lbnRUZXh0dXJlczogZmxvYXRGcmFnbWVudFRleHR1cmVzLFxuXHRcdGZsb2F0VmVydGV4VGV4dHVyZXM6IGZsb2F0VmVydGV4VGV4dHVyZXNcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQ2xpcHBpbmcoKSB7XG5cblx0dmFyIHNjb3BlID0gdGhpcyxcblxuXHRcdGdsb2JhbFN0YXRlID0gbnVsbCxcblx0XHRudW1HbG9iYWxQbGFuZXMgPSAwLFxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2UsXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlLFxuXG5cdFx0cGxhbmUgPSBuZXcgUGxhbmUoKSxcblx0XHR2aWV3Tm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKSxcblxuXHRcdHVuaWZvcm0gPSB7IHZhbHVlOiBudWxsLCBuZWVkc1VwZGF0ZTogZmFsc2UgfTtcblxuXHR0aGlzLnVuaWZvcm0gPSB1bmlmb3JtO1xuXHR0aGlzLm51bVBsYW5lcyA9IDA7XG5cdHRoaXMubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoIHBsYW5lcywgZW5hYmxlTG9jYWxDbGlwcGluZywgY2FtZXJhICkge1xuXG5cdFx0dmFyIGVuYWJsZWQgPVxuXHRcdFx0cGxhbmVzLmxlbmd0aCAhPT0gMCB8fFxuXHRcdFx0ZW5hYmxlTG9jYWxDbGlwcGluZyB8fFxuXHRcdFx0Ly8gZW5hYmxlIHN0YXRlIG9mIHByZXZpb3VzIGZyYW1lIC0gdGhlIGNsaXBwaW5nIGNvZGUgaGFzIHRvXG5cdFx0XHQvLyBydW4gYW5vdGhlciBmcmFtZSBpbiBvcmRlciB0byByZXNldCB0aGUgc3RhdGU6XG5cdFx0XHRudW1HbG9iYWxQbGFuZXMgIT09IDAgfHxcblx0XHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBlbmFibGVMb2NhbENsaXBwaW5nO1xuXG5cdFx0Z2xvYmFsU3RhdGUgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgMCApO1xuXHRcdG51bUdsb2JhbFBsYW5lcyA9IHBsYW5lcy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gZW5hYmxlZDtcblxuXHR9O1xuXG5cdHRoaXMuYmVnaW5TaGFkb3dzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IHRydWU7XG5cdFx0cHJvamVjdFBsYW5lcyggbnVsbCApO1xuXG5cdH07XG5cblx0dGhpcy5lbmRTaGFkb3dzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlO1xuXHRcdHJlc2V0R2xvYmFsU3RhdGUoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U3RhdGUgPSBmdW5jdGlvbiAoIHBsYW5lcywgY2xpcEludGVyc2VjdGlvbiwgY2xpcFNoYWRvd3MsIGNhbWVyYSwgY2FjaGUsIGZyb21DYWNoZSApIHtcblxuXHRcdGlmICggISBsb2NhbENsaXBwaW5nRW5hYmxlZCB8fCBwbGFuZXMgPT09IG51bGwgfHwgcGxhbmVzLmxlbmd0aCA9PT0gMCB8fCByZW5kZXJpbmdTaGFkb3dzICYmICEgY2xpcFNoYWRvd3MgKSB7XG5cblx0XHRcdC8vIHRoZXJlJ3Mgbm8gbG9jYWwgY2xpcHBpbmdcblxuXHRcdFx0aWYgKCByZW5kZXJpbmdTaGFkb3dzICkge1xuXG5cdFx0XHRcdC8vIHRoZXJlJ3Mgbm8gZ2xvYmFsIGNsaXBwaW5nXG5cblx0XHRcdFx0cHJvamVjdFBsYW5lcyggbnVsbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlc2V0R2xvYmFsU3RhdGUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIG5HbG9iYWwgPSByZW5kZXJpbmdTaGFkb3dzID8gMCA6IG51bUdsb2JhbFBsYW5lcyxcblx0XHRcdFx0bEdsb2JhbCA9IG5HbG9iYWwgKiA0LFxuXG5cdFx0XHRcdGRzdEFycmF5ID0gY2FjaGUuY2xpcHBpbmdTdGF0ZSB8fCBudWxsO1xuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7IC8vIGVuc3VyZSB1bmlxdWUgc3RhdGVcblxuXHRcdFx0ZHN0QXJyYXkgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgbEdsb2JhbCwgZnJvbUNhY2hlICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbEdsb2JhbDsgKysgaSApIHtcblxuXHRcdFx0XHRkc3RBcnJheVsgaSBdID0gZ2xvYmFsU3RhdGVbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYWNoZS5jbGlwcGluZ1N0YXRlID0gZHN0QXJyYXk7XG5cdFx0XHR0aGlzLm51bUludGVyc2VjdGlvbiA9IGNsaXBJbnRlcnNlY3Rpb24gPyB0aGlzLm51bVBsYW5lcyA6IDA7XG5cdFx0XHR0aGlzLm51bVBsYW5lcyArPSBuR2xvYmFsO1xuXG5cdFx0fVxuXG5cblx0fTtcblxuXHRmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xuXG5cdFx0aWYgKCB1bmlmb3JtLnZhbHVlICE9PSBnbG9iYWxTdGF0ZSApIHtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGdsb2JhbFN0YXRlO1xuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IG51bUdsb2JhbFBsYW5lcyA+IDA7XG5cblx0XHR9XG5cblx0XHRzY29wZS5udW1QbGFuZXMgPSBudW1HbG9iYWxQbGFuZXM7XG5cdFx0c2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGRzdE9mZnNldCwgc2tpcFRyYW5zZm9ybSApIHtcblxuXHRcdHZhciBuUGxhbmVzID0gcGxhbmVzICE9PSBudWxsID8gcGxhbmVzLmxlbmd0aCA6IDAsXG5cdFx0XHRkc3RBcnJheSA9IG51bGw7XG5cblx0XHRpZiAoIG5QbGFuZXMgIT09IDAgKSB7XG5cblx0XHRcdGRzdEFycmF5ID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0aWYgKCBza2lwVHJhbnNmb3JtICE9PSB0cnVlIHx8IGRzdEFycmF5ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBmbGF0U2l6ZSA9IGRzdE9mZnNldCArIG5QbGFuZXMgKiA0LFxuXHRcdFx0XHRcdHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xuXG5cdFx0XHRcdHZpZXdOb3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0aWYgKCBkc3RBcnJheSA9PT0gbnVsbCB8fCBkc3RBcnJheS5sZW5ndGggPCBmbGF0U2l6ZSApIHtcblxuXHRcdFx0XHRcdGRzdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggZmxhdFNpemUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpNCA9IGRzdE9mZnNldDsgaSAhPT0gblBsYW5lczsgKysgaSwgaTQgKz0gNCApIHtcblxuXHRcdFx0XHRcdHBsYW5lLmNvcHkoIHBsYW5lc1sgaSBdICkuYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4LCB2aWV3Tm9ybWFsTWF0cml4ICk7XG5cblx0XHRcdFx0XHRwbGFuZS5ub3JtYWwudG9BcnJheSggZHN0QXJyYXksIGk0ICk7XG5cdFx0XHRcdFx0ZHN0QXJyYXlbIGk0ICsgMyBdID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gblBsYW5lcztcblxuXHRcdHJldHVybiBkc3RBcnJheTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMRXh0ZW5zaW9ucyggZ2wgKSB7XG5cblx0dmFyIGV4dGVuc2lvbnMgPSB7fTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uc1sgbmFtZSBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZXh0ZW5zaW9uO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ1dFQkdMX2RlcHRoX3RleHR1cmUnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX1dFQkdMX2RlcHRoX3RleHR1cmUnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJzpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJzpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Yyc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAnICsgbmFtZSArICcgZXh0ZW5zaW9uIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGV4dGVuc2lvbnNbIG5hbWUgXSA9IGV4dGVuc2lvbjtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEdlb21ldHJpZXMoIGdsLCBhdHRyaWJ1dGVzLCBpbmZvICkge1xuXG5cdHZhciBnZW9tZXRyaWVzID0ge307XG5cdHZhciB3aXJlZnJhbWVBdHRyaWJ1dGVzID0ge307XG5cblx0ZnVuY3Rpb24gb25HZW9tZXRyeURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gZXZlbnQudGFyZ2V0O1xuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIGJ1ZmZlcmdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYnVmZmVyZ2VvbWV0cnkuaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBuYW1lIGluIGJ1ZmZlcmdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBidWZmZXJnZW9tZXRyeS5hdHRyaWJ1dGVzWyBuYW1lIF0gKTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGRlbGV0ZSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0dmFyIGF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXNbIGJ1ZmZlcmdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGF0dHJpYnV0ZSApO1xuXHRcdFx0ZGVsZXRlIHdpcmVmcmFtZUF0dHJpYnV0ZXNbIGJ1ZmZlcmdlb21ldHJ5LmlkIF07XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYnVmZmVyZ2VvbWV0cnkgKSByZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XG5cblx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLnNldEZyb21PYmplY3QoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9IGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyArKztcblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGluZGV4LCAzNDk2MyApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF0sIDM0OTYyICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXJyYXlbIGkgXSwgMzQ5NjIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIGF0dHJpYnV0ZSApIHJldHVybiBhdHRyaWJ1dGU7XG5cblx0XHR2YXIgaW5kaWNlcyA9IFtdO1xuXG5cdFx0dmFyIGdlb21ldHJ5SW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdC8vIGNvbnNvbGUudGltZSggJ3dpcmVmcmFtZScgKTtcblxuXHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gZ2VvbWV0cnlJbmRleC5hcnJheTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZhciBhID0gYXJyYXlbIGkgKyAwIF07XG5cdFx0XHRcdHZhciBiID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHRcdHZhciBjID0gYXJyYXlbIGkgKyAyIF07XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBiLCBjLCBjLCBhICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBhcnJheSA9IGdlb21ldHJ5QXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gKCBhcnJheS5sZW5ndGggLyAzICkgLSAxOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZhciBhID0gaSArIDA7XG5cdFx0XHRcdHZhciBiID0gaSArIDE7XG5cdFx0XHRcdHZhciBjID0gaSArIDI7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBiLCBjLCBjLCBhICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGNvbnNvbGUudGltZUVuZCggJ3dpcmVmcmFtZScgKTtcblxuXHRcdGF0dHJpYnV0ZSA9IG5ldyAoIGFycmF5TWF4KCBpbmRpY2VzICkgPiA2NTUzNSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSApKCBpbmRpY2VzLCAxICk7XG5cblx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXR0cmlidXRlLCAzNDk2MyApO1xuXG5cdFx0d2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXSA9IGF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiBhdHRyaWJ1dGU7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblxuXHRcdGdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdHZhciB0eXBlLCBieXRlc1BlckVsZW1lbnQ7XG5cblx0ZnVuY3Rpb24gc2V0SW5kZXgoIHZhbHVlICkge1xuXG5cdFx0dHlwZSA9IHZhbHVlLnR5cGU7XG5cdFx0Ynl0ZXNQZXJFbGVtZW50ID0gdmFsdWUuYnl0ZXNQZXJFbGVtZW50O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXIoIHN0YXJ0LCBjb3VudCApIHtcblxuXHRcdGdsLmRyYXdFbGVtZW50cyggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBnbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlcjogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvblsgY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJ2RyYXdFbGVtZW50c0luc3RhbmNlZCcgOiAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnIF0oIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLnNldE1vZGUgPSBzZXRNb2RlO1xuXHR0aGlzLnNldEluZGV4ID0gc2V0SW5kZXg7XG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xuXHR0aGlzLnJlbmRlckluc3RhbmNlcyA9IHJlbmRlckluc3RhbmNlcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gV2ViR0xJbmZvKCBnbCApIHtcblxuXHR2YXIgbWVtb3J5ID0ge1xuXHRcdGdlb21ldHJpZXM6IDAsXG5cdFx0dGV4dHVyZXM6IDBcblx0fTtcblxuXHR2YXIgcmVuZGVyID0ge1xuXHRcdGZyYW1lOiAwLFxuXHRcdGNhbGxzOiAwLFxuXHRcdHRyaWFuZ2xlczogMCxcblx0XHRwb2ludHM6IDAsXG5cdFx0bGluZXM6IDBcblx0fTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIGNvdW50LCBtb2RlLCBpbnN0YW5jZUNvdW50ICkge1xuXG5cdFx0aW5zdGFuY2VDb3VudCA9IGluc3RhbmNlQ291bnQgfHwgMTtcblxuXHRcdHJlbmRlci5jYWxscyArKztcblxuXHRcdHN3aXRjaCAoIG1vZGUgKSB7XG5cblx0XHRcdGNhc2UgNDpcblx0XHRcdFx0cmVuZGVyLnRyaWFuZ2xlcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDMgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgNTpcblx0XHRcdGNhc2UgNjpcblx0XHRcdFx0cmVuZGVyLnRyaWFuZ2xlcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAtIDIgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMiApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLSAxICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogY291bnQ7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDA6XG5cdFx0XHRcdHJlbmRlci5wb2ludHMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMSW5mbzogVW5rbm93biBkcmF3IG1vZGU6JywgbW9kZSApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRyZW5kZXIuZnJhbWUgKys7XG5cdFx0cmVuZGVyLmNhbGxzID0gMDtcblx0XHRyZW5kZXIudHJpYW5nbGVzID0gMDtcblx0XHRyZW5kZXIucG9pbnRzID0gMDtcblx0XHRyZW5kZXIubGluZXMgPSAwO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG1lbW9yeTogbWVtb3J5LFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHRcdHByb2dyYW1zOiBudWxsLFxuXHRcdGF1dG9SZXNldDogdHJ1ZSxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gYWJzTnVtZXJpY2FsU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gTWF0aC5hYnMoIGJbIDEgXSApIC0gTWF0aC5hYnMoIGFbIDEgXSApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMTW9ycGh0YXJnZXRzKCBnbCApIHtcblxuXHR2YXIgaW5mbHVlbmNlc0xpc3QgPSB7fTtcblx0dmFyIG1vcnBoSW5mbHVlbmNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICkge1xuXG5cdFx0dmFyIG9iamVjdEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xuXG5cdFx0dmFyIGxlbmd0aCA9IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoO1xuXG5cdFx0dmFyIGluZmx1ZW5jZXMgPSBpbmZsdWVuY2VzTGlzdFsgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggaW5mbHVlbmNlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXNlIGxpc3RcblxuXHRcdFx0aW5mbHVlbmNlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aW5mbHVlbmNlc1sgaSBdID0gWyBpLCAwIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF0gPSBpbmZsdWVuY2VzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IG1hdGVyaWFsLm1vcnBoTm9ybWFscyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0Ly8gUmVtb3ZlIGN1cnJlbnQgbW9ycGhBdHRyaWJ1dGVzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5mbHVlbmNlWyAxIF0gIT09IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHMgKSBnZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpICk7XG5cdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICkgZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBDb2xsZWN0IGluZmx1ZW5jZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0aW5mbHVlbmNlWyAwIF0gPSBpO1xuXHRcdFx0aW5mbHVlbmNlWyAxIF0gPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHR9XG5cblx0XHRpbmZsdWVuY2VzLnNvcnQoIGFic051bWVyaWNhbFNvcnQgKTtcblxuXHRcdC8vIEFkZCBtb3JwaEF0dHJpYnV0ZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5mbHVlbmNlICkge1xuXG5cdFx0XHRcdHZhciBpbmRleCA9IGluZmx1ZW5jZVsgMCBdO1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBpbmZsdWVuY2VbIDEgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHMgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpLCBtb3JwaFRhcmdldHNbIGluZGV4IF0gKTtcblx0XHRcdFx0XHRpZiAoIG1vcnBoTm9ybWFscyApIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGksIG1vcnBoTm9ybWFsc1sgaW5kZXggXSApO1xuXG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG1vcnBoSW5mbHVlbmNlcyApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTE9iamVjdHMoIGdlb21ldHJpZXMsIGluZm8gKSB7XG5cblx0dmFyIHVwZGF0ZUxpc3QgPSB7fTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCApIHtcblxuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICk7XG5cblx0XHQvLyBVcGRhdGUgb25jZSBwZXIgZnJhbWVcblxuXHRcdGlmICggdXBkYXRlTGlzdFsgYnVmZmVyZ2VvbWV0cnkuaWQgXSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRidWZmZXJnZW9tZXRyeS51cGRhdGVGcm9tT2JqZWN0KCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTGlzdFsgYnVmZmVyZ2VvbWV0cnkuaWQgXSA9IGZyYW1lO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0dXBkYXRlTGlzdCA9IHt9O1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEN1YmVUZXh0dXJlKCBpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0aW1hZ2VzID0gaW1hZ2VzICE9PSB1bmRlZmluZWQgPyBpbWFnZXMgOiBbXTtcblx0bWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cbn1cblxuQ3ViZVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVUZXh0dXJlO1xuXG5DdWJlVGV4dHVyZS5wcm90b3R5cGUuaXNDdWJlVGV4dHVyZSA9IHRydWU7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggQ3ViZVRleHR1cmUucHJvdG90eXBlLCAnaW1hZ2VzJywge1xuXG5cdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW1hZ2U7XG5cblx0fSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmltYWdlID0gdmFsdWU7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBBcnR1ciBUcnplc2lva1xuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICkge1xuXG5cdC8vIFdlJ3JlIGdvaW5nIHRvIGFkZCAuc2V0WFhYKCkgbWV0aG9kcyBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIGxhdGVyLlxuXHQvLyBVc2VycyBjYW4gc3RpbGwgc2V0IGluIERhdGFUZXh0dXJlM0QgZGlyZWN0bHkuXG5cdC8vXG5cdC8vXHR2YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZTNEKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXHQvLyBcdHRleHR1cmUuYW5pc290cm9weSA9IDE2O1xuXHQvL1xuXHQvLyBTZWUgIzE0ODM5XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgZGVwdGg6IGRlcHRoIH07XG5cblx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXHR0aGlzLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXG59XG5cbkRhdGFUZXh0dXJlM0QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRhdGFUZXh0dXJlM0QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YVRleHR1cmUzRDtcbkRhdGFUZXh0dXJlM0QucHJvdG90eXBlLmlzRGF0YVRleHR1cmUzRCA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKlxuICogVW5pZm9ybXMgb2YgYSBwcm9ncmFtLlxuICogVGhvc2UgZm9ybSBhIHRyZWUgc3RydWN0dXJlIHdpdGggYSBzcGVjaWFsIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHRoZSByb290LFxuICogd2hpY2ggeW91IGdldCBieSBjYWxsaW5nICduZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0sIHJlbmRlcmVyICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbcmVuZGVyZXJdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAncmVuZGVyZXInIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHJlbmRlcmVyIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHJlbmRlcmVyIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAocmVuZGVyZXIgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtIHdpdGggIG5hbWUgJ25hbWUnIHRvICd2YWx1ZSdcbiAqXG4gKiAuc2V0KCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtIGZyb20gb2JqZWN0IGFuZCBwcm9wZXJ0eSB3aXRoIHNhbWUgbmFtZSB0aGFuIHVuaWZvcm1cbiAqXG4gKiAuc2V0T3B0aW9uYWwoIGdsLCBvYmosIHByb3AgKVxuICpcbiAqIFx0XHRsaWtlIC5zZXQgZm9yIGFuIG9wdGlvbmFsIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAqXG4gKi9cblxudmFyIGVtcHR5VGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG52YXIgZW1wdHlUZXh0dXJlM2QgPSBuZXcgRGF0YVRleHR1cmUzRCgpO1xudmFyIGVtcHR5Q3ViZVRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblxuLy8gLS0tIEJhc2UgZm9yIGlubmVyIG5vZGVzIChpbmNsdWRpbmcgdGhlIHJvb3QpIC0tLVxuXG5mdW5jdGlvbiBVbmlmb3JtQ29udGFpbmVyKCkge1xuXG5cdHRoaXMuc2VxID0gW107XG5cdHRoaXMubWFwID0ge307XG5cbn1cblxuLy8gLS0tIFV0aWxpdGllcyAtLS1cblxuLy8gQXJyYXkgQ2FjaGVzIChwcm92aWRlIHR5cGVkIGFycmF5cyBmb3IgdGVtcG9yYXJ5IGJ5IHNpemUpXG5cbnZhciBhcnJheUNhY2hlRjMyID0gW107XG52YXIgYXJyYXlDYWNoZUkzMiA9IFtdO1xuXG4vLyBGbG9hdDMyQXJyYXkgY2FjaGVzIHVzZWQgZm9yIHVwbG9hZGluZyBNYXRyaXggdW5pZm9ybXNcblxudmFyIG1hdDRhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDE2ICk7XG52YXIgbWF0M2FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggOSApO1xudmFyIG1hdDJhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDQgKTtcblxuLy8gRmxhdHRlbmluZyBmb3IgYXJyYXlzIG9mIHZlY3RvcnMgYW5kIG1hdHJpY2VzXG5cbmZ1bmN0aW9uIGZsYXR0ZW4oIGFycmF5LCBuQmxvY2tzLCBibG9ja1NpemUgKSB7XG5cblx0dmFyIGZpcnN0RWxlbSA9IGFycmF5WyAwIF07XG5cblx0aWYgKCBmaXJzdEVsZW0gPD0gMCB8fCBmaXJzdEVsZW0gPiAwICkgcmV0dXJuIGFycmF5O1xuXHQvLyB1bm9wdGltaXplZDogISBpc05hTiggZmlyc3RFbGVtIClcblx0Ly8gc2VlIGh0dHA6Ly9qYWNrc29uZHVuc3Rhbi5jb20vYXJ0aWNsZXMvOTgzXG5cblx0dmFyIG4gPSBuQmxvY2tzICogYmxvY2tTaXplLFxuXHRcdHIgPSBhcnJheUNhY2hlRjMyWyBuIF07XG5cblx0aWYgKCByID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyID0gbmV3IEZsb2F0MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVGMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGlmICggbkJsb2NrcyAhPT0gMCApIHtcblxuXHRcdGZpcnN0RWxlbS50b0FycmF5KCByLCAwICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDEsIG9mZnNldCA9IDA7IGkgIT09IG5CbG9ja3M7ICsrIGkgKSB7XG5cblx0XHRcdG9mZnNldCArPSBibG9ja1NpemU7XG5cdFx0XHRhcnJheVsgaSBdLnRvQXJyYXkoIHIsIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbCggYSwgYiApIHtcblxuXHRpZiAoIGEubGVuZ3RoICE9PSBiLmxlbmd0aCApIHJldHVybiBmYWxzZTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRpZiAoIGFbIGkgXSAhPT0gYlsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBjb3B5QXJyYXkoIGEsIGIgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gYi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0YVsgaSBdID0gYlsgaSBdO1xuXG5cdH1cblxufVxuXG4vLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvblxuXG5mdW5jdGlvbiBhbGxvY1RleFVuaXRzKCByZW5kZXJlciwgbiApIHtcblxuXHR2YXIgciA9IGFycmF5Q2FjaGVJMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgSW50MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVJMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApXG5cdFx0clsgaSBdID0gcmVuZGVyZXIuYWxsb2NUZXh0dXJlVW5pdCgpO1xuXG5cdHJldHVybiByO1xuXG59XG5cbi8vIC0tLSBTZXR0ZXJzIC0tLVxuXG4vLyBOb3RlOiBEZWZpbmluZyB0aGVzZSBtZXRob2RzIGV4dGVybmFsbHksIGJlY2F1c2UgdGhleSBjb21lIGluIGEgYnVuY2hcbi8vIGFuZCB0aGlzIHdheSB0aGVpciBuYW1lcyBtaW5pZnkuXG5cbi8vIFNpbmdsZSBzY2FsYXJcblxuZnVuY3Rpb24gc2V0VmFsdWUxZiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTFmKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTFpKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbi8vIFNpbmdsZSBmbG9hdCB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTJmdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtMmYoIHRoaXMuYWRkciwgdi54LCB2LnkgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWUzZnYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCB2LnIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi5yIHx8IGNhY2hlWyAxIF0gIT09IHYuZyB8fCBjYWNoZVsgMiBdICE9PSB2LmIgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LnIsIHYuZywgdi5iICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2LnI7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi5nO1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuYjtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTRmdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm00ZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXHRcdFx0Y2FjaGVbIDMgXSA9IHYudztcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgbWF0cml4IChmcm9tIGZsYXQgYXJyYXkgb3IgTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWUyZm0oIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQyYXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0MmFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTNmbSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDNhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlNGZtKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0NGFycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDRhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuLy8gU2luZ2xlIHRleHR1cmUgKDJEIC8gQ3ViZSlcblxuZnVuY3Rpb24gc2V0VmFsdWVUMSggZ2wsIHYsIHJlbmRlcmVyICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciB1bml0ID0gcmVuZGVyZXIuYWxsb2NUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHJlbmRlcmVyLnNldFRleHR1cmUyRCggdiB8fCBlbXB0eVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzRDEoIGdsLCB2LCByZW5kZXJlciApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgdW5pdCA9IHJlbmRlcmVyLmFsbG9jVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHRyZW5kZXJlci5zZXRUZXh0dXJlM0QoIHYgfHwgZW1wdHlUZXh0dXJlM2QsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2KCBnbCwgdiwgcmVuZGVyZXIgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIHVuaXQgPSByZW5kZXJlci5hbGxvY1RleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0cmVuZGVyZXIuc2V0VGV4dHVyZUN1YmUoIHYgfHwgZW1wdHlDdWJlVGV4dHVyZSwgdW5pdCApO1xuXG59XG5cbi8vIEludGVnZXIgLyBCb29sZWFuIHZlY3RvcnMgb3IgYXJyYXlzIHRoZXJlb2YgKGFsd2F5cyBmbGF0IGFycmF5cylcblxuZnVuY3Rpb24gc2V0VmFsdWUyaXYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWUzaXYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWU0aXYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtNGl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgdGhlIHNpbmd1bGFyIGNhc2VcblxuZnVuY3Rpb24gZ2V0U2luZ3VsYXJTZXR0ZXIoIHR5cGUgKSB7XG5cblx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdGNhc2UgMHgxNDA2OiByZXR1cm4gc2V0VmFsdWUxZjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlMmZ2OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWUzZnY7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZTRmdjsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWUyZm07IC8vIF9NQVQyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZTNmbTsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlNGZtOyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDhiNWU6IGNhc2UgMHg4ZDY2OiByZXR1cm4gc2V0VmFsdWVUMTsgLy8gU0FNUExFUl8yRCwgU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OEI1RjogcmV0dXJuIHNldFZhbHVlVDNEMTsgLy8gU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4YjYwOiByZXR1cm4gc2V0VmFsdWVUNjsgLy8gU0FNUExFUl9DVUJFXG5cblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZTFpOyAvLyBJTlQsIEJPT0xcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZTJpdjsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1NDogY2FzZSAweDhiNTg6IHJldHVybiBzZXRWYWx1ZTNpdjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZTRpdjsgLy8gX1ZFQzRcblxuXHR9XG5cbn1cblxuLy8gQXJyYXkgb2Ygc2NhbGFyc1xuXG5mdW5jdGlvbiBzZXRWYWx1ZTFmdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuZnVuY3Rpb24gc2V0VmFsdWUxaXYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdmVjdG9ycyAoZmxhdCBvciBmcm9tIFRIUkVFIGNsYXNzZXMpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTJmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMyApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjRhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIG1hdHJpY2VzIChmbGF0IG9yIGZyb20gVEhSRUUgY2xhc2VzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yYSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZGF0YSApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNM2EoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA5ICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGRhdGEgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTRhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMTYgKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZGF0YSApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdGV4dHVyZXMgKDJEIC8gQ3ViZSlcblxuZnVuY3Rpb24gc2V0VmFsdWVUMWEoIGdsLCB2LCByZW5kZXJlciApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgbiA9IHYubGVuZ3RoO1xuXG5cdHZhciB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHJlbmRlcmVyLCBuICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgPT09IGZhbHNlICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHJlbmRlcmVyLnNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2YSggZ2wsIHYsIHJlbmRlcmVyICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBuID0gdi5sZW5ndGg7XG5cblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyggcmVuZGVyZXIsIG4gKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdW5pdHMgKTtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0cmVuZGVyZXIuc2V0VGV4dHVyZUN1YmUoIHZbIGkgXSB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbi8vIEhlbHBlciB0byBwaWNrIHRoZSByaWdodCBzZXR0ZXIgZm9yIGEgcHVyZSAoYm90dG9tLWxldmVsKSBhcnJheVxuXG5mdW5jdGlvbiBnZXRQdXJlQXJyYXlTZXR0ZXIoIHR5cGUgKSB7XG5cblx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdGNhc2UgMHgxNDA2OiByZXR1cm4gc2V0VmFsdWUxZnY7IC8vIEZMT0FUXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyYTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1MTogcmV0dXJuIHNldFZhbHVlVjNhOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjUyOiByZXR1cm4gc2V0VmFsdWVWNGE7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJhOyAvLyBfTUFUMlxuXHRcdGNhc2UgMHg4YjViOiByZXR1cm4gc2V0VmFsdWVNM2E7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00YTsgLy8gX01BVDRcblxuXHRcdGNhc2UgMHg4YjVlOiByZXR1cm4gc2V0VmFsdWVUMWE7IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MDogcmV0dXJuIHNldFZhbHVlVDZhOyAvLyBTQU1QTEVSX0NVQkVcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlMWl2OyAvLyBJTlQsIEJPT0xcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZTJpdjsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1NDogY2FzZSAweDhiNTg6IHJldHVybiBzZXRWYWx1ZTNpdjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZTRpdjsgLy8gX1ZFQzRcblxuXHR9XG5cbn1cblxuLy8gLS0tIFVuaWZvcm0gQ2xhc3NlcyAtLS1cblxuZnVuY3Rpb24gU2luZ2xlVW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXHR0aGlzLmFkZHIgPSBhZGRyO1xuXHR0aGlzLmNhY2hlID0gW107XG5cdHRoaXMuc2V0VmFsdWUgPSBnZXRTaW5ndWxhclNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0Ly8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVR1xuXG59XG5cbmZ1bmN0aW9uIFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblx0dGhpcy5hZGRyID0gYWRkcjtcblx0dGhpcy5jYWNoZSA9IFtdO1xuXHR0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7XG5cdHRoaXMuc2V0VmFsdWUgPSBnZXRQdXJlQXJyYXlTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApO1xuXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxufVxuXG5QdXJlQXJyYXlVbmlmb3JtLnByb3RvdHlwZS51cGRhdGVDYWNoZSA9IGZ1bmN0aW9uICggZGF0YSApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJiBjYWNoZS5sZW5ndGggIT09IGRhdGEubGVuZ3RoICkge1xuXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0fVxuXG5cdGNvcHlBcnJheSggY2FjaGUsIGRhdGEgKTtcblxufTtcblxuZnVuY3Rpb24gU3RydWN0dXJlZFVuaWZvcm0oIGlkICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblxuXHRVbmlmb3JtQ29udGFpbmVyLmNhbGwoIHRoaXMgKTsgLy8gbWl4LWluXG5cbn1cblxuU3RydWN0dXJlZFVuaWZvcm0ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKCBnbCwgdmFsdWUsIHJlbmRlcmVyICkge1xuXG5cdHZhciBzZXEgPSB0aGlzLnNlcTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dmFyIHUgPSBzZXFbIGkgXTtcblx0XHR1LnNldFZhbHVlKCBnbCwgdmFsdWVbIHUuaWQgXSwgcmVuZGVyZXIgKTtcblxuXHR9XG5cbn07XG5cbi8vIC0tLSBUb3AtbGV2ZWwgLS0tXG5cbi8vIFBhcnNlciAtIGJ1aWxkcyB1cCB0aGUgcHJvcGVydHkgdHJlZSBmcm9tIHRoZSBwYXRoIHN0cmluZ3NcblxudmFyIFJlUGF0aFBhcnQgPSAvKFtcXHdcXGRfXSspKFxcXSk/KFxcW3xcXC4pPy9nO1xuXG4vLyBleHRyYWN0c1xuLy8gXHQtIHRoZSBpZGVudGlmaWVyIChtZW1iZXIgbmFtZSBvciBhcnJheSBpbmRleClcbi8vICAtIGZvbGxvd2VkIGJ5IGFuIG9wdGlvbmFsIHJpZ2h0IGJyYWNrZXQgKGZvdW5kIHdoZW4gYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCBsZWZ0IGJyYWNrZXQgb3IgZG90ICh0eXBlIG9mIHN1YnNjcmlwdClcbi8vXG4vLyBOb3RlOiBUaGVzZSBwb3J0aW9ucyBjYW4gYmUgcmVhZCBpbiBhIG5vbi1vdmVybGFwcGluZyBmYXNoaW9uIGFuZFxuLy8gYWxsb3cgc3RyYWlnaHRmb3J3YXJkIHBhcnNpbmcgb2YgdGhlIGhpZXJhcmNoeSB0aGF0IFdlYkdMIGVuY29kZXNcbi8vIGluIHRoZSB1bmlmb3JtIG5hbWVzLlxuXG5mdW5jdGlvbiBhZGRVbmlmb3JtKCBjb250YWluZXIsIHVuaWZvcm1PYmplY3QgKSB7XG5cblx0Y29udGFpbmVyLnNlcS5wdXNoKCB1bmlmb3JtT2JqZWN0ICk7XG5cdGNvbnRhaW5lci5tYXBbIHVuaWZvcm1PYmplY3QuaWQgXSA9IHVuaWZvcm1PYmplY3Q7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VVbmlmb3JtKCBhY3RpdmVJbmZvLCBhZGRyLCBjb250YWluZXIgKSB7XG5cblx0dmFyIHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdC8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW5cblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xuXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdHZhciBtYXRjaCA9IFJlUGF0aFBhcnQuZXhlYyggcGF0aCApLFxuXHRcdFx0bWF0Y2hFbmQgPSBSZVBhdGhQYXJ0Lmxhc3RJbmRleCxcblxuXHRcdFx0aWQgPSBtYXRjaFsgMSBdLFxuXHRcdFx0aWRJc0luZGV4ID0gbWF0Y2hbIDIgXSA9PT0gJ10nLFxuXHRcdFx0c3Vic2NyaXB0ID0gbWF0Y2hbIDMgXTtcblxuXHRcdGlmICggaWRJc0luZGV4ICkgaWQgPSBpZCB8IDA7IC8vIGNvbnZlcnQgdG8gaW50ZWdlclxuXG5cdFx0aWYgKCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCB8fCBzdWJzY3JpcHQgPT09ICdbJyAmJiBtYXRjaEVuZCArIDIgPT09IHBhdGhMZW5ndGggKSB7XG5cblx0XHRcdC8vIGJhcmUgbmFtZSBvciBcInB1cmVcIiBib3R0b20tbGV2ZWwgYXJyYXkgXCJbMF1cIiBzdWZmaXhcblxuXHRcdFx0YWRkVW5pZm9ybSggY29udGFpbmVyLCBzdWJzY3JpcHQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdG5ldyBTaW5nbGVVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIDpcblx0XHRcdFx0bmV3IFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBzdGVwIGludG8gaW5uZXIgbm9kZSAvIGNyZWF0ZSBpdCBpbiBjYXNlIGl0IGRvZXNuJ3QgZXhpc3RcblxuXHRcdFx0dmFyIG1hcCA9IGNvbnRhaW5lci5tYXAsIG5leHQgPSBtYXBbIGlkIF07XG5cblx0XHRcdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7XG5cdFx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgbmV4dCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIFJvb3QgQ29udGFpbmVyXG5cbmZ1bmN0aW9uIFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtLCByZW5kZXJlciApIHtcblxuXHRVbmlmb3JtQ29udGFpbmVyLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cblx0dmFyIG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcxOCApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IG47ICsrIGkgKSB7XG5cblx0XHR2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0oIHByb2dyYW0sIGkgKSxcblx0XHRcdGFkZHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sIGluZm8ubmFtZSApO1xuXG5cdFx0cGFyc2VVbmlmb3JtKCBpbmZvLCBhZGRyLCB0aGlzICk7XG5cblx0fVxuXG59XG5cbldlYkdMVW5pZm9ybXMucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKCBnbCwgbmFtZSwgdmFsdWUgKSB7XG5cblx0dmFyIHUgPSB0aGlzLm1hcFsgbmFtZSBdO1xuXG5cdGlmICggdSAhPT0gdW5kZWZpbmVkICkgdS5zZXRWYWx1ZSggZ2wsIHZhbHVlLCB0aGlzLnJlbmRlcmVyICk7XG5cbn07XG5cbldlYkdMVW5pZm9ybXMucHJvdG90eXBlLnNldE9wdGlvbmFsID0gZnVuY3Rpb24gKCBnbCwgb2JqZWN0LCBuYW1lICkge1xuXG5cdHZhciB2ID0gb2JqZWN0WyBuYW1lIF07XG5cblx0aWYgKCB2ICE9PSB1bmRlZmluZWQgKSB0aGlzLnNldFZhbHVlKCBnbCwgbmFtZSwgdiApO1xuXG59O1xuXG5cbi8vIFN0YXRpYyBpbnRlcmZhY2VcblxuV2ViR0xVbmlmb3Jtcy51cGxvYWQgPSBmdW5jdGlvbiAoIGdsLCBzZXEsIHZhbHVlcywgcmVuZGVyZXIgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHZhciB1ID0gc2VxWyBpIF0sXG5cdFx0XHR2ID0gdmFsdWVzWyB1LmlkIF07XG5cblx0XHRpZiAoIHYubmVlZHNVcGRhdGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBub3RlOiBhbHdheXMgdXBkYXRpbmcgd2hlbiAubmVlZHNVcGRhdGUgaXMgdW5kZWZpbmVkXG5cdFx0XHR1LnNldFZhbHVlKCBnbCwgdi52YWx1ZSwgcmVuZGVyZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbldlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlID0gZnVuY3Rpb24gKCBzZXEsIHZhbHVlcyApIHtcblxuXHR2YXIgciA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR2YXIgdSA9IHNlcVsgaSBdO1xuXHRcdGlmICggdS5pZCBpbiB2YWx1ZXMgKSByLnB1c2goIHUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHI7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBhZGRMaW5lTnVtYmVycyggc3RyaW5nICkge1xuXG5cdHZhciBsaW5lcyA9IHN0cmluZy5zcGxpdCggJ1xcbicgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRsaW5lc1sgaSBdID0gKCBpICsgMSApICsgJzogJyArIGxpbmVzWyBpIF07XG5cblx0fVxuXG5cdHJldHVybiBsaW5lcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMU2hhZGVyKCBnbCwgdHlwZSwgc3RyaW5nICkge1xuXG5cdHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoIHR5cGUgKTtcblxuXHRnbC5zaGFkZXJTb3VyY2UoIHNoYWRlciwgc3RyaW5nICk7XG5cdGdsLmNvbXBpbGVTaGFkZXIoIHNoYWRlciApO1xuXG5cdGlmICggZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKCBzaGFkZXIsIDM1NzEzICkgPT09IGZhbHNlICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU2hhZGVyOiBTaGFkZXIgY291bGRuXFwndCBjb21waWxlLicgKTtcblxuXHR9XG5cblx0aWYgKCBnbC5nZXRTaGFkZXJJbmZvTG9nKCBzaGFkZXIgKSAhPT0gJycgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFNoYWRlcjogZ2wuZ2V0U2hhZGVySW5mb0xvZygpJywgdHlwZSA9PT0gMzU2MzMgPyAndmVydGV4JyA6ICdmcmFnbWVudCcsIGdsLmdldFNoYWRlckluZm9Mb2coIHNoYWRlciApLCBhZGRMaW5lTnVtYmVycyggc3RyaW5nICkgKTtcblxuXHR9XG5cblx0Ly8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb25cblx0Ly8gY29uc29sZS5sb2coIHR5cGUsIGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlYnVnX3NoYWRlcnMnICkuZ2V0VHJhbnNsYXRlZFNoYWRlclNvdXJjZSggc2hhZGVyICkgKTtcblxuXHRyZXR1cm4gc2hhZGVyO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgcHJvZ3JhbUlkQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICkge1xuXG5cdHN3aXRjaCAoIGVuY29kaW5nICkge1xuXG5cdFx0Y2FzZSBMaW5lYXJFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdMaW5lYXInLCAnKCB2YWx1ZSApJyBdO1xuXHRcdGNhc2Ugc1JHQkVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ3NSR0InLCAnKCB2YWx1ZSApJyBdO1xuXHRcdGNhc2UgUkdCRUVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQkUnLCAnKCB2YWx1ZSApJyBdO1xuXHRcdGNhc2UgUkdCTTdFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JNJywgJyggdmFsdWUsIDcuMCApJyBdO1xuXHRcdGNhc2UgUkdCTTE2RW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnUkdCTScsICcoIHZhbHVlLCAxNi4wICknIF07XG5cdFx0Y2FzZSBSR0JERW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnUkdCRCcsICcoIHZhbHVlLCAyNTYuMCApJyBdO1xuXHRcdGNhc2UgR2FtbWFFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdHYW1tYScsICcoIHZhbHVlLCBmbG9hdCggR0FNTUFfRkFDVE9SICkgKScgXTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAndW5zdXBwb3J0ZWQgZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgZW5jb2RpbmcgKSB7XG5cblx0dmFyIGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7XG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuICcgKyBjb21wb25lbnRzWyAwIF0gKyAnVG9MaW5lYXInICsgY29tcG9uZW50c1sgMSBdICsgJzsgfSc7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIGVuY29kaW5nICkge1xuXG5cdHZhciBjb21wb25lbnRzID0gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBlbmNvZGluZyApO1xuXHRyZXR1cm4gJ3ZlYzQgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzQgdmFsdWUgKSB7IHJldHVybiBMaW5lYXJUbycgKyBjb21wb25lbnRzWyAwIF0gKyBjb21wb25lbnRzWyAxIF0gKyAnOyB9JztcblxufVxuXG5mdW5jdGlvbiBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIHRvbmVNYXBwaW5nICkge1xuXG5cdHZhciB0b25lTWFwcGluZ05hbWU7XG5cblx0c3dpdGNoICggdG9uZU1hcHBpbmcgKSB7XG5cblx0XHRjYXNlIExpbmVhclRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgUmVpbmhhcmRUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdSZWluaGFyZCc7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgVW5jaGFydGVkMlRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1VuY2hhcnRlZDInO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIENpbmVvblRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ09wdGltaXplZENpbmVvbic7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICd1bnN1cHBvcnRlZCB0b25lTWFwcGluZzogJyArIHRvbmVNYXBwaW5nICk7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXh0ZW5zaW9ucyggZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgcmVuZGVyZXJFeHRlbnNpb25zICkge1xuXG5cdGV4dGVuc2lvbnMgPSBleHRlbnNpb25zIHx8IHt9O1xuXG5cdHZhciBjaHVua3MgPSBbXG5cdFx0KCBleHRlbnNpb25zLmRlcml2YXRpdmVzIHx8IHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWIHx8IHBhcmFtZXRlcnMuYnVtcE1hcCB8fCAoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmICEgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApIHx8IHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgKSA/ICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZScgOiAnJyxcblx0XHQoIGV4dGVuc2lvbnMuZnJhZ0RlcHRoIHx8IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdFWFRfZnJhZ19kZXB0aCcgKSA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9mcmFnX2RlcHRoIDogZW5hYmxlJyA6ICcnLFxuXHRcdCggZXh0ZW5zaW9ucy5kcmF3QnVmZmVycyApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9kcmF3X2J1ZmZlcnMnICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZHJhd19idWZmZXJzIDogcmVxdWlyZScgOiAnJyxcblx0XHQoIGV4dGVuc2lvbnMuc2hhZGVyVGV4dHVyZUxPRCB8fCBwYXJhbWV0ZXJzLmVudk1hcCApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJyApID8gJyNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZScgOiAnJ1xuXHRdO1xuXG5cdHJldHVybiBjaHVua3MuZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApIHtcblxuXHR2YXIgY2h1bmtzID0gW107XG5cblx0Zm9yICggdmFyIG5hbWUgaW4gZGVmaW5lcyApIHtcblxuXHRcdHZhciB2YWx1ZSA9IGRlZmluZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRjaHVua3MucHVzaCggJyNkZWZpbmUgJyArIG5hbWUgKyAnICcgKyB2YWx1ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gY2h1bmtzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICkge1xuXG5cdHZhciBhdHRyaWJ1dGVzID0ge307XG5cblx0dmFyIG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcyMSApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IG47IGkgKysgKSB7XG5cblx0XHR2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYiggcHJvZ3JhbSwgaSApO1xuXHRcdHZhciBuYW1lID0gaW5mby5uYW1lO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5XZWJHTFByb2dyYW06IEFDVElWRSBWRVJURVggQVRUUklCVVRFOicsIG5hbWUsIGkgKTtcblxuXHRcdGF0dHJpYnV0ZXNbIG5hbWUgXSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCBuYW1lICk7XG5cblx0fVxuXG5cdHJldHVybiBhdHRyaWJ1dGVzO1xuXG59XG5cbmZ1bmN0aW9uIGZpbHRlckVtcHR5TGluZSggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmcgIT09ICcnO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VMaWdodE51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHtcblxuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9SRUNUX0FSRUFfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUmVjdEFyZWFMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9IRU1JX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bUhlbWlMaWdodHMgKTtcblxufVxuXG5mdW5jdGlvbiByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHtcblxuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoIC9OVU1fQ0xJUFBJTkdfUExBTkVTL2csIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgKVxuXHRcdC5yZXBsYWNlKCAvVU5JT05fQ0xJUFBJTkdfUExBTkVTL2csICggcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyAtIHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbiApICk7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VJbmNsdWRlcyggc3RyaW5nICkge1xuXG5cdHZhciBwYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuXHRmdW5jdGlvbiByZXBsYWNlKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHRcdHZhciByZXBsYWNlID0gU2hhZGVyQ2h1bmtbIGluY2x1ZGUgXTtcblxuXHRcdGlmICggcmVwbGFjZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyc2VJbmNsdWRlcyggcmVwbGFjZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHBhdHRlcm4sIHJlcGxhY2UgKTtcblxufVxuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHZhciBwYXR0ZXJuID0gLyNwcmFnbWEgdW5yb2xsX2xvb3BbXFxzXSs/Zm9yIFxcKCBpbnQgaSBcXD0gKFxcZCspXFw7IGkgPCAoXFxkKylcXDsgaSBcXCtcXCsgXFwpIFxceyhbXFxzXFxTXSs/KSg/PVxcfSlcXH0vZztcblxuXHRmdW5jdGlvbiByZXBsYWNlKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHRcdHZhciB1bnJvbGwgPSAnJztcblxuXHRcdGZvciAoIHZhciBpID0gcGFyc2VJbnQoIHN0YXJ0ICk7IGkgPCBwYXJzZUludCggZW5kICk7IGkgKysgKSB7XG5cblx0XHRcdHVucm9sbCArPSBzbmlwcGV0LnJlcGxhY2UoIC9cXFsgaSBcXF0vZywgJ1sgJyArIGkgKyAnIF0nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5yb2xsO1xuXG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHBhdHRlcm4sIHJlcGxhY2UgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBleHRlbnNpb25zLCBjb2RlLCBtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIGdsID0gcmVuZGVyZXIuY29udGV4dDtcblxuXHR2YXIgZGVmaW5lcyA9IG1hdGVyaWFsLmRlZmluZXM7XG5cblx0dmFyIHZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7XG5cdHZhciBmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcjtcblxuXHR2YXIgc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9CQVNJQyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNvZnRTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRl9TT0ZUJztcblxuXHR9XG5cblx0dmFyIGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdHZhciBlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRkxFQ1RJT04nO1xuXHR2YXIgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFX1VWJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRjYXNlIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0VRVUlSRUMnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9TUEhFUkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdHN3aXRjaCAoIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0c3dpdGNoICggbWF0ZXJpYWwuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBnYW1tYUZhY3RvckRlZmluZSA9ICggcmVuZGVyZXIuZ2FtbWFGYWN0b3IgPiAwICkgPyByZW5kZXJlci5nYW1tYUZhY3RvciA6IDEuMDtcblxuXHQvLyBjb25zb2xlLmxvZyggJ2J1aWxkaW5nIG5ldyBwcm9ncmFtICcgKTtcblxuXHQvL1xuXG5cdHZhciBjdXN0b21FeHRlbnNpb25zID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJycgOiBnZW5lcmF0ZUV4dGVuc2lvbnMoIG1hdGVyaWFsLmV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIGV4dGVuc2lvbnMgKTtcblxuXHR2YXIgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdC8vXG5cblx0dmFyIHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0dmFyIHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7XG5cblx0aWYgKCBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBmbG9hdDsnLFxuXHRcdFx0J3ByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGludDsnLFxuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgc2hhZGVyLm5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA/ICcjZGVmaW5lIFZFUlRFWF9URVhUVVJFUycgOiAnJyxcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0JyNkZWZpbmUgTUFYX0JPTkVTICcgKyBwYXJhbWV0ZXJzLm1heEJvbmVzLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgJiYgcGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5za2lubmluZyA/ICcjZGVmaW5lIFVTRV9TS0lOTklORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXNlVmVydGV4VGV4dHVyZSA/ICcjZGVmaW5lIEJPTkVfVEVYVFVSRScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2l6ZUF0dGVudWF0aW9uID8gJyNkZWZpbmUgVVNFX1NJWkVBVFRFTlVBVElPTicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfQ09MT1InLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQwOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MjsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQzOycsXG5cblx0XHRcdCdcdCNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTJyxcblxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwxOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7JyxcblxuXHRcdFx0J1x0I2Vsc2UnLFxuXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NDsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NzsnLFxuXG5cdFx0XHQnXHQjZW5kaWYnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfU0tJTk5JTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXG5cdFx0XHQncHJlY2lzaW9uICcgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArICcgZmxvYXQ7Jyxcblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBpbnQ7JyxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHNoYWRlci5uYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhVGVzdCA/ICcjZGVmaW5lIEFMUEhBVEVTVCAnICsgcGFyYW1ldGVycy5hbHBoYVRlc3QgKyAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICUgMSA/ICcnIDogJy4wJyApIDogJycsIC8vIGFkZCAnLjAnIGlmIGludGVnZXJcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBUeXBlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBCbGVuZGluZ0RlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZ3JhZGllbnRNYXAgPyAnI2RlZmluZSBVU0VfR1JBRElFTlRNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhID8gJyNkZWZpbmUgUFJFTVVMVElQTElFRF9BTFBIQScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyA/ICcjZGVmaW5lIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ0VYVF9mcmFnX2RlcHRoJyApICkgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QnICkgKSA/ICcjZGVmaW5lIFRFWFRVUkVfTE9EX0VYVCcgOiAnJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXG5cblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gJyNkZWZpbmUgVE9ORV9NQVBQSU5HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBTaGFkZXJDaHVua1sgJ3RvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQnIF0gOiAnJywgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB0b25lTWFwcGluZygpIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiggJ3RvbmVNYXBwaW5nJywgcGFyYW1ldGVycy50b25lTWFwcGluZyApIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGl0aGVyaW5nID8gJyNkZWZpbmUgRElUSEVSSU5HJyA6ICcnLFxuXG5cdFx0XHQoIHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgfHwgcGFyYW1ldGVycy5tYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5lbWlzc2l2ZU1hcEVuY29kaW5nICkgP1xuXHRcdFx0XHRTaGFkZXJDaHVua1sgJ2VuY29kaW5nc19wYXJzX2ZyYWdtZW50JyBdIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHRwYXJhbWV0ZXJzLm1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnbWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ21hdGNhcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nICkgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdlbnZNYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyApIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdlbWlzc2l2ZU1hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyA/IGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggJ2xpbmVhclRvT3V0cHV0VGV4ZWwnLCBwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgPyAnI2RlZmluZSBERVBUSF9QQUNLSU5HICcgKyBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgOiAnJyxcblxuXHRcdFx0J1xcbidcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHR2ZXJ0ZXhTaGFkZXIgPSBwYXJzZUluY2x1ZGVzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdHZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggdmVydGV4U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0ZnJhZ21lbnRTaGFkZXIgPSBwYXJzZUluY2x1ZGVzKCBmcmFnbWVudFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VMaWdodE51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApO1xuXG5cdHZlcnRleFNoYWRlciA9IHVucm9sbExvb3BzKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSB1bnJvbGxMb29wcyggZnJhZ21lbnRTaGFkZXIgKTtcblxuXHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiAmJiAhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHR2YXIgaXNHTFNMM1NoYWRlck1hdGVyaWFsID0gZmFsc2U7XG5cblx0XHR2YXIgdmVyc2lvblJlZ2V4ID0gL15cXHMqI3ZlcnNpb25cXHMrMzAwXFxzK2VzXFxzKlxcbi87XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiZcblx0XHRcdHZlcnRleFNoYWRlci5tYXRjaCggdmVyc2lvblJlZ2V4ICkgIT09IG51bGwgJiZcblx0XHRcdGZyYWdtZW50U2hhZGVyLm1hdGNoKCB2ZXJzaW9uUmVnZXggKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0aXNHTFNMM1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gdmVydGV4U2hhZGVyLnJlcGxhY2UoIHZlcnNpb25SZWdleCwgJycgKTtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXIucmVwbGFjZSggdmVyc2lvblJlZ2V4LCAnJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR0xTTCAzLjAgY29udmVyc2lvblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblx0XHRcdCcjdmVyc2lvbiAzMDAgZXNcXG4nLFxuXHRcdFx0JyNkZWZpbmUgYXR0cmlidXRlIGluJyxcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgb3V0Jyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4VmVydGV4O1xuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cdFx0XHQnI3ZlcnNpb24gMzAwIGVzXFxuJyxcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgaW4nLFxuXHRcdFx0aXNHTFNMM1NoYWRlck1hdGVyaWFsID8gJycgOiAnb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yOycsXG5cdFx0XHRpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPyAnJyA6ICcjZGVmaW5lIGdsX0ZyYWdDb2xvciBwY19mcmFnQ29sb3InLFxuXHRcdFx0JyNkZWZpbmUgZ2xfRnJhZ0RlcHRoRVhUIGdsX0ZyYWdEZXB0aCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkQgdGV4dHVyZScsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZSB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRFByb2ogdGV4dHVyZVByb2onLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJETG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvakxvZEVYVCB0ZXh0dXJlUHJvakxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZUxvZEVYVCB0ZXh0dXJlTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyREdyYWRFWFQgdGV4dHVyZUdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvakdyYWRFWFQgdGV4dHVyZVByb2pHcmFkJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlR3JhZEVYVCB0ZXh0dXJlR3JhZCdcblx0XHRdLmpvaW4oICdcXG4nICkgKyAnXFxuJyArIHByZWZpeEZyYWdtZW50O1xuXG5cdH1cblxuXHR2YXIgdmVydGV4R2xzbCA9IHByZWZpeFZlcnRleCArIHZlcnRleFNoYWRlcjtcblx0dmFyIGZyYWdtZW50R2xzbCA9IHByZWZpeEZyYWdtZW50ICsgZnJhZ21lbnRTaGFkZXI7XG5cblx0Ly8gY29uc29sZS5sb2coICcqVkVSVEVYKicsIHZlcnRleEdsc2wgKTtcblx0Ly8gY29uc29sZS5sb2coICcqRlJBR01FTlQqJywgZnJhZ21lbnRHbHNsICk7XG5cblx0dmFyIGdsVmVydGV4U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMywgdmVydGV4R2xzbCApO1xuXHR2YXIgZ2xGcmFnbWVudFNoYWRlciA9IFdlYkdMU2hhZGVyKCBnbCwgMzU2MzIsIGZyYWdtZW50R2xzbCApO1xuXG5cdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLlxuXG5cdGlmICggbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCAwLCBtYXRlcmlhbC5pbmRleDBBdHRyaWJ1dGVOYW1lICk7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG5cblx0XHQvLyBwcm9ncmFtcyB3aXRoIG1vcnBoVGFyZ2V0cyBkaXNwbGFjZSBwb3NpdGlvbiBvdXQgb2YgYXR0cmlidXRlIDBcblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsICdwb3NpdGlvbicgKTtcblxuXHR9XG5cblx0Z2wubGlua1Byb2dyYW0oIHByb2dyYW0gKTtcblxuXHR2YXIgcHJvZ3JhbUxvZyA9IGdsLmdldFByb2dyYW1JbmZvTG9nKCBwcm9ncmFtICkudHJpbSgpO1xuXHR2YXIgdmVydGV4TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xWZXJ0ZXhTaGFkZXIgKS50cmltKCk7XG5cdHZhciBmcmFnbWVudExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsRnJhZ21lbnRTaGFkZXIgKS50cmltKCk7XG5cblx0dmFyIHJ1bm5hYmxlID0gdHJ1ZTtcblx0dmFyIGhhdmVEaWFnbm9zdGljcyA9IHRydWU7XG5cblx0Ly8gY29uc29sZS5sb2coICcqKlZFUlRFWCoqJywgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBnbFZlcnRleFNoYWRlciApICk7XG5cdC8vIGNvbnNvbGUubG9nKCAnKipGUkFHTUVOVCoqJywgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBnbEZyYWdtZW50U2hhZGVyICkgKTtcblxuXHRpZiAoIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0cnVubmFibGUgPSBmYWxzZTtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFByb2dyYW06IHNoYWRlciBlcnJvcjogJywgZ2wuZ2V0RXJyb3IoKSwgJzM1NzE1JywgZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTUgKSwgJ2dsLmdldFByb2dyYW1JbmZvTG9nJywgcHJvZ3JhbUxvZywgdmVydGV4TG9nLCBmcmFnbWVudExvZyApO1xuXG5cdH0gZWxzZSBpZiAoIHByb2dyYW1Mb2cgIT09ICcnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBnbC5nZXRQcm9ncmFtSW5mb0xvZygpJywgcHJvZ3JhbUxvZyApO1xuXG5cdH0gZWxzZSBpZiAoIHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnICkge1xuXG5cdFx0aGF2ZURpYWdub3N0aWNzID0gZmFsc2U7XG5cblx0fVxuXG5cdGlmICggaGF2ZURpYWdub3N0aWNzICkge1xuXG5cdFx0dGhpcy5kaWFnbm9zdGljcyA9IHtcblxuXHRcdFx0cnVubmFibGU6IHJ1bm5hYmxlLFxuXHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxuXG5cdFx0XHRwcm9ncmFtTG9nOiBwcm9ncmFtTG9nLFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IHtcblxuXHRcdFx0XHRsb2c6IHZlcnRleExvZyxcblx0XHRcdFx0cHJlZml4OiBwcmVmaXhWZXJ0ZXhcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHtcblxuXHRcdFx0XHRsb2c6IGZyYWdtZW50TG9nLFxuXHRcdFx0XHRwcmVmaXg6IHByZWZpeEZyYWdtZW50XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8vIGNsZWFuIHVwXG5cblx0Z2wuZGVsZXRlU2hhZGVyKCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5kZWxldGVTaGFkZXIoIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgdW5pZm9ybSBsb2NhdGlvbnNcblxuXHR2YXIgY2FjaGVkVW5pZm9ybXM7XG5cblx0dGhpcy5nZXRVbmlmb3JtcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkVW5pZm9ybXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2FjaGVkVW5pZm9ybXMgPSBuZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0sIHJlbmRlcmVyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkVW5pZm9ybXM7XG5cblx0fTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgYXR0cmlidXRlIGxvY2F0aW9uc1xuXG5cdHZhciBjYWNoZWRBdHRyaWJ1dGVzO1xuXG5cdHRoaXMuZ2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkQXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjYWNoZWRBdHRyaWJ1dGVzID0gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkQXR0cmlidXRlcztcblxuXHR9O1xuXG5cdC8vIGZyZWUgcmVzb3VyY2VcblxuXHR0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRnbC5kZWxldGVQcm9ncmFtKCBwcm9ncmFtICk7XG5cdFx0dGhpcy5wcm9ncmFtID0gdW5kZWZpbmVkO1xuXG5cdH07XG5cblx0Ly8gREVQUkVDQVRFRFxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiAudW5pZm9ybXMgaXMgbm93IC5nZXRVbmlmb3JtcygpLicgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0VW5pZm9ybXMoKTtcblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW06IC5hdHRyaWJ1dGVzIGlzIG5vdyAuZ2V0QXR0cmlidXRlcygpLicgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0gKTtcblxuXG5cdC8vXG5cblx0dGhpcy5uYW1lID0gc2hhZGVyLm5hbWU7XG5cdHRoaXMuaWQgPSBwcm9ncmFtSWRDb3VudCArKztcblx0dGhpcy5jb2RlID0gY29kZTtcblx0dGhpcy51c2VkVGltZXMgPSAxO1xuXHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IGdsVmVydGV4U2hhZGVyO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2xGcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xQcm9ncmFtcyggcmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHR2YXIgcHJvZ3JhbXMgPSBbXTtcblxuXHR2YXIgc2hhZGVySURzID0ge1xuXHRcdE1lc2hEZXB0aE1hdGVyaWFsOiAnZGVwdGgnLFxuXHRcdE1lc2hEaXN0YW5jZU1hdGVyaWFsOiAnZGlzdGFuY2VSR0JBJyxcblx0XHRNZXNoTm9ybWFsTWF0ZXJpYWw6ICdub3JtYWwnLFxuXHRcdE1lc2hCYXNpY01hdGVyaWFsOiAnYmFzaWMnLFxuXHRcdE1lc2hMYW1iZXJ0TWF0ZXJpYWw6ICdsYW1iZXJ0Jyxcblx0XHRNZXNoUGhvbmdNYXRlcmlhbDogJ3Bob25nJyxcblx0XHRNZXNoVG9vbk1hdGVyaWFsOiAncGhvbmcnLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdHZhciBwYXJhbWV0ZXJOYW1lcyA9IFtcblx0XHRcInByZWNpc2lvblwiLCBcInN1cHBvcnRzVmVydGV4VGV4dHVyZXNcIiwgXCJtYXBcIiwgXCJtYXBFbmNvZGluZ1wiLCBcIm1hdGNhcEVuY29kaW5nXCIsIFwiZW52TWFwXCIsIFwiZW52TWFwTW9kZVwiLCBcImVudk1hcEVuY29kaW5nXCIsXG5cdFx0XCJsaWdodE1hcFwiLCBcImFvTWFwXCIsIFwiZW1pc3NpdmVNYXBcIiwgXCJlbWlzc2l2ZU1hcEVuY29kaW5nXCIsIFwiYnVtcE1hcFwiLCBcIm5vcm1hbE1hcFwiLCBcIm9iamVjdFNwYWNlTm9ybWFsTWFwXCIsIFwiZGlzcGxhY2VtZW50TWFwXCIsIFwic3BlY3VsYXJNYXBcIixcblx0XHRcInJvdWdobmVzc01hcFwiLCBcIm1ldGFsbmVzc01hcFwiLCBcImdyYWRpZW50TWFwXCIsXG5cdFx0XCJhbHBoYU1hcFwiLCBcImNvbWJpbmVcIiwgXCJ2ZXJ0ZXhDb2xvcnNcIiwgXCJmb2dcIiwgXCJ1c2VGb2dcIiwgXCJmb2dFeHBcIixcblx0XHRcImZsYXRTaGFkaW5nXCIsIFwic2l6ZUF0dGVudWF0aW9uXCIsIFwibG9nYXJpdGhtaWNEZXB0aEJ1ZmZlclwiLCBcInNraW5uaW5nXCIsXG5cdFx0XCJtYXhCb25lc1wiLCBcInVzZVZlcnRleFRleHR1cmVcIiwgXCJtb3JwaFRhcmdldHNcIiwgXCJtb3JwaE5vcm1hbHNcIixcblx0XHRcIm1heE1vcnBoVGFyZ2V0c1wiLCBcIm1heE1vcnBoTm9ybWFsc1wiLCBcInByZW11bHRpcGxpZWRBbHBoYVwiLFxuXHRcdFwibnVtRGlyTGlnaHRzXCIsIFwibnVtUG9pbnRMaWdodHNcIiwgXCJudW1TcG90TGlnaHRzXCIsIFwibnVtSGVtaUxpZ2h0c1wiLCBcIm51bVJlY3RBcmVhTGlnaHRzXCIsXG5cdFx0XCJzaGFkb3dNYXBFbmFibGVkXCIsIFwic2hhZG93TWFwVHlwZVwiLCBcInRvbmVNYXBwaW5nXCIsICdwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cycsXG5cdFx0XCJhbHBoYVRlc3RcIiwgXCJkb3VibGVTaWRlZFwiLCBcImZsaXBTaWRlZFwiLCBcIm51bUNsaXBwaW5nUGxhbmVzXCIsIFwibnVtQ2xpcEludGVyc2VjdGlvblwiLCBcImRlcHRoUGFja2luZ1wiLCBcImRpdGhlcmluZ1wiXG5cdF07XG5cblxuXHRmdW5jdGlvbiBhbGxvY2F0ZUJvbmVzKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cdFx0dmFyIGJvbmVzID0gc2tlbGV0b24uYm9uZXM7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzICkge1xuXG5cdFx0XHRyZXR1cm4gMTAyNDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGRlZmF1bHQgZm9yIHdoZW4gb2JqZWN0IGlzIG5vdCBzcGVjaWZpZWRcblx0XHRcdC8vICggZm9yIGV4YW1wbGUgd2hlbiBwcmVidWlsZGluZyBzaGFkZXIgdG8gYmUgdXNlZCB3aXRoIG11bHRpcGxlIG9iamVjdHMgKVxuXHRcdFx0Ly9cblx0XHRcdC8vICAtIGxlYXZlIHNvbWUgZXh0cmEgc3BhY2UgZm9yIG90aGVyIHVuaWZvcm1zXG5cdFx0XHQvLyAgLSBsaW1pdCBoZXJlIGlzIEFOR0xFJ3MgMjU0IG1heCB1bmlmb3JtIHZlY3RvcnNcblx0XHRcdC8vICAgICh1cCB0byA1NCBzaG91bGQgYmUgc2FmZSlcblxuXHRcdFx0dmFyIG5WZXJ0ZXhVbmlmb3JtcyA9IGNhcGFiaWxpdGllcy5tYXhWZXJ0ZXhVbmlmb3Jtcztcblx0XHRcdHZhciBuVmVydGV4TWF0cmljZXMgPSBNYXRoLmZsb29yKCAoIG5WZXJ0ZXhVbmlmb3JtcyAtIDIwICkgLyA0ICk7XG5cblx0XHRcdHZhciBtYXhCb25lcyA9IE1hdGgubWluKCBuVmVydGV4TWF0cmljZXMsIGJvbmVzLmxlbmd0aCApO1xuXG5cdFx0XHRpZiAoIG1heEJvbmVzIDwgYm9uZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFNrZWxldG9uIGhhcyAnICsgYm9uZXMubGVuZ3RoICsgJyBib25lcy4gVGhpcyBHUFUgc3VwcG9ydHMgJyArIG1heEJvbmVzICsgJy4nICk7XG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXhCb25lcztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWFwLCBnYW1tYU92ZXJyaWRlTGluZWFyICkge1xuXG5cdFx0dmFyIGVuY29kaW5nO1xuXG5cdFx0aWYgKCAhIG1hcCApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcblxuXHRcdH0gZWxzZSBpZiAoIG1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGVuY29kaW5nID0gbWFwLmVuY29kaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFByb2dyYW1zLmdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXA6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdGVuY29kaW5nID0gbWFwLnRleHR1cmUuZW5jb2Rpbmc7XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIFdlYkdMUmVuZGVyZXIuZ2FtbWFJbnB1dC9nYW1tYU91dHB1dCBwYXJhbWV0ZXIsIHNob3VsZCBwcm9iYWJseSBiZSByZW1vdmVkIGF0IHNvbWUgcG9pbnQuXG5cdFx0aWYgKCBlbmNvZGluZyA9PT0gTGluZWFyRW5jb2RpbmcgJiYgZ2FtbWFPdmVycmlkZUxpbmVhciApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBHYW1tYUVuY29kaW5nO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVuY29kaW5nO1xuXG5cdH1cblxuXHR0aGlzLmdldFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoIG1hdGVyaWFsLCBsaWdodHMsIHNoYWRvd3MsIGZvZywgbkNsaXBQbGFuZXMsIG5DbGlwSW50ZXJzZWN0aW9uLCBvYmplY3QgKSB7XG5cblx0XHR2YXIgc2hhZGVySUQgPSBzaGFkZXJJRHNbIG1hdGVyaWFsLnR5cGUgXTtcblxuXHRcdC8vIGhldXJpc3RpY3MgdG8gY3JlYXRlIHNoYWRlciBwYXJhbWV0ZXJzIGFjY29yZGluZyB0byBsaWdodHMgaW4gdGhlIHNjZW5lXG5cdFx0Ly8gKG5vdCB0byBibG93IG92ZXIgbWF4TGlnaHRzIGJ1ZGdldClcblxuXHRcdHZhciBtYXhCb25lcyA9IG9iamVjdC5pc1NraW5uZWRNZXNoID8gYWxsb2NhdGVCb25lcyggb2JqZWN0ICkgOiAwO1xuXHRcdHZhciBwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5wcmVjaXNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5nZXRNYXhQcmVjaXNpb24oIG1hdGVyaWFsLnByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHByZWNpc2lvbiAhPT0gbWF0ZXJpYWwucHJlY2lzaW9uICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbS5nZXRQYXJhbWV0ZXJzOicsIG1hdGVyaWFsLnByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgcHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR2YXIgcGFyYW1ldGVycyA9IHtcblxuXHRcdFx0c2hhZGVySUQ6IHNoYWRlcklELFxuXG5cdFx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IGNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcyxcblx0XHRcdG91dHB1dEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCAoICEgY3VycmVudFJlbmRlclRhcmdldCApID8gbnVsbCA6IGN1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZSwgcmVuZGVyZXIuZ2FtbWFPdXRwdXQgKSxcblx0XHRcdG1hcDogISEgbWF0ZXJpYWwubWFwLFxuXHRcdFx0bWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLm1hcCwgcmVuZGVyZXIuZ2FtbWFJbnB1dCApLFxuXHRcdFx0bWF0Y2FwOiAhISBtYXRlcmlhbC5tYXRjYXAsXG5cdFx0XHRtYXRjYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwubWF0Y2FwLCByZW5kZXJlci5nYW1tYUlucHV0ICksXG5cdFx0XHRlbnZNYXA6ICEhIG1hdGVyaWFsLmVudk1hcCxcblx0XHRcdGVudk1hcE1vZGU6IG1hdGVyaWFsLmVudk1hcCAmJiBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyxcblx0XHRcdGVudk1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5lbnZNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGVudk1hcEN1YmVVVjogKCAhISBtYXRlcmlhbC5lbnZNYXAgKSAmJiAoICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgfHwgKCBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcgKSApLFxuXHRcdFx0bGlnaHRNYXA6ICEhIG1hdGVyaWFsLmxpZ2h0TWFwLFxuXHRcdFx0YW9NYXA6ICEhIG1hdGVyaWFsLmFvTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXA6ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwuZW1pc3NpdmVNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGJ1bXBNYXA6ICEhIG1hdGVyaWFsLmJ1bXBNYXAsXG5cdFx0XHRub3JtYWxNYXA6ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCxcblx0XHRcdG9iamVjdFNwYWNlTm9ybWFsTWFwOiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBPYmplY3RTcGFjZU5vcm1hbE1hcCxcblx0XHRcdGRpc3BsYWNlbWVudE1hcDogISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLFxuXHRcdFx0cm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsXG5cdFx0XHRtZXRhbG5lc3NNYXA6ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCxcblx0XHRcdHNwZWN1bGFyTWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCxcblx0XHRcdGFscGhhTWFwOiAhISBtYXRlcmlhbC5hbHBoYU1hcCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwLFxuXG5cdFx0XHRjb21iaW5lOiBtYXRlcmlhbC5jb21iaW5lLFxuXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycyxcblxuXHRcdFx0Zm9nOiAhISBmb2csXG5cdFx0XHR1c2VGb2c6IG1hdGVyaWFsLmZvZyxcblx0XHRcdGZvZ0V4cDogKCBmb2cgJiYgZm9nLmlzRm9nRXhwMiApLFxuXG5cdFx0XHRmbGF0U2hhZGluZzogbWF0ZXJpYWwuZmxhdFNoYWRpbmcsXG5cblx0XHRcdHNpemVBdHRlbnVhdGlvbjogbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uLFxuXHRcdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5cblx0XHRcdHNraW5uaW5nOiBtYXRlcmlhbC5za2lubmluZyAmJiBtYXhCb25lcyA+IDAsXG5cdFx0XHRtYXhCb25lczogbWF4Qm9uZXMsXG5cdFx0XHR1c2VWZXJ0ZXhUZXh0dXJlOiBjYXBhYmlsaXRpZXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiBtYXRlcmlhbC5tb3JwaFRhcmdldHMsXG5cdFx0XHRtb3JwaE5vcm1hbHM6IG1hdGVyaWFsLm1vcnBoTm9ybWFscyxcblx0XHRcdG1heE1vcnBoVGFyZ2V0czogcmVuZGVyZXIubWF4TW9ycGhUYXJnZXRzLFxuXHRcdFx0bWF4TW9ycGhOb3JtYWxzOiByZW5kZXJlci5tYXhNb3JwaE5vcm1hbHMsXG5cblx0XHRcdG51bURpckxpZ2h0czogbGlnaHRzLmRpcmVjdGlvbmFsLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRzOiBsaWdodHMucG9pbnQubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLFxuXHRcdFx0bnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsXG5cdFx0XHRudW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsXG5cblx0XHRcdG51bUNsaXBwaW5nUGxhbmVzOiBuQ2xpcFBsYW5lcyxcblx0XHRcdG51bUNsaXBJbnRlcnNlY3Rpb246IG5DbGlwSW50ZXJzZWN0aW9uLFxuXG5cdFx0XHRkaXRoZXJpbmc6IG1hdGVyaWFsLmRpdGhlcmluZyxcblxuXHRcdFx0c2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgb2JqZWN0LnJlY2VpdmVTaGFkb3cgJiYgc2hhZG93cy5sZW5ndGggPiAwLFxuXHRcdFx0c2hhZG93TWFwVHlwZTogcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUsXG5cblx0XHRcdHRvbmVNYXBwaW5nOiByZW5kZXJlci50b25lTWFwcGluZyxcblx0XHRcdHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzOiByZW5kZXJlci5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyxcblxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsXG5cblx0XHRcdGFscGhhVGVzdDogbWF0ZXJpYWwuYWxwaGFUZXN0LFxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHRkZXB0aFBhY2tpbmc6ICggbWF0ZXJpYWwuZGVwdGhQYWNraW5nICE9PSB1bmRlZmluZWQgKSA/IG1hdGVyaWFsLmRlcHRoUGFja2luZyA6IGZhbHNlXG5cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHBhcmFtZXRlcnM7XG5cblx0fTtcblxuXHR0aGlzLmdldFByb2dyYW1Db2RlID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApIHtcblxuXHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciApO1xuXHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwudmVydGV4U2hhZGVyICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4gbWF0ZXJpYWwuZGVmaW5lcyApIHtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBuYW1lICk7XG5cdFx0XHRcdGFycmF5LnB1c2goIG1hdGVyaWFsLmRlZmluZXNbIG5hbWUgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBwYXJhbWV0ZXJOYW1lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnNbIHBhcmFtZXRlck5hbWVzWyBpIF0gXSApO1xuXG5cdFx0fVxuXG5cdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwub25CZWZvcmVDb21waWxlLnRvU3RyaW5nKCkgKTtcblxuXHRcdGFycmF5LnB1c2goIHJlbmRlcmVyLmdhbW1hT3V0cHV0ICk7XG5cblx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5nYW1tYUZhY3RvciApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9O1xuXG5cdHRoaXMuYWNxdWlyZVByb2dyYW0gPSBmdW5jdGlvbiAoIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMsIGNvZGUgKSB7XG5cblx0XHR2YXIgcHJvZ3JhbTtcblxuXHRcdC8vIENoZWNrIGlmIGNvZGUgaGFzIGJlZW4gYWxyZWFkeSBjb21waWxlZFxuXHRcdGZvciAoIHZhciBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHtcblxuXHRcdFx0dmFyIHByb2dyYW1JbmZvID0gcHJvZ3JhbXNbIHAgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtSW5mby5jb2RlID09PSBjb2RlICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBwcm9ncmFtSW5mbztcblx0XHRcdFx0KysgcHJvZ3JhbS51c2VkVGltZXM7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtID0gbmV3IFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNvZGUsIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMsIGNhcGFiaWxpdGllcyApO1xuXHRcdFx0cHJvZ3JhbXMucHVzaCggcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fTtcblxuXHR0aGlzLnJlbGVhc2VQcm9ncmFtID0gZnVuY3Rpb24gKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldFxuXHRcdFx0dmFyIGkgPSBwcm9ncmFtcy5pbmRleE9mKCBwcm9ncmFtICk7XG5cdFx0XHRwcm9ncmFtc1sgaSBdID0gcHJvZ3JhbXNbIHByb2dyYW1zLmxlbmd0aCAtIDEgXTtcblx0XHRcdHByb2dyYW1zLnBvcCgpO1xuXG5cdFx0XHQvLyBGcmVlIFdlYkdMIHJlc291cmNlc1xuXHRcdFx0cHJvZ3JhbS5kZXN0cm95KCk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyBFeHBvc2VkIGZvciByZXNvdXJjZSBtb25pdG9yaW5nICYgZXJyb3IgZmVlZGJhY2sgdmlhIHJlbmRlcmVyLmluZm86XG5cdHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgZm9yZGFjaW91cyAvIGZvcmRhY2lvdXMuZ2l0aHViLmlvXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xQcm9wZXJ0aWVzKCkge1xuXG5cdHZhciBwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCApIHtcblxuXHRcdHZhciBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkge1xuXG5cdFx0cHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBwYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5wcm9ncmFtICYmIGIucHJvZ3JhbSAmJiBhLnByb2dyYW0gIT09IGIucHJvZ3JhbSApIHtcblxuXHRcdHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcblxuXHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcblxuXHR9IGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdHZhciByZW5kZXJJdGVtcyA9IFtdO1xuXHR2YXIgcmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0dmFyIG9wYXF1ZSA9IFtdO1xuXHR2YXIgdHJhbnNwYXJlbnQgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXG5cdFx0cmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0XHRvcGFxdWUubGVuZ3RoID0gMDtcblx0XHR0cmFuc3BhcmVudC5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgeiwgZ3JvdXAgKSB7XG5cblx0XHR2YXIgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyByZW5kZXJJdGVtc0luZGV4IF07XG5cblx0XHRpZiAoIHJlbmRlckl0ZW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVuZGVySXRlbSA9IHtcblx0XHRcdFx0aWQ6IG9iamVjdC5pZCxcblx0XHRcdFx0b2JqZWN0OiBvYmplY3QsXG5cdFx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeSxcblx0XHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxuXHRcdFx0XHRwcm9ncmFtOiBtYXRlcmlhbC5wcm9ncmFtLFxuXHRcdFx0XHRyZW5kZXJPcmRlcjogb2JqZWN0LnJlbmRlck9yZGVyLFxuXHRcdFx0XHR6OiB6LFxuXHRcdFx0XHRncm91cDogZ3JvdXBcblx0XHRcdH07XG5cblx0XHRcdHJlbmRlckl0ZW1zWyByZW5kZXJJdGVtc0luZGV4IF0gPSByZW5kZXJJdGVtO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVySXRlbS5pZCA9IG9iamVjdC5pZDtcblx0XHRcdHJlbmRlckl0ZW0ub2JqZWN0ID0gb2JqZWN0O1xuXHRcdFx0cmVuZGVySXRlbS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXHRcdFx0cmVuZGVySXRlbS5wcm9ncmFtID0gbWF0ZXJpYWwucHJvZ3JhbTtcblx0XHRcdHJlbmRlckl0ZW0ucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XG5cdFx0XHRyZW5kZXJJdGVtLnogPSB6O1xuXHRcdFx0cmVuZGVySXRlbS5ncm91cCA9IGdyb3VwO1xuXG5cdFx0fVxuXG5cblx0XHQoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlID8gdHJhbnNwYXJlbnQgOiBvcGFxdWUgKS5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ICsrO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzb3J0KCkge1xuXG5cdFx0aWYgKCBvcGFxdWUubGVuZ3RoID4gMSApIG9wYXF1ZS5zb3J0KCBwYWludGVyU29ydFN0YWJsZSApO1xuXHRcdGlmICggdHJhbnNwYXJlbnQubGVuZ3RoID4gMSApIHRyYW5zcGFyZW50LnNvcnQoIHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG9wYXF1ZTogb3BhcXVlLFxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcblxuXHRcdGluaXQ6IGluaXQsXG5cdFx0cHVzaDogcHVzaCxcblxuXHRcdHNvcnQ6IHNvcnRcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlckxpc3RzKCkge1xuXG5cdHZhciBsaXN0cyA9IHt9O1xuXG5cdGZ1bmN0aW9uIGdldCggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdHZhciBoYXNoID0gc2NlbmUuaWQgKyAnLCcgKyBjYW1lcmEuaWQ7XG5cdFx0dmFyIGxpc3QgPSBsaXN0c1sgaGFzaCBdO1xuXG5cdFx0aWYgKCBsaXN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJMaXN0czonLCBoYXNoICk7XG5cblx0XHRcdGxpc3QgPSBuZXcgV2ViR0xSZW5kZXJMaXN0KCk7XG5cdFx0XHRsaXN0c1sgaGFzaCBdID0gbGlzdDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBsaXN0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0bGlzdHMgPSB7fTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFVuaWZvcm1zQ2FjaGUoKSB7XG5cblx0dmFyIGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cblx0XHRcdFx0XHRcdHNoYWRvdzogZmFsc2UsXG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3BvdExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRjb25lQ29zOiAwLFxuXHRcdFx0XHRcdFx0cGVudW1icmFDb3M6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMCxcblxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMCxcblxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhTmVhcjogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYUZhcjogMTAwMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnSGVtaXNwaGVyZUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdHNreUNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZXaWR0aDogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZIZWlnaHQ6IG5ldyBWZWN0b3IzKClcblx0XHRcdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBzZXQgUmVjdEFyZWFMaWdodCBzaGFkb3cgdW5pZm9ybXNcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG52YXIgY291bnQgPSAwO1xuXG5mdW5jdGlvbiBXZWJHTExpZ2h0cygpIHtcblxuXHR2YXIgY2FjaGUgPSBuZXcgVW5pZm9ybXNDYWNoZSgpO1xuXG5cdHZhciBzdGF0ZSA9IHtcblxuXHRcdGlkOiBjb3VudCArKyxcblxuXHRcdGhhc2g6IHtcblx0XHRcdHN0YXRlSUQ6IC0gMSxcblx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoOiAtIDEsXG5cdFx0XHRwb2ludExlbmd0aDogLSAxLFxuXHRcdFx0c3BvdExlbmd0aDogLSAxLFxuXHRcdFx0cmVjdEFyZWFMZW5ndGg6IC0gMSxcblx0XHRcdGhlbWlMZW5ndGg6IC0gMSxcblx0XHRcdHNoYWRvd3NMZW5ndGg6IC0gMVxuXHRcdH0sXG5cblx0XHRhbWJpZW50OiBbIDAsIDAsIDAgXSxcblx0XHRkaXJlY3Rpb25hbDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiBbXSxcblx0XHRzcG90OiBbXSxcblx0XHRzcG90U2hhZG93TWFwOiBbXSxcblx0XHRzcG90U2hhZG93TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cG9pbnQ6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW11cblxuXHR9O1xuXG5cdHZhciB2ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuXHR2YXIgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBsaWdodHMsIHNoYWRvd3MsIGNhbWVyYSApIHtcblxuXHRcdHZhciByID0gMCwgZyA9IDAsIGIgPSAwO1xuXG5cdFx0dmFyIGRpcmVjdGlvbmFsTGVuZ3RoID0gMDtcblx0XHR2YXIgcG9pbnRMZW5ndGggPSAwO1xuXHRcdHZhciBzcG90TGVuZ3RoID0gMDtcblx0XHR2YXIgcmVjdEFyZWFMZW5ndGggPSAwO1xuXHRcdHZhciBoZW1pTGVuZ3RoID0gMDtcblxuXHRcdHZhciB2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0dmFyIGNvbG9yID0gbGlnaHQuY29sb3I7XG5cdFx0XHR2YXIgaW50ZW5zaXR5ID0gbGlnaHQuaW50ZW5zaXR5O1xuXHRcdFx0dmFyIGRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0XHRcdHZhciBzaGFkb3dNYXAgPSAoIGxpZ2h0LnNoYWRvdyAmJiBsaWdodC5zaGFkb3cubWFwICkgPyBsaWdodC5zaGFkb3cubWFwLnRleHR1cmUgOiBudWxsO1xuXG5cdFx0XHRpZiAoIGxpZ2h0LmlzQW1iaWVudExpZ2h0ICkge1xuXG5cdFx0XHRcdHIgKz0gY29sb3IuciAqIGludGVuc2l0eTtcblx0XHRcdFx0ZyArPSBjb2xvci5nICogaW50ZW5zaXR5O1xuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggbGlnaHQuaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hhZG93ID0gbGlnaHQuY2FzdFNoYWRvdztcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbmVDb3MgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKTtcblx0XHRcdFx0dW5pZm9ybXMucGVudW1icmFDb3MgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKiAoIDEgLSBsaWdodC5wZW51bWJyYSApICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRlY2F5ID0gbGlnaHQuZGVjYXk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hhZG93ID0gbGlnaHQuY2FzdFNoYWRvdztcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5zcG90U2hhZG93TWFwWyBzcG90TGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXhbIHNwb3RMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cdFx0XHRcdHN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHNwb3RMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzUmVjdEFyZWFMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0Ly8gKGEpIGludGVuc2l0eSBpcyB0aGUgdG90YWwgdmlzaWJsZSBsaWdodCBlbWl0dGVkXG5cdFx0XHRcdC8vdW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5IC8gKCBsaWdodC53aWR0aCAqIGxpZ2h0LmhlaWdodCAqIE1hdGguUEkgKSApO1xuXG5cdFx0XHRcdC8vIChiKSBpbnRlbnNpdHkgaXMgdGhlIGJyaWdodG5lc3Mgb2YgdGhlIGxpZ2h0XG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0Ly8gZXh0cmFjdCBsb2NhbCByb3RhdGlvbiBvZiBsaWdodCB0byBkZXJpdmUgd2lkdGgvaGVpZ2h0IGhhbGYgdmVjdG9yc1xuXHRcdFx0XHRtYXRyaXg0Mi5pZGVudGl0eSgpO1xuXHRcdFx0XHRtYXRyaXg0LmNvcHkoIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdG1hdHJpeDQucHJlbXVsdGlwbHkoIHZpZXdNYXRyaXggKTtcblx0XHRcdFx0bWF0cml4NDIuZXh0cmFjdFJvdGF0aW9uKCBtYXRyaXg0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLnNldCggbGlnaHQud2lkdGggKiAwLjUsIDAuMCwgMC4wICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7XG5cblx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgZGlzdGFuY2U/XG5cdFx0XHRcdC8vIHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0c3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dDYW1lcmFOZWFyID0gc2hhZG93LmNhbWVyYS5uZWFyO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0NhbWVyYUZhciA9IHNoYWRvdy5jYW1lcmEuZmFyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcFsgcG9pbnRMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXRyaXhbIHBvaW50TGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXHRcdFx0XHRzdGF0ZS5wb2ludFsgcG9pbnRMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHBvaW50TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0hlbWlzcGhlcmVMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24ubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2t5Q29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdyb3VuZENvbG9yLmNvcHkoIGxpZ2h0Lmdyb3VuZENvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmFtYmllbnRbIDAgXSA9IHI7XG5cdFx0c3RhdGUuYW1iaWVudFsgMSBdID0gZztcblx0XHRzdGF0ZS5hbWJpZW50WyAyIF0gPSBiO1xuXG5cdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0c3RhdGUuc3BvdC5sZW5ndGggPSBzcG90TGVuZ3RoO1xuXHRcdHN0YXRlLnJlY3RBcmVhLmxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdHN0YXRlLmhlbWkubGVuZ3RoID0gaGVtaUxlbmd0aDtcblxuXHRcdHN0YXRlLmhhc2guc3RhdGVJRCA9IHN0YXRlLmlkO1xuXHRcdHN0YXRlLmhhc2guZGlyZWN0aW9uYWxMZW5ndGggPSBkaXJlY3Rpb25hbExlbmd0aDtcblx0XHRzdGF0ZS5oYXNoLnBvaW50TGVuZ3RoID0gcG9pbnRMZW5ndGg7XG5cdFx0c3RhdGUuaGFzaC5zcG90TGVuZ3RoID0gc3BvdExlbmd0aDtcblx0XHRzdGF0ZS5oYXNoLnJlY3RBcmVhTGVuZ3RoID0gcmVjdEFyZWFMZW5ndGg7XG5cdFx0c3RhdGUuaGFzaC5oZW1pTGVuZ3RoID0gaGVtaUxlbmd0aDtcblx0XHRzdGF0ZS5oYXNoLnNoYWRvd3NMZW5ndGggPSBzaGFkb3dzLmxlbmd0aDtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0c3RhdGU6IHN0YXRlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyU3RhdGUoKSB7XG5cblx0dmFyIGxpZ2h0cyA9IG5ldyBXZWJHTExpZ2h0cygpO1xuXG5cdHZhciBsaWdodHNBcnJheSA9IFtdO1xuXHR2YXIgc2hhZG93c0FycmF5ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdGxpZ2h0c0FycmF5Lmxlbmd0aCA9IDA7XG5cdFx0c2hhZG93c0FycmF5Lmxlbmd0aCA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2hMaWdodCggbGlnaHQgKSB7XG5cblx0XHRsaWdodHNBcnJheS5wdXNoKCBsaWdodCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoU2hhZG93KCBzaGFkb3dMaWdodCApIHtcblxuXHRcdHNoYWRvd3NBcnJheS5wdXNoKCBzaGFkb3dMaWdodCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXR1cExpZ2h0cyggY2FtZXJhICkge1xuXG5cdFx0bGlnaHRzLnNldHVwKCBsaWdodHNBcnJheSwgc2hhZG93c0FycmF5LCBjYW1lcmEgKTtcblxuXHR9XG5cblx0dmFyIHN0YXRlID0ge1xuXHRcdGxpZ2h0c0FycmF5OiBsaWdodHNBcnJheSxcblx0XHRzaGFkb3dzQXJyYXk6IHNoYWRvd3NBcnJheSxcblxuXHRcdGxpZ2h0czogbGlnaHRzXG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0LFxuXHRcdHN0YXRlOiBzdGF0ZSxcblx0XHRzZXR1cExpZ2h0czogc2V0dXBMaWdodHMsXG5cblx0XHRwdXNoTGlnaHQ6IHB1c2hMaWdodCxcblx0XHRwdXNoU2hhZG93OiBwdXNoU2hhZG93XG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZXMoKSB7XG5cblx0dmFyIHJlbmRlclN0YXRlcyA9IHt9O1xuXG5cdGZ1bmN0aW9uIGdldCggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdHZhciByZW5kZXJTdGF0ZTtcblxuXHRcdGlmICggcmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTtcblx0XHRcdHJlbmRlclN0YXRlc1sgc2NlbmUuaWQgXSA9IHt9O1xuXHRcdFx0cmVuZGVyU3RhdGVzWyBzY2VuZS5pZCBdWyBjYW1lcmEuaWQgXSA9IHJlbmRlclN0YXRlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCByZW5kZXJTdGF0ZXNbIHNjZW5lLmlkIF1bIGNhbWVyYS5pZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSgpO1xuXHRcdFx0XHRyZW5kZXJTdGF0ZXNbIHNjZW5lLmlkIF1bIGNhbWVyYS5pZCBdID0gcmVuZGVyU3RhdGU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXNbIHNjZW5lLmlkIF1bIGNhbWVyYS5pZCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVuZGVyU3RhdGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRyZW5kZXJTdGF0ZXMgPSB7fTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwczovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICpcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaERlcHRoTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoRGVwdGhNYXRlcmlhbCc7XG5cblx0dGhpcy5kZXB0aFBhY2tpbmcgPSBCYXNpY0RlcHRoUGFja2luZztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7XG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hEZXB0aE1hdGVyaWFsO1xuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGVwdGhNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5kZXB0aFBhY2tpbmcgPSBzb3VyY2UuZGVwdGhQYWNraW5nO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIHJlZmVyZW5jZVBvc2l0aW9uOiA8ZmxvYXQ+LFxuICogIG5lYXJEaXN0YW5jZTogPGZsb2F0PixcbiAqICBmYXJEaXN0YW5jZTogPGZsb2F0PixcbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD5cbiAqXG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaERpc3RhbmNlTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoRGlzdGFuY2VNYXRlcmlhbCc7XG5cblx0dGhpcy5yZWZlcmVuY2VQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMubmVhckRpc3RhbmNlID0gMTtcblx0dGhpcy5mYXJEaXN0YW5jZSA9IDEwMDA7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7XG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hEaXN0YW5jZU1hdGVyaWFsO1xuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5yZWZlcmVuY2VQb3NpdGlvbi5jb3B5KCBzb3VyY2UucmVmZXJlbmNlUG9zaXRpb24gKTtcblx0dGhpcy5uZWFyRGlzdGFuY2UgPSBzb3VyY2UubmVhckRpc3RhbmNlO1xuXHR0aGlzLmZhckRpc3RhbmNlID0gc291cmNlLmZhckRpc3RhbmNlO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMU2hhZG93TWFwKCBfcmVuZGVyZXIsIF9vYmplY3RzLCBtYXhUZXh0dXJlU2l6ZSApIHtcblxuXHR2YXIgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpLFxuXHRcdF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdHJpeDQoKSxcblxuXHRcdF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSxcblx0XHRfbWF4U2hhZG93TWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCBtYXhUZXh0dXJlU2l6ZSwgbWF4VGV4dHVyZVNpemUgKSxcblxuXHRcdF9sb29rVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSxcblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkID0gbmV3IFZlY3RvcjMoKSxcblxuXHRcdF9Nb3JwaGluZ0ZsYWcgPSAxLFxuXHRcdF9Ta2lubmluZ0ZsYWcgPSAyLFxuXG5cdFx0X051bWJlck9mTWF0ZXJpYWxWYXJpYW50cyA9ICggX01vcnBoaW5nRmxhZyB8IF9Ta2lubmluZ0ZsYWcgKSArIDEsXG5cblx0XHRfZGVwdGhNYXRlcmlhbHMgPSBuZXcgQXJyYXkoIF9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMgKSxcblx0XHRfZGlzdGFuY2VNYXRlcmlhbHMgPSBuZXcgQXJyYXkoIF9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMgKSxcblxuXHRcdF9tYXRlcmlhbENhY2hlID0ge307XG5cblx0dmFyIHNoYWRvd1NpZGUgPSB7IDA6IEJhY2tTaWRlLCAxOiBGcm9udFNpZGUsIDI6IERvdWJsZVNpZGUgfTtcblxuXHR2YXIgY3ViZURpcmVjdGlvbnMgPSBbXG5cdFx0bmV3IFZlY3RvcjMoIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIC0gMSwgMCwgMCApLCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLFxuXHRcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApXG5cdF07XG5cblx0dmFyIGN1YmVVcHMgPSBbXG5cdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSxcblx0XHRuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLFx0bmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApXG5cdF07XG5cblx0dmFyIGN1YmUyRFZpZXdQb3J0cyA9IFtcblx0XHRuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpLFxuXHRcdG5ldyBWZWN0b3I0KCksIG5ldyBWZWN0b3I0KCksIG5ldyBWZWN0b3I0KClcblx0XTtcblxuXHQvLyBpbml0XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzOyArKyBpICkge1xuXG5cdFx0dmFyIHVzZU1vcnBoaW5nID0gKCBpICYgX01vcnBoaW5nRmxhZyApICE9PSAwO1xuXHRcdHZhciB1c2VTa2lubmluZyA9ICggaSAmIF9Ta2lubmluZ0ZsYWcgKSAhPT0gMDtcblxuXHRcdHZhciBkZXB0aE1hdGVyaWFsID0gbmV3IE1lc2hEZXB0aE1hdGVyaWFsKCB7XG5cblx0XHRcdGRlcHRoUGFja2luZzogUkdCQURlcHRoUGFja2luZyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiB1c2VNb3JwaGluZyxcblx0XHRcdHNraW5uaW5nOiB1c2VTa2lubmluZ1xuXG5cdFx0fSApO1xuXG5cdFx0X2RlcHRoTWF0ZXJpYWxzWyBpIF0gPSBkZXB0aE1hdGVyaWFsO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBkaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCB7XG5cblx0XHRcdG1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsXG5cdFx0XHRza2lubmluZzogdXNlU2tpbm5pbmdcblxuXHRcdH0gKTtcblxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsc1sgaSBdID0gZGlzdGFuY2VNYXRlcmlhbDtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnR5cGUgPSBQQ0ZTaGFkb3dNYXA7XG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0aWYgKCBzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHQvLyBUT0RPIENsZWFuIHVwIChuZWVkZWQgaW4gY2FzZSBvZiBjb250ZXh0bG9zdClcblx0XHR2YXIgX2dsID0gX3JlbmRlcmVyLmNvbnRleHQ7XG5cdFx0dmFyIF9zdGF0ZSA9IF9yZW5kZXJlci5zdGF0ZTtcblxuXHRcdC8vIFNldCBHTCBzdGF0ZSBmb3IgZGVwdGggbWFwLlxuXHRcdF9zdGF0ZS5kaXNhYmxlKCAzMDQyICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDEsIDEsIDEsIDEgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0X3N0YXRlLnNldFNjaXNzb3JUZXN0KCBmYWxzZSApO1xuXG5cdFx0Ly8gcmVuZGVyIGRlcHRoIG1hcFxuXG5cdFx0dmFyIGZhY2VDb3VudDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBsaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblx0XHRcdHZhciBpc1BvaW50TGlnaHQgPSBsaWdodCAmJiBsaWdodC5pc1BvaW50TGlnaHQ7XG5cblx0XHRcdGlmICggc2hhZG93ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgbm8gc2hhZG93LicgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHNoYWRvd0NhbWVyYSA9IHNoYWRvdy5jYW1lcmE7XG5cblx0XHRcdF9zaGFkb3dNYXBTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7XG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5taW4oIF9tYXhTaGFkb3dNYXBTaXplICk7XG5cblx0XHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB2cFdpZHRoID0gX3NoYWRvd01hcFNpemUueDtcblx0XHRcdFx0dmFyIHZwSGVpZ2h0ID0gX3NoYWRvd01hcFNpemUueTtcblxuXHRcdFx0XHQvLyBUaGVzZSB2aWV3cG9ydHMgbWFwIGEgY3ViZS1tYXAgb250byBhIDJEIHRleHR1cmUgd2l0aCB0aGVcblx0XHRcdFx0Ly8gZm9sbG93aW5nIG9yaWVudGF0aW9uOlxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyAgeHpYWlxuXHRcdFx0XHQvLyAgIHkgWVxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdFx0Ly8geCAtIE5lZ2F0aXZlIHggZGlyZWN0aW9uXG5cdFx0XHRcdC8vIFkgLSBQb3NpdGl2ZSB5IGRpcmVjdGlvblxuXHRcdFx0XHQvLyB5IC0gTmVnYXRpdmUgeSBkaXJlY3Rpb25cblx0XHRcdFx0Ly8gWiAtIFBvc2l0aXZlIHogZGlyZWN0aW9uXG5cdFx0XHRcdC8vIHogLSBOZWdhdGl2ZSB6IGRpcmVjdGlvblxuXG5cdFx0XHRcdC8vIHBvc2l0aXZlIFhcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyAwIF0uc2V0KCB2cFdpZHRoICogMiwgdnBIZWlnaHQsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIG5lZ2F0aXZlIFhcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyAxIF0uc2V0KCAwLCB2cEhlaWdodCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gcG9zaXRpdmUgWlxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDIgXS5zZXQoIHZwV2lkdGggKiAzLCB2cEhlaWdodCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gbmVnYXRpdmUgWlxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDMgXS5zZXQoIHZwV2lkdGgsIHZwSGVpZ2h0LCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXHRcdFx0XHQvLyBwb3NpdGl2ZSBZXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgNCBdLnNldCggdnBXaWR0aCAqIDMsIDAsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIG5lZ2F0aXZlIFlcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyA1IF0uc2V0KCB2cFdpZHRoLCAwLCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXG5cdFx0XHRcdF9zaGFkb3dNYXBTaXplLnggKj0gNC4wO1xuXHRcdFx0XHRfc2hhZG93TWFwU2l6ZS55ICo9IDIuMDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNoYWRvdy5tYXAgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIHBhcnMgPSB7IG1pbkZpbHRlcjogTmVhcmVzdEZpbHRlciwgbWFnRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBmb3JtYXQ6IFJHQkFGb3JtYXQgfTtcblxuXHRcdFx0XHRzaGFkb3cubWFwID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55LCBwYXJzICk7XG5cdFx0XHRcdHNoYWRvdy5tYXAudGV4dHVyZS5uYW1lID0gbGlnaHQubmFtZSArIFwiLnNoYWRvd01hcFwiO1xuXG5cdFx0XHRcdHNoYWRvd0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cuaXNTcG90TGlnaHRTaGFkb3cgKSB7XG5cblx0XHRcdFx0c2hhZG93LnVwZGF0ZSggbGlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2hhZG93TWFwID0gc2hhZG93Lm1hcDtcblx0XHRcdHZhciBzaGFkb3dNYXRyaXggPSBzaGFkb3cubWF0cml4O1xuXG5cdFx0XHRfbGlnaHRQb3NpdGlvbldvcmxkLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdHNoYWRvd0NhbWVyYS5wb3NpdGlvbi5jb3B5KCBfbGlnaHRQb3NpdGlvbldvcmxkICk7XG5cblx0XHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGZhY2VDb3VudCA9IDY7XG5cblx0XHRcdFx0Ly8gZm9yIHBvaW50IGxpZ2h0cyB3ZSBzZXQgdGhlIHNoYWRvdyBtYXRyaXggdG8gYmUgYSB0cmFuc2xhdGlvbi1vbmx5IG1hdHJpeFxuXHRcdFx0XHQvLyBlcXVhbCB0byBpbnZlcnNlIG9mIHRoZSBsaWdodCdzIHBvc2l0aW9uXG5cblx0XHRcdFx0c2hhZG93TWF0cml4Lm1ha2VUcmFuc2xhdGlvbiggLSBfbGlnaHRQb3NpdGlvbldvcmxkLngsIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC55LCAtIF9saWdodFBvc2l0aW9uV29ybGQueiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZhY2VDb3VudCA9IDE7XG5cblx0XHRcdFx0X2xvb2tUYXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0c2hhZG93Q2FtZXJhLmxvb2tBdCggX2xvb2tUYXJnZXQgKTtcblx0XHRcdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRcdFx0Ly8gY29tcHV0ZSBzaGFkb3cgbWF0cml4XG5cblx0XHRcdFx0c2hhZG93TWF0cml4LnNldChcblx0XHRcdFx0XHQwLjUsIDAuMCwgMC4wLCAwLjUsXG5cdFx0XHRcdFx0MC4wLCAwLjUsIDAuMCwgMC41LFxuXHRcdFx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdFx0XHQwLjAsIDAuMCwgMC4wLCAxLjBcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdHNoYWRvd01hdHJpeC5tdWx0aXBseSggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvd01hcCApO1xuXHRcdFx0X3JlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRcdC8vIHJlbmRlciBzaGFkb3cgbWFwIGZvciBlYWNoIGN1YmUgZmFjZSAoaWYgb21uaS1kaXJlY3Rpb25hbCkgb3Jcblx0XHRcdC8vIHJ1biBhIHNpbmdsZSBwYXNzIGlmIG5vdFxuXG5cdFx0XHRmb3IgKCB2YXIgZmFjZSA9IDA7IGZhY2UgPCBmYWNlQ291bnQ7IGZhY2UgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBpc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0XHRfbG9va1RhcmdldC5jb3B5KCBzaGFkb3dDYW1lcmEucG9zaXRpb24gKTtcblx0XHRcdFx0XHRfbG9va1RhcmdldC5hZGQoIGN1YmVEaXJlY3Rpb25zWyBmYWNlIF0gKTtcblx0XHRcdFx0XHRzaGFkb3dDYW1lcmEudXAuY29weSggY3ViZVVwc1sgZmFjZSBdICk7XG5cdFx0XHRcdFx0c2hhZG93Q2FtZXJhLmxvb2tBdCggX2xvb2tUYXJnZXQgKTtcblx0XHRcdFx0XHRzaGFkb3dDYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHRcdHZhciB2cERpbWVuc2lvbnMgPSBjdWJlMkRWaWV3UG9ydHNbIGZhY2UgXTtcblx0XHRcdFx0XHRfc3RhdGUudmlld3BvcnQoIHZwRGltZW5zaW9ucyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB1cGRhdGUgY2FtZXJhIG1hdHJpY2VzIGFuZCBmcnVzdHVtXG5cblx0XHRcdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRcdFx0X2ZydXN0dW0uc2V0RnJvbU1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHQvLyBzZXQgb2JqZWN0IG1hdHJpY2VzICYgZnJ1c3R1bSBjdWxsaW5nXG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0KCBzY2VuZSwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGlzUG9pbnRMaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzY29wZS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgaXNQb2ludExpZ2h0LCBsaWdodFBvc2l0aW9uV29ybGQsIHNoYWRvd0NhbWVyYU5lYXIsIHNoYWRvd0NhbWVyYUZhciApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdHZhciByZXN1bHQgPSBudWxsO1xuXG5cdFx0dmFyIG1hdGVyaWFsVmFyaWFudHMgPSBfZGVwdGhNYXRlcmlhbHM7XG5cdFx0dmFyIGN1c3RvbU1hdGVyaWFsID0gb2JqZWN0LmN1c3RvbURlcHRoTWF0ZXJpYWw7XG5cblx0XHRpZiAoIGlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0bWF0ZXJpYWxWYXJpYW50cyA9IF9kaXN0YW5jZU1hdGVyaWFscztcblx0XHRcdGN1c3RvbU1hdGVyaWFsID0gb2JqZWN0LmN1c3RvbURpc3RhbmNlTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgY3VzdG9tTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHZhciB1c2VNb3JwaGluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHR1c2VNb3JwaGluZyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aCA+IDA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHVzZU1vcnBoaW5nID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsLnNraW5uaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFNoYWRvd01hcDogVEhSRUUuU2tpbm5lZE1lc2ggd2l0aCBtYXRlcmlhbC5za2lubmluZyBzZXQgdG8gZmFsc2U6Jywgb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHVzZVNraW5uaW5nID0gb2JqZWN0LmlzU2tpbm5lZE1lc2ggJiYgbWF0ZXJpYWwuc2tpbm5pbmc7XG5cblx0XHRcdHZhciB2YXJpYW50SW5kZXggPSAwO1xuXG5cdFx0XHRpZiAoIHVzZU1vcnBoaW5nICkgdmFyaWFudEluZGV4IHw9IF9Nb3JwaGluZ0ZsYWc7XG5cdFx0XHRpZiAoIHVzZVNraW5uaW5nICkgdmFyaWFudEluZGV4IHw9IF9Ta2lubmluZ0ZsYWc7XG5cblx0XHRcdHJlc3VsdCA9IG1hdGVyaWFsVmFyaWFudHNbIHZhcmlhbnRJbmRleCBdO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVzdWx0ID0gY3VzdG9tTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRpZiAoIF9yZW5kZXJlci5sb2NhbENsaXBwaW5nRW5hYmxlZCAmJlxuXHRcdFx0XHRtYXRlcmlhbC5jbGlwU2hhZG93cyA9PT0gdHJ1ZSAmJlxuXHRcdFx0XHRtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdC8vIGluIHRoaXMgY2FzZSB3ZSBuZWVkIGEgdW5pcXVlIG1hdGVyaWFsIGluc3RhbmNlIHJlZmxlY3RpbmcgdGhlXG5cdFx0XHQvLyBhcHByb3ByaWF0ZSBzdGF0ZVxuXG5cdFx0XHR2YXIga2V5QSA9IHJlc3VsdC51dWlkLCBrZXlCID0gbWF0ZXJpYWwudXVpZDtcblxuXHRcdFx0dmFyIG1hdGVyaWFsc0ZvclZhcmlhbnQgPSBfbWF0ZXJpYWxDYWNoZVsga2V5QSBdO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsc0ZvclZhcmlhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50ID0ge307XG5cdFx0XHRcdF9tYXRlcmlhbENhY2hlWyBrZXlBIF0gPSBtYXRlcmlhbHNGb3JWYXJpYW50O1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBjYWNoZWRNYXRlcmlhbCA9IG1hdGVyaWFsc0ZvclZhcmlhbnRbIGtleUIgXTtcblxuXHRcdFx0aWYgKCBjYWNoZWRNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNhY2hlZE1hdGVyaWFsID0gcmVzdWx0LmNsb25lKCk7XG5cdFx0XHRcdG1hdGVyaWFsc0ZvclZhcmlhbnRbIGtleUIgXSA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlc3VsdCA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0cmVzdWx0LnZpc2libGUgPSBtYXRlcmlhbC52aXNpYmxlO1xuXHRcdHJlc3VsdC53aXJlZnJhbWUgPSBtYXRlcmlhbC53aXJlZnJhbWU7XG5cblx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPSBudWxsICkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogc2hhZG93U2lkZVsgbWF0ZXJpYWwuc2lkZSBdO1xuXG5cdFx0cmVzdWx0LmNsaXBTaGFkb3dzID0gbWF0ZXJpYWwuY2xpcFNoYWRvd3M7XG5cdFx0cmVzdWx0LmNsaXBwaW5nUGxhbmVzID0gbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXM7XG5cdFx0cmVzdWx0LmNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uO1xuXG5cdFx0cmVzdWx0LndpcmVmcmFtZUxpbmV3aWR0aCA9IG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRyZXN1bHQubGluZXdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0aWYgKCBpc1BvaW50TGlnaHQgJiYgcmVzdWx0LmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlc3VsdC5yZWZlcmVuY2VQb3NpdGlvbi5jb3B5KCBsaWdodFBvc2l0aW9uV29ybGQgKTtcblx0XHRcdHJlc3VsdC5uZWFyRGlzdGFuY2UgPSBzaGFkb3dDYW1lcmFOZWFyO1xuXHRcdFx0cmVzdWx0LmZhckRpc3RhbmNlID0gc2hhZG93Q2FtZXJhRmFyO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBpc1BvaW50TGlnaHQgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdHZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRpZiAoIHZpc2libGUgJiYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LmNhc3RTaGFkb3cgJiYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkgKSB7XG5cblx0XHRcdFx0b2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBfb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2wgPSBncm91cHMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgayBdO1xuXHRcdFx0XHRcdFx0dmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBncm91cE1hdGVyaWFsLCBpc1BvaW50TGlnaHQsIF9saWdodFBvc2l0aW9uV29ybGQsIHNoYWRvd0NhbWVyYS5uZWFyLCBzaGFkb3dDYW1lcmEuZmFyICk7XG5cdFx0XHRcdFx0XHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHR2YXIgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGlzUG9pbnRMaWdodCwgX2xpZ2h0UG9zaXRpb25Xb3JsZCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIgKTtcblx0XHRcdFx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHJlbmRlck9iamVjdCggY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGlzUG9pbnRMaWdodCApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xTdGF0ZSggZ2wsIGV4dGVuc2lvbnMsIHV0aWxzLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0ZnVuY3Rpb24gQ29sb3JCdWZmZXIoKSB7XG5cblx0XHR2YXIgbG9ja2VkID0gZmFsc2U7XG5cblx0XHR2YXIgY29sb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRcdHZhciBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHR2YXIgY3VycmVudENvbG9yQ2xlYXIgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBjb2xvck1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xvck1hc2sgPSBjb2xvck1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCByLCBnLCBiLCBhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRyICo9IGE7IGcgKj0gYTsgYiAqPSBhO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb2xvci5zZXQoIHIsIGcsIGIsIGEgKTtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvckNsZWFyLmVxdWFscyggY29sb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuY29weSggY29sb3IgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRDb2xvckNsZWFyLnNldCggLSAxLCAwLCAwLCAwICk7IC8vIHNldCB0byBpbnZhbGlkIHN0YXRlXG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIERlcHRoQnVmZmVyKCkge1xuXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHR2YXIgY3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0XHRlbmFibGUoIDI5MjkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGlzYWJsZSggMjkyOSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBkZXB0aE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhNYXNrICE9PSBkZXB0aE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5kZXB0aE1hc2soIGRlcHRoTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBkZXB0aE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aEZ1bmMgIT09IGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdGlmICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRzd2l0Y2ggKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBOZXZlckRlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTIgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEFsd2F5c0RlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTkgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIExlc3NEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTEzICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE1ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTQgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTggKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE2ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBOb3RFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTcgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN1cnJlbnREZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBkZXB0aCApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aENsZWFyICE9PSBkZXB0aCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyRGVwdGgoIGRlcHRoICk7XG5cdFx0XHRcdFx0Y3VycmVudERlcHRoQ2xlYXIgPSBkZXB0aDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudERlcHRoTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIFN0ZW5jaWxCdWZmZXIoKSB7XG5cblx0XHR2YXIgbG9ja2VkID0gZmFsc2U7XG5cblx0XHR2YXIgY3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldFRlc3Q6IGZ1bmN0aW9uICggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRcdGVuYWJsZSggMjk2MCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkaXNhYmxlKCAyOTYwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxNYXNrICE9PSBzdGVuY2lsTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0RnVuYzogZnVuY3Rpb24gKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbEZ1bmMgIT09IHN0ZW5jaWxGdW5jIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxSZWYgXHQhPT0gc3RlbmNpbFJlZiBcdHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBzdGVuY2lsRnVuYztcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGYWlsXHQgIT09IHN0ZW5jaWxGYWlsIFx0fHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFpGYWlsICE9PSBzdGVuY2lsWkZhaWwgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFpQYXNzICE9PSBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApO1xuXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gc3RlbmNpbEZhaWw7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IHN0ZW5jaWxaRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpQYXNzID0gc3RlbmNpbFpQYXNzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggc3RlbmNpbCApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsQ2xlYXIgIT09IHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhclN0ZW5jaWwoIHN0ZW5jaWwgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gc3RlbmNpbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgY29sb3JCdWZmZXIgPSBuZXcgQ29sb3JCdWZmZXIoKTtcblx0dmFyIGRlcHRoQnVmZmVyID0gbmV3IERlcHRoQnVmZmVyKCk7XG5cdHZhciBzdGVuY2lsQnVmZmVyID0gbmV3IFN0ZW5jaWxCdWZmZXIoKTtcblxuXHR2YXIgbWF4VmVydGV4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTtcblx0dmFyIG5ld0F0dHJpYnV0ZXMgPSBuZXcgVWludDhBcnJheSggbWF4VmVydGV4QXR0cmlidXRlcyApO1xuXHR2YXIgZW5hYmxlZEF0dHJpYnV0ZXMgPSBuZXcgVWludDhBcnJheSggbWF4VmVydGV4QXR0cmlidXRlcyApO1xuXHR2YXIgYXR0cmlidXRlRGl2aXNvcnMgPSBuZXcgVWludDhBcnJheSggbWF4VmVydGV4QXR0cmlidXRlcyApO1xuXG5cdHZhciBlbmFibGVkQ2FwYWJpbGl0aWVzID0ge307XG5cblx0dmFyIGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyA9IG51bGw7XG5cblx0dmFyIGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHR2YXIgY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRpbmcgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRXF1YXRpb24gPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZERzdCA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcblx0dmFyIGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlO1xuXG5cdHZhciBjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0dmFyIGN1cnJlbnRDdWxsRmFjZSA9IG51bGw7XG5cblx0dmFyIGN1cnJlbnRMaW5lV2lkdGggPSBudWxsO1xuXG5cdHZhciBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7XG5cdHZhciBjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gbnVsbDtcblxuXHR2YXIgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM1NjYxICk7XG5cblx0dmFyIGxpbmVXaWR0aEF2YWlsYWJsZSA9IGZhbHNlO1xuXHR2YXIgdmVyc2lvbiA9IDA7XG5cdHZhciBnbFZlcnNpb24gPSBnbC5nZXRQYXJhbWV0ZXIoIDc5MzggKTtcblxuXHRpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnV2ViR0wnICkgIT09IC0gMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXldlYkdMXFwgKFswLTldKS8uZXhlYyggZ2xWZXJzaW9uIClbIDEgXSApO1xuXHRcdGxpbmVXaWR0aEF2YWlsYWJsZSA9ICggdmVyc2lvbiA+PSAxLjAgKTtcblxuXHR9IGVsc2UgaWYgKCBnbFZlcnNpb24uaW5kZXhPZiggJ09wZW5HTCBFUycgKSAhPT0gLSAxICkge1xuXG5cdFx0dmVyc2lvbiA9IHBhcnNlRmxvYXQoIC9eT3BlbkdMXFwgRVNcXCAoWzAtOV0pLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDIuMCApO1xuXG5cdH1cblxuXHR2YXIgY3VycmVudFRleHR1cmVTbG90ID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCb3VuZFRleHR1cmVzID0ge307XG5cblx0dmFyIGN1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKTtcblx0dmFyIGN1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSggdHlwZSwgdGFyZ2V0LCBjb3VudCApIHtcblxuXHRcdHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoIDQgKTsgLy8gNCBpcyByZXF1aXJlZCB0byBtYXRjaCBkZWZhdWx0IHVucGFjayBhbGlnbm1lbnQgb2YgNC5cblx0XHR2YXIgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdGdsLmJpbmRUZXh0dXJlKCB0eXBlLCB0ZXh0dXJlICk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaSggdHlwZSwgMTAyNDEsIDk3MjggKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCAxMDI0MCwgOTcyOCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQoIHRhcmdldCArIGksIDAsIDY0MDgsIDEsIDEsIDAsIDY0MDgsIDUxMjEsIGRhdGEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxuXHR2YXIgZW1wdHlUZXh0dXJlcyA9IHt9O1xuXHRlbXB0eVRleHR1cmVzWyAzNTUzIF0gPSBjcmVhdGVUZXh0dXJlKCAzNTUzLCAzNTUzLCAxICk7XG5cdGVtcHR5VGV4dHVyZXNbIDM0MDY3IF0gPSBjcmVhdGVUZXh0dXJlKCAzNDA2NywgMzQwNjksIDYgKTtcblxuXHQvLyBpbml0XG5cblx0Y29sb3JCdWZmZXIuc2V0Q2xlYXIoIDAsIDAsIDAsIDEgKTtcblx0ZGVwdGhCdWZmZXIuc2V0Q2xlYXIoIDEgKTtcblx0c3RlbmNpbEJ1ZmZlci5zZXRDbGVhciggMCApO1xuXG5cdGVuYWJsZSggMjkyOSApO1xuXHRkZXB0aEJ1ZmZlci5zZXRGdW5jKCBMZXNzRXF1YWxEZXB0aCApO1xuXG5cdHNldEZsaXBTaWRlZCggZmFsc2UgKTtcblx0c2V0Q3VsbEZhY2UoIEN1bGxGYWNlQmFjayApO1xuXHRlbmFibGUoIDI4ODQgKTtcblxuXHRzZXRCbGVuZGluZyggTm9CbGVuZGluZyApO1xuXG5cdC8vXG5cblx0ZnVuY3Rpb24gaW5pdEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBuZXdBdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdG5ld0F0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCAwICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdG5ld0F0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTtcblxuXHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID09PSAwICkge1xuXG5cdFx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSggYXR0cmlidXRlICk7XG5cdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gIT09IG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdHZhciBleHRlbnNpb24gPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyBnbCA6IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHRcdFx0ZXh0ZW5zaW9uWyBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyAndmVydGV4QXR0cmliRGl2aXNvcicgOiAndmVydGV4QXR0cmliRGl2aXNvckFOR0xFJyBdKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKTtcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpICE9PSBsOyArKyBpICkge1xuXG5cdFx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gIT09IG5ld0F0dHJpYnV0ZXNbIGkgXSApIHtcblxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTtcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wuZW5hYmxlKCBpZCApO1xuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGUoIGlkICkge1xuXG5cdFx0aWYgKCBlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdICE9PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuZGlzYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkge1xuXG5cdFx0aWYgKCBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyA9IFtdO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApIHx8XG5cdFx0XHQgICAgIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkgfHxcblx0XHRcdCAgICAgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMScgKSB8fFxuXHRcdFx0ICAgICBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyApICkge1xuXG5cdFx0XHRcdHZhciBmb3JtYXRzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDQ2NyApO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGZvcm1hdHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzLnB1c2goIGZvcm1hdHNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cztcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXNlUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGlmICggY3VycmVudFByb2dyYW0gIT09IHByb2dyYW0gKSB7XG5cblx0XHRcdGdsLnVzZVByb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdFx0Y3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0QmxlbmRpbmcoIGJsZW5kaW5nLCBibGVuZEVxdWF0aW9uLCBibGVuZFNyYywgYmxlbmREc3QsIGJsZW5kRXF1YXRpb25BbHBoYSwgYmxlbmRTcmNBbHBoYSwgYmxlbmREc3RBbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0aWYgKCBibGVuZGluZyA9PT0gTm9CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkICkge1xuXG5cdFx0XHRcdGRpc2FibGUoIDMwNDIgKTtcblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggISBjdXJyZW50QmxlbmRpbmdFbmFibGVkICkge1xuXG5cdFx0XHRlbmFibGUoIDMwNDIgKTtcblx0XHRcdGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggYmxlbmRpbmcgIT09IGN1cnJlbnRCbGVuZGluZyB8fCBwcmVtdWx0aXBsaWVkQWxwaGEgIT09IGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICE9PSBBZGRFcXVhdGlvbiApIHtcblxuXHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb24oIDMyNzc0ICk7XG5cblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBBZGRFcXVhdGlvbjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDEsIDc3MSwgMSwgNzcxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggMSwgMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMCwgMCwgNzY5LCA3NzEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDAsIDc2OCwgMCwgNzcwICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggNzcwLCA3NzEsIDEsIDc3MSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDc3MCwgMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDAsIDc2OSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDAsIDc2OCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcblxuXHRcdFx0XHRjdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZztcblx0XHRcdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gcHJlbXVsdGlwbGllZEFscGhhO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIGN1c3RvbSBibGVuZGluZ1xuXG5cdFx0YmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhIHx8IGJsZW5kRXF1YXRpb247XG5cdFx0YmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGEgfHwgYmxlbmRTcmM7XG5cdFx0YmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGEgfHwgYmxlbmREc3Q7XG5cblx0XHRpZiAoIGJsZW5kRXF1YXRpb24gIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uIHx8IGJsZW5kRXF1YXRpb25BbHBoYSAhPT0gY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKCB1dGlscy5jb252ZXJ0KCBibGVuZEVxdWF0aW9uICksIHV0aWxzLmNvbnZlcnQoIGJsZW5kRXF1YXRpb25BbHBoYSApICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gYmxlbmRFcXVhdGlvbjtcblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kU3JjICE9PSBjdXJyZW50QmxlbmRTcmMgfHwgYmxlbmREc3QgIT09IGN1cnJlbnRCbGVuZERzdCB8fCBibGVuZFNyY0FscGhhICE9PSBjdXJyZW50QmxlbmRTcmNBbHBoYSB8fCBibGVuZERzdEFscGhhICE9PSBjdXJyZW50QmxlbmREc3RBbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIHV0aWxzLmNvbnZlcnQoIGJsZW5kU3JjICksIHV0aWxzLmNvbnZlcnQoIGJsZW5kRHN0ICksIHV0aWxzLmNvbnZlcnQoIGJsZW5kU3JjQWxwaGEgKSwgdXRpbHMuY29udmVydCggYmxlbmREc3RBbHBoYSApICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IGJsZW5kU3JjO1xuXHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gYmxlbmREc3Q7XG5cdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7XG5cdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGE7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZztcblx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBudWxsO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICkge1xuXG5cdFx0bWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZVxuXHRcdFx0PyBkaXNhYmxlKCAyODg0IClcblx0XHRcdDogZW5hYmxlKCAyODg0ICk7XG5cblx0XHR2YXIgZmxpcFNpZGVkID0gKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApO1xuXHRcdGlmICggZnJvbnRGYWNlQ1cgKSBmbGlwU2lkZWQgPSAhIGZsaXBTaWRlZDtcblxuXHRcdHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICk7XG5cblx0XHQoIG1hdGVyaWFsLmJsZW5kaW5nID09PSBOb3JtYWxCbGVuZGluZyAmJiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgKVxuXHRcdFx0PyBzZXRCbGVuZGluZyggTm9CbGVuZGluZyApXG5cdFx0XHQ6IHNldEJsZW5kaW5nKCBtYXRlcmlhbC5ibGVuZGluZywgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbiwgbWF0ZXJpYWwuYmxlbmRTcmMsIG1hdGVyaWFsLmJsZW5kRHN0LCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGEsIG1hdGVyaWFsLmJsZW5kU3JjQWxwaGEsIG1hdGVyaWFsLmJsZW5kRHN0QWxwaGEsIG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0ZGVwdGhCdWZmZXIuc2V0RnVuYyggbWF0ZXJpYWwuZGVwdGhGdW5jICk7XG5cdFx0ZGVwdGhCdWZmZXIuc2V0VGVzdCggbWF0ZXJpYWwuZGVwdGhUZXN0ICk7XG5cdFx0ZGVwdGhCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuZGVwdGhXcml0ZSApO1xuXHRcdGNvbG9yQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmNvbG9yV3JpdGUgKTtcblxuXHRcdHNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICkge1xuXG5cdFx0aWYgKCBjdXJyZW50RmxpcFNpZGVkICE9PSBmbGlwU2lkZWQgKSB7XG5cblx0XHRcdGlmICggZmxpcFNpZGVkICkge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggMjMwNCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggMjMwNSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGN1cnJlbnRGbGlwU2lkZWQgPSBmbGlwU2lkZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEN1bGxGYWNlKCBjdWxsRmFjZSApIHtcblxuXHRcdGlmICggY3VsbEZhY2UgIT09IEN1bGxGYWNlTm9uZSApIHtcblxuXHRcdFx0ZW5hYmxlKCAyODg0ICk7XG5cblx0XHRcdGlmICggY3VsbEZhY2UgIT09IGN1cnJlbnRDdWxsRmFjZSApIHtcblxuXHRcdFx0XHRpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2sgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggMTAyOSApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUZyb250ICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMjggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMzIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDI4ODQgKTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IGN1bGxGYWNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRMaW5lV2lkdGgoIHdpZHRoICkge1xuXG5cdFx0aWYgKCB3aWR0aCAhPT0gY3VycmVudExpbmVXaWR0aCApIHtcblxuXHRcdFx0aWYgKCBsaW5lV2lkdGhBdmFpbGFibGUgKSBnbC5saW5lV2lkdGgoIHdpZHRoICk7XG5cblx0XHRcdGN1cnJlbnRMaW5lV2lkdGggPSB3aWR0aDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UG9seWdvbk9mZnNldCggcG9seWdvbk9mZnNldCwgZmFjdG9yLCB1bml0cyApIHtcblxuXHRcdGlmICggcG9seWdvbk9mZnNldCApIHtcblxuXHRcdFx0ZW5hYmxlKCAzMjgyMyApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7XG5cblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldCggZmFjdG9yLCB1bml0cyApO1xuXG5cdFx0XHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gZmFjdG9yO1xuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gdW5pdHM7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDMyODIzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFNjaXNzb3JUZXN0KCBzY2lzc29yVGVzdCApIHtcblxuXHRcdGlmICggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRcdGVuYWJsZSggMzA4OSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggMzA4OSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyB0ZXh0dXJlXG5cblx0ZnVuY3Rpb24gYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IDMzOTg0ICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHtcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSApIHtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ID09PSBudWxsICkge1xuXG5cdFx0XHRhY3RpdmVUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHR2YXIgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym91bmRUZXh0dXJlID0geyB0eXBlOiB1bmRlZmluZWQsIHRleHR1cmU6IHVuZGVmaW5lZCB9O1xuXHRcdFx0Y3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdID0gYm91bmRUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUudHlwZSAhPT0gd2ViZ2xUeXBlIHx8IGJvdW5kVGV4dHVyZS50ZXh0dXJlICE9PSB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRcdGdsLmJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSB8fCBlbXB0eVRleHR1cmVzWyB3ZWJnbFR5cGUgXSApO1xuXG5cdFx0XHRib3VuZFRleHR1cmUudHlwZSA9IHdlYmdsVHlwZTtcblx0XHRcdGJvdW5kVGV4dHVyZS50ZXh0dXJlID0gd2ViZ2xUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleEltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleEltYWdlM0QoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhJbWFnZTNELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gc2Npc3Nvciggc2Npc3NvciApIHtcblxuXHRcdGlmICggY3VycmVudFNjaXNzb3IuZXF1YWxzKCBzY2lzc29yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5zY2lzc29yKCBzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncgKTtcblx0XHRcdGN1cnJlbnRTY2lzc29yLmNvcHkoIHNjaXNzb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdmlld3BvcnQoIHZpZXdwb3J0ICkge1xuXG5cdFx0aWYgKCBjdXJyZW50Vmlld3BvcnQuZXF1YWxzKCB2aWV3cG9ydCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wudmlld3BvcnQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LnosIHZpZXdwb3J0LncgKTtcblx0XHRcdGN1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPT09IDEgKSB7XG5cblx0XHRcdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCBpICk7XG5cdFx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzID0ge307XG5cblx0XHRjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPSBudWxsO1xuXG5cdFx0Y3VycmVudFRleHR1cmVTbG90ID0gbnVsbDtcblx0XHRjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXG5cdFx0Y3VycmVudFByb2dyYW0gPSBudWxsO1xuXG5cdFx0Y3VycmVudEJsZW5kaW5nID0gbnVsbDtcblxuXHRcdGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IG51bGw7XG5cblx0XHRjb2xvckJ1ZmZlci5yZXNldCgpO1xuXHRcdGRlcHRoQnVmZmVyLnJlc2V0KCk7XG5cdFx0c3RlbmNpbEJ1ZmZlci5yZXNldCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0YnVmZmVyczoge1xuXHRcdFx0Y29sb3I6IGNvbG9yQnVmZmVyLFxuXHRcdFx0ZGVwdGg6IGRlcHRoQnVmZmVyLFxuXHRcdFx0c3RlbmNpbDogc3RlbmNpbEJ1ZmZlclxuXHRcdH0sXG5cblx0XHRpbml0QXR0cmlidXRlczogaW5pdEF0dHJpYnV0ZXMsXG5cdFx0ZW5hYmxlQXR0cmlidXRlOiBlbmFibGVBdHRyaWJ1dGUsXG5cdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcjogZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcixcblx0XHRkaXNhYmxlVW51c2VkQXR0cmlidXRlczogZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMsXG5cdFx0ZW5hYmxlOiBlbmFibGUsXG5cdFx0ZGlzYWJsZTogZGlzYWJsZSxcblx0XHRnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHM6IGdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyxcblxuXHRcdHVzZVByb2dyYW06IHVzZVByb2dyYW0sXG5cblx0XHRzZXRCbGVuZGluZzogc2V0QmxlbmRpbmcsXG5cdFx0c2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLFxuXG5cdFx0c2V0RmxpcFNpZGVkOiBzZXRGbGlwU2lkZWQsXG5cdFx0c2V0Q3VsbEZhY2U6IHNldEN1bGxGYWNlLFxuXG5cdFx0c2V0TGluZVdpZHRoOiBzZXRMaW5lV2lkdGgsXG5cdFx0c2V0UG9seWdvbk9mZnNldDogc2V0UG9seWdvbk9mZnNldCxcblxuXHRcdHNldFNjaXNzb3JUZXN0OiBzZXRTY2lzc29yVGVzdCxcblxuXHRcdGFjdGl2ZVRleHR1cmU6IGFjdGl2ZVRleHR1cmUsXG5cdFx0YmluZFRleHR1cmU6IGJpbmRUZXh0dXJlLFxuXHRcdGNvbXByZXNzZWRUZXhJbWFnZTJEOiBjb21wcmVzc2VkVGV4SW1hZ2UyRCxcblx0XHR0ZXhJbWFnZTJEOiB0ZXhJbWFnZTJELFxuXHRcdHRleEltYWdlM0Q6IHRleEltYWdlM0QsXG5cblx0XHRzY2lzc29yOiBzY2lzc29yLFxuXHRcdHZpZXdwb3J0OiB2aWV3cG9ydCxcblxuXHRcdHJlc2V0OiByZXNldFxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMVGV4dHVyZXMoIF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8gKSB7XG5cblx0dmFyIF92aWRlb1RleHR1cmVzID0ge307XG5cdHZhciBfY2FudmFzO1xuXG5cdC8vXG5cblx0ZnVuY3Rpb24gY2xhbXBUb01heFNpemUoIGltYWdlLCBtYXhTaXplICkge1xuXG5cdFx0aWYgKCBpbWFnZS53aWR0aCA+IG1heFNpemUgfHwgaW1hZ2UuaGVpZ2h0ID4gbWF4U2l6ZSApIHtcblxuXHRcdFx0aWYgKCAnZGF0YScgaW4gaW1hZ2UgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaW4gRGF0YVRleHR1cmUgaXMgdG9vIGJpZyAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gV2FybmluZzogU2NhbGluZyB0aHJvdWdoIHRoZSBjYW52YXMgd2lsbCBvbmx5IHdvcmsgd2l0aCBpbWFnZXMgdGhhdCB1c2Vcblx0XHRcdC8vIHByZW11bHRpcGxpZWQgYWxwaGEuXG5cblx0XHRcdHZhciBzY2FsZSA9IG1heFNpemUgLyBNYXRoLm1heCggaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHR2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnICk7XG5cdFx0XHRjYW52YXMud2lkdGggPSBNYXRoLmZsb29yKCBpbWFnZS53aWR0aCAqIHNjYWxlICk7XG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gTWF0aC5mbG9vciggaW1hZ2UuaGVpZ2h0ICogc2NhbGUgKTtcblxuXHRcdFx0dmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKTtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgdG9vIGJpZyAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykuIFJlc2l6ZWQgdG8gJyArIGNhbnZhcy53aWR0aCArICd4JyArIGNhbnZhcy5oZWlnaHQgKTtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNQb3dlck9mVHdvKCBpbWFnZSApIHtcblxuXHRcdHJldHVybiBfTWF0aC5pc1Bvd2VyT2ZUd28oIGltYWdlLndpZHRoICkgJiYgX01hdGguaXNQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gbWFrZVBvd2VyT2ZUd28oIGltYWdlICkge1xuXG5cdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgfHwgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCB8fCBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkge1xuXG5cdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblxuXHRcdFx0X2NhbnZhcy53aWR0aCA9IF9NYXRoLmZsb29yUG93ZXJPZlR3byggaW1hZ2Uud2lkdGggKTtcblx0XHRcdF9jYW52YXMuaGVpZ2h0ID0gX01hdGguZmxvb3JQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0dmFyIGNvbnRleHQgPSBfY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgX2NhbnZhcy53aWR0aCwgX2NhbnZhcy5oZWlnaHQgKTtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgbm90IHBvd2VyIG9mIHR3byAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykuIFJlc2l6ZWQgdG8gJyArIF9jYW52YXMud2lkdGggKyAneCcgKyBfY2FudmFzLmhlaWdodCApO1xuXG5cdFx0XHRyZXR1cm4gX2NhbnZhcztcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0cmV0dXJuICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkgfHxcblx0XHRcdCggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlciApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIGlzUG93ZXJPZlR3byApIHtcblxuXHRcdHJldHVybiB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyAmJiBpc1Bvd2VyT2ZUd28gJiZcblx0XHRcdHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXI7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQsIHRleHR1cmUsIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdC8vIE5vdGU6IE1hdGgubG9nKCB4ICkgKiBNYXRoLkxPRzJFIHVzZWQgaW5zdGVhZCBvZiBNYXRoLmxvZzIoIHggKSB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFMTFcblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gTWF0aC5sb2coIE1hdGgubWF4KCB3aWR0aCwgaGVpZ2h0ICkgKSAqIE1hdGguTE9HMkU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICkge1xuXG5cdFx0aWYgKCAhIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBnbEZvcm1hdDtcblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDMgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgcmV0dXJuIDMzMzI2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSByZXR1cm4gMzMzMjU7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyMSApIHJldHVybiAzMzMyMTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDcgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgcmV0dXJuIDM0ODM3O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSByZXR1cm4gMzQ4NDM7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyMSApIHJldHVybiAzMjg0OTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDggKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgcmV0dXJuIDM0ODM2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSByZXR1cm4gMzQ4NDI7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gNTEyMSApIHJldHVybiAzMjg1NjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnbEZvcm1hdDtcblxuXHR9XG5cblx0Ly8gRmFsbGJhY2sgZmlsdGVycyBmb3Igbm9uLXBvd2VyLW9mLTIgdGV4dHVyZXNcblxuXHRmdW5jdGlvbiBmaWx0ZXJGYWxsYmFjayggZiApIHtcblxuXHRcdGlmICggZiA9PT0gTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRyZXR1cm4gOTcyODtcblxuXHRcdH1cblxuXHRcdHJldHVybiA5NzI5O1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIHRleHR1cmUgPSBldmVudC50YXJnZXQ7XG5cblx0XHR0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHtcblxuXHRcdFx0ZGVsZXRlIF92aWRlb1RleHR1cmVzWyB0ZXh0dXJlLmlkIF07XG5cblx0XHR9XG5cblx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25SZW5kZXJUYXJnZXREaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0XHRyZW5kZXJUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmltYWdlICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgKSB7XG5cblx0XHRcdC8vIGN1YmUgdGV4dHVyZVxuXG5cdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gMkQgdGV4dHVyZVxuXG5cdFx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRcdF9nbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gcmVtb3ZlIGFsbCB3ZWJnbCBwcm9wZXJ0aWVzXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cblx0XHRpZiAoICEgcmVuZGVyVGFyZ2V0ICkgcmV0dXJuO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gKTtcblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vXG5cblxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHtcblxuXHRcdFx0dmFyIGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIHVuZGVmaW5lZCcgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZTNEKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHtcblxuXHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzMjg3OSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSA2ICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdFx0aWYgKCAhIHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX19pbWFnZV9fd2ViZ2xUZXh0dXJlQ3ViZSApO1xuXG5cdFx0XHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDAsIHRleHR1cmUuZmxpcFkgKTtcblxuXHRcdFx0XHR2YXIgaXNDb21wcmVzc2VkID0gKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApO1xuXHRcdFx0XHR2YXIgaXNEYXRhVGV4dHVyZSA9ICggdGV4dHVyZS5pbWFnZVsgMCBdICYmIHRleHR1cmUuaW1hZ2VbIDAgXS5pc0RhdGFUZXh0dXJlICk7XG5cblx0XHRcdFx0dmFyIGN1YmVJbWFnZSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICYmICEgaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSBjbGFtcFRvTWF4U2l6ZSggdGV4dHVyZS5pbWFnZVsgaSBdLCBjYXBhYmlsaXRpZXMubWF4Q3ViZW1hcFNpemUgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gaXNEYXRhVGV4dHVyZSA/IHRleHR1cmUuaW1hZ2VbIGkgXS5pbWFnZSA6IHRleHR1cmUuaW1hZ2VbIGkgXTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGltYWdlID0gY3ViZUltYWdlWyAwIF0sXG5cdFx0XHRcdFx0aXNQb3dlck9mVHdvSW1hZ2UgPSBpc1Bvd2VyT2ZUd28oIGltYWdlICksXG5cdFx0XHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApLFxuXHRcdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApLFxuXHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApO1xuXG5cdFx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCAzNDA2NywgdGV4dHVyZSwgaXNQb3dlck9mVHdvSW1hZ2UgKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIGlzQ29tcHJlc3NlZCApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgY3ViZUltYWdlWyBpIF0ud2lkdGgsIGN1YmVJbWFnZVsgaSBdLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0uZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dmFyIG1pcG1hcCwgbWlwbWFwcyA9IGN1YmVJbWFnZVsgaSBdLm1pcG1hcHM7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBtaXBtYXBzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGogXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHN0YXRlLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2YoIGdsRm9ybWF0ICkgPiAtIDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCAzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhIGlzQ29tcHJlc3NlZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgaXNQb3dlck9mVHdvSW1hZ2UgKSApIHtcblxuXHRcdFx0XHRcdC8vIFdlIGFzc3VtZSBpbWFnZXMgZm9yIGN1YmUgbWFwIGhhdmUgdGhlIHNhbWUgc2l6ZS5cblx0XHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggMzQwNjcsIHRleHR1cmUsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmVEeW5hbWljKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVQYXJhbWV0ZXJzKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgaXNQb3dlck9mVHdvSW1hZ2UgKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uO1xuXG5cdFx0aWYgKCBpc1Bvd2VyT2ZUd29JbWFnZSApIHtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MiwgdXRpbHMuY29udmVydCggdGV4dHVyZS53cmFwUyApICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLndyYXBUICkgKTtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MCwgdXRpbHMuY29udmVydCggdGV4dHVyZS5tYWdGaWx0ZXIgKSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MSwgdXRpbHMuY29udmVydCggdGV4dHVyZS5taW5GaWx0ZXIgKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MiwgMzMwNzEgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDMsIDMzMDcxICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS53cmFwUyBhbmQgVGV4dHVyZS53cmFwVCBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcuJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDAsIGZpbHRlckZhbGxiYWNrKCB0ZXh0dXJlLm1hZ0ZpbHRlciApICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQxLCBmaWx0ZXJGYWxsYmFjayggdGV4dHVyZS5taW5GaWx0ZXIgKSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXIgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLm1pbkZpbHRlciBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLk5lYXJlc3RGaWx0ZXIgb3IgVEhSRUUuTGluZWFyRmlsdGVyLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gbnVsbCApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBIYWxmRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInICkgKSA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmFuaXNvdHJvcHkgPiAxIHx8IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX19jdXJyZW50QW5pc290cm9weSApIHtcblxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyZiggdGV4dHVyZVR5cGUsIGV4dGVuc2lvbi5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgTWF0aC5taW4oIHRleHR1cmUuYW5pc290cm9weSwgY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKSApICk7XG5cdFx0XHRcdHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX19jdXJyZW50QW5pc290cm9weSA9IHRleHR1cmUuYW5pc290cm9weTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlVHlwZTtcblxuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlM0QgKSB7XG5cblx0XHRcdHRleHR1cmVUeXBlID0gMzI4Nzk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0ZXh0dXJlVHlwZSA9IDM1NTM7XG5cblx0XHR9XG5cblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPSB0cnVlO1xuXG5cdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0fVxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblxuXG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MCwgdGV4dHVyZS5mbGlwWSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDEsIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNywgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblxuXHRcdHZhciBpbWFnZSA9IGNsYW1wVG9NYXhTaXplKCB0ZXh0dXJlLmltYWdlLCBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemUgKTtcblxuXHRcdGlmICggdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApICYmIGlzUG93ZXJPZlR3byggaW1hZ2UgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGltYWdlID0gbWFrZVBvd2VyT2ZUd28oIGltYWdlICk7XG5cblx0XHR9XG5cblx0XHR2YXIgaXNQb3dlck9mVHdvSW1hZ2UgPSBpc1Bvd2VyT2ZUd28oIGltYWdlICksXG5cdFx0XHRnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICksXG5cdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggZ2xGb3JtYXQsIGdsVHlwZSApO1xuXG5cdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIHRleHR1cmVUeXBlLCB0ZXh0dXJlLCBpc1Bvd2VyT2ZUd29JbWFnZSApO1xuXG5cdFx0dmFyIG1pcG1hcCwgbWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcblxuXHRcdGlmICggdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0Ly8gcG9wdWxhdGUgZGVwdGggdGV4dHVyZSB3aXRoIGR1bW15IGRhdGFcblxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDY0MDI7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHRocm93IG5ldyBFcnJvciggJ0Zsb2F0IERlcHRoIFRleHR1cmUgb25seSBzdXBwb3J0ZWQgaW4gV2ViR0wyLjAnICk7XG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNjAxMjtcblxuXHRcdFx0fSBlbHNlIGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdC8vIFdlYkdMIDIuMCByZXF1aXJlcyBzaWduZWQgaW50ZXJuYWxmb3JtYXQgZm9yIGdsVGV4SW1hZ2UyRFxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzMxODk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgJiYgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gNjQwMiApIHtcblxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0Ly8gREVQVEhfQ09NUE9ORU5UIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9TSE9SVCBvciBVTlNJR05FRF9JTlRcblx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdGlmICggdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZFNob3J0VHlwZSAmJiB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkSW50VHlwZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFVzZSBVbnNpZ25lZFNob3J0VHlwZSBvciBVbnNpZ25lZEludFR5cGUgZm9yIERlcHRoRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVwdGggc3RlbmNpbCB0ZXh0dXJlcyBuZWVkIHRoZSBERVBUSF9TVEVOQ0lMIGludGVybmFsIGZvcm1hdFxuXHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM0MDQxO1xuXG5cdFx0XHRcdC8vIFRoZSBlcnJvciBJTlZBTElEX09QRVJBVElPTiBpcyBnZW5lcmF0ZWQgYnkgdGV4SW1hZ2UyRCBpZiBmb3JtYXQgYW5kIGludGVybmFsZm9ybWF0IGFyZVxuXHRcdFx0XHQvLyBERVBUSF9TVEVOQ0lMIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9JTlRfMjRfOF9XRUJHTC5cblx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdGlmICggdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRJbnQyNDhUeXBlIGZvciBEZXB0aFN0ZW5jaWxGb3JtYXQgRGVwdGhUZXh0dXJlLicgKTtcblxuXHRcdFx0XHRcdHRleHR1cmUudHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgJiYgaXNQb3dlck9mVHdvSW1hZ2UgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdGV4dHVyZS5mb3JtYXQgIT09IFJHQkZvcm1hdCApIHtcblxuXHRcdFx0XHRcdGlmICggc3RhdGUuZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkuaW5kZXhPZiggZ2xGb3JtYXQgKSA+IC0gMSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC51cGxvYWRUZXh0dXJlKCknICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZTNEICkge1xuXG5cdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCAzMjg3OSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gcmVndWxhciBUZXh0dXJlIChpbWFnZSwgdmlkZW8sIGNhbnZhcylcblxuXHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdC8vIGlmIHRoZXJlIGFyZSBubyBtYW51YWwgbWlwbWFwc1xuXHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXG5cblx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICYmIGlzUG93ZXJPZlR3b0ltYWdlICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgaXNQb3dlck9mVHdvSW1hZ2UgKSApIHtcblxuXHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM1NTMsIHRleHR1cmUsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHR9XG5cblx0Ly8gUmVuZGVyIHRhcmdldHNcblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciB0YXJnZXQgdGV4dHVyZSBhbmQgYmluZCBpdCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUuZm9ybWF0ICk7XG5cdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgKTtcblx0XHR2YXIgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cdFx0c3RhdGUudGV4SW1hZ2UyRCggdGV4dHVyZVRhcmdldCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICkuX193ZWJnbFRleHR1cmUsIDAgKTtcblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciBpbnRlcm5hbCBkZXB0aC9zdGVuY2lsIGJ1ZmZlcnMgYW5kIGJpbmQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmICEgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7XG5cblx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgMzMxODksIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCAzNjE2MCwgMzYwOTYsIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciApIHtcblxuXHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIDM2MTYxLCAzNDA0MSwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzMzMwNiwgMzYxNjEsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRklYTUU6IFdlIGRvbid0IHN1cHBvcnQgIWRlcHRoICFzdGVuY2lsXG5cdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIDMyODU0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCAzNjE2MSwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXR1cCByZXNvdXJjZXMgZm9yIGEgRGVwdGggVGV4dHVyZSBmb3IgYSBGQk8gKG5lZWRzIGFuIGV4dGVuc2lvbilcblx0ZnVuY3Rpb24gc2V0dXBEZXB0aFRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR2YXIgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICk7XG5cdFx0aWYgKCBpc0N1YmUgKSB0aHJvdyBuZXcgRXJyb3IoICdEZXB0aCBUZXh0dXJlIHdpdGggY3ViZSByZW5kZXIgdGFyZ2V0cyBpcyBub3Qgc3VwcG9ydGVkJyApO1xuXG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRpZiAoICEgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICYmIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAncmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFRIUkVFLkRlcHRoVGV4dHVyZScgKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwbG9hZCBhbiBlbXB0eSBkZXB0aCB0ZXh0dXJlIHdpdGggZnJhbWVidWZmZXIgc2l6ZVxuXHRcdGlmICggISBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggIT09IHJlbmRlclRhcmdldC53aWR0aCB8fFxuXHRcdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodCAhPT0gcmVuZGVyVGFyZ2V0LmhlaWdodCApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2V0VGV4dHVyZTJEKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHR2YXIgd2ViZ2xEZXB0aFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB7XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDM2MDk2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0fSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5mb3JtYXQgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHtcblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzMzMDYsIDM1NTMsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdVbmtub3duIGRlcHRoVGV4dHVyZSBmb3JtYXQnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFNldHVwIEdMIHJlc291cmNlcyBmb3IgYSBub24tdGV4dHVyZSBkZXB0aCBidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR2YXIgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPT09IHRydWUgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB0aHJvdyBuZXcgRXJyb3IoICd0YXJnZXQuZGVwdGhUZXh0dXJlIG5vdCBzdXBwb3J0ZWQgaW4gQ3ViZSByZW5kZXIgdGFyZ2V0cycgKTtcblxuXHRcdFx0c2V0dXBEZXB0aFRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXQgdXAgR0wgcmVzb3VyY2VzIGZvciB0aGUgcmVuZGVyIHRhcmdldFxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID09PSB0cnVlICk7XG5cdFx0dmFyIGlzVGFyZ2V0UG93ZXJPZlR3byA9IGlzUG93ZXJPZlR3byggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHQvLyBTZXR1cCBmcmFtZWJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgY29sb3IgYnVmZmVyXG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIDM0MDY3LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgaXNUYXJnZXRQb3dlck9mVHdvICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCwgMzYwNjQsIDM0MDY5ICsgaSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgaXNUYXJnZXRQb3dlck9mVHdvICkgKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM0MDY3LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCBudWxsICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCAzNTUzLCByZW5kZXJUYXJnZXQudGV4dHVyZSwgaXNUYXJnZXRQb3dlck9mVHdvICk7XG5cdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgMzYwNjQsIDM1NTMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHJlbmRlclRhcmdldC50ZXh0dXJlLCBpc1RhcmdldFBvd2VyT2ZUd28gKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggMzU1MywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNTUzLCBudWxsICk7XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBkZXB0aCBhbmQgc3RlbmNpbCBidWZmZXJzXG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0c2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHR2YXIgaXNUYXJnZXRQb3dlck9mVHdvID0gaXNQb3dlck9mVHdvKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBpc1RhcmdldFBvd2VyT2ZUd28gKSApIHtcblxuXHRcdFx0dmFyIHRhcmdldCA9IHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSA/IDM0MDY3IDogMzU1Mztcblx0XHRcdHZhciB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlO1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGFyZ2V0LCB3ZWJnbFRleHR1cmUgKTtcblx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQsIHRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIHRhcmdldCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR2YXIgaWQgPSB0ZXh0dXJlLmlkO1xuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Ly8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlXG5cblx0XHRpZiAoIF92aWRlb1RleHR1cmVzWyBpZCBdICE9PSBmcmFtZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXNbIGlkIF0gPSBmcmFtZTtcblx0XHRcdHRleHR1cmUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xuXHR0aGlzLnNldFRleHR1cmUzRCA9IHNldFRleHR1cmUzRDtcblx0dGhpcy5zZXRUZXh0dXJlQ3ViZSA9IHNldFRleHR1cmVDdWJlO1xuXHR0aGlzLnNldFRleHR1cmVDdWJlRHluYW1pYyA9IHNldFRleHR1cmVDdWJlRHluYW1pYztcblx0dGhpcy5zZXR1cFJlbmRlclRhcmdldCA9IHNldHVwUmVuZGVyVGFyZ2V0O1xuXHR0aGlzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCA9IHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcDtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgdGhlc3BpdGUgLyBodHRwOi8vd3d3LnR3aXR0ZXIuY29tL3RoZXNwaXRlXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xVdGlscyggZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRmdW5jdGlvbiBjb252ZXJ0KCBwICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggcCA9PT0gUmVwZWF0V3JhcHBpbmcgKSByZXR1cm4gMTA0OTc7XG5cdFx0aWYgKCBwID09PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkgcmV0dXJuIDMzMDcxO1xuXHRcdGlmICggcCA9PT0gTWlycm9yZWRSZXBlYXRXcmFwcGluZyApIHJldHVybiAzMzY0ODtcblxuXHRcdGlmICggcCA9PT0gTmVhcmVzdEZpbHRlciApIHJldHVybiA5NzI4O1xuXHRcdGlmICggcCA9PT0gTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIgKSByZXR1cm4gOTk4NDtcblx0XHRpZiAoIHAgPT09IE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIgKSByZXR1cm4gOTk4NjtcblxuXHRcdGlmICggcCA9PT0gTGluZWFyRmlsdGVyICkgcmV0dXJuIDk3Mjk7XG5cdFx0aWYgKCBwID09PSBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyICkgcmV0dXJuIDk5ODU7XG5cdFx0aWYgKCBwID09PSBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgKSByZXR1cm4gOTk4NztcblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRCeXRlVHlwZSApIHJldHVybiA1MTIxO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlICkgcmV0dXJuIDMyODE5O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU1NTFUeXBlICkgcmV0dXJuIDMyODIwO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU2NVR5cGUgKSByZXR1cm4gMzM2MzU7XG5cblx0XHRpZiAoIHAgPT09IEJ5dGVUeXBlICkgcmV0dXJuIDUxMjA7XG5cdFx0aWYgKCBwID09PSBTaG9ydFR5cGUgKSByZXR1cm4gNTEyMjtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkgcmV0dXJuIDUxMjM7XG5cdFx0aWYgKCBwID09PSBJbnRUeXBlICkgcmV0dXJuIDUxMjQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludFR5cGUgKSByZXR1cm4gNTEyNTtcblx0XHRpZiAoIHAgPT09IEZsb2F0VHlwZSApIHJldHVybiA1MTI2O1xuXG5cdFx0aWYgKCBwID09PSBIYWxmRmxvYXRUeXBlICkge1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiA1MTMxO1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5IQUxGX0ZMT0FUX09FUztcblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gQWxwaGFGb3JtYXQgKSByZXR1cm4gNjQwNjtcblx0XHRpZiAoIHAgPT09IFJHQkZvcm1hdCApIHJldHVybiA2NDA3O1xuXHRcdGlmICggcCA9PT0gUkdCQUZvcm1hdCApIHJldHVybiA2NDA4O1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlRm9ybWF0ICkgcmV0dXJuIDY0MDk7XG5cdFx0aWYgKCBwID09PSBMdW1pbmFuY2VBbHBoYUZvcm1hdCApIHJldHVybiA2NDEwO1xuXHRcdGlmICggcCA9PT0gRGVwdGhGb3JtYXQgKSByZXR1cm4gNjQwMjtcblx0XHRpZiAoIHAgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHJldHVybiAzNDA0MTtcblx0XHRpZiAoIHAgPT09IFJlZEZvcm1hdCApIHJldHVybiA2NDAzO1xuXG5cdFx0aWYgKCBwID09PSBBZGRFcXVhdGlvbiApIHJldHVybiAzMjc3NDtcblx0XHRpZiAoIHAgPT09IFN1YnRyYWN0RXF1YXRpb24gKSByZXR1cm4gMzI3Nzg7XG5cdFx0aWYgKCBwID09PSBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiApIHJldHVybiAzMjc3OTtcblxuXHRcdGlmICggcCA9PT0gWmVyb0ZhY3RvciApIHJldHVybiAwO1xuXHRcdGlmICggcCA9PT0gT25lRmFjdG9yICkgcmV0dXJuIDE7XG5cdFx0aWYgKCBwID09PSBTcmNDb2xvckZhY3RvciApIHJldHVybiA3Njg7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c1NyY0NvbG9yRmFjdG9yICkgcmV0dXJuIDc2OTtcblx0XHRpZiAoIHAgPT09IFNyY0FscGhhRmFjdG9yICkgcmV0dXJuIDc3MDtcblx0XHRpZiAoIHAgPT09IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgKSByZXR1cm4gNzcxO1xuXHRcdGlmICggcCA9PT0gRHN0QWxwaGFGYWN0b3IgKSByZXR1cm4gNzcyO1xuXHRcdGlmICggcCA9PT0gT25lTWludXNEc3RBbHBoYUZhY3RvciApIHJldHVybiA3NzM7XG5cblx0XHRpZiAoIHAgPT09IERzdENvbG9yRmFjdG9yICkgcmV0dXJuIDc3NDtcblx0XHRpZiAoIHAgPT09IE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgKSByZXR1cm4gNzc1O1xuXHRcdGlmICggcCA9PT0gU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciApIHJldHVybiA3NzY7XG5cblx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRztcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IFJHQl9FVEMxX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMScgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w7XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gTWluRXF1YXRpb24gfHwgcCA9PT0gTWF4RXF1YXRpb24gKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gTWluRXF1YXRpb24gKSByZXR1cm4gMzI3NzU7XG5cdFx0XHRcdGlmICggcCA9PT0gTWF4RXF1YXRpb24gKSByZXR1cm4gMzI3NzY7XG5cblx0XHRcdH1cblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfYmxlbmRfbWlubWF4JyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IE1pbkVxdWF0aW9uICkgcmV0dXJuIGV4dGVuc2lvbi5NSU5fRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IE1heEVxdWF0aW9uICkgcmV0dXJuIGV4dGVuc2lvbi5NQVhfRVhUO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHtcblxuXHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSByZXR1cm4gMzQwNDI7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSByZXR1cm4gZXh0ZW5zaW9uLlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIDA7XG5cblx0fVxuXG5cdHJldHVybiB7IGNvbnZlcnQ6IGNvbnZlcnQgfTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gR3JvdXAoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdHcm91cCc7XG5cbn1cblxuR3JvdXAucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR3JvdXAsXG5cblx0aXNHcm91cDogdHJ1ZVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiovXG5cbmZ1bmN0aW9uIENhbWVyYSgpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0NhbWVyYSc7XG5cblx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG59XG5cbkNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDYW1lcmEsXG5cblx0aXNDYW1lcmE6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBzb3VyY2UubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXguY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DYW1lcmE6IC5nZXRXb3JsZERpcmVjdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0dmFyIGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIC0gZVsgOCBdLCAtIGVbIDkgXSwgLSBlWyAxMCBdICkubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBncmVnZ21hbiAvIGh0dHA6Ly9nYW1lcy5ncmVnZ21hbi5jb20vXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKSB7XG5cblx0Q2FtZXJhLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUGVyc3BlY3RpdmVDYW1lcmEnO1xuXG5cdHRoaXMuZm92ID0gZm92ICE9PSB1bmRlZmluZWQgPyBmb3YgOiA1MDtcblx0dGhpcy56b29tID0gMTtcblxuXHR0aGlzLm5lYXIgPSBuZWFyICE9PSB1bmRlZmluZWQgPyBuZWFyIDogMC4xO1xuXHR0aGlzLmZhciA9IGZhciAhPT0gdW5kZWZpbmVkID8gZmFyIDogMjAwMDtcblx0dGhpcy5mb2N1cyA9IDEwO1xuXG5cdHRoaXMuYXNwZWN0ID0gYXNwZWN0ICE9PSB1bmRlZmluZWQgPyBhc3BlY3QgOiAxO1xuXHR0aGlzLnZpZXcgPSBudWxsO1xuXG5cdHRoaXMuZmlsbUdhdWdlID0gMzU7XHQvLyB3aWR0aCBvZiB0aGUgZmlsbSAoZGVmYXVsdCBpbiBtaWxsaW1ldGVycylcblx0dGhpcy5maWxtT2Zmc2V0ID0gMDtcdC8vIGhvcml6b250YWwgZmlsbSBvZmZzZXQgKHNhbWUgdW5pdCBhcyBnYXVnZSlcblxuXHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxufVxuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDYW1lcmEucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUGVyc3BlY3RpdmVDYW1lcmEsXG5cblx0aXNQZXJzcGVjdGl2ZUNhbWVyYTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0Q2FtZXJhLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmZvdiA9IHNvdXJjZS5mb3Y7XG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XG5cblx0XHR0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjtcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XG5cdFx0dGhpcy5mb2N1cyA9IHNvdXJjZS5mb2N1cztcblxuXHRcdHRoaXMuYXNwZWN0ID0gc291cmNlLmFzcGVjdDtcblx0XHR0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTtcblxuXHRcdHRoaXMuZmlsbUdhdWdlID0gc291cmNlLmZpbG1HYXVnZTtcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSBzb3VyY2UuZmlsbU9mZnNldDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIEZPViBieSBmb2NhbCBsZW5ndGggaW4gcmVzcGVjdCB0byB0aGUgY3VycmVudCAuZmlsbUdhdWdlLlxuXHQgKlxuXHQgKiBUaGUgZGVmYXVsdCBmaWxtIGdhdWdlIGlzIDM1LCBzbyB0aGF0IHRoZSBmb2NhbCBsZW5ndGggY2FuIGJlIHNwZWNpZmllZCBmb3Jcblx0ICogYSAzNW1tIChmdWxsIGZyYW1lKSBjYW1lcmEuXG5cdCAqXG5cdCAqIFZhbHVlcyBmb3IgZm9jYWwgbGVuZ3RoIGFuZCBmaWxtIGdhdWdlIG11c3QgaGF2ZSB0aGUgc2FtZSB1bml0LlxuXHQgKi9cblx0c2V0Rm9jYWxMZW5ndGg6IGZ1bmN0aW9uICggZm9jYWxMZW5ndGggKSB7XG5cblx0XHQvLyBzZWUgaHR0cDovL3d3dy5ib2JhdGtpbnMuY29tL3Bob3RvZ3JhcGh5L3RlY2huaWNhbC9maWVsZF9vZl92aWV3Lmh0bWxcblx0XHR2YXIgdkV4dGVudFNsb3BlID0gMC41ICogdGhpcy5nZXRGaWxtSGVpZ2h0KCkgLyBmb2NhbExlbmd0aDtcblxuXHRcdHRoaXMuZm92ID0gX01hdGguUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oIHZFeHRlbnRTbG9wZSApO1xuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGZvY2FsIGxlbmd0aCBmcm9tIHRoZSBjdXJyZW50IC5mb3YgYW5kIC5maWxtR2F1Z2UuXG5cdCAqL1xuXHRnZXRGb2NhbExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZFeHRlbnRTbG9wZSA9IE1hdGgudGFuKCBfTWF0aC5ERUcyUkFEICogMC41ICogdGhpcy5mb3YgKTtcblxuXHRcdHJldHVybiAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIHZFeHRlbnRTbG9wZTtcblxuXHR9LFxuXG5cdGdldEVmZmVjdGl2ZUZPVjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9NYXRoLlJBRDJERUcgKiAyICogTWF0aC5hdGFuKFxuXHRcdFx0TWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7XG5cblx0fSxcblxuXHRnZXRGaWxtV2lkdGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBwb3J0cmFpdCBmb3JtYXQgKGFzcGVjdCA8IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fSxcblxuXHRnZXRGaWxtSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gbGFuZHNjYXBlIGZvcm1hdCAoYXNwZWN0ID4gMSlcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCggdGhpcy5hc3BlY3QsIDEgKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSAzeDIgbW9uaXRvcnMgYW5kIGVhY2ggbW9uaXRvciBpcyAxOTIweDEwODAgYW5kXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcblx0ICpcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEQgfCBFIHwgRiB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKlxuXHQgKiB0aGVuIGZvciBlYWNoIG1vbml0b3IgeW91IHdvdWxkIGNhbGwgaXQgbGlrZSB0aGlzXG5cdCAqXG5cdCAqICAgdmFyIHcgPSAxOTIwO1xuXHQgKiAgIHZhciBoID0gMTA4MDtcblx0ICogICB2YXIgZnVsbFdpZHRoID0gdyAqIDM7XG5cdCAqICAgdmFyIGZ1bGxIZWlnaHQgPSBoICogMjtcblx0ICpcblx0ICogICAtLUEtLVxuXHQgKiAgIGNhbWVyYS5zZXRPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1CLS1cblx0ICogICBjYW1lcmEuc2V0T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tQy0tXG5cdCAqICAgY2FtZXJhLnNldE9mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUQtLVxuXHQgKiAgIGNhbWVyYS5zZXRPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAxLCB3LCBoICk7XG5cdCAqICAgLS1FLS1cblx0ICogICBjYW1lcmEuc2V0T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMSwgdywgaCApO1xuXHQgKiAgIC0tRi0tXG5cdCAqICAgY2FtZXJhLnNldE9mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDEsIHcsIGggKTtcblx0ICpcblx0ICogICBOb3RlIHRoZXJlIGlzIG5vIHJlYXNvbiBtb25pdG9ycyBoYXZlIHRvIGJlIHRoZSBzYW1lIHNpemUgb3IgaW4gYSBncmlkLlxuXHQgKi9cblx0c2V0Vmlld09mZnNldDogZnVuY3Rpb24gKCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbmVhciA9IHRoaXMubmVhcixcblx0XHRcdHRvcCA9IG5lYXIgKiBNYXRoLnRhbiggX01hdGguREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb20sXG5cdFx0XHRoZWlnaHQgPSAyICogdG9wLFxuXHRcdFx0d2lkdGggPSB0aGlzLmFzcGVjdCAqIGhlaWdodCxcblx0XHRcdGxlZnQgPSAtIDAuNSAqIHdpZHRoLFxuXHRcdFx0dmlldyA9IHRoaXMudmlldztcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHR2YXIgZnVsbFdpZHRoID0gdmlldy5mdWxsV2lkdGgsXG5cdFx0XHRcdGZ1bGxIZWlnaHQgPSB2aWV3LmZ1bGxIZWlnaHQ7XG5cblx0XHRcdGxlZnQgKz0gdmlldy5vZmZzZXRYICogd2lkdGggLyBmdWxsV2lkdGg7XG5cdFx0XHR0b3AgLT0gdmlldy5vZmZzZXRZICogaGVpZ2h0IC8gZnVsbEhlaWdodDtcblx0XHRcdHdpZHRoICo9IHZpZXcud2lkdGggLyBmdWxsV2lkdGg7XG5cdFx0XHRoZWlnaHQgKj0gdmlldy5oZWlnaHQgLyBmdWxsSGVpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHNrZXcgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cdFx0aWYgKCBza2V3ICE9PSAwICkgbGVmdCArPSBuZWFyICogc2tldyAvIHRoaXMuZ2V0RmlsbVdpZHRoKCk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCBsZWZ0ICsgd2lkdGgsIHRvcCwgdG9wIC0gaGVpZ2h0LCBuZWFyLCB0aGlzLmZhciApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmZvdiA9IHRoaXMuZm92O1xuXHRcdGRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207XG5cblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXHRcdGRhdGEub2JqZWN0LmZvY3VzID0gdGhpcy5mb2N1cztcblxuXHRcdGRhdGEub2JqZWN0LmFzcGVjdCA9IHRoaXMuYXNwZWN0O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0ZGF0YS5vYmplY3QuZmlsbUdhdWdlID0gdGhpcy5maWxtR2F1Z2U7XG5cdFx0ZGF0YS5vYmplY3QuZmlsbU9mZnNldCA9IHRoaXMuZmlsbU9mZnNldDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXJyYXlDYW1lcmEoIGFycmF5ICkge1xuXG5cdFBlcnNwZWN0aXZlQ2FtZXJhLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmNhbWVyYXMgPSBhcnJheSB8fCBbXTtcblxufVxuXG5BcnJheUNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBQZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBcnJheUNhbWVyYSxcblxuXHRpc0FycmF5Q2FtZXJhOiB0cnVlXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGpzYW50ZWxsIC8gaHR0cHM6Ly93d3cuanNhbnRlbGwuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgY2FtZXJhTFBvcyA9IG5ldyBWZWN0b3IzKCk7XG52YXIgY2FtZXJhUlBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogQXNzdW1lcyAyIGNhbWVyYXMgdGhhdCBhcmUgcGFyYWxsZWwgYW5kIHNoYXJlIGFuIFgtYXhpcywgYW5kIHRoYXRcbiAqIHRoZSBjYW1lcmFzJyBwcm9qZWN0aW9uIGFuZCB3b3JsZCBtYXRyaWNlcyBoYXZlIGFscmVhZHkgYmVlbiBzZXQuXG4gKiBBbmQgdGhhdCBuZWFyIGFuZCBmYXIgcGxhbmVzIGFyZSBpZGVudGljYWwgZm9yIGJvdGggY2FtZXJhcy5cbiAqIFZpc3VhbGl6YXRpb24gb2YgdGhpcyB0ZWNobmlxdWU6IGh0dHBzOi8vY29tcHV0ZXJncmFwaGljcy5zdGFja2V4Y2hhbmdlLmNvbS9hLzQ3NjVcbiAqL1xuZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhLCBjYW1lcmFMLCBjYW1lcmFSICkge1xuXG5cdGNhbWVyYUxQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFMLm1hdHJpeFdvcmxkICk7XG5cdGNhbWVyYVJQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFSLm1hdHJpeFdvcmxkICk7XG5cblx0dmFyIGlwZCA9IGNhbWVyYUxQb3MuZGlzdGFuY2VUbyggY2FtZXJhUlBvcyApO1xuXG5cdHZhciBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblx0dmFyIHByb2pSID0gY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXG5cdC8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmRcblx0Ly8gbW9zdCBsaWtlbHkgaWRlbnRpY2FsIHRvcCBhbmQgYm90dG9tIGZydXN0dW0gZXh0ZW50cy5cblx0Ly8gVXNlIHRoZSBsZWZ0IGNhbWVyYSBmb3IgdGhlc2UgdmFsdWVzLlxuXHR2YXIgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTtcblx0dmFyIGZhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSArIDEgKTtcblx0dmFyIHRvcEZvdiA9ICggcHJvakxbIDkgXSArIDEgKSAvIHByb2pMWyA1IF07XG5cdHZhciBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdO1xuXG5cdHZhciBsZWZ0Rm92ID0gKCBwcm9qTFsgOCBdIC0gMSApIC8gcHJvakxbIDAgXTtcblx0dmFyIHJpZ2h0Rm92ID0gKCBwcm9qUlsgOCBdICsgMSApIC8gcHJvalJbIDAgXTtcblx0dmFyIGxlZnQgPSBuZWFyICogbGVmdEZvdjtcblx0dmFyIHJpZ2h0ID0gbmVhciAqIHJpZ2h0Rm92O1xuXG5cdC8vIENhbGN1bGF0ZSB0aGUgbmV3IGNhbWVyYSdzIHBvc2l0aW9uIG9mZnNldCBmcm9tIHRoZVxuXHQvLyBsZWZ0IGNhbWVyYS4geE9mZnNldCBzaG91bGQgYmUgcm91Z2hseSBoYWxmIGBpcGRgLlxuXHR2YXIgek9mZnNldCA9IGlwZCAvICggLSBsZWZ0Rm92ICsgcmlnaHRGb3YgKTtcblx0dmFyIHhPZmZzZXQgPSB6T2Zmc2V0ICogLSBsZWZ0Rm92O1xuXG5cdC8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/XG5cdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0Y2FtZXJhLnRyYW5zbGF0ZVgoIHhPZmZzZXQgKTtcblx0Y2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTtcblx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdC8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGVcblx0Ly8gdGhlIHZhbHVlcyBzbyB0aGF0IHRoZSBuZWFyIHBsYW5lJ3MgcG9zaXRpb24gZG9lcyBub3QgY2hhbmdlIGluIHdvcmxkIHNwYWNlLFxuXHQvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS5cblx0dmFyIG5lYXIyID0gbmVhciArIHpPZmZzZXQ7XG5cdHZhciBmYXIyID0gZmFyICsgek9mZnNldDtcblx0dmFyIGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7XG5cdHZhciByaWdodDIgPSByaWdodCArICggaXBkIC0geE9mZnNldCApO1xuXHR2YXIgdG9wMiA9IHRvcEZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjtcblx0dmFyIGJvdHRvbTIgPSBib3R0b21Gb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cblx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0MiwgcmlnaHQyLCB0b3AyLCBib3R0b20yLCBuZWFyMiwgZmFyMiApO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJWUk1hbmFnZXIoIHJlbmRlcmVyICkge1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIGRldmljZSA9IG51bGw7XG5cdHZhciBmcmFtZURhdGEgPSBudWxsO1xuXG5cdHZhciBwb3NlVGFyZ2V0ID0gbnVsbDtcblxuXHR2YXIgY29udHJvbGxlcnMgPSBbXTtcblx0dmFyIHN0YW5kaW5nTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIHN0YW5kaW5nTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0dmFyIGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSAxLjA7XG5cblx0dmFyIGZyYW1lT2ZSZWZlcmVuY2VUeXBlID0gJ3N0YWdlJztcblxuXHRpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdWUkZyYW1lRGF0YScgaW4gd2luZG93ICkge1xuXG5cdFx0ZnJhbWVEYXRhID0gbmV3IHdpbmRvdy5WUkZyYW1lRGF0YSgpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAndnJkaXNwbGF5cHJlc2VudGNoYW5nZScsIG9uVlJEaXNwbGF5UHJlc2VudENoYW5nZSwgZmFsc2UgKTtcblxuXHR9XG5cblx0dmFyIG1hdHJpeFdvcmxkSW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cdHZhciB0ZW1wUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdHZhciB0ZW1wUG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBjYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdGNhbWVyYUwuYm91bmRzID0gbmV3IFZlY3RvcjQoIDAuMCwgMC4wLCAwLjUsIDEuMCApO1xuXHRjYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblxuXHR2YXIgY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFSLmJvdW5kcyA9IG5ldyBWZWN0b3I0KCAwLjUsIDAuMCwgMC41LCAxLjAgKTtcblx0Y2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cblx0dmFyIGNhbWVyYVZSID0gbmV3IEFycmF5Q2FtZXJhKCBbIGNhbWVyYUwsIGNhbWVyYVIgXSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAxICk7XG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoIDIgKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGlzUHJlc2VudGluZygpIHtcblxuXHRcdHJldHVybiBkZXZpY2UgIT09IG51bGwgJiYgZGV2aWNlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZTtcblxuXHR9XG5cblx0dmFyIGN1cnJlbnRTaXplLCBjdXJyZW50UGl4ZWxSYXRpbztcblxuXHRmdW5jdGlvbiBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UoKSB7XG5cblx0XHRpZiAoIGlzUHJlc2VudGluZygpICkge1xuXG5cdFx0XHR2YXIgZXllUGFyYW1ldGVycyA9IGRldmljZS5nZXRFeWVQYXJhbWV0ZXJzKCAnbGVmdCcgKTtcblx0XHRcdHZhciByZW5kZXJXaWR0aCA9IGV5ZVBhcmFtZXRlcnMucmVuZGVyV2lkdGggKiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yO1xuXHRcdFx0dmFyIHJlbmRlckhlaWdodCA9IGV5ZVBhcmFtZXRlcnMucmVuZGVySGVpZ2h0ICogZnJhbWVidWZmZXJTY2FsZUZhY3RvcjtcblxuXHRcdFx0Y3VycmVudFBpeGVsUmF0aW8gPSByZW5kZXJlci5nZXRQaXhlbFJhdGlvKCk7XG5cdFx0XHRjdXJyZW50U2l6ZSA9IHJlbmRlcmVyLmdldFNpemUoKTtcblxuXHRcdFx0cmVuZGVyZXIuc2V0RHJhd2luZ0J1ZmZlclNpemUoIHJlbmRlcldpZHRoICogMiwgcmVuZGVySGVpZ2h0LCAxICk7XG5cblx0XHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldERyYXdpbmdCdWZmZXJTaXplKCBjdXJyZW50U2l6ZS53aWR0aCwgY3VycmVudFNpemUuaGVpZ2h0LCBjdXJyZW50UGl4ZWxSYXRpbyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIHRyaWdnZXJzID0gW107XG5cblx0ZnVuY3Rpb24gZmluZEdhbWVwYWQoIGlkICkge1xuXG5cdFx0dmFyIGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzICYmIG5hdmlnYXRvci5nZXRHYW1lcGFkcygpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMCwgbCA9IGdhbWVwYWRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBnYW1lcGFkID0gZ2FtZXBhZHNbIGkgXTtcblxuXHRcdFx0aWYgKCBnYW1lcGFkICYmICggZ2FtZXBhZC5pZCA9PT0gJ0RheWRyZWFtIENvbnRyb2xsZXInIHx8XG5cdFx0XHRcdGdhbWVwYWQuaWQgPT09ICdHZWFyIFZSIENvbnRyb2xsZXInIHx8IGdhbWVwYWQuaWQgPT09ICdPY3VsdXMgR28gQ29udHJvbGxlcicgfHxcblx0XHRcdFx0Z2FtZXBhZC5pZCA9PT0gJ09wZW5WUiBHYW1lcGFkJyB8fCBnYW1lcGFkLmlkLnN0YXJ0c1dpdGgoICdPY3VsdXMgVG91Y2gnICkgfHxcblx0XHRcdFx0Z2FtZXBhZC5pZC5zdGFydHNXaXRoKCAnU3BhdGlhbCBDb250cm9sbGVyJyApICkgKSB7XG5cblx0XHRcdFx0aWYgKCBqID09PSBpZCApIHJldHVybiBnYW1lcGFkO1xuXG5cdFx0XHRcdGogKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQ29udHJvbGxlcnMoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblxuXHRcdFx0dmFyIGdhbWVwYWQgPSBmaW5kR2FtZXBhZCggaSApO1xuXG5cdFx0XHRpZiAoIGdhbWVwYWQgIT09IHVuZGVmaW5lZCAmJiBnYW1lcGFkLnBvc2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGdhbWVwYWQucG9zZSA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0XHQvLyAgUG9zZVxuXG5cdFx0XHRcdHZhciBwb3NlID0gZ2FtZXBhZC5wb3NlO1xuXG5cdFx0XHRcdGlmICggcG9zZS5oYXNQb3NpdGlvbiA9PT0gZmFsc2UgKSBjb250cm9sbGVyLnBvc2l0aW9uLnNldCggMC4yLCAtIDAuNiwgLSAwLjA1ICk7XG5cblx0XHRcdFx0aWYgKCBwb3NlLnBvc2l0aW9uICE9PSBudWxsICkgY29udHJvbGxlci5wb3NpdGlvbi5mcm9tQXJyYXkoIHBvc2UucG9zaXRpb24gKTtcblx0XHRcdFx0aWYgKCBwb3NlLm9yaWVudGF0aW9uICE9PSBudWxsICkgY29udHJvbGxlci5xdWF0ZXJuaW9uLmZyb21BcnJheSggcG9zZS5vcmllbnRhdGlvbiApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5jb21wb3NlKCBjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnF1YXRlcm5pb24sIGNvbnRyb2xsZXIuc2NhbGUgKTtcblx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXgucHJlbXVsdGlwbHkoIHN0YW5kaW5nTWF0cml4ICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LmRlY29tcG9zZSggY29udHJvbGxlci5wb3NpdGlvbiwgY29udHJvbGxlci5xdWF0ZXJuaW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdFx0Ly8gIFRyaWdnZXJcblxuXHRcdFx0XHR2YXIgYnV0dG9uSWQgPSBnYW1lcGFkLmlkID09PSAnRGF5ZHJlYW0gQ29udHJvbGxlcicgPyAwIDogMTtcblxuXHRcdFx0XHRpZiAoIHRyaWdnZXJzWyBpIF0gIT09IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkICkge1xuXG5cdFx0XHRcdFx0dHJpZ2dlcnNbIGkgXSA9IGdhbWVwYWQuYnV0dG9uc1sgYnV0dG9uSWQgXS5wcmVzc2VkO1xuXG5cdFx0XHRcdFx0aWYgKCB0cmlnZ2Vyc1sgaSBdID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3NlbGVjdHN0YXJ0JyB9ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3NlbGVjdGVuZCcgfSApO1xuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3QnIH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaWQgXTtcblxuXHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250cm9sbGVyID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRjb250cm9sbGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRjb250cm9sbGVyc1sgaWQgXSA9IGNvbnRyb2xsZXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udHJvbGxlcjtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGRldmljZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIGRldmljZSA9IHZhbHVlO1xuXG5cdFx0YW5pbWF0aW9uLnNldENvbnRleHQoIHZhbHVlICk7XG5cblx0fTtcblxuXHR0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5zZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRmcmFtZU9mUmVmZXJlbmNlVHlwZSA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5zZXRQb3NlVGFyZ2V0ID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkgcG9zZVRhcmdldCA9IG9iamVjdDtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Q2FtZXJhID0gZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgdXNlckhlaWdodCA9IGZyYW1lT2ZSZWZlcmVuY2VUeXBlID09PSAnc3RhZ2UnID8gMS42IDogMDtcblxuXHRcdGlmICggZGV2aWNlID09PSBudWxsICkge1xuXG5cdFx0XHRjYW1lcmEucG9zaXRpb24uc2V0KCAwLCB1c2VySGVpZ2h0LCAwICk7XG5cdFx0XHRyZXR1cm4gY2FtZXJhO1xuXG5cdFx0fVxuXG5cdFx0ZGV2aWNlLmRlcHRoTmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdGRldmljZS5kZXB0aEZhciA9IGNhbWVyYS5mYXI7XG5cblx0XHRkZXZpY2UuZ2V0RnJhbWVEYXRhKCBmcmFtZURhdGEgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIGZyYW1lT2ZSZWZlcmVuY2VUeXBlID09PSAnc3RhZ2UnICkge1xuXG5cdFx0XHR2YXIgc3RhZ2VQYXJhbWV0ZXJzID0gZGV2aWNlLnN0YWdlUGFyYW1ldGVycztcblxuXHRcdFx0aWYgKCBzdGFnZVBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdFx0c3RhbmRpbmdNYXRyaXguZnJvbUFycmF5KCBzdGFnZVBhcmFtZXRlcnMuc2l0dGluZ1RvU3RhbmRpbmdUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGFuZGluZ01hdHJpeC5tYWtlVHJhbnNsYXRpb24oIDAsIHVzZXJIZWlnaHQsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHR2YXIgcG9zZSA9IGZyYW1lRGF0YS5wb3NlO1xuXHRcdHZhciBwb3NlT2JqZWN0ID0gcG9zZVRhcmdldCAhPT0gbnVsbCA/IHBvc2VUYXJnZXQgOiBjYW1lcmE7XG5cblx0XHQvLyBXZSB3YW50IHRvIG1hbmlwdWxhdGUgcG9zZU9iamVjdCBieSBpdHMgcG9zaXRpb24gYW5kIHF1YXRlcm5pb24gY29tcG9uZW50cyBzaW5jZSB1c2VycyBtYXkgcmVseSBvbiB0aGVtLlxuXHRcdHBvc2VPYmplY3QubWF0cml4LmNvcHkoIHN0YW5kaW5nTWF0cml4ICk7XG5cdFx0cG9zZU9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBwb3NlT2JqZWN0LnBvc2l0aW9uLCBwb3NlT2JqZWN0LnF1YXRlcm5pb24sIHBvc2VPYmplY3Quc2NhbGUgKTtcblxuXHRcdGlmICggcG9zZS5vcmllbnRhdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGVtcFF1YXRlcm5pb24uZnJvbUFycmF5KCBwb3NlLm9yaWVudGF0aW9uICk7XG5cdFx0XHRwb3NlT2JqZWN0LnF1YXRlcm5pb24ubXVsdGlwbHkoIHRlbXBRdWF0ZXJuaW9uICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHBvc2UucG9zaXRpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHRlbXBRdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggc3RhbmRpbmdNYXRyaXggKTtcblx0XHRcdHRlbXBQb3NpdGlvbi5mcm9tQXJyYXkoIHBvc2UucG9zaXRpb24gKTtcblx0XHRcdHRlbXBQb3NpdGlvbi5hcHBseVF1YXRlcm5pb24oIHRlbXBRdWF0ZXJuaW9uICk7XG5cdFx0XHRwb3NlT2JqZWN0LnBvc2l0aW9uLmFkZCggdGVtcFBvc2l0aW9uICk7XG5cblx0XHR9XG5cblx0XHRwb3NlT2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRpZiAoIGRldmljZS5pc1ByZXNlbnRpbmcgPT09IGZhbHNlICkgcmV0dXJuIGNhbWVyYTtcblxuXHRcdC8vXG5cblx0XHRjYW1lcmFMLm5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRjYW1lcmFSLm5lYXIgPSBjYW1lcmEubmVhcjtcblxuXHRcdGNhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjtcblx0XHRjYW1lcmFSLmZhciA9IGNhbWVyYS5mYXI7XG5cblx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZS5mcm9tQXJyYXkoIGZyYW1lRGF0YS5sZWZ0Vmlld01hdHJpeCApO1xuXHRcdGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlLmZyb21BcnJheSggZnJhbWVEYXRhLnJpZ2h0Vmlld01hdHJpeCApO1xuXG5cdFx0Ly8gVE9ETyAobXJkb29iKSBEb3VibGUgY2hlY2sgdGhpcyBjb2RlXG5cblx0XHRzdGFuZGluZ01hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggc3RhbmRpbmdNYXRyaXggKTtcblxuXHRcdGlmICggZnJhbWVPZlJlZmVyZW5jZVR5cGUgPT09ICdzdGFnZScgKSB7XG5cblx0XHRcdGNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBzdGFuZGluZ01hdHJpeEludmVyc2UgKTtcblx0XHRcdGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBzdGFuZGluZ01hdHJpeEludmVyc2UgKTtcblxuXHRcdH1cblxuXHRcdHZhciBwYXJlbnQgPSBwb3NlT2JqZWN0LnBhcmVudDtcblxuXHRcdGlmICggcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRtYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggcGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBtYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRcdGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBtYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdH1cblxuXHRcdC8vIGVudk1hcCBhbmQgTWlycm9yIG5lZWRzIGNhbWVyYS5tYXRyaXhXb3JsZFxuXG5cdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKCBjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdGNhbWVyYVIubWF0cml4V29ybGQuZ2V0SW52ZXJzZSggY2FtZXJhUi5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIGZyYW1lRGF0YS5sZWZ0UHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdGNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIGZyYW1lRGF0YS5yaWdodFByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYVZSLCBjYW1lcmFMLCBjYW1lcmFSICk7XG5cblx0XHQvL1xuXG5cdFx0dmFyIGxheWVycyA9IGRldmljZS5nZXRMYXllcnMoKTtcblxuXHRcdGlmICggbGF5ZXJzLmxlbmd0aCApIHtcblxuXHRcdFx0dmFyIGxheWVyID0gbGF5ZXJzWyAwIF07XG5cblx0XHRcdGlmICggbGF5ZXIubGVmdEJvdW5kcyAhPT0gbnVsbCAmJiBsYXllci5sZWZ0Qm91bmRzLmxlbmd0aCA9PT0gNCApIHtcblxuXHRcdFx0XHRjYW1lcmFMLmJvdW5kcy5mcm9tQXJyYXkoIGxheWVyLmxlZnRCb3VuZHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGxheWVyLnJpZ2h0Qm91bmRzICE9PSBudWxsICYmIGxheWVyLnJpZ2h0Qm91bmRzLmxlbmd0aCA9PT0gNCApIHtcblxuXHRcdFx0XHRjYW1lcmFSLmJvdW5kcy5mcm9tQXJyYXkoIGxheWVyLnJpZ2h0Qm91bmRzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHVwZGF0ZUNvbnRyb2xsZXJzKCk7XG5cblx0XHRyZXR1cm4gY2FtZXJhVlI7XG5cblx0fTtcblxuXHR0aGlzLmdldFN0YW5kaW5nTWF0cml4ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHN0YW5kaW5nTWF0cml4O1xuXG5cdH07XG5cblx0dGhpcy5pc1ByZXNlbnRpbmcgPSBpc1ByZXNlbnRpbmc7XG5cblx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHR2YXIgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdH07XG5cblx0dGhpcy5zdWJtaXRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggaXNQcmVzZW50aW5nKCkgKSBkZXZpY2Uuc3VibWl0RnJhbWUoKTtcblxuXHR9O1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAndnJkaXNwbGF5cHJlc2VudGNoYW5nZScsIG9uVlJEaXNwbGF5UHJlc2VudENoYW5nZSApO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYlhSTWFuYWdlciggcmVuZGVyZXIgKSB7XG5cblx0dmFyIGdsID0gcmVuZGVyZXIuY29udGV4dDtcblxuXHR2YXIgZGV2aWNlID0gbnVsbDtcblx0dmFyIHNlc3Npb24gPSBudWxsO1xuXG5cdHZhciBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wO1xuXG5cdHZhciBmcmFtZU9mUmVmZXJlbmNlID0gbnVsbDtcblx0dmFyIGZyYW1lT2ZSZWZlcmVuY2VUeXBlID0gJ3N0YWdlJztcblxuXHR2YXIgcG9zZSA9IG51bGw7XG5cblx0dmFyIGNvbnRyb2xsZXJzID0gW107XG5cdHZhciBpbnB1dFNvdXJjZXMgPSBbXTtcblxuXHRmdW5jdGlvbiBpc1ByZXNlbnRpbmcoKSB7XG5cblx0XHRyZXR1cm4gc2Vzc2lvbiAhPT0gbnVsbCAmJiBmcmFtZU9mUmVmZXJlbmNlICE9PSBudWxsO1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBjYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdGNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRjYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHR2YXIgY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0Y2FtZXJhUi52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0dmFyIGNhbWVyYVZSID0gbmV3IEFycmF5Q2FtZXJhKCBbIGNhbWVyYUwsIGNhbWVyYVIgXSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAxICk7XG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoIDIgKTtcblxuXHQvL1xuXG5cdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdHRoaXMuZ2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uICggaWQgKSB7XG5cblx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpZCBdO1xuXG5cdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgR3JvdXAoKTtcblx0XHRcdGNvbnRyb2xsZXIubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdGNvbnRyb2xsZXJzWyBpZCBdID0gY29udHJvbGxlcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb250cm9sbGVyO1xuXG5cdH07XG5cblx0dGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gZGV2aWNlO1xuXG5cdH07XG5cblx0dGhpcy5zZXREZXZpY2UgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgZGV2aWNlID0gdmFsdWU7XG5cdFx0aWYgKCB2YWx1ZSBpbnN0YW5jZW9mIFhSRGV2aWNlICkgZ2wuc2V0Q29tcGF0aWJsZVhSRGV2aWNlKCB2YWx1ZSApO1xuXG5cdH07XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBvblNlc3Npb25FdmVudCggZXZlbnQgKSB7XG5cblx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbnB1dFNvdXJjZXMuaW5kZXhPZiggZXZlbnQuaW5wdXRTb3VyY2UgKSBdO1xuXHRcdGlmICggY29udHJvbGxlciApIGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiBldmVudC50eXBlIH0gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25TZXNzaW9uRW5kKCkge1xuXG5cdFx0cmVuZGVyZXIuc2V0RnJhbWVidWZmZXIoIG51bGwgKTtcblx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdH1cblxuXHR0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5zZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRmcmFtZU9mUmVmZXJlbmNlVHlwZSA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTZXNzaW9uID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHNlc3Npb24gPSB2YWx1ZTtcblxuXHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdlbmQnLCBvblNlc3Npb25FbmQgKTtcblxuXHRcdFx0c2Vzc2lvbi5iYXNlTGF5ZXIgPSBuZXcgWFJXZWJHTExheWVyKCBzZXNzaW9uLCBnbCwgeyBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIH0gKTtcblx0XHRcdHNlc3Npb24ucmVxdWVzdEZyYW1lT2ZSZWZlcmVuY2UoIGZyYW1lT2ZSZWZlcmVuY2VUeXBlICkudGhlbiggZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRmcmFtZU9mUmVmZXJlbmNlID0gdmFsdWU7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0RnJhbWVidWZmZXIoIHNlc3Npb24uYmFzZUxheWVyLmZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uLnNldENvbnRleHQoIHNlc3Npb24gKTtcblx0XHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5nZXRJbnB1dFNvdXJjZXMoKTtcblxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXRzb3VyY2VzY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlucHV0U291cmNlcyA9IHNlc3Npb24uZ2V0SW5wdXRTb3VyY2VzKCk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCBpbnB1dFNvdXJjZXMgKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpIF07XG5cdFx0XHRcdFx0Y29udHJvbGxlci51c2VyRGF0YS5pbnB1dFNvdXJjZSA9IGlucHV0U291cmNlc1sgaSBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHtcblxuXHRcdGlmICggcGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHBhcmVudC5tYXRyaXhXb3JsZCwgY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdGlmICggaXNQcmVzZW50aW5nKCkgKSB7XG5cblx0XHRcdHZhciBwYXJlbnQgPSBjYW1lcmEucGFyZW50O1xuXHRcdFx0dmFyIGNhbWVyYXMgPSBjYW1lcmFWUi5jYW1lcmFzO1xuXG5cdFx0XHR1cGRhdGVDYW1lcmEoIGNhbWVyYVZSLCBwYXJlbnQgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2FtZXJhcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFzWyBpIF0sIHBhcmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHVwZGF0ZSBjYW1lcmEgYW5kIGl0cyBjaGlsZHJlblxuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhVlIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0dmFyIGNoaWxkcmVuID0gY2FtZXJhLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmFWUiwgY2FtZXJhTCwgY2FtZXJhUiApO1xuXG5cdFx0XHRyZXR1cm4gY2FtZXJhVlI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FtZXJhO1xuXG5cdH07XG5cblx0dGhpcy5pc1ByZXNlbnRpbmcgPSBpc1ByZXNlbnRpbmc7XG5cblx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHR2YXIgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lLCBmcmFtZSApIHtcblxuXHRcdHBvc2UgPSBmcmFtZS5nZXREZXZpY2VQb3NlKCBmcmFtZU9mUmVmZXJlbmNlICk7XG5cblx0XHRpZiAoIHBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdHZhciBsYXllciA9IHNlc3Npb24uYmFzZUxheWVyO1xuXHRcdFx0dmFyIHZpZXdzID0gZnJhbWUudmlld3M7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHZpZXdzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgdmlldyA9IHZpZXdzWyBpIF07XG5cdFx0XHRcdHZhciB2aWV3cG9ydCA9IGxheWVyLmdldFZpZXdwb3J0KCB2aWV3ICk7XG5cdFx0XHRcdHZhciB2aWV3TWF0cml4ID0gcG9zZS5nZXRWaWV3TWF0cml4KCB2aWV3ICk7XG5cblx0XHRcdFx0dmFyIGNhbWVyYSA9IGNhbWVyYVZSLmNhbWVyYXNbIGkgXTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5mcm9tQXJyYXkoIHZpZXdNYXRyaXggKS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4ICk7XG5cdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdGNhbWVyYS52aWV3cG9ydC5zZXQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQgKTtcblxuXHRcdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRjYW1lcmFWUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdO1xuXG5cdFx0XHR2YXIgaW5wdXRTb3VyY2UgPSBpbnB1dFNvdXJjZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBpbnB1dFNvdXJjZSApIHtcblxuXHRcdFx0XHR2YXIgaW5wdXRQb3NlID0gZnJhbWUuZ2V0SW5wdXRQb3NlKCBpbnB1dFNvdXJjZSwgZnJhbWVPZlJlZmVyZW5jZSApO1xuXG5cdFx0XHRcdGlmICggaW5wdXRQb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0aWYgKCAndGFyZ2V0UmF5JyBpbiBpbnB1dFBvc2UgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LmVsZW1lbnRzID0gaW5wdXRQb3NlLnRhcmdldFJheS50cmFuc2Zvcm1NYXRyaXg7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAncG9pbnRlck1hdHJpeCcgaW4gaW5wdXRQb3NlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBERVBSRUNBVEVEXG5cblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LmVsZW1lbnRzID0gaW5wdXRQb3NlLnBvaW50ZXJNYXRyaXg7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIucG9zaXRpb24sIGNvbnRyb2xsZXIucm90YXRpb24sIGNvbnRyb2xsZXIuc2NhbGUgKTtcblx0XHRcdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUgKTtcblxuXHR9XG5cblx0dmFyIGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHR9O1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG5cdC8vIERFUFJFQ0FURURcblxuXHR0aGlzLmdldFN0YW5kaW5nTWF0cml4ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViWFJNYW5hZ2VyOiBnZXRTdGFuZGluZ01hdHJpeCgpIGlzIG5vIGxvbmdlciBuZWVkZWQuJyApO1xuXHRcdHJldHVybiBuZXcgVEhSRUUuTWF0cml4NCgpO1xuXG5cdH07XG5cblx0dGhpcy5zdWJtaXRGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBzdXBlcmVnZ2JlcnQgLyBodHRwOi8vd3d3LnBhdWxicnVudC5jby51ay9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyZXIoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyJywgUkVWSVNJT04gKTtcblxuXHRwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTtcblxuXHR2YXIgX2NhbnZhcyA9IHBhcmFtZXRlcnMuY2FudmFzICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmNhbnZhcyA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyApLFxuXHRcdF9jb250ZXh0ID0gcGFyYW1ldGVycy5jb250ZXh0ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmNvbnRleHQgOiBudWxsLFxuXG5cdFx0X2FscGhhID0gcGFyYW1ldGVycy5hbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5hbHBoYSA6IGZhbHNlLFxuXHRcdF9kZXB0aCA9IHBhcmFtZXRlcnMuZGVwdGggIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuZGVwdGggOiB0cnVlLFxuXHRcdF9zdGVuY2lsID0gcGFyYW1ldGVycy5zdGVuY2lsICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnN0ZW5jaWwgOiB0cnVlLFxuXHRcdF9hbnRpYWxpYXMgPSBwYXJhbWV0ZXJzLmFudGlhbGlhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5hbnRpYWxpYXMgOiBmYWxzZSxcblx0XHRfcHJlbXVsdGlwbGllZEFscGhhID0gcGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhIDogdHJ1ZSxcblx0XHRfcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gcGFyYW1ldGVycy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyIDogZmFsc2UsXG5cdFx0X3Bvd2VyUHJlZmVyZW5jZSA9IHBhcmFtZXRlcnMucG93ZXJQcmVmZXJlbmNlICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSA6ICdkZWZhdWx0JztcblxuXHR2YXIgY3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xuXHR2YXIgY3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHQvLyBwdWJsaWMgcHJvcGVydGllc1xuXG5cdHRoaXMuZG9tRWxlbWVudCA9IF9jYW52YXM7XG5cdHRoaXMuY29udGV4dCA9IG51bGw7XG5cblx0Ly8gY2xlYXJpbmdcblxuXHR0aGlzLmF1dG9DbGVhciA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyQ29sb3IgPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhckRlcHRoID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJTdGVuY2lsID0gdHJ1ZTtcblxuXHQvLyBzY2VuZSBncmFwaFxuXG5cdHRoaXMuc29ydE9iamVjdHMgPSB0cnVlO1xuXG5cdC8vIHVzZXItZGVmaW5lZCBjbGlwcGluZ1xuXG5cdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBbXTtcblx0dGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdC8vIHBoeXNpY2FsbHkgYmFzZWQgc2hhZGluZ1xuXG5cdHRoaXMuZ2FtbWFGYWN0b3IgPSAyLjA7XHQvLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0dGhpcy5nYW1tYUlucHV0ID0gZmFsc2U7XG5cdHRoaXMuZ2FtbWFPdXRwdXQgPSBmYWxzZTtcblxuXHQvLyBwaHlzaWNhbCBsaWdodHNcblxuXHR0aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gZmFsc2U7XG5cblx0Ly8gdG9uZSBtYXBwaW5nXG5cblx0dGhpcy50b25lTWFwcGluZyA9IExpbmVhclRvbmVNYXBwaW5nO1xuXHR0aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSAxLjA7XG5cdHRoaXMudG9uZU1hcHBpbmdXaGl0ZVBvaW50ID0gMS4wO1xuXG5cdC8vIG1vcnBoc1xuXG5cdHRoaXMubWF4TW9ycGhUYXJnZXRzID0gODtcblx0dGhpcy5tYXhNb3JwaE5vcm1hbHMgPSA0O1xuXG5cdC8vIGludGVybmFsIHByb3BlcnRpZXNcblxuXHR2YXIgX3RoaXMgPSB0aGlzLFxuXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZSxcblxuXHRcdC8vIGludGVybmFsIHN0YXRlIGNhY2hlXG5cblx0XHRfZnJhbWVidWZmZXIgPSBudWxsLFxuXG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsLFxuXHRcdF9jdXJyZW50RnJhbWVidWZmZXIgPSBudWxsLFxuXHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMSxcblxuXHRcdC8vIGdlb21ldHJ5IGFuZCBwcm9ncmFtIGNhY2hpbmdcblxuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtID0ge1xuXHRcdFx0Z2VvbWV0cnk6IG51bGwsXG5cdFx0XHRwcm9ncmFtOiBudWxsLFxuXHRcdFx0d2lyZWZyYW1lOiBmYWxzZVxuXHRcdH0sXG5cblx0XHRfY3VycmVudENhbWVyYSA9IG51bGwsXG5cdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IG51bGwsXG5cblx0XHRfY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKSxcblx0XHRfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLFxuXHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSBudWxsLFxuXG5cdFx0Ly9cblxuXHRcdF91c2VkVGV4dHVyZVVuaXRzID0gMCxcblxuXHRcdC8vXG5cblx0XHRfd2lkdGggPSBfY2FudmFzLndpZHRoLFxuXHRcdF9oZWlnaHQgPSBfY2FudmFzLmhlaWdodCxcblxuXHRcdF9waXhlbFJhdGlvID0gMSxcblxuXHRcdF92aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCAwLCAwLCBfd2lkdGgsIF9oZWlnaHQgKSxcblx0XHRfc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCBfd2lkdGgsIF9oZWlnaHQgKSxcblx0XHRfc2Npc3NvclRlc3QgPSBmYWxzZSxcblxuXHRcdC8vIGZydXN0dW1cblxuXHRcdF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSxcblxuXHRcdC8vIGNsaXBwaW5nXG5cblx0XHRfY2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZygpLFxuXHRcdF9jbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblxuXHRcdC8vIGNhbWVyYSBtYXRyaWNlcyBjYWNoZVxuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXggPSBuZXcgTWF0cml4NCgpLFxuXG5cdFx0X3ZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdGZ1bmN0aW9uIGdldFRhcmdldFBpeGVsUmF0aW8oKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgPyBfcGl4ZWxSYXRpbyA6IDE7XG5cblx0fVxuXG5cdC8vIGluaXRpYWxpemVcblxuXHR2YXIgX2dsO1xuXG5cdHRyeSB7XG5cblx0XHR2YXIgY29udGV4dEF0dHJpYnV0ZXMgPSB7XG5cdFx0XHRhbHBoYTogX2FscGhhLFxuXHRcdFx0ZGVwdGg6IF9kZXB0aCxcblx0XHRcdHN0ZW5jaWw6IF9zdGVuY2lsLFxuXHRcdFx0YW50aWFsaWFzOiBfYW50aWFsaWFzLFxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBfcHJlbXVsdGlwbGllZEFscGhhLFxuXHRcdFx0cHJlc2VydmVEcmF3aW5nQnVmZmVyOiBfcHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuXHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBfcG93ZXJQcmVmZXJlbmNlXG5cdFx0fTtcblxuXHRcdC8vIGV2ZW50IGxpc3RlbmVycyBtdXN0IGJlIHJlZ2lzdGVyZWQgYmVmb3JlIFdlYkdMIGNvbnRleHQgaXMgY3JlYXRlZCwgc2VlICMxMjc1M1xuXG5cdFx0X2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0bG9zdCcsIG9uQ29udGV4dExvc3QsIGZhbHNlICk7XG5cdFx0X2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApO1xuXG5cdFx0X2dsID0gX2NvbnRleHQgfHwgX2NhbnZhcy5nZXRDb250ZXh0KCAnd2ViZ2wnLCBjb250ZXh0QXR0cmlidXRlcyApIHx8IF9jYW52YXMuZ2V0Q29udGV4dCggJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGNvbnRleHRBdHRyaWJ1dGVzICk7XG5cblx0XHRpZiAoIF9nbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBfY2FudmFzLmdldENvbnRleHQoICd3ZWJnbCcgKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0IHdpdGggeW91ciBzZWxlY3RlZCBhdHRyaWJ1dGVzLicgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gU29tZSBleHBlcmltZW50YWwtd2ViZ2wgaW1wbGVtZW50YXRpb25zIGRvIG5vdCBoYXZlIGdldFNoYWRlclByZWNpc2lvbkZvcm1hdFxuXG5cdFx0aWYgKCBfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9nbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHsgJ3JhbmdlTWluJzogMSwgJ3JhbmdlTWF4JzogMSwgJ3ByZWNpc2lvbic6IDEgfTtcblxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIGVycm9yLm1lc3NhZ2UgKTtcblxuXHR9XG5cblx0dmFyIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgc3RhdGUsIGluZm87XG5cdHZhciBwcm9wZXJ0aWVzLCB0ZXh0dXJlcywgYXR0cmlidXRlcywgZ2VvbWV0cmllcywgb2JqZWN0cztcblx0dmFyIHByb2dyYW1DYWNoZSwgcmVuZGVyTGlzdHMsIHJlbmRlclN0YXRlcztcblxuXHR2YXIgYmFja2dyb3VuZCwgbW9ycGh0YXJnZXRzLCBidWZmZXJSZW5kZXJlciwgaW5kZXhlZEJ1ZmZlclJlbmRlcmVyO1xuXG5cdHZhciB1dGlscztcblxuXHRmdW5jdGlvbiBpbml0R0xDb250ZXh0KCkge1xuXG5cdFx0ZXh0ZW5zaW9ucyA9IG5ldyBXZWJHTEV4dGVuc2lvbnMoIF9nbCApO1xuXG5cdFx0Y2FwYWJpbGl0aWVzID0gbmV3IFdlYkdMQ2FwYWJpbGl0aWVzKCBfZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMgKTtcblxuXHRcdGlmICggISBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgKSB7XG5cblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ09FU19lbGVtZW50X2luZGV4X3VpbnQnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cblx0XHR9XG5cblx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTtcblxuXHRcdHV0aWxzID0gbmV3IFdlYkdMVXRpbHMoIF9nbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cblx0XHRzdGF0ZSA9IG5ldyBXZWJHTFN0YXRlKCBfZ2wsIGV4dGVuc2lvbnMsIHV0aWxzLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKSApO1xuXHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApICk7XG5cblx0XHRpbmZvID0gbmV3IFdlYkdMSW5mbyggX2dsICk7XG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWJHTFByb3BlcnRpZXMoKTtcblx0XHR0ZXh0dXJlcyA9IG5ldyBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICk7XG5cdFx0YXR0cmlidXRlcyA9IG5ldyBXZWJHTEF0dHJpYnV0ZXMoIF9nbCApO1xuXHRcdGdlb21ldHJpZXMgPSBuZXcgV2ViR0xHZW9tZXRyaWVzKCBfZ2wsIGF0dHJpYnV0ZXMsIGluZm8gKTtcblx0XHRvYmplY3RzID0gbmV3IFdlYkdMT2JqZWN0cyggZ2VvbWV0cmllcywgaW5mbyApO1xuXHRcdG1vcnBodGFyZ2V0cyA9IG5ldyBXZWJHTE1vcnBodGFyZ2V0cyggX2dsICk7XG5cdFx0cHJvZ3JhbUNhY2hlID0gbmV3IFdlYkdMUHJvZ3JhbXMoIF90aGlzLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRyZW5kZXJMaXN0cyA9IG5ldyBXZWJHTFJlbmRlckxpc3RzKCk7XG5cdFx0cmVuZGVyU3RhdGVzID0gbmV3IFdlYkdMUmVuZGVyU3RhdGVzKCk7XG5cblx0XHRiYWNrZ3JvdW5kID0gbmV3IFdlYkdMQmFja2dyb3VuZCggX3RoaXMsIHN0YXRlLCBvYmplY3RzLCBfcHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0XHRidWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApO1xuXHRcdGluZGV4ZWRCdWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKTtcblxuXHRcdGluZm8ucHJvZ3JhbXMgPSBwcm9ncmFtQ2FjaGUucHJvZ3JhbXM7XG5cblx0XHRfdGhpcy5jb250ZXh0ID0gX2dsO1xuXHRcdF90aGlzLmNhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcztcblx0XHRfdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblx0XHRfdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcblx0XHRfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzO1xuXHRcdF90aGlzLnN0YXRlID0gc3RhdGU7XG5cdFx0X3RoaXMuaW5mbyA9IGluZm87XG5cblx0fVxuXG5cdGluaXRHTENvbnRleHQoKTtcblxuXHQvLyB2clxuXG5cdHZhciB2ciA9IG51bGw7XG5cblx0aWYgKCB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdHZyID0gKCAneHInIGluIG5hdmlnYXRvciApID8gbmV3IFdlYlhSTWFuYWdlciggX3RoaXMgKSA6IG5ldyBXZWJWUk1hbmFnZXIoIF90aGlzICk7XG5cblx0fVxuXG5cdHRoaXMudnIgPSB2cjtcblxuXHQvLyBzaGFkb3cgbWFwXG5cblx0dmFyIHNoYWRvd01hcCA9IG5ldyBXZWJHTFNoYWRvd01hcCggX3RoaXMsIG9iamVjdHMsIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXG5cdHRoaXMuc2hhZG93TWFwID0gc2hhZG93TWFwO1xuXG5cdC8vIEFQSVxuXG5cdHRoaXMuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfZ2w7XG5cblx0fTtcblxuXHR0aGlzLmdldENvbnRleHRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9nbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xuXG5cdH07XG5cblx0dGhpcy5mb3JjZUNvbnRleHRMb3NzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLmxvc2VDb250ZXh0KCk7XG5cblx0fTtcblxuXHR0aGlzLmZvcmNlQ29udGV4dFJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0aWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ucmVzdG9yZUNvbnRleHQoKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfcGl4ZWxSYXRpbztcblxuXHR9O1xuXG5cdHRoaXMuc2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRfcGl4ZWxSYXRpbyA9IHZhbHVlO1xuXG5cdFx0dGhpcy5zZXRTaXplKCBfd2lkdGgsIF9oZWlnaHQsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IF93aWR0aCxcblx0XHRcdGhlaWdodDogX2hlaWdodFxuXHRcdH07XG5cblx0fTtcblxuXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlICkge1xuXG5cdFx0aWYgKCB2ci5pc1ByZXNlbnRpbmcoKSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ2FuXFwndCBjaGFuZ2Ugc2l6ZSB3aGlsZSBWUiBkZXZpY2UgaXMgcHJlc2VudGluZy4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRfd2lkdGggPSB3aWR0aDtcblx0XHRfaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0X2NhbnZhcy53aWR0aCA9IHdpZHRoICogX3BpeGVsUmF0aW87XG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiBfcGl4ZWxSYXRpbztcblxuXHRcdGlmICggdXBkYXRlU3R5bGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHRfY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHRcdFx0X2NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH07XG5cblx0dGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogX3dpZHRoICogX3BpeGVsUmF0aW8sXG5cdFx0XHRoZWlnaHQ6IF9oZWlnaHQgKiBfcGl4ZWxSYXRpb1xuXHRcdH07XG5cblx0fTtcblxuXHR0aGlzLnNldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvICkge1xuXG5cdFx0X3dpZHRoID0gd2lkdGg7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdF9waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcblxuXHRcdF9jYW52YXMud2lkdGggPSB3aWR0aCAqIHBpeGVsUmF0aW87XG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiBwaXhlbFJhdGlvO1xuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDdXJyZW50Vmlld3BvcnQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRWaWV3cG9ydDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRfdmlld3BvcnQuc2V0KCB4LCBfaGVpZ2h0IC0geSAtIGhlaWdodCwgd2lkdGgsIGhlaWdodCApO1xuXHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRfc2Npc3Nvci5zZXQoIHgsIF9oZWlnaHQgLSB5IC0gaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0c3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7XG5cblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX3NjaXNzb3JUZXN0ID0gYm9vbGVhbiApO1xuXG5cdH07XG5cblx0Ly8gQ2xlYXJpbmdcblxuXHR0aGlzLmdldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckNvbG9yKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQ29sb3IuYXBwbHkoIGJhY2tncm91bmQsIGFyZ3VtZW50cyApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpO1xuXG5cdH07XG5cblx0dGhpcy5zZXRDbGVhckFscGhhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0YmFja2dyb3VuZC5zZXRDbGVhckFscGhhLmFwcGx5KCBiYWNrZ3JvdW5kLCBhcmd1bWVudHMgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdHZhciBiaXRzID0gMDtcblxuXHRcdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCB8fCBjb2xvciApIGJpdHMgfD0gMTYzODQ7XG5cdFx0aWYgKCBkZXB0aCA9PT0gdW5kZWZpbmVkIHx8IGRlcHRoICkgYml0cyB8PSAyNTY7XG5cdFx0aWYgKCBzdGVuY2lsID09PSB1bmRlZmluZWQgfHwgc3RlbmNpbCApIGJpdHMgfD0gMTAyNDtcblxuXHRcdF9nbC5jbGVhciggYml0cyApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggdHJ1ZSwgZmFsc2UsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyRGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgdHJ1ZSwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJTdGVuY2lsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggZmFsc2UsIGZhbHNlLCB0cnVlICk7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblxuXHRcdHJlbmRlckxpc3RzLmRpc3Bvc2UoKTtcblx0XHRyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdHByb3BlcnRpZXMuZGlzcG9zZSgpO1xuXHRcdG9iamVjdHMuZGlzcG9zZSgpO1xuXG5cdFx0dnIuZGlzcG9zZSgpO1xuXG5cdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHR9O1xuXG5cdC8vIEV2ZW50c1xuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dExvc3QoIGV2ZW50ICkge1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBMb3N0LicgKTtcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gdHJ1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Db250ZXh0UmVzdG9yZSggLyogZXZlbnQgKi8gKSB7XG5cblx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgUmVzdG9yZWQuJyApO1xuXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZTtcblxuXHRcdGluaXRHTENvbnRleHQoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0bWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvLyBCdWZmZXIgZGVhbGxvY2F0aW9uXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApIHtcblxuXHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UoIG1hdGVyaWFsICk7XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblxuXHRmdW5jdGlvbiByZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKCBtYXRlcmlhbCApIHtcblxuXHRcdHZhciBwcm9ncmFtSW5mbyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLnByb2dyYW07XG5cblx0XHRtYXRlcmlhbC5wcm9ncmFtID0gdW5kZWZpbmVkO1xuXG5cdFx0aWYgKCBwcm9ncmFtSW5mbyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0oIHByb2dyYW1JbmZvICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIEJ1ZmZlciByZW5kZXJpbmdcblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3RJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSApIHtcblxuXHRcdG9iamVjdC5yZW5kZXIoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSApO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHR0aGlzLnJlbmRlckJ1ZmZlckltbWVkaWF0ZSA9IGZ1bmN0aW9uICggb2JqZWN0LCBwcm9ncmFtICkge1xuXG5cdFx0c3RhdGUuaW5pdEF0dHJpYnV0ZXMoKTtcblxuXHRcdHZhciBidWZmZXJzID0gcHJvcGVydGllcy5nZXQoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBvYmplY3QuaGFzUG9zaXRpb25zICYmICEgYnVmZmVycy5wb3NpdGlvbiApIGJ1ZmZlcnMucG9zaXRpb24gPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzTm9ybWFscyAmJiAhIGJ1ZmZlcnMubm9ybWFsICkgYnVmZmVycy5ub3JtYWwgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzVXZzICYmICEgYnVmZmVycy51diApIGJ1ZmZlcnMudXYgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzQ29sb3JzICYmICEgYnVmZmVycy5jb2xvciApIGJ1ZmZlcnMuY29sb3IgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGlmICggb2JqZWN0Lmhhc1Bvc2l0aW9ucyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLnBvc2l0aW9uICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5wb3NpdGlvbkFycmF5LCAzNTA0OCApO1xuXG5cdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMucG9zaXRpb24sIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5oYXNOb3JtYWxzICkge1xuXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlcnMubm9ybWFsICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5ub3JtYWxBcnJheSwgMzUwNDggKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy5ub3JtYWwgKTtcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy5ub3JtYWwsIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5oYXNVdnMgKSB7XG5cblx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy51diApO1xuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3QudXZBcnJheSwgMzUwNDggKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy51diApO1xuXHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGVzLnV2LCAyLCA1MTI2LCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzQ29sb3JzICkge1xuXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlcnMuY29sb3IgKTtcblx0XHRcdF9nbC5idWZmZXJEYXRhKCAzNDk2Miwgb2JqZWN0LmNvbG9yQXJyYXksIDM1MDQ4ICk7XG5cblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IgKTtcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy5jb2xvciwgMywgNTEyNiwgZmFsc2UsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7XG5cblx0XHRfZ2wuZHJhd0FycmF5cyggNCwgMCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHRvYmplY3QuY291bnQgPSAwO1xuXG5cdH07XG5cblx0dGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QgPSBmdW5jdGlvbiAoIGNhbWVyYSwgZm9nLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKSB7XG5cblx0XHR2YXIgZnJvbnRGYWNlQ1cgPSAoIG9iamVjdC5pc01lc2ggJiYgb2JqZWN0Lm5vcm1hbE1hdHJpeC5kZXRlcm1pbmFudCgpIDwgMCApO1xuXG5cdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApO1xuXG5cdFx0dmFyIHByb2dyYW0gPSBzZXRQcm9ncmFtKCBjYW1lcmEsIGZvZywgbWF0ZXJpYWwsIG9iamVjdCApO1xuXG5cdFx0dmFyIHVwZGF0ZUJ1ZmZlcnMgPSBmYWxzZTtcblxuXHRcdGlmICggX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgIT09IGdlb21ldHJ5LmlkIHx8XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtICE9PSBwcm9ncmFtLmlkIHx8XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgIT09ICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgKSB7XG5cblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gZ2VvbWV0cnkuaWQ7XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gcHJvZ3JhbS5pZDtcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZTtcblx0XHRcdHVwZGF0ZUJ1ZmZlcnMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzICkge1xuXG5cdFx0XHRtb3JwaHRhcmdldHMudXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSApO1xuXG5cdFx0XHR1cGRhdGVCdWZmZXJzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciByYW5nZUZhY3RvciA9IDE7XG5cblx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aW5kZXggPSBnZW9tZXRyaWVzLmdldFdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKTtcblx0XHRcdHJhbmdlRmFjdG9yID0gMjtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGU7XG5cdFx0dmFyIHJlbmRlcmVyID0gYnVmZmVyUmVuZGVyZXI7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggaW5kZXggKTtcblxuXHRcdFx0cmVuZGVyZXIgPSBpbmRleGVkQnVmZmVyUmVuZGVyZXI7XG5cdFx0XHRyZW5kZXJlci5zZXRJbmRleCggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZUJ1ZmZlcnMgKSB7XG5cblx0XHRcdHNldHVwVmVydGV4QXR0cmlidXRlcyggbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5ICk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYzLCBhdHRyaWJ1dGUuYnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgZGF0YUNvdW50ID0gSW5maW5pdHk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRkYXRhQ291bnQgPSBpbmRleC5jb3VudDtcblxuXHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGFDb3VudCA9IHBvc2l0aW9uLmNvdW50O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHJhbmdlU3RhcnQgPSBnZW9tZXRyeS5kcmF3UmFuZ2Uuc3RhcnQgKiByYW5nZUZhY3Rvcjtcblx0XHR2YXIgcmFuZ2VDb3VudCA9IGdlb21ldHJ5LmRyYXdSYW5nZS5jb3VudCAqIHJhbmdlRmFjdG9yO1xuXG5cdFx0dmFyIGdyb3VwU3RhcnQgPSBncm91cCAhPT0gbnVsbCA/IGdyb3VwLnN0YXJ0ICogcmFuZ2VGYWN0b3IgOiAwO1xuXHRcdHZhciBncm91cENvdW50ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5jb3VudCAqIHJhbmdlRmFjdG9yIDogSW5maW5pdHk7XG5cblx0XHR2YXIgZHJhd1N0YXJ0ID0gTWF0aC5tYXgoIHJhbmdlU3RhcnQsIGdyb3VwU3RhcnQgKTtcblx0XHR2YXIgZHJhd0VuZCA9IE1hdGgubWluKCBkYXRhQ291bnQsIHJhbmdlU3RhcnQgKyByYW5nZUNvdW50LCBncm91cFN0YXJ0ICsgZ3JvdXBDb3VudCApIC0gMTtcblxuXHRcdHZhciBkcmF3Q291bnQgPSBNYXRoLm1heCggMCwgZHJhd0VuZCAtIGRyYXdTdGFydCArIDEgKTtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggb2JqZWN0LmlzTWVzaCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0c3RhdGUuc2V0TGluZVdpZHRoKCBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTtcblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN3aXRjaCAoIG9iamVjdC5kcmF3TW9kZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVzRHJhd01vZGU6XG5cdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCA0ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVTdHJpcERyYXdNb2RlOlxuXHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggNSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFRyaWFuZ2xlRmFuRHJhd01vZGU6XG5cdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCA2ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGluZSApIHtcblxuXHRcdFx0dmFyIGxpbmVXaWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDtcblxuXHRcdFx0aWYgKCBsaW5lV2lkdGggPT09IHVuZGVmaW5lZCApIGxpbmVXaWR0aCA9IDE7IC8vIE5vdCB1c2luZyBMaW5lKk1hdGVyaWFsXG5cblx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbGluZVdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzTGluZVNlZ21lbnRzICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDEgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAwICk7XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA+IDAgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgZHJhd1N0YXJ0LCBkcmF3Q291bnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyZXIucmVuZGVyKCBkcmF3U3RhcnQsIGRyYXdDb3VudCApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0ZnVuY3Rpb24gc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKSB7XG5cblx0XHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgJiAhIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICkgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIuc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuaW5pdEF0dHJpYnV0ZXMoKTtcblxuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHR2YXIgbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzID0gbWF0ZXJpYWwuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcztcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZSA9IHByb2dyYW1BdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZSA+PSAwICkge1xuXG5cdFx0XHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHZhciBub3JtYWxpemVkID0gZ2VvbWV0cnlBdHRyaWJ1dGUubm9ybWFsaXplZDtcblx0XHRcdFx0XHR2YXIgc2l6ZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0Ly8gVE9ETyBBdHRyaWJ1dGUgbWF5IG5vdCBiZSBhdmFpbGFibGUgb24gY29udGV4dCByZXN0b3JlXG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0XHR2YXIgYnVmZmVyID0gYXR0cmlidXRlLmJ1ZmZlcjtcblx0XHRcdFx0XHR2YXIgdHlwZSA9IGF0dHJpYnV0ZS50eXBlO1xuXHRcdFx0XHRcdHZhciBieXRlc1BlckVsZW1lbnQgPSBhdHRyaWJ1dGUuYnl0ZXNQZXJFbGVtZW50O1xuXG5cdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgZGF0YSA9IGdlb21ldHJ5QXR0cmlidXRlLmRhdGE7XG5cdFx0XHRcdFx0XHR2YXIgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG5cdFx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gZ2VvbWV0cnlBdHRyaWJ1dGUub2Zmc2V0O1xuXG5cdFx0XHRcdFx0XHRpZiAoIGRhdGEgJiYgZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUsIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUgKiBieXRlc1BlckVsZW1lbnQsIG9mZnNldCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZSwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgMCwgMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjJmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjNmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjRmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWIxZnYoIHByb2dyYW1BdHRyaWJ1dGUsIHZhbHVlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7XG5cblx0fVxuXG5cdC8vIENvbXBpbGVcblxuXHR0aGlzLmNvbXBpbGUgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoKTtcblxuXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTtcblxuXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QubWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmplY3QubWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG9iamVjdC5tYXRlcmlhbC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGluaXRNYXRlcmlhbCggb2JqZWN0Lm1hdGVyaWFsWyBpIF0sIHNjZW5lLmZvZywgb2JqZWN0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGluaXRNYXRlcmlhbCggb2JqZWN0Lm1hdGVyaWFsLCBzY2VuZS5mb2csIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHR2YXIgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lICkge1xuXG5cdFx0aWYgKCB2ci5pc1ByZXNlbnRpbmcoKSApIHJldHVybjtcblx0XHRpZiAoIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayApIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayggdGltZSApO1xuXG5cdH1cblxuXHR2YXIgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0aWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyApIGFuaW1hdGlvbi5zZXRDb250ZXh0KCB3aW5kb3cgKTtcblxuXHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0dnIuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHRcdGFuaW1hdGlvbi5zdGFydCgpO1xuXG5cdH07XG5cblx0Ly8gUmVuZGVyaW5nXG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEsIHJlbmRlclRhcmdldCwgZm9yY2VDbGVhciApIHtcblxuXHRcdGlmICggISAoIGNhbWVyYSAmJiBjYW1lcmEuaXNDYW1lcmEgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyOiBjYW1lcmEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkNhbWVyYS4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIF9pc0NvbnRleHRMb3N0ICkgcmV0dXJuO1xuXG5cdFx0Ly8gcmVzZXQgY2FjaGluZyBmb3IgdGhpcyBmcmFtZVxuXG5cdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLnByb2dyYW0gPSBudWxsO1xuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMTtcblx0XHRfY3VycmVudENhbWVyYSA9IG51bGw7XG5cblx0XHQvLyB1cGRhdGUgc2NlbmUgZ3JhcGhcblxuXHRcdGlmICggc2NlbmUuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHQvLyB1cGRhdGUgY2FtZXJhIG1hdHJpY2VzIGFuZCBmcnVzdHVtXG5cblx0XHRpZiAoIGNhbWVyYS5wYXJlbnQgPT09IG51bGwgKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGlmICggdnIuZW5hYmxlZCApIHtcblxuXHRcdFx0Y2FtZXJhID0gdnIuZ2V0Q2FtZXJhKCBjYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoKTtcblxuXHRcdHNjZW5lLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdF9mcnVzdHVtLnNldEZyb21NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSB0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXHRcdF9jbGlwcGluZ0VuYWJsZWQgPSBfY2xpcHBpbmcuaW5pdCggdGhpcy5jbGlwcGluZ1BsYW5lcywgX2xvY2FsQ2xpcHBpbmdFbmFibGVkLCBjYW1lcmEgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJMaXN0ID0gcmVuZGVyTGlzdHMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlckxpc3QuaW5pdCgpO1xuXG5cdFx0cHJvamVjdE9iamVjdCggc2NlbmUsIGNhbWVyYSwgX3RoaXMuc29ydE9iamVjdHMgKTtcblxuXHRcdGlmICggX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnNvcnQoKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgKSBfY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7XG5cblx0XHR2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdHNoYWRvd01hcC5yZW5kZXIoIHNoYWRvd3NBcnJheSwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTtcblxuXHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCApIF9jbGlwcGluZy5lbmRTaGFkb3dzKCk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ICkgdGhpcy5pbmZvLnJlc2V0KCk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0Ly9cblxuXHRcdGJhY2tncm91bmQucmVuZGVyKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgZm9yY2VDbGVhciApO1xuXG5cdFx0Ly8gcmVuZGVyIHNjZW5lXG5cblx0XHR2YXIgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTtcblx0XHR2YXIgdHJhbnNwYXJlbnRPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3QudHJhbnNwYXJlbnQ7XG5cblx0XHRpZiAoIHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHZhciBvdmVycmlkZU1hdGVyaWFsID0gc2NlbmUub3ZlcnJpZGVNYXRlcmlhbDtcblxuXHRcdFx0aWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIG9wYXF1ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgKTtcblx0XHRcdGlmICggdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb3BhcXVlIHBhc3MgKGZyb250LXRvLWJhY2sgb3JkZXIpXG5cblx0XHRcdGlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdC8vIHRyYW5zcGFyZW50IHBhc3MgKGJhY2stdG8tZnJvbnQgb3JkZXIpXG5cblx0XHRcdGlmICggdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR2VuZXJhdGUgbWlwbWFwIGlmIHdlJ3JlIHVzaW5nIGFueSBraW5kIG9mIG1pcG1hcCBmaWx0ZXJpbmdcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHR0ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXJcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApO1xuXG5cdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTtcblxuXHRcdHNjZW5lLm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRpZiAoIHZyLmVuYWJsZWQgKSB7XG5cblx0XHRcdHZyLnN1Ym1pdEZyYW1lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBfZ2wuZmluaXNoKCk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHByb2plY3RPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dmFyIHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIG51bGwsIG9iamVjdC5tYXRlcmlhbCwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdFx0XHRvYmplY3Quc2tlbGV0b24udXBkYXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHR2YXIgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBncm91cE1hdGVyaWFsICYmIGdyb3VwTWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIGdyb3VwTWF0ZXJpYWwsIF92ZWN0b3IzLnosIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cHJvamVjdE9iamVjdCggY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBzb3J0T2JqZWN0cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3RzKCByZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgcmVuZGVySXRlbSA9IHJlbmRlckxpc3RbIGkgXTtcblxuXHRcdFx0dmFyIG9iamVjdCA9IHJlbmRlckl0ZW0ub2JqZWN0O1xuXHRcdFx0dmFyIGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRlcmlhbCA9IG92ZXJyaWRlTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCA/IHJlbmRlckl0ZW0ubWF0ZXJpYWwgOiBvdmVycmlkZU1hdGVyaWFsO1xuXHRcdFx0dmFyIGdyb3VwID0gcmVuZGVySXRlbS5ncm91cDtcblxuXHRcdFx0aWYgKCBjYW1lcmEuaXNBcnJheUNhbWVyYSApIHtcblxuXHRcdFx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0XHRcdHZhciBjYW1lcmFzID0gY2FtZXJhLmNhbWVyYXM7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGNhbWVyYXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2FtZXJhMiA9IGNhbWVyYXNbIGogXTtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEyLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoICd2aWV3cG9ydCcgaW4gY2FtZXJhMiApIHsgLy8gWFJcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBjYW1lcmEyLnZpZXdwb3J0ICkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgYm91bmRzID0gY2FtZXJhMi5ib3VuZHM7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHggPSBib3VuZHMueCAqIF93aWR0aDtcblx0XHRcdFx0XHRcdFx0dmFyIHkgPSBib3VuZHMueSAqIF9oZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdHZhciB3aWR0aCA9IGJvdW5kcy56ICogX3dpZHRoO1xuXHRcdFx0XHRcdFx0XHR2YXIgaGVpZ2h0ID0gYm91bmRzLncgKiBfaGVpZ2h0O1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEyICk7XG5cblx0XHRcdFx0XHRcdHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhMiwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gbnVsbDtcblxuXHRcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuXG5cdFx0b2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBfY3VycmVudEFycmF5Q2FtZXJhIHx8IGNhbWVyYSApO1xuXG5cdFx0b2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0XHRvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0aWYgKCBvYmplY3QuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgKSB7XG5cblx0XHRcdHN0YXRlLnNldE1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdFx0XHR2YXIgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUuZm9nLCBtYXRlcmlhbCwgb2JqZWN0ICk7XG5cblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gbnVsbDtcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLnByb2dyYW0gPSBudWxsO1xuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lID0gZmFsc2U7XG5cblx0XHRcdHJlbmRlck9iamVjdEltbWVkaWF0ZSggb2JqZWN0LCBwcm9ncmFtICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUuZm9nLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC5vbkFmdGVyUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBfY3VycmVudEFycmF5Q2FtZXJhIHx8IGNhbWVyYSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmb2csIG9iamVjdCApIHtcblxuXHRcdHZhciBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXHRcdHZhciBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0dmFyIGxpZ2h0c0hhc2ggPSBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzSGFzaDtcblx0XHR2YXIgbGlnaHRzU3RhdGVIYXNoID0gbGlnaHRzLnN0YXRlLmhhc2g7XG5cblx0XHR2YXIgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKFxuXHRcdFx0bWF0ZXJpYWwsIGxpZ2h0cy5zdGF0ZSwgc2hhZG93c0FycmF5LCBmb2csIF9jbGlwcGluZy5udW1QbGFuZXMsIF9jbGlwcGluZy5udW1JbnRlcnNlY3Rpb24sIG9iamVjdCApO1xuXG5cdFx0dmFyIGNvZGUgPSBwcm9ncmFtQ2FjaGUuZ2V0UHJvZ3JhbUNvZGUoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHR2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtO1xuXHRcdHZhciBwcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdGlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBuZXcgbWF0ZXJpYWxcblx0XHRcdG1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHByb2dyYW0uY29kZSAhPT0gY29kZSApIHtcblxuXHRcdFx0Ly8gY2hhbmdlZCBnbHNsIG9yIHBhcmFtZXRlcnNcblx0XHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UoIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBsaWdodHNIYXNoLnN0YXRlSUQgIT09IGxpZ2h0c1N0YXRlSGFzaC5zdGF0ZUlEIHx8XG5cdFx0XHRsaWdodHNIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2guZGlyZWN0aW9uYWxMZW5ndGggfHxcblx0XHRcdGxpZ2h0c0hhc2gucG9pbnRMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5wb2ludExlbmd0aCB8fFxuXHRcdFx0bGlnaHRzSGFzaC5zcG90TGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2guc3BvdExlbmd0aCB8fFxuXHRcdFx0bGlnaHRzSGFzaC5yZWN0QXJlYUxlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLnJlY3RBcmVhTGVuZ3RoIHx8XG5cdFx0XHRsaWdodHNIYXNoLmhlbWlMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5oZW1pTGVuZ3RoIHx8XG5cdFx0XHRsaWdodHNIYXNoLnNoYWRvd3NMZW5ndGggIT09IGxpZ2h0c1N0YXRlSGFzaC5zaGFkb3dzTGVuZ3RoICkge1xuXG5cdFx0XHRsaWdodHNIYXNoLnN0YXRlSUQgPSBsaWdodHNTdGF0ZUhhc2guc3RhdGVJRDtcblx0XHRcdGxpZ2h0c0hhc2guZGlyZWN0aW9uYWxMZW5ndGggPSBsaWdodHNTdGF0ZUhhc2guZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRsaWdodHNIYXNoLnBvaW50TGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnBvaW50TGVuZ3RoO1xuXHRcdFx0bGlnaHRzSGFzaC5zcG90TGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnNwb3RMZW5ndGg7XG5cdFx0XHRsaWdodHNIYXNoLnJlY3RBcmVhTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnJlY3RBcmVhTGVuZ3RoO1xuXHRcdFx0bGlnaHRzSGFzaC5oZW1pTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLmhlbWlMZW5ndGg7XG5cdFx0XHRsaWdodHNIYXNoLnNoYWRvd3NMZW5ndGggPSBsaWdodHNTdGF0ZUhhc2guc2hhZG93c0xlbmd0aDtcblxuXHRcdFx0cHJvZ3JhbUNoYW5nZSA9IGZhbHNlO1xuXG5cdFx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkZXJJRCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBzYW1lIGdsc2wgYW5kIHVuaWZvcm0gbGlzdFxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb25seSByZWJ1aWxkIHVuaWZvcm0gbGlzdFxuXHRcdFx0cHJvZ3JhbUNoYW5nZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9ncmFtQ2hhbmdlICkge1xuXG5cdFx0XHRpZiAoIHBhcmFtZXRlcnMuc2hhZGVySUQgKSB7XG5cblx0XHRcdFx0dmFyIHNoYWRlciA9IFNoYWRlckxpYlsgcGFyYW1ldGVycy5zaGFkZXJJRCBdO1xuXG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIgPSB7XG5cdFx0XHRcdFx0bmFtZTogbWF0ZXJpYWwudHlwZSxcblx0XHRcdFx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICksXG5cdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBzaGFkZXIuZnJhZ21lbnRTaGFkZXJcblx0XHRcdFx0fTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1hdGVyaWFsLnR5cGUsXG5cdFx0XHRcdFx0dW5pZm9ybXM6IG1hdGVyaWFsLnVuaWZvcm1zLFxuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogbWF0ZXJpYWwudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBtYXRlcmlhbC5mcmFnbWVudFNoYWRlclxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsLm9uQmVmb3JlQ29tcGlsZSggbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciwgX3RoaXMgKTtcblxuXHRcdFx0Ly8gQ29tcHV0aW5nIGNvZGUgYWdhaW4gYXMgb25CZWZvcmVDb21waWxlIG1heSBoYXZlIGNoYW5nZWQgdGhlIHNoYWRlcnNcblx0XHRcdGNvZGUgPSBwcm9ncmFtQ2FjaGUuZ2V0UHJvZ3JhbUNvZGUoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdHByb2dyYW0gPSBwcm9ncmFtQ2FjaGUuYWNxdWlyZVByb2dyYW0oIG1hdGVyaWFsLCBtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyLCBwYXJhbWV0ZXJzLCBjb2RlICk7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtID0gcHJvZ3JhbTtcblx0XHRcdG1hdGVyaWFsLnByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgX3RoaXMubWF4TW9ycGhUYXJnZXRzOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZXNbICdtb3JwaFRhcmdldCcgKyBpIF0gPj0gMCApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRtYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMgPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBfdGhpcy5tYXhNb3JwaE5vcm1hbHM7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlc1sgJ21vcnBoTm9ybWFsJyArIGkgXSA+PSAwICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIHVuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlci51bmlmb3JtcztcblxuXHRcdGlmICggISBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmXG5cdFx0XHQhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgPSBfY2xpcHBpbmcubnVtUGxhbmVzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUludGVyc2VjdGlvbiA9IF9jbGlwcGluZy5udW1JbnRlcnNlY3Rpb247XG5cdFx0XHR1bmlmb3Jtcy5jbGlwcGluZ1BsYW5lcyA9IF9jbGlwcGluZy51bmlmb3JtO1xuXG5cdFx0fVxuXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyA9IGZvZztcblxuXHRcdC8vIHN0b3JlIHRoZSBsaWdodCBzZXR1cCBpdCB3YXMgY3JlYXRlZCBmb3Jcblx0XHRpZiAoIGxpZ2h0c0hhc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c0hhc2ggPSBsaWdodHNIYXNoID0ge307XG5cblx0XHR9XG5cblx0XHRsaWdodHNIYXNoLnN0YXRlSUQgPSBsaWdodHNTdGF0ZUhhc2guc3RhdGVJRDtcblx0XHRsaWdodHNIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoO1xuXHRcdGxpZ2h0c0hhc2gucG9pbnRMZW5ndGggPSBsaWdodHNTdGF0ZUhhc2gucG9pbnRMZW5ndGg7XG5cdFx0bGlnaHRzSGFzaC5zcG90TGVuZ3RoID0gbGlnaHRzU3RhdGVIYXNoLnNwb3RMZW5ndGg7XG5cdFx0bGlnaHRzSGFzaC5yZWN0QXJlYUxlbmd0aCA9IGxpZ2h0c1N0YXRlSGFzaC5yZWN0QXJlYUxlbmd0aDtcblx0XHRsaWdodHNIYXNoLmhlbWlMZW5ndGggPSBsaWdodHNTdGF0ZUhhc2guaGVtaUxlbmd0aDtcblx0XHRsaWdodHNIYXNoLnNoYWRvd3NMZW5ndGggPSBsaWdodHNTdGF0ZUhhc2guc2hhZG93c0xlbmd0aDtcblxuXHRcdGlmICggbWF0ZXJpYWwubGlnaHRzICkge1xuXG5cdFx0XHQvLyB3aXJlIHVwIHRoZSBtYXRlcmlhbCB0byB0aGlzIHJlbmRlcmVyJ3MgbGlnaHRpbmcgc3RhdGVcblxuXHRcdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IudmFsdWUgPSBsaWdodHMuc3RhdGUuYW1iaWVudDtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsO1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90O1xuXHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWE7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludDtcblx0XHRcdHVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuaGVtaTtcblxuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeDtcblx0XHRcdHVuaWZvcm1zLnNwb3RTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLnNwb3RTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvd01hdHJpeDtcblx0XHRcdHVuaWZvcm1zLnBvaW50U2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXRyaXg7XG5cdFx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogYWRkIGFyZWEgbGlnaHRzIHNoYWRvdyBpbmZvIHRvIHVuaWZvcm1zXG5cblx0XHR9XG5cblx0XHR2YXIgcHJvZ1VuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0uZ2V0VW5pZm9ybXMoKSxcblx0XHRcdHVuaWZvcm1zTGlzdCA9XG5cdFx0XHRcdFdlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlKCBwcm9nVW5pZm9ybXMuc2VxLCB1bmlmb3JtcyApO1xuXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IHVuaWZvcm1zTGlzdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UHJvZ3JhbSggY2FtZXJhLCBmb2csIG1hdGVyaWFsLCBvYmplY3QgKSB7XG5cblx0XHRfdXNlZFRleHR1cmVVbml0cyA9IDA7XG5cblx0XHR2YXIgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cdFx0dmFyIGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7XG5cblx0XHR2YXIgbGlnaHRzSGFzaCA9IG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNIYXNoO1xuXHRcdHZhciBsaWdodHNTdGF0ZUhhc2ggPSBsaWdodHMuc3RhdGUuaGFzaDtcblxuXHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCApIHtcblxuXHRcdFx0aWYgKCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgfHwgY2FtZXJhICE9PSBfY3VycmVudENhbWVyYSApIHtcblxuXHRcdFx0XHR2YXIgdXNlQ2FjaGUgPVxuXHRcdFx0XHRcdGNhbWVyYSA9PT0gX2N1cnJlbnRDYW1lcmEgJiZcblx0XHRcdFx0XHRtYXRlcmlhbC5pZCA9PT0gX2N1cnJlbnRNYXRlcmlhbElkO1xuXG5cdFx0XHRcdC8vIHdlIG1pZ2h0IHdhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggc29tZSBDbGlwcGluZ0dyb3VwXG5cdFx0XHRcdC8vIG9iamVjdCBpbnN0ZWFkIG9mIHRoZSBtYXRlcmlhbCwgb25jZSBpdCBiZWNvbWVzIGZlYXNpYmxlXG5cdFx0XHRcdC8vICgjODQ2NSwgIzgzNzkpXG5cdFx0XHRcdF9jbGlwcGluZy5zZXRTdGF0ZShcblx0XHRcdFx0XHRtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcywgbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbiwgbWF0ZXJpYWwuY2xpcFNoYWRvd3MsXG5cdFx0XHRcdFx0Y2FtZXJhLCBtYXRlcmlhbFByb3BlcnRpZXMsIHVzZUNhY2hlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubmVlZHNVcGRhdGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5mb2cgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyAhPT0gZm9nICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubGlnaHRzICYmICggbGlnaHRzSGFzaC5zdGF0ZUlEICE9PSBsaWdodHNTdGF0ZUhhc2guc3RhdGVJRCB8fFxuXHRcdFx0XHRsaWdodHNIYXNoLmRpcmVjdGlvbmFsTGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2guZGlyZWN0aW9uYWxMZW5ndGggfHxcblx0XHRcdFx0bGlnaHRzSGFzaC5wb2ludExlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLnBvaW50TGVuZ3RoIHx8XG5cdFx0XHRcdGxpZ2h0c0hhc2guc3BvdExlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLnNwb3RMZW5ndGggfHxcblx0XHRcdFx0bGlnaHRzSGFzaC5yZWN0QXJlYUxlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLnJlY3RBcmVhTGVuZ3RoIHx8XG5cdFx0XHRcdGxpZ2h0c0hhc2guaGVtaUxlbmd0aCAhPT0gbGlnaHRzU3RhdGVIYXNoLmhlbWlMZW5ndGggfHxcblx0XHRcdFx0bGlnaHRzSGFzaC5zaGFkb3dzTGVuZ3RoICE9PSBsaWdodHNTdGF0ZUhhc2guc2hhZG93c0xlbmd0aCApICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0KCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IF9jbGlwcGluZy5udW1QbGFuZXMgfHxcblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUludGVyc2VjdGlvbiAhPT0gX2NsaXBwaW5nLm51bUludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5uZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0aW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgZm9nLCBvYmplY3QgKTtcblx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgcmVmcmVzaFByb2dyYW0gPSBmYWxzZTtcblx0XHR2YXIgcmVmcmVzaE1hdGVyaWFsID0gZmFsc2U7XG5cdFx0dmFyIHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcblxuXHRcdHZhciBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0sXG5cdFx0XHRwX3VuaWZvcm1zID0gcHJvZ3JhbS5nZXRVbmlmb3JtcygpLFxuXHRcdFx0bV91bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIudW5pZm9ybXM7XG5cblx0XHRpZiAoIHN0YXRlLnVzZVByb2dyYW0oIHByb2dyYW0ucHJvZ3JhbSApICkge1xuXG5cdFx0XHRyZWZyZXNoUHJvZ3JhbSA9IHRydWU7XG5cdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1xuXHRcdFx0cmVmcmVzaExpZ2h0cyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlkICE9PSBfY3VycmVudE1hdGVyaWFsSWQgKSB7XG5cblx0XHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IG1hdGVyaWFsLmlkO1xuXG5cdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZWZyZXNoUHJvZ3JhbSB8fCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkge1xuXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdwcm9qZWN0aW9uTWF0cml4JywgY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdsb2dEZXB0aEJ1ZkZDJyxcblx0XHRcdFx0XHQyLjAgLyAoIE1hdGgubG9nKCBjYW1lcmEuZmFyICsgMS4wICkgLyBNYXRoLkxOMiApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBfY3VycmVudENhbWVyYSAhPT0gY2FtZXJhICkge1xuXG5cdFx0XHRcdF9jdXJyZW50Q2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0XHRcdC8vIGxpZ2h0aW5nIHVuaWZvcm1zIGRlcGVuZCBvbiB0aGUgY2FtZXJhIHNvIGVuZm9yY2UgYW4gdXBkYXRlXG5cdFx0XHRcdC8vIG5vdywgaW4gY2FzZSB0aGlzIG1hdGVyaWFsIHN1cHBvcnRzIGxpZ2h0cyAtIG9yIGxhdGVyLCB3aGVuXG5cdFx0XHRcdC8vIHRoZSBuZXh0IG1hdGVyaWFsIHRoYXQgZG9lcyBnZXRzIGFjdGl2YXRlZDpcblxuXHRcdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1x0XHQvLyBzZXQgdG8gdHJ1ZSBvbiBtYXRlcmlhbCBjaGFuZ2Vcblx0XHRcdFx0cmVmcmVzaExpZ2h0cyA9IHRydWU7XHRcdC8vIHJlbWFpbnMgc2V0IHVudGlsIHVwZGF0ZSBkb25lXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbG9hZCBtYXRlcmlhbCBzcGVjaWZpYyB1bmlmb3Jtc1xuXHRcdFx0Ly8gKHNoYWRlciBtYXRlcmlhbCBhbHNvIGdldHMgdGhlbSBmb3IgdGhlIHNha2Ugb2YgZ2VuZXJpY2l0eSlcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdFx0dmFyIHVDYW1Qb3MgPSBwX3VuaWZvcm1zLm1hcC5jYW1lcmFQb3NpdGlvbjtcblxuXHRcdFx0XHRpZiAoIHVDYW1Qb3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHVDYW1Qb3Muc2V0VmFsdWUoIF9nbCxcblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hCYXNpY01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5za2lubmluZyApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBza2lubmluZyB1bmlmb3JtcyBtdXN0IGJlIHNldCBldmVuIGlmIG1hdGVyaWFsIGRpZG4ndCBjaGFuZ2Vcblx0XHQvLyBhdXRvLXNldHRpbmcgb2YgdGV4dHVyZSB1bml0IGZvciBib25lIHRleHR1cmUgbXVzdCBnbyBiZWZvcmUgb3RoZXIgdGV4dHVyZXNcblx0XHQvLyBub3Qgc3VyZSB3aHksIGJ1dCBvdGhlcndpc2Ugd2VpcmQgdGhpbmdzIGhhcHBlblxuXG5cdFx0aWYgKCBtYXRlcmlhbC5za2lubmluZyApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4JyApO1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4SW52ZXJzZScgKTtcblxuXHRcdFx0dmFyIHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXG5cdFx0XHRpZiAoIHNrZWxldG9uICkge1xuXG5cdFx0XHRcdHZhciBib25lcyA9IHNrZWxldG9uLmJvbmVzO1xuXG5cdFx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGxheW91dCAoMSBtYXRyaXggPSA0IHBpeGVscylcblx0XHRcdFx0XHRcdC8vICAgICAgUkdCQSBSR0JBIFJHQkEgUkdCQSAoPT4gY29sdW1uMSwgY29sdW1uMiwgY29sdW1uMywgY29sdW1uNClcblx0XHRcdFx0XHRcdC8vICB3aXRoICA4eDggIHBpeGVsIHRleHR1cmUgbWF4ICAgMTYgYm9uZXMgKiA0IHBpeGVscyA9ICAoOCAqIDgpXG5cdFx0XHRcdFx0XHQvLyAgICAgICAxNngxNiBwaXhlbCB0ZXh0dXJlIG1heCAgIDY0IGJvbmVzICogNCBwaXhlbHMgPSAoMTYgKiAxNilcblx0XHRcdFx0XHRcdC8vICAgICAgIDMyeDMyIHBpeGVsIHRleHR1cmUgbWF4ICAyNTYgYm9uZXMgKiA0IHBpeGVscyA9ICgzMiAqIDMyKVxuXHRcdFx0XHRcdFx0Ly8gICAgICAgNjR4NjQgcGl4ZWwgdGV4dHVyZSBtYXggMTAyNCBib25lcyAqIDQgcGl4ZWxzID0gKDY0ICogNjQpXG5cblxuXHRcdFx0XHRcdFx0dmFyIHNpemUgPSBNYXRoLnNxcnQoIGJvbmVzLmxlbmd0aCAqIDQgKTsgLy8gNCBwaXhlbHMgbmVlZGVkIGZvciAxIG1hdHJpeFxuXHRcdFx0XHRcdFx0c2l6ZSA9IF9NYXRoLmNlaWxQb3dlck9mVHdvKCBzaXplICk7XG5cdFx0XHRcdFx0XHRzaXplID0gTWF0aC5tYXgoIHNpemUsIDQgKTtcblxuXHRcdFx0XHRcdFx0dmFyIGJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApOyAvLyA0IGZsb2F0cyBwZXIgUkdCQSBwaXhlbFxuXHRcdFx0XHRcdFx0Ym9uZU1hdHJpY2VzLnNldCggc2tlbGV0b24uYm9uZU1hdHJpY2VzICk7IC8vIGNvcHkgY3VycmVudCB2YWx1ZXNcblxuXHRcdFx0XHRcdFx0dmFyIGJvbmVUZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCBib25lTWF0cmljZXMsIHNpemUsIHNpemUsIFJHQkFGb3JtYXQsIEZsb2F0VHlwZSApO1xuXHRcdFx0XHRcdFx0Ym9uZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRza2VsZXRvbi5ib25lTWF0cmljZXMgPSBib25lTWF0cmljZXM7XG5cdFx0XHRcdFx0XHRza2VsZXRvbi5ib25lVGV4dHVyZSA9IGJvbmVUZXh0dXJlO1xuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZVRleHR1cmVTaXplID0gc2l6ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JvbmVUZXh0dXJlJywgc2tlbGV0b24uYm9uZVRleHR1cmUgKTtcblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZVNpemUnLCBza2VsZXRvbi5ib25lVGV4dHVyZVNpemUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBza2VsZXRvbiwgJ2JvbmVNYXRyaWNlcycgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVmcmVzaE1hdGVyaWFsICkge1xuXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd0b25lTWFwcGluZ0V4cG9zdXJlJywgX3RoaXMudG9uZU1hcHBpbmdFeHBvc3VyZSApO1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdXaGl0ZVBvaW50JywgX3RoaXMudG9uZU1hcHBpbmdXaGl0ZVBvaW50ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubGlnaHRzICkge1xuXG5cdFx0XHRcdC8vIHRoZSBjdXJyZW50IG1hdGVyaWFsIHJlcXVpcmVzIGxpZ2h0aW5nIGluZm9cblxuXHRcdFx0XHQvLyBub3RlOiBhbGwgbGlnaHRpbmcgdW5pZm9ybXMgYXJlIGFsd2F5cyBzZXQgY29ycmVjdGx5XG5cdFx0XHRcdC8vIHRoZXkgc2ltcGx5IHJlZmVyZW5jZSB0aGUgcmVuZGVyZXIncyBzdGF0ZSBmb3IgdGhlaXJcblx0XHRcdFx0Ly8gdmFsdWVzXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIHVzZSB0aGUgY3VycmVudCBtYXRlcmlhbCdzIC5uZWVkc1VwZGF0ZSBmbGFncyB0byBzZXRcblx0XHRcdFx0Ly8gdGhlIEdMIHN0YXRlIHdoZW4gcmVxdWlyZWRcblxuXHRcdFx0XHRtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggbV91bmlmb3JtcywgcmVmcmVzaExpZ2h0cyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlZnJlc2ggdW5pZm9ybXMgY29tbW9uIHRvIHNldmVyYWwgbWF0ZXJpYWxzXG5cblx0XHRcdGlmICggZm9nICYmIG1hdGVyaWFsLmZvZyApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNGb2coIG1fdW5pZm9ybXMsIGZvZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zVG9vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hNYXRjYXBNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEZXB0aE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGVwdGgoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNOb3JtYWwoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTGluZUJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTGluZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTGluZURhc2hlZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGFzaCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzUG9pbnRzTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUG9pbnRzKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0bV91bmlmb3Jtcy5jb2xvci52YWx1ZSA9IG1hdGVyaWFsLmNvbG9yO1xuXHRcdFx0XHRtX3VuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlY3RBcmVhTGlnaHQgVGV4dHVyZVxuXHRcdFx0Ly8gVE9ETyAobXJkb29iKTogRmluZCBhIG5pY2VyIGltcGxlbWVudGF0aW9uXG5cblx0XHRcdGlmICggbV91bmlmb3Jtcy5sdGNfMSAhPT0gdW5kZWZpbmVkICkgbV91bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18xO1xuXHRcdFx0aWYgKCBtX3VuaWZvcm1zLmx0Y18yICE9PSB1bmRlZmluZWQgKSBtX3VuaWZvcm1zLmx0Y18yLnZhbHVlID0gVW5pZm9ybXNMaWIuTFRDXzI7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIF90aGlzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0LCBtX3VuaWZvcm1zLCBfdGhpcyApO1xuXHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU3ByaXRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2NlbnRlcicsIG9iamVjdC5jZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbW1vbiBtYXRyaWNlc1xuXG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxWaWV3TWF0cml4Jywgb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTtcblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdC8vIFVuaWZvcm1zIChyZWZyZXNoIHVuaWZvcm1zIG9iamVjdHMpXG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwuY29sb3IgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwO1xuXG5cdFx0XHQvLyBkb24ndCBmbGlwIEN1YmVUZXh0dXJlIGVudk1hcHMsIGZsaXAgZXZlcnl0aGluZyBlbHNlOlxuXHRcdFx0Ly8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB3aWxsIGJlIGZsaXBwZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHQvLyAgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgd2lsbCBiZSBmbGlwcGVkIGJlY2F1c2UgaXQncyBhIFRleHR1cmUgYW5kIE5PVCBhIEN1YmVUZXh0dXJlXG5cdFx0XHQvLyB0aGlzIGNoZWNrIG11c3QgYmUgaGFuZGxlZCBkaWZmZXJlbnRseSwgb3IgcmVtb3ZlZCBlbnRpcmVseSwgaWYgV2ViR0xSZW5kZXJUYXJnZXRDdWJlIHVzZXMgYSBDdWJlVGV4dHVyZSBpbiB0aGUgZnV0dXJlXG5cdFx0XHR1bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCAhICggbWF0ZXJpYWwuZW52TWFwICYmIG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlICkgKSA/IDEgOiAtIDE7XG5cblx0XHRcdHVuaWZvcm1zLnJlZmxlY3Rpdml0eS52YWx1ZSA9IG1hdGVyaWFsLnJlZmxlY3Rpdml0eTtcblx0XHRcdHVuaWZvcm1zLnJlZnJhY3Rpb25SYXRpby52YWx1ZSA9IG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdFx0dW5pZm9ybXMubWF4TWlwTGV2ZWwudmFsdWUgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwuZW52TWFwICkuX19tYXhNaXBMZXZlbDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubGlnaHRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwLnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5saWdodE1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hb01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYW9NYXAudmFsdWUgPSBtYXRlcmlhbC5hb01hcDtcblx0XHRcdHVuaWZvcm1zLmFvTWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHQvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcblx0XHQvLyAxLiBjb2xvciBtYXBcblx0XHQvLyAyLiBzcGVjdWxhciBtYXBcblx0XHQvLyAzLiBub3JtYWwgbWFwXG5cdFx0Ly8gNC4gYnVtcCBtYXBcblx0XHQvLyA1LiBhbHBoYSBtYXBcblx0XHQvLyA2LiBlbWlzc2l2ZSBtYXBcblxuXHRcdHZhciB1dlNjYWxlTWFwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0aWYgKCB1dlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0dXZTY2FsZU1hcCA9IHV2U2NhbGVNYXAudGV4dHVyZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGFzaCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGFzaFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZTtcblx0XHR1bmlmb3Jtcy50b3RhbFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZSArIG1hdGVyaWFsLmdhcFNpemU7XG5cdFx0dW5pZm9ybXMuc2NhbGUudmFsdWUgPSBtYXRlcmlhbC5zY2FsZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUG9pbnRzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlID0gbWF0ZXJpYWwuY29sb3I7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMuc2l6ZS52YWx1ZSA9IG1hdGVyaWFsLnNpemUgKiBfcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IF9oZWlnaHQgKiAwLjU7XG5cblx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5tYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5tYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggbWF0ZXJpYWwubWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlID0gbWF0ZXJpYWwuY29sb3I7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMucm90YXRpb24udmFsdWUgPSBtYXRlcmlhbC5yb3RhdGlvbjtcblx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5tYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5tYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggbWF0ZXJpYWwubWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNGb2coIHVuaWZvcm1zLCBmb2cgKSB7XG5cblx0XHR1bmlmb3Jtcy5mb2dDb2xvci52YWx1ZSA9IGZvZy5jb2xvcjtcblxuXHRcdGlmICggZm9nLmlzRm9nICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dOZWFyLnZhbHVlID0gZm9nLm5lYXI7XG5cdFx0XHR1bmlmb3Jtcy5mb2dGYXIudmFsdWUgPSBmb2cuZmFyO1xuXG5cdFx0fSBlbHNlIGlmICggZm9nLmlzRm9nRXhwMiApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNMYW1iZXJ0KCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXIudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhcjtcblx0XHR1bmlmb3Jtcy5zaGluaW5lc3MudmFsdWUgPSBNYXRoLm1heCggbWF0ZXJpYWwuc2hpbmluZXNzLCAxZS00ICk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApXG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNUb29uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRyZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmdyYWRpZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ncmFkaWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmdyYWRpZW50TWFwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMucm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXHRcdHVuaWZvcm1zLm1ldGFsbmVzcy52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW52TWFwICkge1xuXG5cdFx0XHQvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb25cblx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdHVuaWZvcm1zLnJlZmxlY3Rpdml0eS52YWx1ZSA9IG1hdGVyaWFsLnJlZmxlY3Rpdml0eTsgLy8gYWxzbyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXG5cdFx0dW5pZm9ybXMuY2xlYXJDb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJDb2F0O1xuXHRcdHVuaWZvcm1zLmNsZWFyQ29hdFJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcztcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hdGNhcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWF0Y2FwLnZhbHVlID0gbWF0ZXJpYWwubWF0Y2FwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEZXB0aCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0XHR1bmlmb3Jtcy5yZWZlcmVuY2VQb3NpdGlvbi52YWx1ZS5jb3B5KCBtYXRlcmlhbC5yZWZlcmVuY2VQb3NpdGlvbiApO1xuXHRcdHVuaWZvcm1zLm5lYXJEaXN0YW5jZS52YWx1ZSA9IG1hdGVyaWFsLm5lYXJEaXN0YW5jZTtcblx0XHR1bmlmb3Jtcy5mYXJEaXN0YW5jZS52YWx1ZSA9IG1hdGVyaWFsLmZhckRpc3RhbmNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNOb3JtYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gSWYgdW5pZm9ybXMgYXJlIG1hcmtlZCBhcyBjbGVhbiwgdGhleSBkb24ndCBuZWVkIHRvIGJlIGxvYWRlZCB0byB0aGUgR1BVLlxuXG5cdGZ1bmN0aW9uIG1hcmtVbmlmb3Jtc0xpZ2h0c05lZWRzVXBkYXRlKCB1bmlmb3JtcywgdmFsdWUgKSB7XG5cblx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnNwb3RMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLmhlbWlzcGhlcmVMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0Ly8gVGV4dHVyZXNcblxuXHRmdW5jdGlvbiBhbGxvY1RleHR1cmVVbml0KCkge1xuXG5cdFx0dmFyIHRleHR1cmVVbml0ID0gX3VzZWRUZXh0dXJlVW5pdHM7XG5cblx0XHRpZiAoIHRleHR1cmVVbml0ID49IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVHJ5aW5nIHRvIHVzZSAnICsgdGV4dHVyZVVuaXQgKyAnIHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSAnICsgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHRfdXNlZFRleHR1cmVVbml0cyArPSAxO1xuXG5cdFx0cmV0dXJuIHRleHR1cmVVbml0O1xuXG5cdH1cblxuXHR0aGlzLmFsbG9jVGV4dHVyZVVuaXQgPSBhbGxvY1RleHR1cmVVbml0O1xuXG5cdC8vIHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xuXHR0aGlzLnNldFRleHR1cmUyRCA9ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdhcm5lZCA9IGZhbHNlO1xuXG5cdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHk6IHBlZWwgdGV4dHVyZS50ZXh0dXJlXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRpZiAoICEgd2FybmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMUmVuZGVyZXIuc2V0VGV4dHVyZTJEOiBkb24ndCB1c2UgcmVuZGVyIHRhcmdldHMgYXMgdGV4dHVyZXMuIFVzZSB0aGVpciAudGV4dHVyZSBwcm9wZXJ0eSBpbnN0ZWFkLlwiICk7XG5cdFx0XHRcdFx0d2FybmVkID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZSA9IHRleHR1cmUudGV4dHVyZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKTtcblxuXHRcdH07XG5cblx0fSgpICk7XG5cblx0dGhpcy5zZXRUZXh0dXJlM0QgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBwZWVsIHRleHR1cmUudGV4dHVyZVxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRUZXh0dXJlM0QoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUzRCggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0fTtcblxuXHR9KCkgKTtcblxuXHR0aGlzLnNldFRleHR1cmUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB3YXJuZWQgPSBmYWxzZTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRUZXh0dXJlKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0XHRpZiAoICEgd2FybmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZSBpcyBkZXByZWNhdGVkLCB1c2Ugc2V0VGV4dHVyZTJEIGluc3RlYWQuXCIgKTtcblx0XHRcdFx0d2FybmVkID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKTtcblxuXHRcdH07XG5cblx0fSgpICk7XG5cblx0dGhpcy5zZXRUZXh0dXJlQ3ViZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdhcm5lZCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTogcGVlbCB0ZXh0dXJlLnRleHR1cmVcblx0XHRcdGlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkge1xuXG5cdFx0XHRcdGlmICggISB3YXJuZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXRUZXh0dXJlQ3ViZTogZG9uJ3QgdXNlIGN1YmUgcmVuZGVyIHRhcmdldHMgYXMgdGV4dHVyZXMuIFVzZSB0aGVpciAudGV4dHVyZSBwcm9wZXJ0eSBpbnN0ZWFkLlwiICk7XG5cdFx0XHRcdFx0d2FybmVkID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZSA9IHRleHR1cmUudGV4dHVyZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjdXJyZW50bHkgcmVseWluZyBvbiB0aGUgZmFjdCB0aGF0IFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZS50ZXh0dXJlIGlzIGEgVGV4dHVyZSBhbmQgTk9UIGEgQ3ViZVRleHR1cmVcblx0XHRcdC8vIFRPRE86IHVuaWZ5IHRoZXNlIGNvZGUgcGF0aHNcblx0XHRcdGlmICggKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNDdWJlVGV4dHVyZSApIHx8XG5cdFx0XHRcdCggQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICYmIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSA2ICkgKSB7XG5cblx0XHRcdFx0Ly8gQ29tcHJlc3NlZFRleHR1cmUgY2FuIGhhdmUgQXJyYXkgaW4gaW1hZ2UgOi9cblxuXHRcdFx0XHQvLyB0aGlzIGZ1bmN0aW9uIGFsb25lIHNob3VsZCB0YWtlIGNhcmUgb2YgY3ViZSB0ZXh0dXJlc1xuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGFzc3VtZWQ6IHRleHR1cmUgcHJvcGVydHkgb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlXG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZUN1YmVEeW5hbWljKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpICk7XG5cblx0Ly9cblxuXHR0aGlzLnNldEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdF9mcmFtZWJ1ZmZlciA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5nZXRSZW5kZXJUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQ7XG5cblx0fTtcblxuXHR0aGlzLnNldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCAmJiBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdHZhciBmcmFtZWJ1ZmZlciA9IF9mcmFtZWJ1ZmZlcjtcblx0XHR2YXIgaXNDdWJlID0gZmFsc2U7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0dmFyIF9fd2ViZ2xGcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICkge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyWyByZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgXTtcblx0XHRcdFx0aXNDdWJlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIHJlbmRlclRhcmdldC52aWV3cG9ydCApO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkoIHJlbmRlclRhcmdldC5zY2lzc29yICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gcmVuZGVyVGFyZ2V0LnNjaXNzb3JUZXN0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKTtcblx0XHRcdF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IF9zY2lzc29yVGVzdDtcblxuXHRcdH1cblxuXHRcdGlmICggX2N1cnJlbnRGcmFtZWJ1ZmZlciAhPT0gZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXHRcdFx0X2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IgKTtcblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX2N1cnJlbnRTY2lzc29yVGVzdCApO1xuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzYwNjQsIDM0MDY5ICsgcmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgcmVuZGVyVGFyZ2V0LmFjdGl2ZU1pcE1hcExldmVsICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyICkge1xuXG5cdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdGlmICggZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdHZhciByZXN0b3JlID0gZmFsc2U7XG5cblx0XHRcdGlmICggZnJhbWVidWZmZXIgIT09IF9jdXJyZW50RnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0cmVzdG9yZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHR2YXIgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdFx0XHR2YXIgdGV4dHVyZUZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xuXHRcdFx0XHR2YXIgdGV4dHVyZVR5cGUgPSB0ZXh0dXJlLnR5cGU7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlRm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSAhPT0gX2dsLmdldFBhcmFtZXRlciggMzU3MzkgKSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gUkdCQSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIGZvcm1hdC4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleHR1cmVUeXBlICE9PSBVbnNpZ25lZEJ5dGVUeXBlICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICkgIT09IF9nbC5nZXRQYXJhbWV0ZXIoIDM1NzM4ICkgJiYgLy8gSUUxMSwgRWRnZSBhbmQgQ2hyb21lIE1hYyA8IDUyICgjOTUxMylcblx0XHRcdFx0XHQhICggdGV4dHVyZVR5cGUgPT09IEZsb2F0VHlwZSAmJiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApIHx8IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0JyApICkgKSAmJiAvLyBDaHJvbWUgTWFjID49IDUyIGFuZCBGaXJlZm94XG5cdFx0XHRcdFx0ISAoIHRleHR1cmVUeXBlID09PSBIYWxmRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApIDogZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQnICkgKSApICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIF9nbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKCAzNjE2MCApID09PSAzNjA1MyApIHtcblxuXHRcdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50IGVuc3VyZXMgdmFsaWQgcmVhZCByZXF1ZXN0cyAobm8gb3V0LW9mLWJvdW5kcyBwaXhlbHMsIHNlZSAjODYwNClcblxuXHRcdFx0XHRcdGlmICggKCB4ID49IDAgJiYgeCA8PSAoIHJlbmRlclRhcmdldC53aWR0aCAtIHdpZHRoICkgKSAmJiAoIHkgPj0gMCAmJiB5IDw9ICggcmVuZGVyVGFyZ2V0LmhlaWdodCAtIGhlaWdodCApICkgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5yZWFkUGl4ZWxzKCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICksIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICksIGJ1ZmZlciApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZWFkUGl4ZWxzIGZyb20gcmVuZGVyVGFyZ2V0IGZhaWxlZC4gRnJhbWVidWZmZXIgbm90IGNvbXBsZXRlLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZmluYWxseSB7XG5cblx0XHRcdFx0aWYgKCByZXN0b3JlICkge1xuXG5cdFx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIF9jdXJyZW50RnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgdGV4dHVyZSwgbGV2ZWwgKSB7XG5cblx0XHR2YXIgd2lkdGggPSB0ZXh0dXJlLmltYWdlLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0ZXh0dXJlLmltYWdlLmhlaWdodDtcblx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApO1xuXG5cdFx0dGhpcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdF9nbC5jb3B5VGV4SW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgZ2xGb3JtYXQsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHdpZHRoLCBoZWlnaHQsIDAgKTtcblxuXHR9O1xuXG5cdHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBsZXZlbCApIHtcblxuXHRcdHZhciB3aWR0aCA9IHNyY1RleHR1cmUuaW1hZ2Uud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IHNyY1RleHR1cmUuaW1hZ2UuaGVpZ2h0O1xuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUuZm9ybWF0ICk7XG5cdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUudHlwZSApO1xuXG5cdFx0dGhpcy5zZXRUZXh0dXJlMkQoIGRzdFRleHR1cmUsIDAgKTtcblxuXHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZS5kYXRhICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZSApO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGb2dFeHAyKCBjb2xvciwgZGVuc2l0eSApIHtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXHR0aGlzLmRlbnNpdHkgPSAoIGRlbnNpdHkgIT09IHVuZGVmaW5lZCApID8gZGVuc2l0eSA6IDAuMDAwMjU7XG5cbn1cblxuRm9nRXhwMi5wcm90b3R5cGUuaXNGb2dFeHAyID0gdHJ1ZTtcblxuRm9nRXhwMi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyBGb2dFeHAyKCB0aGlzLmNvbG9yLCB0aGlzLmRlbnNpdHkgKTtcblxufTtcblxuRm9nRXhwMi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCAvKiBtZXRhICovICkge1xuXG5cdHJldHVybiB7XG5cdFx0dHlwZTogJ0ZvZ0V4cDInLFxuXHRcdGNvbG9yOiB0aGlzLmNvbG9yLmdldEhleCgpLFxuXHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxuXHR9O1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZvZyggY29sb3IsIG5lYXIsIGZhciApIHtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXG5cdHRoaXMubmVhciA9ICggbmVhciAhPT0gdW5kZWZpbmVkICkgPyBuZWFyIDogMTtcblx0dGhpcy5mYXIgPSAoIGZhciAhPT0gdW5kZWZpbmVkICkgPyBmYXIgOiAxMDAwO1xuXG59XG5cbkZvZy5wcm90b3R5cGUuaXNGb2cgPSB0cnVlO1xuXG5Gb2cucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG5cdHJldHVybiBuZXcgRm9nKCB0aGlzLmNvbG9yLCB0aGlzLm5lYXIsIHRoaXMuZmFyICk7XG5cbn07XG5cbkZvZy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCAvKiBtZXRhICovICkge1xuXG5cdHJldHVybiB7XG5cdFx0dHlwZTogJ0ZvZycsXG5cdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0bmVhcjogdGhpcy5uZWFyLFxuXHRcdGZhcjogdGhpcy5mYXJcblx0fTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNjZW5lKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2NlbmUnO1xuXG5cdHRoaXMuYmFja2dyb3VuZCA9IG51bGw7XG5cdHRoaXMuZm9nID0gbnVsbDtcblx0dGhpcy5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxuXG59XG5cblNjZW5lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNjZW5lLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHRoaXMuYmFja2dyb3VuZCA9IHNvdXJjZS5iYWNrZ3JvdW5kLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZm9nICE9PSBudWxsICkgdGhpcy5mb2cgPSBzb3VyY2UuZm9nLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0aWYgKCB0aGlzLmJhY2tncm91bmQgIT09IG51bGwgKSBkYXRhLm9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTiggbWV0YSApO1xuXHRcdGlmICggdGhpcy5mb2cgIT09IG51bGwgKSBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgc3RyaWRlICkge1xuXG5cdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0dGhpcy5zdHJpZGUgPSBzdHJpZGU7XG5cdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gc3RyaWRlIDogMDtcblxuXHR0aGlzLmR5bmFtaWMgPSBmYWxzZTtcblx0dGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XG5cblx0dGhpcy52ZXJzaW9uID0gMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwgJ25lZWRzVXBkYXRlJywge1xuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwge1xuXG5cdGlzSW50ZXJsZWF2ZWRCdWZmZXI6IHRydWUsXG5cblx0b25VcGxvYWRDYWxsYmFjazogZnVuY3Rpb24gKCkge30sXG5cblx0c2V0QXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gdGhpcy5zdHJpZGUgOiAwO1xuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RHluYW1pYzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZHluYW1pYyA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcblx0XHR0aGlzLmNvdW50ID0gc291cmNlLmNvdW50O1xuXHRcdHRoaXMuc3RyaWRlID0gc291cmNlLnN0cmlkZTtcblx0XHR0aGlzLmR5bmFtaWMgPSBzb3VyY2UuZHluYW1pYztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUF0OiBmdW5jdGlvbiAoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7XG5cblx0XHRpbmRleDEgKj0gdGhpcy5zdHJpZGU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5zdHJpZGU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnN0cmlkZTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdG9uVXBsb2FkOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGl0ZW1TaXplLCBvZmZzZXQsIG5vcm1hbGl6ZWQgKSB7XG5cblx0dGhpcy5kYXRhID0gaW50ZXJsZWF2ZWRCdWZmZXI7XG5cdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0dGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cblx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0Y291bnQ6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhLmNvdW50O1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0YXJyYXk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5O1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlOiB0cnVlLFxuXG5cdHNldFg6IGZ1bmN0aW9uICggaW5kZXgsIHggKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIGluZGV4LCB5ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggaW5kZXgsIHogKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VzogZnVuY3Rpb24gKCBpbmRleCwgdyApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRYOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgXTtcblxuXHR9LFxuXG5cdGdldFk6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXTtcblxuXHR9LFxuXG5cdGdldFo6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXTtcblxuXHR9LFxuXG5cdGdldFc6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDMgXTtcblxuXHR9LFxuXG5cdHNldFhZOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVo6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZWlc6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICByb3RhdGlvbjogPGZsb2F0PixcbiAqICBzaXplQXR0ZW51YXRpb246IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIFNwcml0ZU1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3ByaXRlTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLnJvdGF0aW9uID0gMDtcblxuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0dGhpcy5saWdodHMgPSBmYWxzZTtcblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwcml0ZU1hdGVyaWFsO1xuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmlzU3ByaXRlTWF0ZXJpYWwgPSB0cnVlO1xuXG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gc291cmNlLnNpemVBdHRlbnVhdGlvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG52YXIgZ2VvbWV0cnk7XG5cbmZ1bmN0aW9uIFNwcml0ZSggbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcHJpdGUnO1xuXG5cdGlmICggZ2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHR2YXIgZmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggW1xuXHRcdFx0LSAwLjUsIC0gMC41LCAwLCAwLCAwLFxuXHRcdFx0MC41LCAtIDAuNSwgMCwgMSwgMCxcblx0XHRcdDAuNSwgMC41LCAwLCAxLCAxLFxuXHRcdFx0LSAwLjUsIDAuNSwgMCwgMCwgMVxuXHRcdF0gKTtcblxuXHRcdHZhciBpbnRlcmxlYXZlZEJ1ZmZlciA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlciggZmxvYXQzMkFycmF5LCA1ICk7XG5cblx0XHRnZW9tZXRyeS5zZXRJbmRleCggWyAwLCAxLCAyLFx0MCwgMiwgMyBdICk7XG5cdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCAzLCAwLCBmYWxzZSApICk7XG5cdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCAyLCAzLCBmYWxzZSApICk7XG5cblx0fVxuXG5cdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0dGhpcy5tYXRlcmlhbCA9ICggbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApID8gbWF0ZXJpYWwgOiBuZXcgU3ByaXRlTWF0ZXJpYWwoKTtcblxuXHR0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApO1xuXG59XG5cblNwcml0ZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTcHJpdGUsXG5cblx0aXNTcHJpdGU6IHRydWUsXG5cblx0cmF5Y2FzdDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB3b3JsZFNjYWxlID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbXZQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgYWxpZ25lZFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgcm90YXRlZFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdmlld1dvcmxkTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHZhciB2QSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHV2QSA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dmFyIHV2QiA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dmFyIHV2QyA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRmdW5jdGlvbiB0cmFuc2Zvcm1WZXJ0ZXgoIHZlcnRleFBvc2l0aW9uLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHNjYWxlLCBzaW4sIGNvcyApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSBwb3NpdGlvbiBpbiBjYW1lcmEgc3BhY2Vcblx0XHRcdGFsaWduZWRQb3NpdGlvbi5zdWJWZWN0b3JzKCB2ZXJ0ZXhQb3NpdGlvbiwgY2VudGVyICkuYWRkU2NhbGFyKCAwLjUgKS5tdWx0aXBseSggc2NhbGUgKTtcblxuXHRcdFx0Ly8gdG8gY2hlY2sgaWYgcm90YXRpb24gaXMgbm90IHplcm9cblx0XHRcdGlmICggc2luICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cm90YXRlZFBvc2l0aW9uLnggPSAoIGNvcyAqIGFsaWduZWRQb3NpdGlvbi54ICkgLSAoIHNpbiAqIGFsaWduZWRQb3NpdGlvbi55ICk7XG5cdFx0XHRcdHJvdGF0ZWRQb3NpdGlvbi55ID0gKCBzaW4gKiBhbGlnbmVkUG9zaXRpb24ueCApICsgKCBjb3MgKiBhbGlnbmVkUG9zaXRpb24ueSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJvdGF0ZWRQb3NpdGlvbi5jb3B5KCBhbGlnbmVkUG9zaXRpb24gKTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdHZlcnRleFBvc2l0aW9uLmNvcHkoIG12UG9zaXRpb24gKTtcblx0XHRcdHZlcnRleFBvc2l0aW9uLnggKz0gcm90YXRlZFBvc2l0aW9uLng7XG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi55ICs9IHJvdGF0ZWRQb3NpdGlvbi55O1xuXG5cdFx0XHQvLyB0cmFuc2Zvcm0gdG8gd29ybGQgc3BhY2Vcblx0XHRcdHZlcnRleFBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld1dvcmxkTWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0XHR3b3JsZFNjYWxlLnNldEZyb21NYXRyaXhTY2FsZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXHRcdFx0dmlld1dvcmxkTWF0cml4LmdldEludmVyc2UoIHRoaXMubW9kZWxWaWV3TWF0cml4ICkucHJlbXVsdGlwbHkoIHRoaXMubWF0cml4V29ybGQgKTtcblx0XHRcdG12UG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0XHR2YXIgcm90YXRpb24gPSB0aGlzLm1hdGVyaWFsLnJvdGF0aW9uO1xuXHRcdFx0dmFyIHNpbiwgY29zO1xuXHRcdFx0aWYgKCByb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdFx0XHRjb3MgPSBNYXRoLmNvcyggcm90YXRpb24gKTtcblx0XHRcdFx0c2luID0gTWF0aC5zaW4oIHJvdGF0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIHZBLnNldCggLSAwLjUsIC0gMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkIuc2V0KCAwLjUsIC0gMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkMuc2V0KCAwLjUsIDAuNSwgMCApLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHdvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cblx0XHRcdHV2QS5zZXQoIDAsIDAgKTtcblx0XHRcdHV2Qi5zZXQoIDEsIDAgKTtcblx0XHRcdHV2Qy5zZXQoIDEsIDEgKTtcblxuXHRcdFx0Ly8gY2hlY2sgZmlyc3QgdHJpYW5nbGVcblx0XHRcdHZhciBpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKCB2QSwgdkIsIHZDLCBmYWxzZSwgaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gY2hlY2sgc2Vjb25kIHRyaWFuZ2xlXG5cdFx0XHRcdHRyYW5zZm9ybVZlcnRleCggdkIuc2V0KCAtIDAuNSwgMC41LCAwICksIG12UG9zaXRpb24sIGNlbnRlciwgd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdFx0dXZCLnNldCggMCwgMSApO1xuXG5cdFx0XHRcdGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHZBLCB2QywgdkIsIGZhbHNlLCBpbnRlcnNlY3RQb2ludCApO1xuXHRcdFx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRwb2ludDogaW50ZXJzZWN0UG9pbnQuY2xvbmUoKSxcblx0XHRcdFx0dXY6IFRyaWFuZ2xlLmdldFVWKCBpbnRlcnNlY3RQb2ludCwgdkEsIHZCLCB2QywgdXZBLCB1dkIsIHV2QywgbmV3IFZlY3RvcjIoKSApLFxuXHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdGlmICggc291cmNlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgdGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTE9EKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTE9EJztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xuXHRcdGxldmVsczoge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBbXVxuXHRcdH1cblx0fSApO1xuXG59XG5cbkxPRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMT0QsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIGZhbHNlICk7XG5cblx0XHR2YXIgbGV2ZWxzID0gc291cmNlLmxldmVscztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTtcblxuXHRcdFx0dGhpcy5hZGRMZXZlbCggbGV2ZWwub2JqZWN0LmNsb25lKCksIGxldmVsLmRpc3RhbmNlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZExldmVsOiBmdW5jdGlvbiAoIG9iamVjdCwgZGlzdGFuY2UgKSB7XG5cblx0XHRpZiAoIGRpc3RhbmNlID09PSB1bmRlZmluZWQgKSBkaXN0YW5jZSA9IDA7XG5cblx0XHRkaXN0YW5jZSA9IE1hdGguYWJzKCBkaXN0YW5jZSApO1xuXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IGxldmVsc1sgbCBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXZlbHMuc3BsaWNlKCBsLCAwLCB7IGRpc3RhbmNlOiBkaXN0YW5jZSwgb2JqZWN0OiBvYmplY3QgfSApO1xuXG5cdFx0dGhpcy5hZGQoIG9iamVjdCApO1xuXG5cdH0sXG5cblx0Z2V0T2JqZWN0Rm9yRGlzdGFuY2U6IGZ1bmN0aW9uICggZGlzdGFuY2UgKSB7XG5cblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IGxldmVsc1sgaSBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGV2ZWxzWyBpIC0gMSBdLm9iamVjdDtcblxuXHR9LFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1hdHJpeFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRcdG1hdHJpeFBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBtYXRyaXhQb3NpdGlvbiApO1xuXG5cdFx0XHR0aGlzLmdldE9iamVjdEZvckRpc3RhbmNlKCBkaXN0YW5jZSApLnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoIGNhbWVyYSApIHtcblxuXHRcdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdHYxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHYyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdHZhciBkaXN0YW5jZSA9IHYxLmRpc3RhbmNlVG8oIHYyICk7XG5cblx0XHRcdFx0bGV2ZWxzWyAwIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0YW5jZSA+PSBsZXZlbHNbIGkgXS5kaXN0YW5jZSApIHtcblxuXHRcdFx0XHRcdFx0bGV2ZWxzWyBpIC0gMSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5sZXZlbHMgPSBbXTtcblxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTtcblxuXHRcdFx0ZGF0YS5vYmplY3QubGV2ZWxzLnB1c2goIHtcblx0XHRcdFx0b2JqZWN0OiBsZXZlbC5vYmplY3QudXVpZCxcblx0XHRcdFx0ZGlzdGFuY2U6IGxldmVsLmRpc3RhbmNlXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbWljaGFlbCBndWVycmVybyAvIGh0dHA6Ly9yZWFsaXR5bWVsdGRvd24uY29tXG4gKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb21cbiAqL1xuXG5mdW5jdGlvbiBTa2VsZXRvbiggYm9uZXMsIGJvbmVJbnZlcnNlcyApIHtcblxuXHQvLyBjb3B5IHRoZSBib25lIGFycmF5XG5cblx0Ym9uZXMgPSBib25lcyB8fCBbXTtcblxuXHR0aGlzLmJvbmVzID0gYm9uZXMuc2xpY2UoIDAgKTtcblx0dGhpcy5ib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLmJvbmVzLmxlbmd0aCAqIDE2ICk7XG5cblx0Ly8gdXNlIHRoZSBzdXBwbGllZCBib25lIGludmVyc2VzIG9yIGNhbGN1bGF0ZSB0aGUgaW52ZXJzZXNcblxuXHRpZiAoIGJvbmVJbnZlcnNlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dGhpcy5jYWxjdWxhdGVJbnZlcnNlcygpO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIHRoaXMuYm9uZXMubGVuZ3RoID09PSBib25lSW52ZXJzZXMubGVuZ3RoICkge1xuXG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IGJvbmVJbnZlcnNlcy5zbGljZSggMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b24gYm9uZUludmVyc2VzIGlzIHRoZSB3cm9uZyBsZW5ndGguJyApO1xuXG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBuZXcgTWF0cml4NCgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU2tlbGV0b24ucHJvdG90eXBlLCB7XG5cblx0Y2FsY3VsYXRlSW52ZXJzZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuYm9uZUludmVyc2VzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuYm9uZXNbIGkgXSApIHtcblxuXHRcdFx0XHRpbnZlcnNlLmdldEludmVyc2UoIHRoaXMuYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIGludmVyc2UgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHBvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBib25lLCBpLCBpbDtcblxuXHRcdC8vIHJlY292ZXIgdGhlIGJpbmQtdGltZSB3b3JsZCBtYXRyaWNlc1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ym9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lICkge1xuXG5cdFx0XHRcdGJvbmUubWF0cml4V29ybGQuZ2V0SW52ZXJzZSggdGhpcy5ib25lSW52ZXJzZXNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsb2NhbCBtYXRyaWNlcywgcG9zaXRpb25zLCByb3RhdGlvbnMgYW5kIHNjYWxlc1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ym9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lICkge1xuXG5cdFx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXguZ2V0SW52ZXJzZSggYm9uZS5wYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0XHRib25lLm1hdHJpeC5tdWx0aXBseSggYm9uZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5jb3B5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJvbmUubWF0cml4LmRlY29tcG9zZSggYm9uZS5wb3NpdGlvbiwgYm9uZS5xdWF0ZXJuaW9uLCBib25lLnNjYWxlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZTogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2Zmc2V0TWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgaWRlbnRpdHlNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdFx0dmFyIGJvbmVzID0gdGhpcy5ib25lcztcblx0XHRcdHZhciBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcblx0XHRcdHZhciBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlcztcblx0XHRcdHZhciBib25lVGV4dHVyZSA9IHRoaXMuYm9uZVRleHR1cmU7XG5cblx0XHRcdC8vIGZsYXR0ZW4gYm9uZSBtYXRyaWNlcyB0byBhcnJheVxuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gY29tcHV0ZSB0aGUgb2Zmc2V0IGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHRoZSBvcmlnaW5hbCB0cmFuc2Zvcm1cblxuXHRcdFx0XHR2YXIgbWF0cml4ID0gYm9uZXNbIGkgXSA/IGJvbmVzWyBpIF0ubWF0cml4V29ybGQgOiBpZGVudGl0eU1hdHJpeDtcblxuXHRcdFx0XHRvZmZzZXRNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4LCBib25lSW52ZXJzZXNbIGkgXSApO1xuXHRcdFx0XHRvZmZzZXRNYXRyaXgudG9BcnJheSggYm9uZU1hdHJpY2VzLCBpICogMTYgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJvbmVUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ym9uZVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNrZWxldG9uKCB0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyApO1xuXG5cdH0sXG5cblx0Z2V0Qm9uZUJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICovXG5cbmZ1bmN0aW9uIEJvbmUoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb25lJztcblxufVxuXG5Cb25lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEJvbmUsXG5cblx0aXNCb25lOiB0cnVlXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICovXG5cbmZ1bmN0aW9uIFNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0TWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2tpbm5lZE1lc2gnO1xuXG5cdHRoaXMuYmluZE1vZGUgPSAnYXR0YWNoZWQnO1xuXHR0aGlzLmJpbmRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxuXHR2YXIgYm9uZXMgPSB0aGlzLmluaXRCb25lcygpO1xuXHR2YXIgc2tlbGV0b24gPSBuZXcgU2tlbGV0b24oIGJvbmVzICk7XG5cblx0dGhpcy5iaW5kKCBza2VsZXRvbiwgdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdHRoaXMubm9ybWFsaXplU2tpbldlaWdodHMoKTtcblxufVxuXG5Ta2lubmVkTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBNZXNoLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNraW5uZWRNZXNoLFxuXG5cdGlzU2tpbm5lZE1lc2g6IHRydWUsXG5cblx0aW5pdEJvbmVzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYm9uZXMgPSBbXSwgYm9uZSwgZ2JvbmU7XG5cdFx0dmFyIGksIGlsO1xuXG5cdFx0aWYgKCB0aGlzLmdlb21ldHJ5ICYmIHRoaXMuZ2VvbWV0cnkuYm9uZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gZmlyc3QsIGNyZWF0ZSBhcnJheSBvZiAnQm9uZScgb2JqZWN0cyBmcm9tIGdlb21ldHJ5IGRhdGFcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5nZW9tZXRyeS5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRnYm9uZSA9IHRoaXMuZ2VvbWV0cnkuYm9uZXNbIGkgXTtcblxuXHRcdFx0XHQvLyBjcmVhdGUgbmV3ICdCb25lJyBvYmplY3RcblxuXHRcdFx0XHRib25lID0gbmV3IEJvbmUoKTtcblx0XHRcdFx0Ym9uZXMucHVzaCggYm9uZSApO1xuXG5cdFx0XHRcdC8vIGFwcGx5IHZhbHVlc1xuXG5cdFx0XHRcdGJvbmUubmFtZSA9IGdib25lLm5hbWU7XG5cdFx0XHRcdGJvbmUucG9zaXRpb24uZnJvbUFycmF5KCBnYm9uZS5wb3MgKTtcblx0XHRcdFx0Ym9uZS5xdWF0ZXJuaW9uLmZyb21BcnJheSggZ2JvbmUucm90cSApO1xuXHRcdFx0XHRpZiAoIGdib25lLnNjbCAhPT0gdW5kZWZpbmVkICkgYm9uZS5zY2FsZS5mcm9tQXJyYXkoIGdib25lLnNjbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHNlY29uZCwgY3JlYXRlIGJvbmUgaGllcmFyY2h5XG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMuZ2VvbWV0cnkuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0Z2JvbmUgPSB0aGlzLmdlb21ldHJ5LmJvbmVzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAoIGdib25lLnBhcmVudCAhPT0gLSAxICkgJiYgKCBnYm9uZS5wYXJlbnQgIT09IG51bGwgKSAmJiAoIGJvbmVzWyBnYm9uZS5wYXJlbnQgXSAhPT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGJvbmVzIGluIHRoZSBoaWVyYXJjaHlcblxuXHRcdFx0XHRcdGJvbmVzWyBnYm9uZS5wYXJlbnQgXS5hZGQoIGJvbmVzWyBpIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gdG9wbW9zdCBib25lLCBpbW1lZGlhdGUgY2hpbGQgb2YgdGhlIHNraW5uZWQgbWVzaFxuXG5cdFx0XHRcdFx0dGhpcy5hZGQoIGJvbmVzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG5vdyB0aGUgYm9uZXMgYXJlIHBhcnQgb2YgdGhlIHNjZW5lIGdyYXBoIGFuZCBjaGlsZHJlbiBvZiB0aGUgc2tpbm5lZCBtZXNoLlxuXHRcdC8vIGxldCdzIHVwZGF0ZSB0aGUgY29ycmVzcG9uZGluZyBtYXRyaWNlc1xuXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0cmV0dXJuIGJvbmVzO1xuXG5cdH0sXG5cblx0YmluZDogZnVuY3Rpb24gKCBza2VsZXRvbiwgYmluZE1hdHJpeCApIHtcblxuXHRcdHRoaXMuc2tlbGV0b24gPSBza2VsZXRvbjtcblxuXHRcdGlmICggYmluZE1hdHJpeCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMuc2tlbGV0b24uY2FsY3VsYXRlSW52ZXJzZXMoKTtcblxuXHRcdFx0YmluZE1hdHJpeCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJpbmRNYXRyaXguY29weSggYmluZE1hdHJpeCApO1xuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggYmluZE1hdHJpeCApO1xuXG5cdH0sXG5cblx0cG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5za2VsZXRvbi5wb3NlKCk7XG5cblx0fSxcblxuXHRub3JtYWxpemVTa2luV2VpZ2h0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHNjYWxlLCBpO1xuXG5cdFx0aWYgKCB0aGlzLmdlb21ldHJ5ICYmIHRoaXMuZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCB0aGlzLmdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgc3cgPSB0aGlzLmdlb21ldHJ5LnNraW5XZWlnaHRzWyBpIF07XG5cblx0XHRcdFx0c2NhbGUgPSAxLjAgLyBzdy5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHRcdFx0XHRpZiAoIHNjYWxlICE9PSBJbmZpbml0eSApIHtcblxuXHRcdFx0XHRcdHN3Lm11bHRpcGx5U2NhbGFyKCBzY2FsZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdy5zZXQoIDEsIDAsIDAsIDAgKTsgLy8gZG8gc29tZXRoaW5nIHJlYXNvbmFibGVcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgdmVjID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdFx0dmFyIHNraW5XZWlnaHQgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuc2tpbldlaWdodDtcblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBza2luV2VpZ2h0LmNvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdHZlYy54ID0gc2tpbldlaWdodC5nZXRYKCBpICk7XG5cdFx0XHRcdHZlYy55ID0gc2tpbldlaWdodC5nZXRZKCBpICk7XG5cdFx0XHRcdHZlYy56ID0gc2tpbldlaWdodC5nZXRaKCBpICk7XG5cdFx0XHRcdHZlYy53ID0gc2tpbldlaWdodC5nZXRXKCBpICk7XG5cblx0XHRcdFx0c2NhbGUgPSAxLjAgLyB2ZWMubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0XHRcdFx0aWYgKCBzY2FsZSAhPT0gSW5maW5pdHkgKSB7XG5cblx0XHRcdFx0XHR2ZWMubXVsdGlwbHlTY2FsYXIoIHNjYWxlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHZlYy5zZXQoIDEsIDAsIDAsIDAgKTsgLy8gZG8gc29tZXRoaW5nIHJlYXNvbmFibGVcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2tpbldlaWdodC5zZXRYWVpXKCBpLCB2ZWMueCwgdmVjLnksIHZlYy56LCB2ZWMudyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdE1lc2gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0XHRpZiAoIHRoaXMuYmluZE1vZGUgPT09ICdhdHRhY2hlZCcgKSB7XG5cblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5iaW5kTW9kZSA9PT0gJ2RldGFjaGVkJyApIHtcblxuXHRcdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLmJpbmRNYXRyaXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNraW5uZWRNZXNoOiBVbnJlY29nbml6ZWQgYmluZE1vZGU6ICcgKyB0aGlzLmJpbmRNb2RlICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGxpbmV3aWR0aDogPGZsb2F0PixcbiAqICBsaW5lY2FwOiBcInJvdW5kXCIsXG4gKiAgbGluZWpvaW46IFwicm91bmRcIlxuICogfVxuICovXG5cbmZ1bmN0aW9uIExpbmVCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUJhc2ljTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0dGhpcy5saW5ld2lkdGggPSAxO1xuXHR0aGlzLmxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLmxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lQmFzaWNNYXRlcmlhbDtcblxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTGluZUJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xuXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5saW5ld2lkdGggPSBzb3VyY2UubGluZXdpZHRoO1xuXHR0aGlzLmxpbmVjYXAgPSBzb3VyY2UubGluZWNhcDtcblx0dGhpcy5saW5lam9pbiA9IHNvdXJjZS5saW5lam9pbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCwgbW9kZSApIHtcblxuXHRpZiAoIG1vZGUgPT09IDEgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTGluZTogcGFyYW1ldGVyIFRIUkVFLkxpbmVQaWVjZXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIFRIUkVFLkxpbmVTZWdtZW50cyBpbnN0ZWFkLicgKTtcblxuXHR9XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cbn1cblxuTGluZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lLFxuXG5cdGlzTGluZTogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbIDAgXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0c3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgLSAxICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSArPSBzdGFydC5kaXN0YW5jZVRvKCBlbmQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBnZW9tZXRyeS5saW5lRGlzdGFuY2VzO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIDAgXSA9IDA7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdICs9IHZlcnRpY2VzWyBpIC0gMSBdLmRpc3RhbmNlVG8oIHZlcnRpY2VzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRcdHZhciBwcmVjaXNpb24gPSByYXljYXN0ZXIubGluZVByZWNpc2lvbjtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRcdHNwaGVyZS5yYWRpdXMgKz0gcHJlY2lzaW9uO1xuXG5cdFx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnZlcnNlTWF0cml4LmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0XHR2YXIgbG9jYWxQcmVjaXNpb24gPSBwcmVjaXNpb24gLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0XHR2YXIgbG9jYWxQcmVjaXNpb25TcSA9IGxvY2FsUHJlY2lzaW9uICogbG9jYWxQcmVjaXNpb247XG5cblx0XHRcdHZhciB2U3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIHZFbmQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGludGVyU2VnbWVudCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgaW50ZXJSYXkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIHN0ZXAgPSAoIHRoaXMgJiYgdGhpcy5pc0xpbmVTZWdtZW50cyApID8gMiA6IDE7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblxuXHRcdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGEgPSBpbmRpY2VzWyBpIF07XG5cdFx0XHRcdFx0XHR2YXIgYiA9IGluZGljZXNbIGkgKyAxIF07XG5cblx0XHRcdFx0XHRcdHZTdGFydC5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYSAqIDMgKTtcblx0XHRcdFx0XHRcdHZFbmQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGIgKiAzICk7XG5cblx0XHRcdFx0XHRcdHZhciBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggdlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOyBpIDwgbDsgaSArPSBzdGVwICkge1xuXG5cdFx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIDMgKiBpICk7XG5cdFx0XHRcdFx0XHR2RW5kLmZyb21BcnJheSggcG9zaXRpb25zLCAzICogaSArIDMgKTtcblxuXHRcdFx0XHRcdFx0dmFyIGRpc3RTcSA9IHJheS5kaXN0YW5jZVNxVG9TZWdtZW50KCB2U3RhcnQsIHZFbmQsIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBsb2NhbFByZWNpc2lvblNxICkgY29udGludWU7XG5cblx0XHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHRcdC8vIFdoYXQgZG8gd2Ugd2FudD8gaW50ZXJzZWN0aW9uIHBvaW50IG9uIHRoZSByYXkgb3Igb24gdGhlIHNlZ21lbnQ/P1xuXHRcdFx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLFxuXHRcdFx0XHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdFx0XHRcdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIG5iVmVydGljZXMgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbmJWZXJ0aWNlcyAtIDE7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdHZhciBkaXN0U3EgPSByYXkuZGlzdGFuY2VTcVRvU2VnbWVudCggdmVydGljZXNbIGkgXSwgdmVydGljZXNbIGkgKyAxIF0sIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aW50ZXJSYXkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7IC8vTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvblxuXG5cdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxuXHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmNvcHkoIHNvdXJjZS5nZW9tZXRyeSApO1xuXHRcdHRoaXMubWF0ZXJpYWwuY29weSggc291cmNlLm1hdGVyaWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lU2VnbWVudHMnO1xuXG59XG5cbkxpbmVTZWdtZW50cy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpbmVTZWdtZW50cyxcblxuXHRpc0xpbmVTZWdtZW50czogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdFx0XHRzdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXG5cdFx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gPSAoIGkgPT09IDAgKSA/IDAgOiBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdO1xuXHRcdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSArIDEgXSA9IGxpbmVEaXN0YW5jZXNbIGkgXSArIHN0YXJ0LmRpc3RhbmNlVG8oIGVuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lU2VnbWVudHMuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gZ2VvbWV0cnkubGluZURpc3RhbmNlcztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdFx0XHRzdGFydC5jb3B5KCB2ZXJ0aWNlc1sgaSBdICk7XG5cdFx0XHRcdFx0ZW5kLmNvcHkoIHZlcnRpY2VzWyBpICsgMSBdICk7XG5cblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gPSAoIGkgPT09IDAgKSA/IDAgOiBsaW5lRGlzdGFuY2VzWyBpIC0gMSBdO1xuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBzdGFydC5kaXN0YW5jZVRvKCBlbmQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSApXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1ncmV0ZXIgLyBodHRwOi8vZ2l0aHViLmNvbS9tZ3JldGVyXG4gKi9cblxuZnVuY3Rpb24gTGluZUxvb3AoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lTG9vcCc7XG5cbn1cblxuTGluZUxvb3AucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGluZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lTG9vcCxcblxuXHRpc0xpbmVMb29wOiB0cnVlLFxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHNpemU6IDxmbG9hdD4sXG4gKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD5cbiAqXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBQb2ludHNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BvaW50c01hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLnNpemUgPSAxO1xuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2ludHNNYXRlcmlhbDtcblxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlLmlzUG9pbnRzTWF0ZXJpYWwgPSB0cnVlO1xuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuc2l6ZSA9IHNvdXJjZS5zaXplO1xuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludHMnO1xuXG5cdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkID8gZ2VvbWV0cnkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbCA6IG5ldyBQb2ludHNNYXRlcmlhbCggeyBjb2xvcjogTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmIH0gKTtcblxufVxuXG5Qb2ludHMucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUG9pbnRzLFxuXG5cdGlzUG9pbnRzOiB0cnVlLFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSB0aGlzO1xuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cdFx0XHR2YXIgdGhyZXNob2xkID0gcmF5Y2FzdGVyLnBhcmFtcy5Qb2ludHMudGhyZXNob2xkO1xuXG5cdFx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0XHRzcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRcdHNwaGVyZS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRzcGhlcmUucmFkaXVzICs9IHRocmVzaG9sZDtcblxuXHRcdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0cmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIGludmVyc2VNYXRyaXggKTtcblxuXHRcdFx0dmFyIGxvY2FsVGhyZXNob2xkID0gdGhyZXNob2xkIC8gKCAoIHRoaXMuc2NhbGUueCArIHRoaXMuc2NhbGUueSArIHRoaXMuc2NhbGUueiApIC8gMyApO1xuXHRcdFx0dmFyIGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkO1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHZhciBpbnRlcnNlY3RQb2ludCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGZ1bmN0aW9uIHRlc3RQb2ludCggcG9pbnQsIGluZGV4ICkge1xuXG5cdFx0XHRcdHZhciByYXlQb2ludERpc3RhbmNlU3EgPSByYXkuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICk7XG5cblx0XHRcdFx0aWYgKCByYXlQb2ludERpc3RhbmNlU3EgPCBsb2NhbFRocmVzaG9sZFNxICkge1xuXG5cdFx0XHRcdFx0cmF5LmNsb3Nlc3RQb2ludFRvUG9pbnQoIHBvaW50LCBpbnRlcnNlY3RQb2ludCApO1xuXHRcdFx0XHRcdGludGVyc2VjdFBvaW50LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyc2VjdFBvaW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlVG9SYXk6IE1hdGguc3FydCggcmF5UG9pbnREaXN0YW5jZVNxICksXG5cdFx0XHRcdFx0XHRwb2ludDogaW50ZXJzZWN0UG9pbnQuY2xvbmUoKSxcblx0XHRcdFx0XHRcdGluZGV4OiBpbmRleCxcblx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRvYmplY3Q6IG9iamVjdFxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBpbmRpY2VzID0gaW5kZXguYXJyYXk7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGEgPSBpbmRpY2VzWyBpIF07XG5cblx0XHRcdFx0XHRcdHBvc2l0aW9uLmZyb21BcnJheSggcG9zaXRpb25zLCBhICogMyApO1xuXG5cdFx0XHRcdFx0XHR0ZXN0UG9pbnQoIHBvc2l0aW9uLCBhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0cG9zaXRpb24uZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKiAzICk7XG5cblx0XHRcdFx0XHRcdHRlc3RQb2ludCggcG9zaXRpb24sIGkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHRlc3RQb2ludCggdmVydGljZXNbIGkgXSwgaSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCkgKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gVmlkZW9UZXh0dXJlKCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cbn1cblxuVmlkZW9UZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogVmlkZW9UZXh0dXJlLFxuXG5cdGlzVmlkZW9UZXh0dXJlOiB0cnVlLFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZpZGVvID0gdGhpcy5pbWFnZTtcblxuXHRcdGlmICggdmlkZW8ucmVhZHlTdGF0ZSA+PSB2aWRlby5IQVZFX0NVUlJFTlRfREFUQSApIHtcblxuXHRcdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZSggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHR0aGlzLmltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG5cdHRoaXMubWlwbWFwcyA9IG1pcG1hcHM7XG5cblx0Ly8gbm8gZmxpcHBpbmcgZm9yIGN1YmUgdGV4dHVyZXNcblx0Ly8gKGFsc28gZmxpcHBpbmcgZG9lc24ndCB3b3JrIGZvciBjb21wcmVzc2VkIHRleHR1cmVzIClcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0Ly8gY2FuJ3QgZ2VuZXJhdGUgbWlwbWFwcyBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlc1xuXHQvLyBtaXBzIG11c3QgYmUgZW1iZWRkZWQgaW4gRERTIGZpbGVzXG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxufVxuXG5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29tcHJlc3NlZFRleHR1cmU7XG5cbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5pc0NvbXByZXNzZWRUZXh0dXJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIENhbnZhc1RleHR1cmUoIGNhbnZhcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxufVxuXG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhbnZhc1RleHR1cmU7XG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZS5pc0NhbnZhc1RleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgTWF0dCBEZXNMYXVyaWVycyAvIEBtYXR0ZGVzbFxuICogQGF1dGhvciBhdGl4IC8gYXJ0aHVyc2lsYmVyLmRlXG4gKi9cblxuZnVuY3Rpb24gRGVwdGhUZXh0dXJlKCB3aWR0aCwgaGVpZ2h0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBmb3JtYXQgKSB7XG5cblx0Zm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBEZXB0aEZvcm1hdDtcblxuXHRpZiAoIGZvcm1hdCAhPT0gRGVwdGhGb3JtYXQgJiYgZm9ybWF0ICE9PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCcgKTtcblxuXHR9XG5cblx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzXHQ9IGZhbHNlO1xuXG59XG5cbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERlcHRoVGV4dHVyZTtcbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUuaXNEZXB0aFRleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUdlb21ldHJ5KCBnZW9tZXRyeSApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1dpcmVmcmFtZUdlb21ldHJ5JztcblxuXHQvLyBidWZmZXJcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIGosIGwsIG8sIG9sO1xuXHR2YXIgZWRnZSA9IFsgMCwgMCBdLCBlZGdlcyA9IHt9LCBlLCBlZGdlMSwgZWRnZTI7XG5cdHZhciBrZXksIGtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblx0dmFyIHZlcnRleDtcblxuXHQvLyBkaWZmZXJlbnQgbG9naWMgZm9yIEdlb21ldHJ5IGFuZCBCdWZmZXJHZW9tZXRyeVxuXG5cdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVkZ2VzIHdpdGhvdXQgZHVwbGljYXRlc1xuXG5cdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdGVkZ2UxID0gZmFjZVsga2V5c1sgaiBdIF07XG5cdFx0XHRcdGVkZ2UyID0gZmFjZVsga2V5c1sgKCBqICsgMSApICUgMyBdIF07XG5cdFx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTsgLy8gc29ydGluZyBwcmV2ZW50cyBkdXBsaWNhdGVzXG5cdFx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdFx0aWYgKCBlZGdlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdIH07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICgga2V5IGluIGVkZ2VzICkge1xuXG5cdFx0XHRlID0gZWRnZXNbIGtleSBdO1xuXG5cdFx0XHR2ZXJ0ZXggPSBnZW9tZXRyeS52ZXJ0aWNlc1sgZS5pbmRleDEgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0dmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbIGUuaW5kZXgyIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdHZhciBwb3NpdGlvbiwgaW5kaWNlcywgZ3JvdXBzO1xuXHRcdHZhciBncm91cCwgc3RhcnQsIGNvdW50O1xuXHRcdHZhciBpbmRleDEsIGluZGV4MjtcblxuXHRcdHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBpbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGluZGljZXMgPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0aWYgKCBncm91cHMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdGdyb3VwcyA9IFsgeyBzdGFydDogMCwgY291bnQ6IGluZGljZXMuY291bnQsIG1hdGVyaWFsSW5kZXg6IDAgfSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHRcdGZvciAoIG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcblxuXHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgbyBdO1xuXG5cdFx0XHRcdHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdFx0Zm9yICggaSA9IHN0YXJ0LCBsID0gKCBzdGFydCArIGNvdW50ICk7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGVkZ2UxID0gaW5kaWNlcy5nZXRYKCBpICsgaiApO1xuXHRcdFx0XHRcdFx0ZWRnZTIgPSBpbmRpY2VzLmdldFgoIGkgKyAoIGogKyAxICkgJSAzICk7XG5cdFx0XHRcdFx0XHRlZGdlWyAwIF0gPSBNYXRoLm1pbiggZWRnZTEsIGVkZ2UyICk7IC8vIHNvcnRpbmcgcHJldmVudHMgZHVwbGljYXRlc1xuXHRcdFx0XHRcdFx0ZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApO1xuXG5cdFx0XHRcdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdFx0XHRcdGlmICggZWRnZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZWRnZXNbIGtleSBdID0geyBpbmRleDE6IGVkZ2VbIDAgXSwgaW5kZXgyOiBlZGdlWyAxIF0gfTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdFx0XHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHRcdFx0ZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGUuaW5kZXgxICk7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGUuaW5kZXgyICk7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0cG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdC8vIHRocmVlIGVkZ2VzIHBlciB0cmlhbmdsZSwgYW4gZWRnZSBpcyByZXByZXNlbnRlZCBhcyAoaW5kZXgxLCBpbmRleDIpXG5cdFx0XHRcdFx0Ly8gZS5nLiB0aGUgZmlyc3QgdHJpYW5nbGUgaGFzIHRoZSBmb2xsb3dpbmcgZWRnZXM6ICgwLDEpLCgxLDIpLCgyLDApXG5cblx0XHRcdFx0XHRpbmRleDEgPSAzICogaSArIGo7XG5cdFx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0XHRpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApO1xuXHRcdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgyICk7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG59XG5cbldpcmVmcmFtZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2lyZWZyYW1lR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICogUGFyYW1ldHJpYyBTdXJmYWNlcyBHZW9tZXRyeVxuICogYmFzZWQgb24gdGhlIGJyaWxsaWFudCBhcnRpY2xlIGJ5IEBwcmlkZW91dCBodHRwOi8vcHJpZGVvdXQubmV0L2Jsb2cvP3A9NDRcbiAqL1xuXG4vLyBQYXJhbWV0cmljR2VvbWV0cnlcblxuZnVuY3Rpb24gUGFyYW1ldHJpY0dlb21ldHJ5KCBmdW5jLCBzbGljZXMsIHN0YWNrcyApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BhcmFtZXRyaWNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdGZ1bmM6IGZ1bmMsXG5cdFx0c2xpY2VzOiBzbGljZXMsXG5cdFx0c3RhY2tzOiBzdGFja3Ncblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5QYXJhbWV0cmljR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5QYXJhbWV0cmljR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGFyYW1ldHJpY0dlb21ldHJ5O1xuXG4vLyBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5KCBmdW5jLCBzbGljZXMsIHN0YWNrcyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdGZ1bmM6IGZ1bmMsXG5cdFx0c2xpY2VzOiBzbGljZXMsXG5cdFx0c3RhY2tzOiBzdGFja3Ncblx0fTtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHR2YXIgRVBTID0gMC4wMDAwMTtcblxuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgcDAgPSBuZXcgVmVjdG9yMygpLCBwMSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBwdSA9IG5ldyBWZWN0b3IzKCksIHB2ID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgaSwgajtcblxuXHRpZiAoIGZ1bmMubGVuZ3RoIDwgMyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5QYXJhbWV0cmljR2VvbWV0cnk6IEZ1bmN0aW9uIG11c3Qgbm93IG1vZGlmeSBhIFZlY3RvcjMgYXMgdGhpcmQgcGFyYW1ldGVyLicgKTtcblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdHZhciBzbGljZUNvdW50ID0gc2xpY2VzICsgMTtcblxuXHRmb3IgKCBpID0gMDsgaSA8PSBzdGFja3M7IGkgKysgKSB7XG5cblx0XHR2YXIgdiA9IGkgLyBzdGFja3M7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSBzbGljZXM7IGogKysgKSB7XG5cblx0XHRcdHZhciB1ID0gaiAvIHNsaWNlcztcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdGZ1bmMoIHUsIHYsIHAwICk7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCBwMC54LCBwMC55LCBwMC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHQvLyBhcHByb3hpbWF0ZSB0YW5nZW50IHZlY3RvcnMgdmlhIGZpbml0ZSBkaWZmZXJlbmNlc1xuXG5cdFx0XHRpZiAoIHUgLSBFUFMgPj0gMCApIHtcblxuXHRcdFx0XHRmdW5jKCB1IC0gRVBTLCB2LCBwMSApO1xuXHRcdFx0XHRwdS5zdWJWZWN0b3JzKCBwMCwgcDEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmdW5jKCB1ICsgRVBTLCB2LCBwMSApO1xuXHRcdFx0XHRwdS5zdWJWZWN0b3JzKCBwMSwgcDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHYgLSBFUFMgPj0gMCApIHtcblxuXHRcdFx0XHRmdW5jKCB1LCB2IC0gRVBTLCBwMSApO1xuXHRcdFx0XHRwdi5zdWJWZWN0b3JzKCBwMCwgcDEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmdW5jKCB1LCB2ICsgRVBTLCBwMSApO1xuXHRcdFx0XHRwdi5zdWJWZWN0b3JzKCBwMSwgcDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjcm9zcyBwcm9kdWN0IG9mIHRhbmdlbnQgdmVjdG9ycyByZXR1cm5zIHN1cmZhY2Ugbm9ybWFsXG5cblx0XHRcdG5vcm1hbC5jcm9zc1ZlY3RvcnMoIHB1LCBwdiApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2cy5wdXNoKCB1LCB2ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRmb3IgKCBpID0gMDsgaSA8IHN0YWNrczsgaSArKyApIHtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgc2xpY2VzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgYSA9IGkgKiBzbGljZUNvdW50ICsgajtcblx0XHRcdHZhciBiID0gaSAqIHNsaWNlQ291bnQgKyBqICsgMTtcblx0XHRcdHZhciBjID0gKCBpICsgMSApICogc2xpY2VDb3VudCArIGogKyAxO1xuXHRcdFx0dmFyIGQgPSAoIGkgKyAxICkgKiBzbGljZUNvdW50ICsgajtcblxuXHRcdFx0Ly8gZmFjZXMgb25lIGFuZCB0d29cblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cblBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBjbG9ja3dvcmtnZWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL2Nsb2Nrd29ya2dlZWtcbiAqIEBhdXRob3IgdGltb3RoeXByYXRsZXkgLyBodHRwczovL2dpdGh1Yi5jb20vdGltb3RoeXByYXRsZXlcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBQb2x5aGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gUG9seWhlZHJvbkdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2x5aGVkcm9uR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0aW5kaWNlczogaW5kaWNlcyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9seWhlZHJvbkdlb21ldHJ5O1xuXG4vLyBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0aW5kaWNlczogaW5kaWNlcyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHRkZXRhaWwgPSBkZXRhaWwgfHwgMDtcblxuXHQvLyBkZWZhdWx0IGJ1ZmZlciBkYXRhXG5cblx0dmFyIHZlcnRleEJ1ZmZlciA9IFtdO1xuXHR2YXIgdXZCdWZmZXIgPSBbXTtcblxuXHQvLyB0aGUgc3ViZGl2aXNpb24gY3JlYXRlcyB0aGUgdmVydGV4IGJ1ZmZlciBkYXRhXG5cblx0c3ViZGl2aWRlKCBkZXRhaWwgKTtcblxuXHQvLyBhbGwgdmVydGljZXMgc2hvdWxkIGxpZSBvbiBhIGNvbmNlcHR1YWwgc3BoZXJlIHdpdGggYSBnaXZlbiByYWRpdXNcblxuXHRhcHBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdC8vIGZpbmFsbHksIGNyZWF0ZSB0aGUgdXYgZGF0YVxuXG5cdGdlbmVyYXRlVVZzKCk7XG5cblx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlciwgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlci5zbGljZSgpLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0aWYgKCBkZXRhaWwgPT09IDAgKSB7XG5cblx0XHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7IC8vIGZsYXQgbm9ybWFsc1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTsgLy8gc21vb3RoIG5vcm1hbHNcblxuXHR9XG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIHN1YmRpdmlkZSggZGV0YWlsICkge1xuXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIGZhY2VzIGFuZCBhcHBseSBhIHN1YmRpdmlzb24gd2l0aCB0aGUgZ2l2ZW4gZGV0YWlsIHZhbHVlXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHQvLyBnZXQgdGhlIHZlcnRpY2VzIG9mIHRoZSBmYWNlXG5cblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAwIF0sIGEgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAyIF0sIGMgKTtcblxuXHRcdFx0Ly8gcGVyZm9ybSBzdWJkaXZpc2lvblxuXG5cdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0dmFyIGNvbHMgPSBNYXRoLnBvdyggMiwgZGV0YWlsICk7XG5cblx0XHQvLyB3ZSB1c2UgdGhpcyBtdWx0aWRpbWVuc2lvbmFsIGFycmF5IGFzIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGNyZWF0aW5nIHRoZSBzdWJkaXZpc2lvblxuXG5cdFx0dmFyIHYgPSBbXTtcblxuXHRcdHZhciBpLCBqO1xuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgdmVydGljZXMgZm9yIHRoaXMgc3ViZGl2aXNpb25cblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7XG5cblx0XHRcdHZbIGkgXSA9IFtdO1xuXG5cdFx0XHR2YXIgYWogPSBhLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTtcblx0XHRcdHZhciBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHR2YXIgcm93cyA9IGNvbHMgLSBpO1xuXG5cdFx0XHRmb3IgKCBqID0gMDsgaiA8PSByb3dzOyBqICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhajtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgY29sczsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAyICogKCBjb2xzIC0gaSApIC0gMTsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0aWYgKCBqICUgMiA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpICsgMSBdWyBrIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYXBwcGx5UmFkaXVzKCByYWRpdXMgKSB7XG5cblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGl0ZXJhdGUgb3ZlciB0aGUgZW50aXJlIGJ1ZmZlciBhbmQgYXBwbHkgdGhlIHJhZGl1cyB0byBlYWNoIHZlcnRleFxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyWyBpICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdHZlcnRleC5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggcmFkaXVzICk7XG5cblx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDAgXSA9IHZlcnRleC54O1xuXHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMSBdID0gdmVydGV4Lnk7XG5cdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF0gPSB2ZXJ0ZXguejtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XG5cblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF07XG5cdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdHZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdO1xuXG5cdFx0XHR2YXIgdSA9IGF6aW11dGgoIHZlcnRleCApIC8gMiAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHR2YXIgdiA9IGluY2xpbmF0aW9uKCB2ZXJ0ZXggKSAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHR1dkJ1ZmZlci5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0fVxuXG5cdFx0Y29ycmVjdFVWcygpO1xuXG5cdFx0Y29ycmVjdFNlYW0oKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFNlYW0oKSB7XG5cblx0XHQvLyBoYW5kbGUgY2FzZSB3aGVuIGZhY2Ugc3RyYWRkbGVzIHRoZSBzZWFtLCBzZWUgIzMyNjlcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHV2QnVmZmVyLmxlbmd0aDsgaSArPSA2ICkge1xuXG5cdFx0XHQvLyB1diBkYXRhIG9mIGEgc2luZ2xlIGZhY2VcblxuXHRcdFx0dmFyIHgwID0gdXZCdWZmZXJbIGkgKyAwIF07XG5cdFx0XHR2YXIgeDEgPSB1dkJ1ZmZlclsgaSArIDIgXTtcblx0XHRcdHZhciB4MiA9IHV2QnVmZmVyWyBpICsgNCBdO1xuXG5cdFx0XHR2YXIgbWF4ID0gTWF0aC5tYXgoIHgwLCB4MSwgeDIgKTtcblx0XHRcdHZhciBtaW4gPSBNYXRoLm1pbiggeDAsIHgxLCB4MiApO1xuXG5cdFx0XHQvLyAwLjkgaXMgc29tZXdoYXQgYXJiaXRyYXJ5XG5cblx0XHRcdGlmICggbWF4ID4gMC45ICYmIG1pbiA8IDAuMSApIHtcblxuXHRcdFx0XHRpZiAoIHgwIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAwIF0gKz0gMTtcblx0XHRcdFx0aWYgKCB4MSA8IDAuMiApIHV2QnVmZmVyWyBpICsgMiBdICs9IDE7XG5cdFx0XHRcdGlmICggeDIgPCAwLjIgKSB1dkJ1ZmZlclsgaSArIDQgXSArPSAxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2hWZXJ0ZXgoIHZlcnRleCApIHtcblxuXHRcdHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFZlcnRleEJ5SW5kZXgoIGluZGV4LCB2ZXJ0ZXggKSB7XG5cblx0XHR2YXIgc3RyaWRlID0gaW5kZXggKiAzO1xuXG5cdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMCBdO1xuXHRcdHZlcnRleC55ID0gdmVydGljZXNbIHN0cmlkZSArIDEgXTtcblx0XHR2ZXJ0ZXgueiA9IHZlcnRpY2VzWyBzdHJpZGUgKyAyIF07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvcnJlY3RVVnMoKSB7XG5cblx0XHR2YXIgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdXZBID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDksIGogKz0gNiApIHtcblxuXHRcdFx0YS5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDAgXSwgdmVydGV4QnVmZmVyWyBpICsgMSBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF0gKTtcblx0XHRcdGIuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAzIF0sIHZlcnRleEJ1ZmZlclsgaSArIDQgXSwgdmVydGV4QnVmZmVyWyBpICsgNSBdICk7XG5cdFx0XHRjLnNldCggdmVydGV4QnVmZmVyWyBpICsgNiBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA3IF0sIHZlcnRleEJ1ZmZlclsgaSArIDggXSApO1xuXG5cdFx0XHR1dkEuc2V0KCB1dkJ1ZmZlclsgaiArIDAgXSwgdXZCdWZmZXJbIGogKyAxIF0gKTtcblx0XHRcdHV2Qi5zZXQoIHV2QnVmZmVyWyBqICsgMiBdLCB1dkJ1ZmZlclsgaiArIDMgXSApO1xuXHRcdFx0dXZDLnNldCggdXZCdWZmZXJbIGogKyA0IF0sIHV2QnVmZmVyWyBqICsgNSBdICk7XG5cblx0XHRcdGNlbnRyb2lkLmNvcHkoIGEgKS5hZGQoIGIgKS5hZGQoIGMgKS5kaXZpZGVTY2FsYXIoIDMgKTtcblxuXHRcdFx0dmFyIGF6aSA9IGF6aW11dGgoIGNlbnRyb2lkICk7XG5cblx0XHRcdGNvcnJlY3RVViggdXZBLCBqICsgMCwgYSwgYXppICk7XG5cdFx0XHRjb3JyZWN0VVYoIHV2QiwgaiArIDIsIGIsIGF6aSApO1xuXHRcdFx0Y29ycmVjdFVWKCB1dkMsIGogKyA0LCBjLCBhemkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFVWKCB1diwgc3RyaWRlLCB2ZWN0b3IsIGF6aW11dGggKSB7XG5cblx0XHRpZiAoICggYXppbXV0aCA8IDAgKSAmJiAoIHV2LnggPT09IDEgKSApIHtcblxuXHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gdXYueCAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoICggdmVjdG9yLnggPT09IDAgKSAmJiAoIHZlY3Rvci56ID09PSAwICkgKSB7XG5cblx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IGF6aW11dGggLyAyIC8gTWF0aC5QSSArIDAuNTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gQW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMsIGNvdW50ZXItY2xvY2t3aXNlIHdoZW4gbG9va2luZyBmcm9tIGFib3ZlLlxuXG5cdGZ1bmN0aW9uIGF6aW11dGgoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiBNYXRoLmF0YW4yKCB2ZWN0b3IueiwgLSB2ZWN0b3IueCApO1xuXG5cdH1cblxuXG5cdC8vIEFuZ2xlIGFib3ZlIHRoZSBYWiBwbGFuZS5cblxuXHRmdW5jdGlvbiBpbmNsaW5hdGlvbiggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7XG5cblx0fVxuXG59XG5cblBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBUZXRyYWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRldHJhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV0cmFoZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRldHJhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5UZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRldHJhaGVkcm9uR2VvbWV0cnk7XG5cbi8vIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXHRcdDEsIDEsIDEsIFx0LSAxLCAtIDEsIDEsIFx0LSAxLCAxLCAtIDEsIFx0MSwgLSAxLCAtIDFcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQyLCAxLCAwLCBcdDAsIDMsIDIsXHQxLCAzLCAwLFx0MiwgMywgMVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5UZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBPY3RhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gT2N0YWhlZHJvbkdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuT2N0YWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuT2N0YWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9jdGFoZWRyb25HZW9tZXRyeTtcblxuLy8gT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXHRcdDEsIDAsIDAsIFx0LSAxLCAwLCAwLFx0MCwgMSwgMCxcblx0XHQwLCAtIDEsIDAsIFx0MCwgMCwgMSxcdDAsIDAsIC0gMVxuXHRdO1xuXG5cdHZhciBpbmRpY2VzID0gW1xuXHRcdDAsIDIsIDQsXHQwLCA0LCAzLFx0MCwgMywgNSxcblx0XHQwLCA1LCAyLFx0MSwgMiwgNSxcdDEsIDUsIDMsXG5cdFx0MSwgMywgNCxcdDEsIDQsIDJcblx0XTtcblxuXHRQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbk9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBJY29zYWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIEljb3NhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uR2VvbWV0cnk7XG5cbi8vIEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0dmFyIHQgPSAoIDEgKyBNYXRoLnNxcnQoIDUgKSApIC8gMjtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0LSAxLCB0LCAwLCBcdDEsIHQsIDAsIFx0LSAxLCAtIHQsIDAsIFx0MSwgLSB0LCAwLFxuXHRcdCAwLCAtIDEsIHQsIFx0MCwgMSwgdCxcdDAsIC0gMSwgLSB0LCBcdDAsIDEsIC0gdCxcblx0XHQgdCwgMCwgLSAxLCBcdHQsIDAsIDEsIFx0LSB0LCAwLCAtIDEsIFx0LSB0LCAwLCAxXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0IDAsIDExLCA1LCBcdDAsIDUsIDEsIFx0MCwgMSwgNywgXHQwLCA3LCAxMCwgXHQwLCAxMCwgMTEsXG5cdFx0IDEsIDUsIDksIFx0NSwgMTEsIDQsXHQxMSwgMTAsIDIsXHQxMCwgNywgNixcdDcsIDEsIDgsXG5cdFx0IDMsIDksIDQsIFx0MywgNCwgMixcdDMsIDIsIDYsXHQzLCA2LCA4LFx0MywgOCwgOSxcblx0XHQgNCwgOSwgNSwgXHQyLCA0LCAxMSxcdDYsIDIsIDEwLFx0OCwgNiwgNyxcdDksIDgsIDFcblx0XTtcblxuXHRQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0dGhpcy50eXBlID0gJ0ljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG59XG5cbkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgQWJlIFBhem9zIC8gaHR0cHM6Ly9oYW1vaWQuY29tXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIERvZGVjYWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIERvZGVjYWhlZHJvbkdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0RvZGVjYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkRvZGVjYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uR2VvbWV0cnk7XG5cbi8vIERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXHR2YXIgciA9IDEgLyB0O1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtcblxuXHRcdC8vICjCsTEsIMKxMSwgwrExKVxuXHRcdC0gMSwgLSAxLCAtIDEsXHQtIDEsIC0gMSwgMSxcblx0XHQtIDEsIDEsIC0gMSwgLSAxLCAxLCAxLFxuXHRcdDEsIC0gMSwgLSAxLCAxLCAtIDEsIDEsXG5cdFx0MSwgMSwgLSAxLCAxLCAxLCAxLFxuXG5cdFx0Ly8gKDAsIMKxMS/PhiwgwrHPhilcblx0XHQgMCwgLSByLCAtIHQsIDAsIC0gciwgdCxcblx0XHQgMCwgciwgLSB0LCAwLCByLCB0LFxuXG5cdFx0Ly8gKMKxMS/PhiwgwrHPhiwgMClcblx0XHQtIHIsIC0gdCwgMCwgLSByLCB0LCAwLFxuXHRcdCByLCAtIHQsIDAsIHIsIHQsIDAsXG5cblx0XHQvLyAowrHPhiwgMCwgwrExL8+GKVxuXHRcdC0gdCwgMCwgLSByLCB0LCAwLCAtIHIsXG5cdFx0LSB0LCAwLCByLCB0LCAwLCByXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0MywgMTEsIDcsIFx0MywgNywgMTUsIFx0MywgMTUsIDEzLFxuXHRcdDcsIDE5LCAxNywgXHQ3LCAxNywgNiwgXHQ3LCA2LCAxNSxcblx0XHQxNywgNCwgOCwgXHQxNywgOCwgMTAsIFx0MTcsIDEwLCA2LFxuXHRcdDgsIDAsIDE2LCBcdDgsIDE2LCAyLCBcdDgsIDIsIDEwLFxuXHRcdDAsIDEyLCAxLCBcdDAsIDEsIDE4LCBcdDAsIDE4LCAxNixcblx0XHQ2LCAxMCwgMiwgXHQ2LCAyLCAxMywgXHQ2LCAxMywgMTUsXG5cdFx0MiwgMTYsIDE4LCBcdDIsIDE4LCAzLCBcdDIsIDMsIDEzLFxuXHRcdDE4LCAxLCA5LCBcdDE4LCA5LCAxMSwgXHQxOCwgMTEsIDMsXG5cdFx0NCwgMTQsIDEyLCBcdDQsIDEyLCAwLCBcdDQsIDAsIDgsXG5cdFx0MTEsIDksIDUsIFx0MTEsIDUsIDE5LCBcdDExLCAxOSwgNyxcblx0XHQxOSwgNSwgMTQsIFx0MTksIDE0LCA0LCBcdDE5LCA0LCAxNyxcblx0XHQxLCAxMiwgMTQsIFx0MSwgMTQsIDUsIFx0MSwgNSwgOVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG59XG5cbkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlIC8gaHR0cHM6Ly9naXRodWIuY29tL29vc21veGllY29kZVxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgbWluaW5nb2xkIC8gaHR0cHM6Ly9naXRodWIuY29tL21pbmluZ29sZFxuICogQGF1dGhvciBqb25vYnIxIC8gaHR0cHM6Ly9naXRodWIuY29tL2pvbm9icjFcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICovXG5cbi8vIFR1YmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBUdWJlR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkLCB0YXBlciApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1R1YmVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBhdGg6IHBhdGgsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGNsb3NlZDogY2xvc2VkXG5cdH07XG5cblx0aWYgKCB0YXBlciAhPT0gdW5kZWZpbmVkICkgY29uc29sZS53YXJuKCAnVEhSRUUuVHViZUdlb21ldHJ5OiB0YXBlciBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR2YXIgYnVmZmVyR2VvbWV0cnkgPSBuZXcgVHViZUJ1ZmZlckdlb21ldHJ5KCBwYXRoLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGl1cywgcmFkaWFsU2VnbWVudHMsIGNsb3NlZCApO1xuXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcblxuXHR0aGlzLnRhbmdlbnRzID0gYnVmZmVyR2VvbWV0cnkudGFuZ2VudHM7XG5cdHRoaXMubm9ybWFscyA9IGJ1ZmZlckdlb21ldHJ5Lm5vcm1hbHM7XG5cdHRoaXMuYmlub3JtYWxzID0gYnVmZmVyR2VvbWV0cnkuYmlub3JtYWxzO1xuXG5cdC8vIGNyZWF0ZSBnZW9tZXRyeVxuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBidWZmZXJHZW9tZXRyeSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5UdWJlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5UdWJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUdlb21ldHJ5O1xuXG4vLyBUdWJlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVHViZUJ1ZmZlckdlb21ldHJ5KCBwYXRoLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGl1cywgcmFkaWFsU2VnbWVudHMsIGNsb3NlZCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1R1YmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBhdGg6IHBhdGgsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGNsb3NlZDogY2xvc2VkXG5cdH07XG5cblx0dHVidWxhclNlZ21lbnRzID0gdHVidWxhclNlZ21lbnRzIHx8IDY0O1xuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0cmFkaWFsU2VnbWVudHMgPSByYWRpYWxTZWdtZW50cyB8fCA4O1xuXHRjbG9zZWQgPSBjbG9zZWQgfHwgZmFsc2U7XG5cblx0dmFyIGZyYW1lcyA9IHBhdGguY29tcHV0ZUZyZW5ldEZyYW1lcyggdHVidWxhclNlZ21lbnRzLCBjbG9zZWQgKTtcblxuXHQvLyBleHBvc2UgaW50ZXJuYWxzXG5cblx0dGhpcy50YW5nZW50cyA9IGZyYW1lcy50YW5nZW50cztcblx0dGhpcy5ub3JtYWxzID0gZnJhbWVzLm5vcm1hbHM7XG5cdHRoaXMuYmlub3JtYWxzID0gZnJhbWVzLmJpbm9ybWFscztcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgUCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGksIGo7XG5cblx0Ly8gYnVmZmVyXG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblx0dmFyIGluZGljZXMgPSBbXTtcblxuXHQvLyBjcmVhdGUgYnVmZmVyIGRhdGFcblxuXHRnZW5lcmF0ZUJ1ZmZlckRhdGEoKTtcblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0Ly8gZnVuY3Rpb25zXG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVCdWZmZXJEYXRhKCkge1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdGdlbmVyYXRlU2VnbWVudCggaSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIG5vdCBjbG9zZWQsIGdlbmVyYXRlIHRoZSBsYXN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFsc1xuXHRcdC8vIGF0IHRoZSByZWd1bGFyIHBvc2l0aW9uIG9uIHRoZSBnaXZlbiBwYXRoXG5cdFx0Ly9cblx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgY2xvc2VkLCBkdXBsaWNhdGUgdGhlIGZpcnN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFscyAodXZzIHdpbGwgZGlmZmVyKVxuXG5cdFx0Z2VuZXJhdGVTZWdtZW50KCAoIGNsb3NlZCA9PT0gZmFsc2UgKSA/IHR1YnVsYXJTZWdtZW50cyA6IDAgKTtcblxuXHRcdC8vIHV2cyBhcmUgZ2VuZXJhdGVkIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24uXG5cdFx0Ly8gdGhpcyBtYWtlcyBpdCBlYXN5IGNvbXB1dGUgY29ycmVjdCB2YWx1ZXMgZm9yIGNsb3NlZCBnZW9tZXRyaWVzXG5cblx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0Ly8gZmluYWxseSBjcmVhdGUgZmFjZXNcblxuXHRcdGdlbmVyYXRlSW5kaWNlcygpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVNlZ21lbnQoIGkgKSB7XG5cblx0XHQvLyB3ZSB1c2UgZ2V0UG9pbnRBdCB0byBzYW1wbGUgZXZlbmx5IGRpc3RyaWJ1dGVkIHBvaW50cyBmcm9tIHRoZSBnaXZlbiBwYXRoXG5cblx0XHRQID0gcGF0aC5nZXRQb2ludEF0KCBpIC8gdHVidWxhclNlZ21lbnRzLCBQICk7XG5cblx0XHQvLyByZXRyaWV2ZSBjb3JyZXNwb25kaW5nIG5vcm1hbCBhbmQgYmlub3JtYWxcblxuXHRcdHZhciBOID0gZnJhbWVzLm5vcm1hbHNbIGkgXTtcblx0XHR2YXIgQiA9IGZyYW1lcy5iaW5vcm1hbHNbIGkgXTtcblxuXHRcdC8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0dmFyIHNpbiA9IE1hdGguc2luKCB2ICk7XG5cdFx0XHR2YXIgY29zID0gLSBNYXRoLmNvcyggdiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFsLnggPSAoIGNvcyAqIE4ueCArIHNpbiAqIEIueCApO1xuXHRcdFx0bm9ybWFsLnkgPSAoIGNvcyAqIE4ueSArIHNpbiAqIEIueSApO1xuXHRcdFx0bm9ybWFsLnogPSAoIGNvcyAqIE4ueiArIHNpbiAqIEIueiApO1xuXHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gUC54ICsgcmFkaXVzICogbm9ybWFsLng7XG5cdFx0XHR2ZXJ0ZXgueSA9IFAueSArIHJhZGl1cyAqIG5vcm1hbC55O1xuXHRcdFx0dmVydGV4LnogPSBQLnogKyByYWRpdXMgKiBub3JtYWwuejtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUluZGljZXMoKSB7XG5cblx0XHRmb3IgKCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcblx0XHRcdFx0dmFyIGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0dmFyIGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7XG5cdFx0XHRcdHZhciBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRcdHV2LnggPSBpIC8gdHVidWxhclNlZ21lbnRzO1xuXHRcdFx0XHR1di55ID0gaiAvIHJhZGlhbFNlZ21lbnRzO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR1YmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG9vc21veGllY29kZVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKiBiYXNlZCBvbiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcHF0b3J1cy9cbiAqL1xuXG4vLyBUb3J1c0tub3RHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0tub3RHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGlhbFNlZ21lbnRzLCBwLCBxLCBoZWlnaHRTY2FsZSApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1RvcnVzS25vdEdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0cDogcCxcblx0XHRxOiBxXG5cdH07XG5cblx0aWYgKCBoZWlnaHRTY2FsZSAhPT0gdW5kZWZpbmVkICkgY29uc29sZS53YXJuKCAnVEhSRUUuVG9ydXNLbm90R2VvbWV0cnk6IGhlaWdodFNjYWxlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2NhbGUoIHgsIHksIHogKSBpbnN0ZWFkLicgKTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5Ub3J1c0tub3RHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEdlb21ldHJ5O1xuXG4vLyBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGlhbFNlZ21lbnRzLCBwLCBxICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90QnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRwOiBwLFxuXHRcdHE6IHFcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0dHViZSA9IHR1YmUgfHwgMC40O1xuXHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKSB8fCA2NDtcblx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApIHx8IDg7XG5cdHAgPSBwIHx8IDI7XG5cdHEgPSBxIHx8IDM7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpLCBqO1xuXG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgUDEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgUDIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBCID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIFQgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgTiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgKysgaSApIHtcblxuXHRcdC8vIHRoZSByYWRpYW4gXCJ1XCIgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZSBvZiB0aGUgY3VycmVudCB0dWJ1bGFyIHNlZ2VtZW50XG5cblx0XHR2YXIgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBwICogTWF0aC5QSSAqIDI7XG5cblx0XHQvLyBub3cgd2UgY2FsY3VsYXRlIHR3byBwb2ludHMuIFAxIGlzIG91ciBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZSwgUDIgaXMgYSBsaXR0bGUgZmFydGhlciBhaGVhZC5cblx0XHQvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCBcImNvb3JkaW5hdGUgc3BhY2VcIiwgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCB2ZXJ0ZXggcG9zaXRpb25zXG5cblx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUsIHAsIHEsIHJhZGl1cywgUDEgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUgKyAwLjAxLCBwLCBxLCByYWRpdXMsIFAyICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcblxuXHRcdFQuc3ViVmVjdG9ycyggUDIsIFAxICk7XG5cdFx0Ti5hZGRWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHRCLmNyb3NzVmVjdG9ycyggVCwgTiApO1xuXHRcdE4uY3Jvc3NWZWN0b3JzKCBCLCBUICk7XG5cblx0XHQvLyBub3JtYWxpemUgQiwgTi4gVCBjYW4gYmUgaWdub3JlZCwgd2UgZG9uJ3QgdXNlIGl0XG5cblx0XHRCLm5vcm1hbGl6ZSgpO1xuXHRcdE4ubm9ybWFsaXplKCk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgKysgaiApIHtcblxuXHRcdFx0Ly8gbm93IGNhbGN1bGF0ZSB0aGUgdmVydGljZXMuIHRoZXkgYXJlIG5vdGhpbmcgbW9yZSB0aGFuIGFuIGV4dHJ1c2lvbiBvZiB0aGUgdG9ydXMgY3VydmUuXG5cdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cblxuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblx0XHRcdHZhciBjeCA9IC0gdHViZSAqIE1hdGguY29zKCB2ICk7XG5cdFx0XHR2YXIgY3kgPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0Ly8gbm93IGNhbGN1bGF0ZSB0aGUgZmluYWwgdmVydGV4IHBvc2l0aW9uLlxuXHRcdFx0Ly8gZmlyc3Qgd2Ugb3JpZW50IHRoZSBleHRydXNpb24gd2l0aCBvdXIgYmFzaXMgdmVjdG9zLCB0aGVuIHdlIGFkZCBpdCB0byB0aGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmVcblxuXHRcdFx0dmVydGV4LnggPSBQMS54ICsgKCBjeCAqIE4ueCArIGN5ICogQi54ICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IFAxLnkgKyAoIGN4ICogTi55ICsgY3kgKiBCLnkgKTtcblx0XHRcdHZlcnRleC56ID0gUDEueiArICggY3ggKiBOLnogKyBjeSAqIEIueiApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcblxuXHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgUDEgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2cy5wdXNoKCBpIC8gdHVidWxhclNlZ21lbnRzICk7XG5cdFx0XHR1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRmb3IgKCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHR2YXIgYSA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyAoIGkgLSAxICk7XG5cdFx0XHR2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApO1xuXHRcdFx0dmFyIGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7XG5cdFx0XHR2YXIgZCA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0Ly8gdGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZVxuXG5cdGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBwb3NpdGlvbiApIHtcblxuXHRcdHZhciBjdSA9IE1hdGguY29zKCB1ICk7XG5cdFx0dmFyIHN1ID0gTWF0aC5zaW4oIHUgKTtcblx0XHR2YXIgcXVPdmVyUCA9IHEgLyBwICogdTtcblx0XHR2YXIgY3MgPSBNYXRoLmNvcyggcXVPdmVyUCApO1xuXG5cdFx0cG9zaXRpb24ueCA9IHJhZGl1cyAqICggMiArIGNzICkgKiAwLjUgKiBjdTtcblx0XHRwb3NpdGlvbi55ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIHN1ICogMC41O1xuXHRcdHBvc2l0aW9uLnogPSByYWRpdXMgKiBNYXRoLnNpbiggcXVPdmVyUCApICogMC41O1xuXG5cdH1cblxufVxuXG5Ub3J1c0tub3RCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBUb3J1c0dlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHR1YmU6IHR1YmUsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdGFyYzogYXJjXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBUb3J1c0J1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRvcnVzR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Ub3J1c0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzR2VvbWV0cnk7XG5cbi8vIFRvcnVzQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVG9ydXNCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0J1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0YXJjOiBhcmNcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0dHViZSA9IHR1YmUgfHwgMC40O1xuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICkgfHwgNjtcblx0YXJjID0gYXJjIHx8IE1hdGguUEkgKiAyO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBqLCBpO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0dmFyIHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogYXJjO1xuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdHZlcnRleC55ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdHZlcnRleC56ID0gdHViZSAqIE1hdGguc2luKCB2ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdGNlbnRlci54ID0gcmFkaXVzICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdGNlbnRlci55ID0gcmFkaXVzICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdG5vcm1hbC5zdWJWZWN0b3JzKCB2ZXJ0ZXgsIGNlbnRlciApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdGZvciAoIGogPSAxOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdHZhciBhID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiBqICsgaSAtIDE7XG5cdFx0XHR2YXIgYiA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaSAtIDE7XG5cdFx0XHR2YXIgYyA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblx0XHRcdHZhciBkID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblxuXHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cblRvcnVzQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5Ub3J1c0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIFBvcnQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L2VhcmN1dCAodjIuMS4yKVxuICovXG5cbnZhciBFYXJjdXQgPSB7XG5cblx0dHJpYW5ndWxhdGU6IGZ1bmN0aW9uICggZGF0YSwgaG9sZUluZGljZXMsIGRpbSApIHtcblxuXHRcdGRpbSA9IGRpbSB8fCAyO1xuXG5cdFx0dmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoLFxuXHRcdFx0b3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWyAwIF0gKiBkaW0gOiBkYXRhLmxlbmd0aCxcblx0XHRcdG91dGVyTm9kZSA9IGxpbmtlZExpc3QoIGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUgKSxcblx0XHRcdHRyaWFuZ2xlcyA9IFtdO1xuXG5cdFx0aWYgKCAhIG91dGVyTm9kZSApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHR2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblxuXHRcdGlmICggZGF0YS5sZW5ndGggPiA4MCAqIGRpbSApIHtcblxuXHRcdFx0bWluWCA9IG1heFggPSBkYXRhWyAwIF07XG5cdFx0XHRtaW5ZID0gbWF4WSA9IGRhdGFbIDEgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0gKSB7XG5cblx0XHRcdFx0eCA9IGRhdGFbIGkgXTtcblx0XHRcdFx0eSA9IGRhdGFbIGkgKyAxIF07XG5cdFx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdFx0aWYgKCB5IDwgbWluWSApIG1pblkgPSB5O1xuXHRcdFx0XHRpZiAoIHggPiBtYXhYICkgbWF4WCA9IHg7XG5cdFx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxuXG5cdFx0XHRpbnZTaXplID0gTWF0aC5tYXgoIG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSApO1xuXHRcdFx0aW52U2l6ZSA9IGludlNpemUgIT09IDAgPyAxIC8gaW52U2l6ZSA6IDA7XG5cblx0XHR9XG5cblx0XHRlYXJjdXRMaW5rZWQoIG91dGVyTm9kZSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRcdHJldHVybiB0cmlhbmdsZXM7XG5cblx0fVxuXG59O1xuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcblxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XG5cblx0dmFyIGksIGxhc3Q7XG5cblx0aWYgKCBjbG9ja3dpc2UgPT09ICggc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgPiAwICkgKSB7XG5cblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9XG5cblx0aWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7XG5cblx0XHRyZW1vdmVOb2RlKCBsYXN0ICk7XG5cdFx0bGFzdCA9IGxhc3QubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIGxhc3Q7XG5cbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcblxuZnVuY3Rpb24gZmlsdGVyUG9pbnRzKCBzdGFydCwgZW5kICkge1xuXG5cdGlmICggISBzdGFydCApIHJldHVybiBzdGFydDtcblx0aWYgKCAhIGVuZCApIGVuZCA9IHN0YXJ0O1xuXG5cdHZhciBwID0gc3RhcnQsIGFnYWluO1xuXG5cdGRvIHtcblxuXHRcdGFnYWluID0gZmFsc2U7XG5cblx0XHRpZiAoICEgcC5zdGVpbmVyICYmICggZXF1YWxzKCBwLCBwLm5leHQgKSB8fCBhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID09PSAwICkgKSB7XG5cblx0XHRcdHJlbW92ZU5vZGUoIHAgKTtcblx0XHRcdHAgPSBlbmQgPSBwLnByZXY7XG5cdFx0XHRpZiAoIHAgPT09IHAubmV4dCApIGJyZWFrO1xuXHRcdFx0YWdhaW4gPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cCA9IHAubmV4dDtcblxuXHRcdH1cblxuXHR9IHdoaWxlICggYWdhaW4gfHwgcCAhPT0gZW5kICk7XG5cblx0cmV0dXJuIGVuZDtcblxufVxuXG4vLyBtYWluIGVhciBzbGljaW5nIGxvb3Agd2hpY2ggdHJpYW5ndWxhdGVzIGEgcG9seWdvbiAoZ2l2ZW4gYXMgYSBsaW5rZWQgbGlzdClcblxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzICkge1xuXG5cdGlmICggISBlYXIgKSByZXR1cm47XG5cblx0Ly8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuXG5cdGlmICggISBwYXNzICYmIGludlNpemUgKSBpbmRleEN1cnZlKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHR2YXIgc3RvcCA9IGVhciwgcHJldiwgbmV4dDtcblxuXHQvLyBpdGVyYXRlIHRocm91Z2ggZWFycywgc2xpY2luZyB0aGVtIG9uZSBieSBvbmVcblxuXHR3aGlsZSAoIGVhci5wcmV2ICE9PSBlYXIubmV4dCApIHtcblxuXHRcdHByZXYgPSBlYXIucHJldjtcblx0XHRuZXh0ID0gZWFyLm5leHQ7XG5cblx0XHRpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7XG5cblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcHJldi5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggZWFyLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gKTtcblxuXHRcdFx0cmVtb3ZlTm9kZSggZWFyICk7XG5cblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRpY2UgbGVhZHMgdG8gbGVzcyBzbGl2ZXIgdHJpYW5nbGVzXG5cdFx0XHRlYXIgPSBuZXh0Lm5leHQ7XG5cdFx0XHRzdG9wID0gbmV4dC5uZXh0O1xuXG5cdFx0XHRjb250aW51ZTtcblxuXHRcdH1cblxuXHRcdGVhciA9IG5leHQ7XG5cblx0XHQvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xuXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XG5cblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG5cblx0XHRcdGlmICggISBwYXNzICkge1xuXG5cdFx0XHRcdGVhcmN1dExpbmtlZCggZmlsdGVyUG9pbnRzKCBlYXIgKSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDEgKTtcblxuXHRcdFx0XHQvLyBpZiB0aGlzIGRpZG4ndCB3b3JrLCB0cnkgY3VyaW5nIGFsbCBzbWFsbCBzZWxmLWludGVyc2VjdGlvbnMgbG9jYWxseVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBwYXNzID09PSAxICkge1xuXG5cdFx0XHRcdGVhciA9IGN1cmVMb2NhbEludGVyc2VjdGlvbnMoIGVhciwgdHJpYW5nbGVzLCBkaW0gKTtcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAyICk7XG5cblx0XHRcdFx0Ly8gYXMgYSBsYXN0IHJlc29ydCwgdHJ5IHNwbGl0dGluZyB0aGUgcmVtYWluaW5nIHBvbHlnb24gaW50byB0d29cblxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMiApIHtcblxuXHRcdFx0XHRzcGxpdEVhcmN1dCggZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBjaGVjayB3aGV0aGVyIGEgcG9seWdvbiBub2RlIGZvcm1zIGEgdmFsaWQgZWFyIHdpdGggYWRqYWNlbnQgbm9kZXNcblxuZnVuY3Rpb24gaXNFYXIoIGVhciApIHtcblxuXHR2YXIgYSA9IGVhci5wcmV2LFxuXHRcdGIgPSBlYXIsXG5cdFx0YyA9IGVhci5uZXh0O1xuXG5cdGlmICggYXJlYSggYSwgYiwgYyApID49IDAgKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cblx0Ly8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcblx0dmFyIHAgPSBlYXIubmV4dC5uZXh0O1xuXG5cdHdoaWxlICggcCAhPT0gZWFyLnByZXYgKSB7XG5cblx0XHRpZiAoIHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkgKSAmJiBhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmZ1bmN0aW9uIGlzRWFySGFzaGVkKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKSB7XG5cblx0dmFyIGEgPSBlYXIucHJldixcblx0XHRiID0gZWFyLFxuXHRcdGMgPSBlYXIubmV4dDtcblxuXHRpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG5cdC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXG5cblx0dmFyIG1pblRYID0gYS54IDwgYi54ID8gKCBhLnggPCBjLnggPyBhLnggOiBjLnggKSA6ICggYi54IDwgYy54ID8gYi54IDogYy54ICksXG5cdFx0bWluVFkgPSBhLnkgPCBiLnkgPyAoIGEueSA8IGMueSA/IGEueSA6IGMueSApIDogKCBiLnkgPCBjLnkgPyBiLnkgOiBjLnkgKSxcblx0XHRtYXhUWCA9IGEueCA+IGIueCA/ICggYS54ID4gYy54ID8gYS54IDogYy54ICkgOiAoIGIueCA+IGMueCA/IGIueCA6IGMueCApLFxuXHRcdG1heFRZID0gYS55ID4gYi55ID8gKCBhLnkgPiBjLnkgPyBhLnkgOiBjLnkgKSA6ICggYi55ID4gYy55ID8gYi55IDogYy55ICk7XG5cblx0Ly8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcblxuXHR2YXIgbWluWiA9IHpPcmRlciggbWluVFgsIG1pblRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplICksXG5cdFx0bWF4WiA9IHpPcmRlciggbWF4VFgsIG1heFRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cblx0Ly8gZmlyc3QgbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG5cblx0dmFyIHAgPSBlYXIubmV4dFo7XG5cblx0d2hpbGUgKCBwICYmIHAueiA8PSBtYXhaICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55ICkgJiZcblx0XHRcdFx0YXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdHAgPSBwLm5leHRaO1xuXG5cdH1cblxuXHQvLyB0aGVuIGxvb2sgZm9yIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcblxuXHRwID0gZWFyLnByZXZaO1xuXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiApIHtcblxuXHRcdGlmICggcCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiZcblx0XHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRcdGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblxuXHRcdHAgPSBwLnByZXZaO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKCBzdGFydCwgdHJpYW5nbGVzLCBkaW0gKSB7XG5cblx0dmFyIHAgPSBzdGFydDtcblxuXHRkbyB7XG5cblx0XHR2YXIgYSA9IHAucHJldiwgYiA9IHAubmV4dC5uZXh0O1xuXG5cdFx0aWYgKCAhIGVxdWFscyggYSwgYiApICYmIGludGVyc2VjdHMoIGEsIHAsIHAubmV4dCwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgKSB7XG5cblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBhLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBwLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBiLmkgLyBkaW0gKTtcblxuXHRcdFx0Ly8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRyZW1vdmVOb2RlKCBwLm5leHQgKTtcblxuXHRcdFx0cCA9IHN0YXJ0ID0gYjtcblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cmV0dXJuIHA7XG5cbn1cblxuLy8gdHJ5IHNwbGl0dGluZyBwb2x5Z29uIGludG8gdHdvIGFuZCB0cmlhbmd1bGF0ZSB0aGVtIGluZGVwZW5kZW50bHlcblxuZnVuY3Rpb24gc3BsaXRFYXJjdXQoIHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHQvLyBsb29rIGZvciBhIHZhbGlkIGRpYWdvbmFsIHRoYXQgZGl2aWRlcyB0aGUgcG9seWdvbiBpbnRvIHR3b1xuXG5cdHZhciBhID0gc3RhcnQ7XG5cblx0ZG8ge1xuXG5cdFx0dmFyIGIgPSBhLm5leHQubmV4dDtcblxuXHRcdHdoaWxlICggYiAhPT0gYS5wcmV2ICkge1xuXG5cdFx0XHRpZiAoIGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbCggYSwgYiApICkge1xuXG5cdFx0XHRcdC8vIHNwbGl0IHRoZSBwb2x5Z29uIGluIHR3byBieSB0aGUgZGlhZ29uYWxcblxuXHRcdFx0XHR2YXIgYyA9IHNwbGl0UG9seWdvbiggYSwgYiApO1xuXG5cdFx0XHRcdC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG5cblx0XHRcdFx0YSA9IGZpbHRlclBvaW50cyggYSwgYS5uZXh0ICk7XG5cdFx0XHRcdGMgPSBmaWx0ZXJQb2ludHMoIGMsIGMubmV4dCApO1xuXG5cdFx0XHRcdC8vIHJ1biBlYXJjdXQgb24gZWFjaCBoYWxmXG5cblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBhLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRiID0gYi5uZXh0O1xuXG5cdFx0fVxuXG5cdFx0YSA9IGEubmV4dDtcblxuXHR9IHdoaWxlICggYSAhPT0gc3RhcnQgKTtcblxufVxuXG4vLyBsaW5rIGV2ZXJ5IGhvbGUgaW50byB0aGUgb3V0ZXIgbG9vcCwgcHJvZHVjaW5nIGEgc2luZ2xlLXJpbmcgcG9seWdvbiB3aXRob3V0IGhvbGVzXG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKCBkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0gKSB7XG5cblx0dmFyIHF1ZXVlID0gW10sIGksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDtcblxuXHRmb3IgKCBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpICsrICkge1xuXG5cdFx0c3RhcnQgPSBob2xlSW5kaWNlc1sgaSBdICogZGltO1xuXHRcdGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbIGkgKyAxIF0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcblx0XHRsaXN0ID0gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSApO1xuXHRcdGlmICggbGlzdCA9PT0gbGlzdC5uZXh0ICkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcblx0XHRxdWV1ZS5wdXNoKCBnZXRMZWZ0bW9zdCggbGlzdCApICk7XG5cblx0fVxuXG5cdHF1ZXVlLnNvcnQoIGNvbXBhcmVYICk7XG5cblx0Ly8gcHJvY2VzcyBob2xlcyBmcm9tIGxlZnQgdG8gcmlnaHRcblxuXHRmb3IgKCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGVsaW1pbmF0ZUhvbGUoIHF1ZXVlWyBpIF0sIG91dGVyTm9kZSApO1xuXHRcdG91dGVyTm9kZSA9IGZpbHRlclBvaW50cyggb3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCApO1xuXG5cdH1cblxuXHRyZXR1cm4gb3V0ZXJOb2RlO1xuXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVYKCBhLCBiICkge1xuXG5cdHJldHVybiBhLnggLSBiLng7XG5cbn1cblxuLy8gZmluZCBhIGJyaWRnZSBiZXR3ZWVuIHZlcnRpY2VzIHRoYXQgY29ubmVjdHMgaG9sZSB3aXRoIGFuIG91dGVyIHJpbmcgYW5kIGFuZCBsaW5rIGl0XG5cbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoIGhvbGUsIG91dGVyTm9kZSApIHtcblxuXHRvdXRlck5vZGUgPSBmaW5kSG9sZUJyaWRnZSggaG9sZSwgb3V0ZXJOb2RlICk7XG5cblx0aWYgKCBvdXRlck5vZGUgKSB7XG5cblx0XHR2YXIgYiA9IHNwbGl0UG9seWdvbiggb3V0ZXJOb2RlLCBob2xlICk7XG5cblx0XHRmaWx0ZXJQb2ludHMoIGIsIGIubmV4dCApO1xuXG5cdH1cblxufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5cbmZ1bmN0aW9uIGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKSB7XG5cblx0dmFyIHAgPSBvdXRlck5vZGUsXG5cdFx0aHggPSBob2xlLngsXG5cdFx0aHkgPSBob2xlLnksXG5cdFx0cXggPSAtIEluZmluaXR5LFxuXHRcdG07XG5cblx0Ly8gZmluZCBhIHNlZ21lbnQgaW50ZXJzZWN0ZWQgYnkgYSByYXkgZnJvbSB0aGUgaG9sZSdzIGxlZnRtb3N0IHBvaW50IHRvIHRoZSBsZWZ0O1xuXHQvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50XG5cblx0ZG8ge1xuXG5cdFx0aWYgKCBoeSA8PSBwLnkgJiYgaHkgPj0gcC5uZXh0LnkgJiYgcC5uZXh0LnkgIT09IHAueSApIHtcblxuXHRcdFx0dmFyIHggPSBwLnggKyAoIGh5IC0gcC55ICkgKiAoIHAubmV4dC54IC0gcC54ICkgLyAoIHAubmV4dC55IC0gcC55ICk7XG5cblx0XHRcdGlmICggeCA8PSBoeCAmJiB4ID4gcXggKSB7XG5cblx0XHRcdFx0cXggPSB4O1xuXG5cdFx0XHRcdGlmICggeCA9PT0gaHggKSB7XG5cblx0XHRcdFx0XHRpZiAoIGh5ID09PSBwLnkgKSByZXR1cm4gcDtcblx0XHRcdFx0XHRpZiAoIGh5ID09PSBwLm5leHQueSApIHJldHVybiBwLm5leHQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IG91dGVyTm9kZSApO1xuXG5cdGlmICggISBtICkgcmV0dXJuIG51bGw7XG5cblx0aWYgKCBoeCA9PT0gcXggKSByZXR1cm4gbS5wcmV2OyAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsb3dlciBlbmRwb2ludFxuXG5cdC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIG9mIGhvbGUgcG9pbnQsIHNlZ21lbnQgaW50ZXJzZWN0aW9uIGFuZCBlbmRwb2ludDtcblx0Ly8gaWYgdGhlcmUgYXJlIG5vIHBvaW50cyBmb3VuZCwgd2UgaGF2ZSBhIHZhbGlkIGNvbm5lY3Rpb247XG5cdC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XG5cblx0dmFyIHN0b3AgPSBtLFxuXHRcdG14ID0gbS54LFxuXHRcdG15ID0gbS55LFxuXHRcdHRhbk1pbiA9IEluZmluaXR5LFxuXHRcdHRhbjtcblxuXHRwID0gbS5uZXh0O1xuXG5cdHdoaWxlICggcCAhPT0gc3RvcCApIHtcblxuXHRcdGlmICggaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXG5cdFx0XHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55ICkgKSB7XG5cblx0XHRcdHRhbiA9IE1hdGguYWJzKCBoeSAtIHAueSApIC8gKCBoeCAtIHAueCApOyAvLyB0YW5nZW50aWFsXG5cblx0XHRcdGlmICggKCB0YW4gPCB0YW5NaW4gfHwgKCB0YW4gPT09IHRhbk1pbiAmJiBwLnggPiBtLnggKSApICYmIGxvY2FsbHlJbnNpZGUoIHAsIGhvbGUgKSApIHtcblxuXHRcdFx0XHRtID0gcDtcblx0XHRcdFx0dGFuTWluID0gdGFuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH1cblxuXHRyZXR1cm4gbTtcblxufVxuXG4vLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5cbmZ1bmN0aW9uIGluZGV4Q3VydmUoIHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdHZhciBwID0gc3RhcnQ7XG5cblx0ZG8ge1xuXG5cdFx0aWYgKCBwLnogPT09IG51bGwgKSBwLnogPSB6T3JkZXIoIHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0cC5wcmV2WiA9IHAucHJldjtcblx0XHRwLm5leHRaID0gcC5uZXh0O1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cC5wcmV2Wi5uZXh0WiA9IG51bGw7XG5cdHAucHJldlogPSBudWxsO1xuXG5cdHNvcnRMaW5rZWQoIHAgKTtcblxufVxuXG4vLyBTaW1vbiBUYXRoYW0ncyBsaW5rZWQgbGlzdCBtZXJnZSBzb3J0IGFsZ29yaXRobVxuLy8gaHR0cDovL3d3dy5jaGlhcmsuZ3JlZW5lbmQub3JnLnVrL35zZ3RhdGhhbS9hbGdvcml0aG1zL2xpc3Rzb3J0Lmh0bWxcblxuZnVuY3Rpb24gc29ydExpbmtlZCggbGlzdCApIHtcblxuXHR2YXIgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsIGluU2l6ZSA9IDE7XG5cblx0ZG8ge1xuXG5cdFx0cCA9IGxpc3Q7XG5cdFx0bGlzdCA9IG51bGw7XG5cdFx0dGFpbCA9IG51bGw7XG5cdFx0bnVtTWVyZ2VzID0gMDtcblxuXHRcdHdoaWxlICggcCApIHtcblxuXHRcdFx0bnVtTWVyZ2VzICsrO1xuXHRcdFx0cSA9IHA7XG5cdFx0XHRwU2l6ZSA9IDA7XG5cblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaW5TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdHBTaXplICsrO1xuXHRcdFx0XHRxID0gcS5uZXh0Wjtcblx0XHRcdFx0aWYgKCAhIHEgKSBicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRxU2l6ZSA9IGluU2l6ZTtcblxuXHRcdFx0d2hpbGUgKCBwU2l6ZSA+IDAgfHwgKCBxU2l6ZSA+IDAgJiYgcSApICkge1xuXG5cdFx0XHRcdGlmICggcFNpemUgIT09IDAgJiYgKCBxU2l6ZSA9PT0gMCB8fCAhIHEgfHwgcC56IDw9IHEueiApICkge1xuXG5cdFx0XHRcdFx0ZSA9IHA7XG5cdFx0XHRcdFx0cCA9IHAubmV4dFo7XG5cdFx0XHRcdFx0cFNpemUgLS07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGUgPSBxO1xuXHRcdFx0XHRcdHEgPSBxLm5leHRaO1xuXHRcdFx0XHRcdHFTaXplIC0tO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhaWwgKSB0YWlsLm5leHRaID0gZTtcblx0XHRcdFx0ZWxzZSBsaXN0ID0gZTtcblxuXHRcdFx0XHRlLnByZXZaID0gdGFpbDtcblx0XHRcdFx0dGFpbCA9IGU7XG5cblx0XHRcdH1cblxuXHRcdFx0cCA9IHE7XG5cblx0XHR9XG5cblx0XHR0YWlsLm5leHRaID0gbnVsbDtcblx0XHRpblNpemUgKj0gMjtcblxuXHR9IHdoaWxlICggbnVtTWVyZ2VzID4gMSApO1xuXG5cdHJldHVybiBsaXN0O1xuXG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxuXG5mdW5jdGlvbiB6T3JkZXIoIHgsIHksIG1pblgsIG1pblksIGludlNpemUgKSB7XG5cblx0Ly8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxuXG5cdHggPSAzMjc2NyAqICggeCAtIG1pblggKSAqIGludlNpemU7XG5cdHkgPSAzMjc2NyAqICggeSAtIG1pblkgKSAqIGludlNpemU7XG5cblx0eCA9ICggeCB8ICggeCA8PCA4ICkgKSAmIDB4MDBGRjAwRkY7XG5cdHggPSAoIHggfCAoIHggPDwgNCApICkgJiAweDBGMEYwRjBGO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDIgKSApICYgMHgzMzMzMzMzMztcblx0eCA9ICggeCB8ICggeCA8PCAxICkgKSAmIDB4NTU1NTU1NTU7XG5cblx0eSA9ICggeSB8ICggeSA8PCA4ICkgKSAmIDB4MDBGRjAwRkY7XG5cdHkgPSAoIHkgfCAoIHkgPDwgNCApICkgJiAweDBGMEYwRjBGO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDIgKSApICYgMHgzMzMzMzMzMztcblx0eSA9ICggeSB8ICggeSA8PCAxICkgKSAmIDB4NTU1NTU1NTU7XG5cblx0cmV0dXJuIHggfCAoIHkgPDwgMSApO1xuXG59XG5cbi8vIGZpbmQgdGhlIGxlZnRtb3N0IG5vZGUgb2YgYSBwb2x5Z29uIHJpbmdcblxuZnVuY3Rpb24gZ2V0TGVmdG1vc3QoIHN0YXJ0ICkge1xuXG5cdHZhciBwID0gc3RhcnQsIGxlZnRtb3N0ID0gc3RhcnQ7XG5cblx0ZG8ge1xuXG5cdFx0aWYgKCBwLnggPCBsZWZ0bW9zdC54ICkgbGVmdG1vc3QgPSBwO1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cmV0dXJuIGxlZnRtb3N0O1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcblxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKCBheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBweCwgcHkgKSB7XG5cblx0cmV0dXJuICggY3ggLSBweCApICogKCBheSAtIHB5ICkgLSAoIGF4IC0gcHggKSAqICggY3kgLSBweSApID49IDAgJiZcblx0ICggYXggLSBweCApICogKCBieSAtIHB5ICkgLSAoIGJ4IC0gcHggKSAqICggYXkgLSBweSApID49IDAgJiZcblx0ICggYnggLSBweCApICogKCBjeSAtIHB5ICkgLSAoIGN4IC0gcHggKSAqICggYnkgLSBweSApID49IDA7XG5cbn1cblxuLy8gY2hlY2sgaWYgYSBkaWFnb25hbCBiZXR3ZWVuIHR3byBwb2x5Z29uIG5vZGVzIGlzIHZhbGlkIChsaWVzIGluIHBvbHlnb24gaW50ZXJpb3IpXG5cbmZ1bmN0aW9uIGlzVmFsaWREaWFnb25hbCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICEgaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSAmJlxuXHRcdGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgJiYgbWlkZGxlSW5zaWRlKCBhLCBiICk7XG5cbn1cblxuLy8gc2lnbmVkIGFyZWEgb2YgYSB0cmlhbmdsZVxuXG5mdW5jdGlvbiBhcmVhKCBwLCBxLCByICkge1xuXG5cdHJldHVybiAoIHEueSAtIHAueSApICogKCByLnggLSBxLnggKSAtICggcS54IC0gcC54ICkgKiAoIHIueSAtIHEueSApO1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5cbmZ1bmN0aW9uIGVxdWFscyggcDEsIHAyICkge1xuXG5cdHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG5cbn1cblxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKCBwMSwgcTEsIHAyLCBxMiApIHtcblxuXHRpZiAoICggZXF1YWxzKCBwMSwgcTEgKSAmJiBlcXVhbHMoIHAyLCBxMiApICkgfHxcblx0XHRcdCggZXF1YWxzKCBwMSwgcTIgKSAmJiBlcXVhbHMoIHAyLCBxMSApICkgKSByZXR1cm4gdHJ1ZTtcblxuXHRyZXR1cm4gYXJlYSggcDEsIHExLCBwMiApID4gMCAhPT0gYXJlYSggcDEsIHExLCBxMiApID4gMCAmJlxuXHRcdFx0XHQgYXJlYSggcDIsIHEyLCBwMSApID4gMCAhPT0gYXJlYSggcDIsIHEyLCBxMSApID4gMDtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50c1xuXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApIHtcblxuXHR2YXIgcCA9IGE7XG5cblx0ZG8ge1xuXG5cdFx0aWYgKCBwLmkgIT09IGEuaSAmJiBwLm5leHQuaSAhPT0gYS5pICYmIHAuaSAhPT0gYi5pICYmIHAubmV4dC5pICE9PSBiLmkgJiZcblx0XHRcdFx0XHRcdGludGVyc2VjdHMoIHAsIHAubmV4dCwgYSwgYiApICkge1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IGEgKTtcblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGxvY2FsbHkgaW5zaWRlIHRoZSBwb2x5Z29uXG5cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPCAwID9cblx0XHRhcmVhKCBhLCBiLCBhLm5leHQgKSA+PSAwICYmIGFyZWEoIGEsIGEucHJldiwgYiApID49IDAgOlxuXHRcdGFyZWEoIGEsIGIsIGEucHJldiApIDwgMCB8fCBhcmVhKCBhLCBhLm5leHQsIGIgKSA8IDA7XG5cbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5cbmZ1bmN0aW9uIG1pZGRsZUluc2lkZSggYSwgYiApIHtcblxuXHR2YXIgcCA9IGEsXG5cdFx0aW5zaWRlID0gZmFsc2UsXG5cdFx0cHggPSAoIGEueCArIGIueCApIC8gMixcblx0XHRweSA9ICggYS55ICsgYi55ICkgLyAyO1xuXG5cdGRvIHtcblxuXHRcdGlmICggKCAoIHAueSA+IHB5ICkgIT09ICggcC5uZXh0LnkgPiBweSApICkgJiYgcC5uZXh0LnkgIT09IHAueSAmJlxuXHRcdFx0XHRcdFx0KCBweCA8ICggcC5uZXh0LnggLSBwLnggKSAqICggcHkgLSBwLnkgKSAvICggcC5uZXh0LnkgLSBwLnkgKSArIHAueCApICkge1xuXG5cdFx0XHRpbnNpZGUgPSAhIGluc2lkZTtcblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IGEgKTtcblxuXHRyZXR1cm4gaW5zaWRlO1xuXG59XG5cbi8vIGxpbmsgdHdvIHBvbHlnb24gdmVydGljZXMgd2l0aCBhIGJyaWRnZTsgaWYgdGhlIHZlcnRpY2VzIGJlbG9uZyB0byB0aGUgc2FtZSByaW5nLCBpdCBzcGxpdHMgcG9seWdvbiBpbnRvIHR3bztcbi8vIGlmIG9uZSBiZWxvbmdzIHRvIHRoZSBvdXRlciByaW5nIGFuZCBhbm90aGVyIHRvIGEgaG9sZSwgaXQgbWVyZ2VzIGl0IGludG8gYSBzaW5nbGUgcmluZ1xuXG5mdW5jdGlvbiBzcGxpdFBvbHlnb24oIGEsIGIgKSB7XG5cblx0dmFyIGEyID0gbmV3IE5vZGUoIGEuaSwgYS54LCBhLnkgKSxcblx0XHRiMiA9IG5ldyBOb2RlKCBiLmksIGIueCwgYi55ICksXG5cdFx0YW4gPSBhLm5leHQsXG5cdFx0YnAgPSBiLnByZXY7XG5cblx0YS5uZXh0ID0gYjtcblx0Yi5wcmV2ID0gYTtcblxuXHRhMi5uZXh0ID0gYW47XG5cdGFuLnByZXYgPSBhMjtcblxuXHRiMi5uZXh0ID0gYTI7XG5cdGEyLnByZXYgPSBiMjtcblxuXHRicC5uZXh0ID0gYjI7XG5cdGIyLnByZXYgPSBicDtcblxuXHRyZXR1cm4gYjI7XG5cbn1cblxuLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdClcblxuZnVuY3Rpb24gaW5zZXJ0Tm9kZSggaSwgeCwgeSwgbGFzdCApIHtcblxuXHR2YXIgcCA9IG5ldyBOb2RlKCBpLCB4LCB5ICk7XG5cblx0aWYgKCAhIGxhc3QgKSB7XG5cblx0XHRwLnByZXYgPSBwO1xuXHRcdHAubmV4dCA9IHA7XG5cblx0fSBlbHNlIHtcblxuXHRcdHAubmV4dCA9IGxhc3QubmV4dDtcblx0XHRwLnByZXYgPSBsYXN0O1xuXHRcdGxhc3QubmV4dC5wcmV2ID0gcDtcblx0XHRsYXN0Lm5leHQgPSBwO1xuXG5cdH1cblxuXHRyZXR1cm4gcDtcblxufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKCBwICkge1xuXG5cdHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuXHRwLnByZXYubmV4dCA9IHAubmV4dDtcblxuXHRpZiAoIHAucHJldlogKSBwLnByZXZaLm5leHRaID0gcC5uZXh0Wjtcblx0aWYgKCBwLm5leHRaICkgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG5cbn1cblxuZnVuY3Rpb24gTm9kZSggaSwgeCwgeSApIHtcblxuXHQvLyB2ZXJ0aWNlIGluZGV4IGluIGNvb3JkaW5hdGVzIGFycmF5XG5cdHRoaXMuaSA9IGk7XG5cblx0Ly8gdmVydGV4IGNvb3JkaW5hdGVzXG5cdHRoaXMueCA9IHg7XG5cdHRoaXMueSA9IHk7XG5cblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgdmVydGljZSBub2RlcyBpbiBhIHBvbHlnb24gcmluZ1xuXHR0aGlzLnByZXYgPSBudWxsO1xuXHR0aGlzLm5leHQgPSBudWxsO1xuXG5cdC8vIHotb3JkZXIgY3VydmUgdmFsdWVcblx0dGhpcy56ID0gbnVsbDtcblxuXHQvLyBwcmV2aW91cyBhbmQgbmV4dCBub2RlcyBpbiB6LW9yZGVyXG5cdHRoaXMucHJldlogPSBudWxsO1xuXHR0aGlzLm5leHRaID0gbnVsbDtcblxuXHQvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGEgc3RlaW5lciBwb2ludFxuXHR0aGlzLnN0ZWluZXIgPSBmYWxzZTtcblxufVxuXG5mdW5jdGlvbiBzaWduZWRBcmVhKCBkYXRhLCBzdGFydCwgZW5kLCBkaW0gKSB7XG5cblx0dmFyIHN1bSA9IDA7XG5cblx0Zm9yICggdmFyIGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0gKSB7XG5cblx0XHRzdW0gKz0gKCBkYXRhWyBqIF0gLSBkYXRhWyBpIF0gKSAqICggZGF0YVsgaSArIDEgXSArIGRhdGFbIGogKyAxIF0gKTtcblx0XHRqID0gaTtcblxuXHR9XG5cblx0cmV0dXJuIHN1bTtcblxufVxuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqL1xuXG52YXIgU2hhcGVVdGlscyA9IHtcblxuXHQvLyBjYWxjdWxhdGUgYXJlYSBvZiB0aGUgY29udG91ciBwb2x5Z29uXG5cblx0YXJlYTogZnVuY3Rpb24gKCBjb250b3VyICkge1xuXG5cdFx0dmFyIG4gPSBjb250b3VyLmxlbmd0aDtcblx0XHR2YXIgYSA9IDAuMDtcblxuXHRcdGZvciAoIHZhciBwID0gbiAtIDEsIHEgPSAwOyBxIDwgbjsgcCA9IHEgKysgKSB7XG5cblx0XHRcdGEgKz0gY29udG91clsgcCBdLnggKiBjb250b3VyWyBxIF0ueSAtIGNvbnRvdXJbIHEgXS54ICogY29udG91clsgcCBdLnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYSAqIDAuNTtcblxuXHR9LFxuXG5cdGlzQ2xvY2tXaXNlOiBmdW5jdGlvbiAoIHB0cyApIHtcblxuXHRcdHJldHVybiBTaGFwZVV0aWxzLmFyZWEoIHB0cyApIDwgMDtcblxuXHR9LFxuXG5cdHRyaWFuZ3VsYXRlU2hhcGU6IGZ1bmN0aW9uICggY29udG91ciwgaG9sZXMgKSB7XG5cblx0XHR2YXIgdmVydGljZXMgPSBbXTsgLy8gZmxhdCBhcnJheSBvZiB2ZXJ0aWNlcyBsaWtlIFsgeDAseTAsIHgxLHkxLCB4Mix5MiwgLi4uIF1cblx0XHR2YXIgaG9sZUluZGljZXMgPSBbXTsgLy8gYXJyYXkgb2YgaG9sZSBpbmRpY2VzXG5cdFx0dmFyIGZhY2VzID0gW107IC8vIGZpbmFsIGFycmF5IG9mIHZlcnRleCBpbmRpY2VzIGxpa2UgWyBbIGEsYixkIF0sIFsgYixjLGQgXSBdXG5cblx0XHRyZW1vdmVEdXBFbmRQdHMoIGNvbnRvdXIgKTtcblx0XHRhZGRDb250b3VyKCB2ZXJ0aWNlcywgY29udG91ciApO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBob2xlSW5kZXggPSBjb250b3VyLmxlbmd0aDtcblxuXHRcdGhvbGVzLmZvckVhY2goIHJlbW92ZUR1cEVuZFB0cyApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgaG9sZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRob2xlSW5kaWNlcy5wdXNoKCBob2xlSW5kZXggKTtcblx0XHRcdGhvbGVJbmRleCArPSBob2xlc1sgaSBdLmxlbmd0aDtcblx0XHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBob2xlc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIHRyaWFuZ2xlcyA9IEVhcmN1dC50cmlhbmd1bGF0ZSggdmVydGljZXMsIGhvbGVJbmRpY2VzICk7XG5cblx0XHQvL1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRmYWNlcy5wdXNoKCB0cmlhbmdsZXMuc2xpY2UoIGksIGkgKyAzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWNlcztcblxuXHR9XG5cbn07XG5cbmZ1bmN0aW9uIHJlbW92ZUR1cEVuZFB0cyggcG9pbnRzICkge1xuXG5cdHZhciBsID0gcG9pbnRzLmxlbmd0aDtcblxuXHRpZiAoIGwgPiAyICYmIHBvaW50c1sgbCAtIDEgXS5lcXVhbHMoIHBvaW50c1sgMCBdICkgKSB7XG5cblx0XHRwb2ludHMucG9wKCk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICkge1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRvdXIubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0dmVydGljZXMucHVzaCggY29udG91clsgaSBdLnggKTtcblx0XHR2ZXJ0aWNlcy5wdXNoKCBjb250b3VyWyBpIF0ueSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqXG4gKiBDcmVhdGVzIGV4dHJ1ZGVkIGdlb21ldHJ5IGZyb20gYSBwYXRoIHNoYXBlLlxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIGN1cnZlU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIG9uIHRoZSBjdXJ2ZXNcbiAqICBzdGVwczogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgZm9yIHotc2lkZSBleHRydXNpb25zIC8gdXNlZCBmb3Igc3ViZGl2aWRpbmcgc2VnbWVudHMgb2YgZXh0cnVkZSBzcGxpbmUgdG9vXG4gKiAgZGVwdGg6IDxmbG9hdD4sIC8vIERlcHRoIHRvIGV4dHJ1ZGUgdGhlIHNoYXBlXG4gKlxuICogIGJldmVsRW5hYmxlZDogPGJvb2w+LCAvLyB0dXJuIG9uIGJldmVsXG4gKiAgYmV2ZWxUaGlja25lc3M6IDxmbG9hdD4sIC8vIGhvdyBkZWVwIGludG8gdGhlIG9yaWdpbmFsIHNoYXBlIGJldmVsIGdvZXNcbiAqICBiZXZlbFNpemU6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIGlzIGJldmVsXG4gKiAgYmV2ZWxTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBiZXZlbCBsYXllcnNcbiAqXG4gKiAgZXh0cnVkZVBhdGg6IDxUSFJFRS5DdXJ2ZT4gLy8gY3VydmUgdG8gZXh0cnVkZSBzaGFwZSBhbG9uZ1xuICpcbiAqICBVVkdlbmVyYXRvcjogPE9iamVjdD4gLy8gb2JqZWN0IHRoYXQgcHJvdmlkZXMgVVYgZ2VuZXJhdG9yIGZ1bmN0aW9uc1xuICpcbiAqIH1cbiAqL1xuXG4vLyBFeHRydWRlR2VvbWV0cnlcblxuZnVuY3Rpb24gRXh0cnVkZUdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdFeHRydWRlR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRvcHRpb25zOiBvcHRpb25zXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBFeHRydWRlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgb3B0aW9ucyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHRydWRlR2VvbWV0cnk7XG5cbkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdHZhciBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7XG5cblx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XG5cbn07XG5cbi8vIEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBFeHRydWRlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgb3B0aW9ucyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0V4dHJ1ZGVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHNoYXBlczogc2hhcGVzLFxuXHRcdG9wdGlvbnM6IG9wdGlvbnNcblx0fTtcblxuXHRzaGFwZXMgPSBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSA/IHNoYXBlcyA6IFsgc2hhcGVzIF07XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR2YXIgdmVydGljZXNBcnJheSA9IFtdO1xuXHR2YXIgdXZBcnJheSA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cdFx0YWRkU2hhcGUoIHNoYXBlICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlc0FycmF5LCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkFycmF5LCAyICkgKTtcblxuXHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cblx0Ly8gZnVuY3Rpb25zXG5cblx0ZnVuY3Rpb24gYWRkU2hhcGUoIHNoYXBlICkge1xuXG5cdFx0dmFyIHBsYWNlaG9sZGVyID0gW107XG5cblx0XHQvLyBvcHRpb25zXG5cblx0XHR2YXIgY3VydmVTZWdtZW50cyA9IG9wdGlvbnMuY3VydmVTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzIDogMTI7XG5cdFx0dmFyIHN0ZXBzID0gb3B0aW9ucy5zdGVwcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdGVwcyA6IDE7XG5cdFx0dmFyIGRlcHRoID0gb3B0aW9ucy5kZXB0aCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aCA6IDEwMDtcblxuXHRcdHZhciBiZXZlbEVuYWJsZWQgPSBvcHRpb25zLmJldmVsRW5hYmxlZCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbEVuYWJsZWQgOiB0cnVlO1xuXHRcdHZhciBiZXZlbFRoaWNrbmVzcyA9IG9wdGlvbnMuYmV2ZWxUaGlja25lc3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxUaGlja25lc3MgOiA2O1xuXHRcdHZhciBiZXZlbFNpemUgPSBvcHRpb25zLmJldmVsU2l6ZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNpemUgOiBiZXZlbFRoaWNrbmVzcyAtIDI7XG5cdFx0dmFyIGJldmVsU2VnbWVudHMgPSBvcHRpb25zLmJldmVsU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyA6IDM7XG5cblx0XHR2YXIgZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0dmFyIHV2Z2VuID0gb3B0aW9ucy5VVkdlbmVyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5VVkdlbmVyYXRvciA6IFdvcmxkVVZHZW5lcmF0b3I7XG5cblx0XHQvLyBkZXByZWNhdGVkIG9wdGlvbnNcblxuXHRcdGlmICggb3B0aW9ucy5hbW91bnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiBhbW91bnQgaGFzIGJlZW4gcmVuYW1lZCB0byBkZXB0aC4nICk7XG5cdFx0XHRkZXB0aCA9IG9wdGlvbnMuYW1vdW50O1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHZhciBleHRydWRlUHRzLCBleHRydWRlQnlQYXRoID0gZmFsc2U7XG5cdFx0dmFyIHNwbGluZVR1YmUsIGJpbm9ybWFsLCBub3JtYWwsIHBvc2l0aW9uMjtcblxuXHRcdGlmICggZXh0cnVkZVBhdGggKSB7XG5cblx0XHRcdGV4dHJ1ZGVQdHMgPSBleHRydWRlUGF0aC5nZXRTcGFjZWRQb2ludHMoIHN0ZXBzICk7XG5cblx0XHRcdGV4dHJ1ZGVCeVBhdGggPSB0cnVlO1xuXHRcdFx0YmV2ZWxFbmFibGVkID0gZmFsc2U7IC8vIGJldmVscyBub3Qgc3VwcG9ydGVkIGZvciBwYXRoIGV4dHJ1c2lvblxuXG5cdFx0XHQvLyBTRVRVUCBUTkIgdmFyaWFibGVzXG5cblx0XHRcdC8vIFRPRE8xIC0gaGF2ZSBhIC5pc0Nsb3NlZCBpbiBzcGxpbmU/XG5cblx0XHRcdHNwbGluZVR1YmUgPSBleHRydWRlUGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCBzdGVwcywgZmFsc2UgKTtcblxuXHRcdFx0Ly8gY29uc29sZS5sb2coc3BsaW5lVHViZSwgJ3NwbGluZVR1YmUnLCBzcGxpbmVUdWJlLm5vcm1hbHMubGVuZ3RoLCAnc3RlcHMnLCBzdGVwcywgJ2V4dHJ1ZGVQdHMnLCBleHRydWRlUHRzLmxlbmd0aCk7XG5cblx0XHRcdGJpbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRwb3NpdGlvbjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2FmZWd1YXJkcyBpZiBiZXZlbHMgYXJlIG5vdCBlbmFibGVkXG5cblx0XHRpZiAoICEgYmV2ZWxFbmFibGVkICkge1xuXG5cdFx0XHRiZXZlbFNlZ21lbnRzID0gMDtcblx0XHRcdGJldmVsVGhpY2tuZXNzID0gMDtcblx0XHRcdGJldmVsU2l6ZSA9IDA7XG5cblx0XHR9XG5cblx0XHQvLyBWYXJpYWJsZXMgaW5pdGlhbGl6YXRpb25cblxuXHRcdHZhciBhaG9sZSwgaCwgaGw7IC8vIGxvb3Bpbmcgb2YgaG9sZXNcblxuXHRcdHZhciBzaGFwZVBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTtcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IHNoYXBlUG9pbnRzLnNoYXBlO1xuXHRcdHZhciBob2xlcyA9IHNoYXBlUG9pbnRzLmhvbGVzO1xuXG5cdFx0dmFyIHJldmVyc2UgPSAhIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHZlcnRpY2VzICk7XG5cblx0XHRpZiAoIHJldmVyc2UgKSB7XG5cblx0XHRcdHZlcnRpY2VzID0gdmVydGljZXMucmV2ZXJzZSgpO1xuXG5cdFx0XHQvLyBNYXliZSB3ZSBzaG91bGQgYWxzbyBjaGVjayBpZiBob2xlcyBhcmUgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiwganVzdCB0byBiZSBzYWZlIC4uLlxuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBhaG9sZSApICkge1xuXG5cdFx0XHRcdFx0aG9sZXNbIGggXSA9IGFob2xlLnJldmVyc2UoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0dmFyIGZhY2VzID0gU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlKCB2ZXJ0aWNlcywgaG9sZXMgKTtcblxuXHRcdC8qIFZlcnRpY2VzICovXG5cblx0XHR2YXIgY29udG91ciA9IHZlcnRpY2VzOyAvLyB2ZXJ0aWNlcyBoYXMgYWxsIHBvaW50cyBidXQgY29udG91ciBoYXMgb25seSBwb2ludHMgb2YgY2lyY3VtZmVyZW5jZVxuXG5cdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5jb25jYXQoIGFob2xlICk7XG5cblx0XHR9XG5cblxuXHRcdGZ1bmN0aW9uIHNjYWxlUHQyKCBwdCwgdmVjLCBzaXplICkge1xuXG5cdFx0XHRpZiAoICEgdmVjICkgY29uc29sZS5lcnJvciggXCJUSFJFRS5FeHRydWRlR2VvbWV0cnk6IHZlYyBkb2VzIG5vdCBleGlzdFwiICk7XG5cblx0XHRcdHJldHVybiB2ZWMuY2xvbmUoKS5tdWx0aXBseVNjYWxhciggc2l6ZSApLmFkZCggcHQgKTtcblxuXHRcdH1cblxuXHRcdHZhciBiLCBicywgdCwgeixcblx0XHRcdHZlcnQsIHZsZW4gPSB2ZXJ0aWNlcy5sZW5ndGgsXG5cdFx0XHRmYWNlLCBmbGVuID0gZmFjZXMubGVuZ3RoO1xuXG5cblx0XHQvLyBGaW5kIGRpcmVjdGlvbnMgZm9yIHBvaW50IG1vdmVtZW50XG5cblxuXHRcdGZ1bmN0aW9uIGdldEJldmVsVmVjKCBpblB0LCBpblByZXYsIGluTmV4dCApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZXMgZm9yIGluUHQgdGhlIGNvcnJlc3BvbmRpbmcgcG9pbnQgaW5QdCcgb24gYSBuZXcgY29udG91clxuXHRcdFx0Ly8gICBzaGlmdGVkIGJ5IDEgdW5pdCAobGVuZ3RoIG9mIG5vcm1hbGl6ZWQgdmVjdG9yKSB0byB0aGUgbGVmdFxuXHRcdFx0Ly8gaWYgd2Ugd2FsayBhbG9uZyBjb250b3VyIGNsb2Nrd2lzZSwgdGhpcyBuZXcgY29udG91ciBpcyBvdXRzaWRlIHRoZSBvbGQgb25lXG5cdFx0XHQvL1xuXHRcdFx0Ly8gaW5QdCcgaXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIGxpbmVzIHBhcmFsbGVsIHRvIHRoZSB0d29cblx0XHRcdC8vICBhZGphY2VudCBlZGdlcyBvZiBpblB0IGF0IGEgZGlzdGFuY2Ugb2YgMSB1bml0IG9uIHRoZSBsZWZ0IHNpZGUuXG5cblx0XHRcdHZhciB2X3RyYW5zX3gsIHZfdHJhbnNfeSwgc2hyaW5rX2J5OyAvLyByZXN1bHRpbmcgdHJhbnNsYXRpb24gdmVjdG9yIGZvciBpblB0XG5cblx0XHRcdC8vIGdvb2QgcmVhZGluZyBmb3IgZ2VvbWV0cnkgYWxnb3JpdGhtcyAoaGVyZTogbGluZS1saW5lIGludGVyc2VjdGlvbilcblx0XHRcdC8vIGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTA1LV9pbnRlcnNlY3QtMS5odG1sXG5cblx0XHRcdHZhciB2X3ByZXZfeCA9IGluUHQueCAtIGluUHJldi54LFxuXHRcdFx0XHR2X3ByZXZfeSA9IGluUHQueSAtIGluUHJldi55O1xuXHRcdFx0dmFyIHZfbmV4dF94ID0gaW5OZXh0LnggLSBpblB0LngsXG5cdFx0XHRcdHZfbmV4dF95ID0gaW5OZXh0LnkgLSBpblB0Lnk7XG5cblx0XHRcdHZhciB2X3ByZXZfbGVuc3EgPSAoIHZfcHJldl94ICogdl9wcmV2X3ggKyB2X3ByZXZfeSAqIHZfcHJldl95ICk7XG5cblx0XHRcdC8vIGNoZWNrIGZvciBjb2xsaW5lYXIgZWRnZXNcblx0XHRcdHZhciBjb2xsaW5lYXIwID0gKCB2X3ByZXZfeCAqIHZfbmV4dF95IC0gdl9wcmV2X3kgKiB2X25leHRfeCApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBjb2xsaW5lYXIwICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHQvLyBub3QgY29sbGluZWFyXG5cblx0XHRcdFx0Ly8gbGVuZ3RoIG9mIHZlY3RvcnMgZm9yIG5vcm1hbGl6aW5nXG5cblx0XHRcdFx0dmFyIHZfcHJldl9sZW4gPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xuXHRcdFx0XHR2YXIgdl9uZXh0X2xlbiA9IE1hdGguc3FydCggdl9uZXh0X3ggKiB2X25leHRfeCArIHZfbmV4dF95ICogdl9uZXh0X3kgKTtcblxuXHRcdFx0XHQvLyBzaGlmdCBhZGphY2VudCBwb2ludHMgYnkgdW5pdCB2ZWN0b3JzIHRvIHRoZSBsZWZ0XG5cblx0XHRcdFx0dmFyIHB0UHJldlNoaWZ0X3ggPSAoIGluUHJldi54IC0gdl9wcmV2X3kgLyB2X3ByZXZfbGVuICk7XG5cdFx0XHRcdHZhciBwdFByZXZTaGlmdF95ID0gKCBpblByZXYueSArIHZfcHJldl94IC8gdl9wcmV2X2xlbiApO1xuXG5cdFx0XHRcdHZhciBwdE5leHRTaGlmdF94ID0gKCBpbk5leHQueCAtIHZfbmV4dF95IC8gdl9uZXh0X2xlbiApO1xuXHRcdFx0XHR2YXIgcHROZXh0U2hpZnRfeSA9ICggaW5OZXh0LnkgKyB2X25leHRfeCAvIHZfbmV4dF9sZW4gKTtcblxuXHRcdFx0XHQvLyBzY2FsaW5nIGZhY3RvciBmb3Igdl9wcmV2IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdHZhciBzZiA9ICggKCBwdE5leHRTaGlmdF94IC0gcHRQcmV2U2hpZnRfeCApICogdl9uZXh0X3kgLVxuXHRcdFx0XHRcdFx0KCBwdE5leHRTaGlmdF95IC0gcHRQcmV2U2hpZnRfeSApICogdl9uZXh0X3ggKSAvXG5cdFx0XHRcdFx0KCB2X3ByZXZfeCAqIHZfbmV4dF95IC0gdl9wcmV2X3kgKiB2X25leHRfeCApO1xuXG5cdFx0XHRcdC8vIHZlY3RvciBmcm9tIGluUHQgdG8gaW50ZXJzZWN0aW9uIHBvaW50XG5cblx0XHRcdFx0dl90cmFuc194ID0gKCBwdFByZXZTaGlmdF94ICsgdl9wcmV2X3ggKiBzZiAtIGluUHQueCApO1xuXHRcdFx0XHR2X3RyYW5zX3kgPSAoIHB0UHJldlNoaWZ0X3kgKyB2X3ByZXZfeSAqIHNmIC0gaW5QdC55ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3Qgbm9ybWFsaXplISwgb3RoZXJ3aXNlIHNoYXJwIGNvcm5lcnMgYmVjb21lIHVnbHlcblx0XHRcdFx0Ly8gIGJ1dCBwcmV2ZW50IGNyYXp5IHNwaWtlc1xuXHRcdFx0XHR2YXIgdl90cmFuc19sZW5zcSA9ICggdl90cmFuc194ICogdl90cmFuc194ICsgdl90cmFuc195ICogdl90cmFuc195ICk7XG5cdFx0XHRcdGlmICggdl90cmFuc19sZW5zcSA8PSAyICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKCB2X3RyYW5zX3gsIHZfdHJhbnNfeSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfdHJhbnNfbGVuc3EgLyAyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2Ugb2YgY29sbGluZWFyIGVkZ2VzXG5cblx0XHRcdFx0dmFyIGRpcmVjdGlvbl9lcSA9IGZhbHNlOyAvLyBhc3N1bWVzOiBvcHBvc2l0ZVxuXHRcdFx0XHRpZiAoIHZfcHJldl94ID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRpZiAoIHZfbmV4dF94ID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdl9wcmV2X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZfbmV4dF94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIE1hdGguc2lnbiggdl9wcmV2X3kgKSA9PT0gTWF0aC5zaWduKCB2X25leHRfeSApICkge1xuXG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkaXJlY3Rpb25fZXEgKSB7XG5cblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNlcXVlbmNlXCIpO1xuXHRcdFx0XHRcdHZfdHJhbnNfeCA9IC0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzcGlrZVwiKTtcblx0XHRcdFx0XHR2X3RyYW5zX3ggPSB2X3ByZXZfeDtcblx0XHRcdFx0XHR2X3RyYW5zX3kgPSB2X3ByZXZfeTtcblx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSAvIDIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKCB2X3RyYW5zX3ggLyBzaHJpbmtfYnksIHZfdHJhbnNfeSAvIHNocmlua19ieSApO1xuXG5cdFx0fVxuXG5cblx0XHR2YXIgY29udG91ck1vdmVtZW50cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHtcblxuXHRcdFx0aWYgKCBqID09PSBpbCApIGogPSAwO1xuXHRcdFx0aWYgKCBrID09PSBpbCApIGsgPSAwO1xuXG5cdFx0XHQvLyAgKGopLS0tKGkpLS0tKGspXG5cdFx0XHQvLyBjb25zb2xlLmxvZygnaSxqLGsnLCBpLCBqICwgaylcblxuXHRcdFx0Y29udG91ck1vdmVtZW50c1sgaSBdID0gZ2V0QmV2ZWxWZWMoIGNvbnRvdXJbIGkgXSwgY29udG91clsgaiBdLCBjb250b3VyWyBrIF0gKTtcblxuXHRcdH1cblxuXHRcdHZhciBob2xlc01vdmVtZW50cyA9IFtdLFxuXHRcdFx0b25lSG9sZU1vdmVtZW50cywgdmVydGljZXNNb3ZlbWVudHMgPSBjb250b3VyTW92ZW1lbnRzLmNvbmNhdCgpO1xuXG5cdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdFx0aWYgKCBrID09PSBpbCApIGsgPSAwO1xuXG5cdFx0XHRcdC8vICAoaiktLS0oaSktLS0oaylcblx0XHRcdFx0b25lSG9sZU1vdmVtZW50c1sgaSBdID0gZ2V0QmV2ZWxWZWMoIGFob2xlWyBpIF0sIGFob2xlWyBqIF0sIGFob2xlWyBrIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRob2xlc01vdmVtZW50cy5wdXNoKCBvbmVIb2xlTW92ZW1lbnRzICk7XG5cdFx0XHR2ZXJ0aWNlc01vdmVtZW50cyA9IHZlcnRpY2VzTW92ZW1lbnRzLmNvbmNhdCggb25lSG9sZU1vdmVtZW50cyApO1xuXG5cdFx0fVxuXG5cblx0XHQvLyBMb29wIGJldmVsU2VnbWVudHMsIDEgZm9yIHRoZSBmcm9udCwgMSBmb3IgdGhlIGJhY2tcblxuXHRcdGZvciAoIGIgPSAwOyBiIDwgYmV2ZWxTZWdtZW50czsgYiArKyApIHtcblxuXHRcdFx0Ly9mb3IgKCBiID0gYmV2ZWxTZWdtZW50czsgYiA+IDA7IGIgLS0gKSB7XG5cblx0XHRcdHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApO1xuXG5cdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRicyA9IGJldmVsU2l6ZTtcblxuXHRcdC8vIEJhY2sgZmFjaW5nIHZlcnRpY2VzXG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdHZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0MiggdmVydGljZXNbIGkgXSwgdmVydGljZXNNb3ZlbWVudHNbIGkgXSwgYnMgKSA6IHZlcnRpY2VzWyBpIF07XG5cblx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAwICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyAwIF0ueSwgZXh0cnVkZVB0c1sgMCBdLnggKTtcblxuXHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdGJpbm9ybWFsLmNvcHkoIHNwbGluZVR1YmUuYmlub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC55ICk7XG5cblx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIDAgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xuXG5cdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHN0ZXBwZWQgdmVydGljZXMuLi5cblx0XHQvLyBJbmNsdWRpbmcgZnJvbnQgZmFjaW5nIHZlcnRpY2VzXG5cblx0XHR2YXIgcztcblxuXHRcdGZvciAoIHMgPSAxOyBzIDw9IHN0ZXBzOyBzICsrICkge1xuXG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0dmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCAvIHN0ZXBzICogcyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueSwgZXh0cnVkZVB0c1sgcyAtIDEgXS54ICk7XG5cblx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIHMgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uMi5jb3B5KCBleHRydWRlUHRzWyBzIF0gKS5hZGQoIG5vcm1hbCApLmFkZCggYmlub3JtYWwgKTtcblxuXHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0Ly8gQWRkIGJldmVsIHNlZ21lbnRzIHBsYW5lc1xuXG5cdFx0Ly9mb3IgKCBiID0gMTsgYiA8PSBiZXZlbFNlZ21lbnRzOyBiICsrICkge1xuXHRcdGZvciAoIGIgPSBiZXZlbFNlZ21lbnRzIC0gMTsgYiA+PSAwOyBiIC0tICkge1xuXG5cdFx0XHR0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHR6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XG5cdFx0XHRicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKTtcblxuXHRcdFx0Ly8gY29udHJhY3Qgc2hhcGVcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2ZXJ0ID0gc2NhbGVQdDIoIGNvbnRvdXJbIGkgXSwgY29udG91ck1vdmVtZW50c1sgaSBdLCBicyApO1xuXHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZXhwYW5kIGhvbGVzXG5cblx0XHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzWyBoIF07XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2ZXJ0ID0gc2NhbGVQdDIoIGFob2xlWyBpIF0sIG9uZUhvbGVNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblxuXHRcdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnggKyB6ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvKiBGYWNlcyAqL1xuXG5cdFx0Ly8gVG9wIGFuZCBib3R0b20gZmFjZXNcblxuXHRcdGJ1aWxkTGlkRmFjZXMoKTtcblxuXHRcdC8vIFNpZGVzIGZhY2VzXG5cblx0XHRidWlsZFNpZGVGYWNlcygpO1xuXG5cblx0XHQvLy8vLyAgSW50ZXJuYWwgZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBidWlsZExpZEZhY2VzKCkge1xuXG5cdFx0XHR2YXIgc3RhcnQgPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cblx0XHRcdGlmICggYmV2ZWxFbmFibGVkICkge1xuXG5cdFx0XHRcdHZhciBsYXllciA9IDA7IC8vIHN0ZXBzICsgMVxuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gdmxlbiAqIGxheWVyO1xuXG5cdFx0XHRcdC8vIEJvdHRvbSBmYWNlc1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdGYzKCBmYWNlWyAyIF0gKyBvZmZzZXQsIGZhY2VbIDEgXSArIG9mZnNldCwgZmFjZVsgMCBdICsgb2Zmc2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxheWVyID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcblx0XHRcdFx0b2Zmc2V0ID0gdmxlbiAqIGxheWVyO1xuXG5cdFx0XHRcdC8vIFRvcCBmYWNlc1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdGYzKCBmYWNlWyAwIF0gKyBvZmZzZXQsIGZhY2VbIDEgXSArIG9mZnNldCwgZmFjZVsgMiBdICsgb2Zmc2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEJvdHRvbSBmYWNlc1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdGYzKCBmYWNlWyAyIF0sIGZhY2VbIDEgXSwgZmFjZVsgMCBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRvcCBmYWNlc1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdGYzKCBmYWNlWyAwIF0gKyB2bGVuICogc3RlcHMsIGZhY2VbIDEgXSArIHZsZW4gKiBzdGVwcywgZmFjZVsgMiBdICsgdmxlbiAqIHN0ZXBzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBzdGFydCwgdmVydGljZXNBcnJheS5sZW5ndGggLyAzIC0gc3RhcnQsIDAgKTtcblxuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBmYWNlcyBmb3IgdGhlIHotc2lkZXMgb2YgdGhlIHNoYXBlXG5cblx0XHRmdW5jdGlvbiBidWlsZFNpZGVGYWNlcygpIHtcblxuXHRcdFx0dmFyIHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXHRcdFx0dmFyIGxheWVyb2Zmc2V0ID0gMDtcblx0XHRcdHNpZGV3YWxscyggY29udG91ciwgbGF5ZXJvZmZzZXQgKTtcblx0XHRcdGxheWVyb2Zmc2V0ICs9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdHNpZGV3YWxscyggYWhvbGUsIGxheWVyb2Zmc2V0ICk7XG5cblx0XHRcdFx0Ly8sIHRydWVcblx0XHRcdFx0bGF5ZXJvZmZzZXQgKz0gYWhvbGUubGVuZ3RoO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMSApO1xuXG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICkge1xuXG5cdFx0XHR2YXIgaiwgaztcblx0XHRcdGkgPSBjb250b3VyLmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCAtLSBpID49IDAgKSB7XG5cblx0XHRcdFx0aiA9IGk7XG5cdFx0XHRcdGsgPSBpIC0gMTtcblx0XHRcdFx0aWYgKCBrIDwgMCApIGsgPSBjb250b3VyLmxlbmd0aCAtIDE7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnYicsIGksaiwgaS0xLCBrLHZlcnRpY2VzLmxlbmd0aCk7XG5cblx0XHRcdFx0dmFyIHMgPSAwLFxuXHRcdFx0XHRcdHNsID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcblxuXHRcdFx0XHRmb3IgKCBzID0gMDsgcyA8IHNsOyBzICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHNsZW4xID0gdmxlbiAqIHM7XG5cdFx0XHRcdFx0dmFyIHNsZW4yID0gdmxlbiAqICggcyArIDEgKTtcblxuXHRcdFx0XHRcdHZhciBhID0gbGF5ZXJvZmZzZXQgKyBqICsgc2xlbjEsXG5cdFx0XHRcdFx0XHRiID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjEsXG5cdFx0XHRcdFx0XHRjID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjIsXG5cdFx0XHRcdFx0XHRkID0gbGF5ZXJvZmZzZXQgKyBqICsgc2xlbjI7XG5cblx0XHRcdFx0XHRmNCggYSwgYiwgYywgZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdiggeCwgeSwgeiApIHtcblxuXHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeCApO1xuXHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeSApO1xuXHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeiApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBmMyggYSwgYiwgYyApIHtcblxuXHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggYyApO1xuXG5cdFx0XHR2YXIgbmV4dEluZGV4ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXHRcdFx0dmFyIHV2cyA9IHV2Z2VuLmdlbmVyYXRlVG9wVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGY0KCBhLCBiLCBjLCBkICkge1xuXG5cdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcblx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0YWRkVmVydGV4KCBjICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGQgKTtcblxuXG5cdFx0XHR2YXIgbmV4dEluZGV4ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXHRcdFx0dmFyIHV2cyA9IHV2Z2VuLmdlbmVyYXRlU2lkZVdhbGxVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDYsIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTtcblxuXHRcdFx0YWRkVVYoIHV2c1sgMCBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAxIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0XHRhZGRVViggdXZzWyAxIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDIgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMyBdICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRWZXJ0ZXgoIGluZGV4ICkge1xuXG5cdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAwIF0gKTtcblx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDEgXSApO1xuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMiBdICk7XG5cblx0XHR9XG5cblxuXHRcdGZ1bmN0aW9uIGFkZFVWKCB2ZWN0b3IyICkge1xuXG5cdFx0XHR1dkFycmF5LnB1c2goIHZlY3RvcjIueCApO1xuXHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnkgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTtcblxuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHR2YXIgc2hhcGVzID0gdGhpcy5wYXJhbWV0ZXJzLnNoYXBlcztcblx0dmFyIG9wdGlvbnMgPSB0aGlzLnBhcmFtZXRlcnMub3B0aW9ucztcblxuXHRyZXR1cm4gdG9KU09OKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKTtcblxufTtcblxuLy9cblxudmFyIFdvcmxkVVZHZW5lcmF0b3IgPSB7XG5cblx0Z2VuZXJhdGVUb3BVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMgKSB7XG5cblx0XHR2YXIgYV94ID0gdmVydGljZXNbIGluZGV4QSAqIDMgXTtcblx0XHR2YXIgYV95ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAxIF07XG5cdFx0dmFyIGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0dmFyIGJfeSA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMSBdO1xuXHRcdHZhciBjX3ggPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyBdO1xuXHRcdHZhciBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRuZXcgVmVjdG9yMiggYV94LCBhX3kgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBiX3gsIGJfeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgY195IClcblx0XHRdO1xuXG5cdH0sXG5cblx0Z2VuZXJhdGVTaWRlV2FsbFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QywgaW5kZXhEICkge1xuXG5cdFx0dmFyIGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XG5cdFx0dmFyIGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdHZhciBhX3ogPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDIgXTtcblx0XHR2YXIgYl94ID0gdmVydGljZXNbIGluZGV4QiAqIDMgXTtcblx0XHR2YXIgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XG5cdFx0dmFyIGJfeiA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMiBdO1xuXHRcdHZhciBjX3ggPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyBdO1xuXHRcdHZhciBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcblx0XHR2YXIgY196ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAyIF07XG5cdFx0dmFyIGRfeCA9IHZlcnRpY2VzWyBpbmRleEQgKiAzIF07XG5cdFx0dmFyIGRfeSA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMSBdO1xuXHRcdHZhciBkX3ogPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDIgXTtcblxuXHRcdGlmICggTWF0aC5hYnMoIGFfeSAtIGJfeSApIDwgMC4wMSApIHtcblxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGFfeCwgMSAtIGFfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggYl94LCAxIC0gYl96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBjX3gsIDEgLSBjX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGRfeCwgMSAtIGRfeiApXG5cdFx0XHRdO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGFfeSwgMSAtIGFfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggYl95LCAxIC0gYl96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBjX3ksIDEgLSBjX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGRfeSwgMSAtIGRfeiApXG5cdFx0XHRdO1xuXG5cdFx0fVxuXG5cdH1cbn07XG5cbmZ1bmN0aW9uIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICkge1xuXG5cdC8vXG5cblx0ZGF0YS5zaGFwZXMgPSBbXTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XG5cblx0fVxuXG5cdC8vXG5cblx0aWYgKCBvcHRpb25zLmV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoLnRvSlNPTigpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBUZXh0ID0gM0QgVGV4dFxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZm9udDogPFRIUkVFLkZvbnQ+LCAvLyBmb250XG4gKlxuICogIHNpemU6IDxmbG9hdD4sIC8vIHNpemUgb2YgdGhlIHRleHRcbiAqICBoZWlnaHQ6IDxmbG9hdD4sIC8vIHRoaWNrbmVzcyB0byBleHRydWRlIHRleHRcbiAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzXG4gKlxuICogIGJldmVsRW5hYmxlZDogPGJvb2w+LCAvLyB0dXJuIG9uIGJldmVsXG4gKiAgYmV2ZWxUaGlja25lc3M6IDxmbG9hdD4sIC8vIGhvdyBkZWVwIGludG8gdGV4dCBiZXZlbCBnb2VzXG4gKiAgYmV2ZWxTaXplOiA8ZmxvYXQ+IC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgaXMgYmV2ZWxcbiAqIH1cbiAqL1xuXG4vLyBUZXh0R2VvbWV0cnlcblxuZnVuY3Rpb24gVGV4dEdlb21ldHJ5KCB0ZXh0LCBwYXJhbWV0ZXJzICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV4dEdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0dGV4dDogdGV4dCxcblx0XHRwYXJhbWV0ZXJzOiBwYXJhbWV0ZXJzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBUZXh0QnVmZmVyR2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5UZXh0R2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5UZXh0R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dEdlb21ldHJ5O1xuXG4vLyBUZXh0QnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVGV4dEJ1ZmZlckdlb21ldHJ5KCB0ZXh0LCBwYXJhbWV0ZXJzICkge1xuXG5cdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xuXG5cdHZhciBmb250ID0gcGFyYW1ldGVycy5mb250O1xuXG5cdGlmICggISAoIGZvbnQgJiYgZm9udC5pc0ZvbnQgKSApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5UZXh0R2VvbWV0cnk6IGZvbnQgcGFyYW1ldGVyIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5Gb250LicgKTtcblx0XHRyZXR1cm4gbmV3IEdlb21ldHJ5KCk7XG5cblx0fVxuXG5cdHZhciBzaGFwZXMgPSBmb250LmdlbmVyYXRlU2hhcGVzKCB0ZXh0LCBwYXJhbWV0ZXJzLnNpemUgKTtcblxuXHQvLyB0cmFuc2xhdGUgcGFyYW1ldGVycyB0byBFeHRydWRlR2VvbWV0cnkgQVBJXG5cblx0cGFyYW1ldGVycy5kZXB0aCA9IHBhcmFtZXRlcnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmhlaWdodCA6IDUwO1xuXG5cdC8vIGRlZmF1bHRzXG5cblx0aWYgKCBwYXJhbWV0ZXJzLmJldmVsVGhpY2tuZXNzID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsVGhpY2tuZXNzID0gMTA7XG5cdGlmICggcGFyYW1ldGVycy5iZXZlbFNpemUgPT09IHVuZGVmaW5lZCApIHBhcmFtZXRlcnMuYmV2ZWxTaXplID0gODtcblx0aWYgKCBwYXJhbWV0ZXJzLmJldmVsRW5hYmxlZCA9PT0gdW5kZWZpbmVkICkgcGFyYW1ldGVycy5iZXZlbEVuYWJsZWQgPSBmYWxzZTtcblxuXHRFeHRydWRlQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgc2hhcGVzLCBwYXJhbWV0ZXJzICk7XG5cblx0dGhpcy50eXBlID0gJ1RleHRCdWZmZXJHZW9tZXRyeSc7XG5cbn1cblxuVGV4dEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRleHRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0QnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBTcGhlcmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBTcGhlcmVHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcGhlcmVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5TcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcGhlcmVHZW9tZXRyeTtcblxuLy8gU3BoZXJlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gU3BoZXJlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3BoZXJlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGgsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblxuXHR3aWR0aFNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCA4ICk7XG5cdGhlaWdodFNlZ21lbnRzID0gTWF0aC5tYXgoIDIsIE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgNiApO1xuXG5cdHBoaVN0YXJ0ID0gcGhpU3RhcnQgIT09IHVuZGVmaW5lZCA/IHBoaVN0YXJ0IDogMDtcblx0cGhpTGVuZ3RoID0gcGhpTGVuZ3RoICE9PSB1bmRlZmluZWQgPyBwaGlMZW5ndGggOiBNYXRoLlBJICogMjtcblxuXHR0aGV0YVN0YXJ0ID0gdGhldGFTdGFydCAhPT0gdW5kZWZpbmVkID8gdGhldGFTdGFydCA6IDA7XG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSTtcblxuXHR2YXIgdGhldGFFbmQgPSB0aGV0YVN0YXJ0ICsgdGhldGFMZW5ndGg7XG5cblx0dmFyIGl4LCBpeTtcblxuXHR2YXIgaW5kZXggPSAwO1xuXHR2YXIgZ3JpZCA9IFtdO1xuXG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaXkgPSAwOyBpeSA8PSBoZWlnaHRTZWdtZW50czsgaXkgKysgKSB7XG5cblx0XHR2YXIgdmVydGljZXNSb3cgPSBbXTtcblxuXHRcdHZhciB2ID0gaXkgLyBoZWlnaHRTZWdtZW50cztcblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPD0gd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdHZhciB1ID0gaXggLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSAtIHJhZGl1cyAqIE1hdGguY29zKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbC5zZXQoIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKS5ub3JtYWxpemUoKTtcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggdSwgMSAtIHYgKTtcblxuXHRcdFx0dmVydGljZXNSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdH1cblxuXHRcdGdyaWQucHVzaCggdmVydGljZXNSb3cgKTtcblxuXHR9XG5cblx0Ly8gaW5kaWNlc1xuXG5cdGZvciAoIGl5ID0gMDsgaXkgPCBoZWlnaHRTZWdtZW50czsgaXkgKysgKSB7XG5cblx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdHZhciBhID0gZ3JpZFsgaXkgXVsgaXggKyAxIF07XG5cdFx0XHR2YXIgYiA9IGdyaWRbIGl5IF1bIGl4IF07XG5cdFx0XHR2YXIgYyA9IGdyaWRbIGl5ICsgMSBdWyBpeCBdO1xuXHRcdFx0dmFyIGQgPSBncmlkWyBpeSArIDEgXVsgaXggKyAxIF07XG5cblx0XHRcdGlmICggaXkgIT09IDAgfHwgdGhldGFTdGFydCA+IDAgKSBpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGlmICggaXkgIT09IGhlaWdodFNlZ21lbnRzIC0gMSB8fCB0aGV0YUVuZCA8IE1hdGguUEkgKSBpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cblNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuU3BoZXJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BoZXJlQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBLYWxlYiBNdXJwaHlcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gUmluZ0dlb21ldHJ5XG5cbmZ1bmN0aW9uIFJpbmdHZW9tZXRyeSggaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCB0aGV0YVNlZ21lbnRzLCBwaGlTZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdSaW5nR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXG5cdFx0b3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLFxuXHRcdHRoZXRhU2VnbWVudHM6IHRoZXRhU2VnbWVudHMsXG5cdFx0cGhpU2VnbWVudHM6IHBoaVNlZ21lbnRzLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBSaW5nQnVmZmVyR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuUmluZ0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuUmluZ0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJpbmdHZW9tZXRyeTtcblxuLy8gUmluZ0J1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFJpbmdCdWZmZXJHZW9tZXRyeSggaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCB0aGV0YVNlZ21lbnRzLCBwaGlTZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdSaW5nQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXG5cdFx0b3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLFxuXHRcdHRoZXRhU2VnbWVudHM6IHRoZXRhU2VnbWVudHMsXG5cdFx0cGhpU2VnbWVudHM6IHBoaVNlZ21lbnRzLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0aW5uZXJSYWRpdXMgPSBpbm5lclJhZGl1cyB8fCAwLjU7XG5cdG91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgfHwgMTtcblxuXHR0aGV0YVN0YXJ0ID0gdGhldGFTdGFydCAhPT0gdW5kZWZpbmVkID8gdGhldGFTdGFydCA6IDA7XG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7XG5cblx0dGhldGFTZWdtZW50cyA9IHRoZXRhU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IE1hdGgubWF4KCAzLCB0aGV0YVNlZ21lbnRzICkgOiA4O1xuXHRwaGlTZWdtZW50cyA9IHBoaVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMSwgcGhpU2VnbWVudHMgKSA6IDE7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gc29tZSBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIHNlZ21lbnQ7XG5cdHZhciByYWRpdXMgPSBpbm5lclJhZGl1cztcblx0dmFyIHJhZGl1c1N0ZXAgPSAoICggb3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cyApIC8gcGhpU2VnbWVudHMgKTtcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBqLCBpO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBqID0gMDsgaiA8PSBwaGlTZWdtZW50czsgaiArKyApIHtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdC8vIHZhbHVlcyBhcmUgZ2VuZXJhdGUgZnJvbSB0aGUgaW5zaWRlIG9mIHRoZSByaW5nIHRvIHRoZSBvdXRzaWRlXG5cblx0XHRcdHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgaSAvIHRoZXRhU2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2LnggPSAoIHZlcnRleC54IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXHRcdFx0dXYueSA9ICggdmVydGV4LnkgLyBvdXRlclJhZGl1cyArIDEgKSAvIDI7XG5cblx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHR9XG5cblx0XHQvLyBpbmNyZWFzZSB0aGUgcmFkaXVzIGZvciBuZXh0IHJvdyBvZiB2ZXJ0aWNlc1xuXG5cdFx0cmFkaXVzICs9IHJhZGl1c1N0ZXA7XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBqID0gMDsgaiA8IHBoaVNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0dmFyIHRoZXRhU2VnbWVudExldmVsID0gaiAqICggdGhldGFTZWdtZW50cyArIDEgKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgdGhldGFTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0c2VnbWVudCA9IGkgKyB0aGV0YVNlZ21lbnRMZXZlbDtcblxuXHRcdFx0dmFyIGEgPSBzZWdtZW50O1xuXHRcdFx0dmFyIGIgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDE7XG5cdFx0XHR2YXIgYyA9IHNlZ21lbnQgKyB0aGV0YVNlZ21lbnRzICsgMjtcblx0XHRcdHZhciBkID0gc2VnbWVudCArIDE7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5SaW5nQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5SaW5nQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmluZ0J1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHBzOi8vZ2l0aHViLmNvbS96ejg1XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIExhdGhlR2VvbWV0cnlcblxuZnVuY3Rpb24gTGF0aGVHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xhdGhlR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRwb2ludHM6IHBvaW50cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBMYXRoZUJ1ZmZlckdlb21ldHJ5KCBwb2ludHMsIHNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuTGF0aGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkxhdGhlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF0aGVHZW9tZXRyeTtcblxuLy8gTGF0aGVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBMYXRoZUJ1ZmZlckdlb21ldHJ5KCBwb2ludHMsIHNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGF0aGVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBvaW50czogcG9pbnRzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGhcblx0fTtcblxuXHRzZWdtZW50cyA9IE1hdGguZmxvb3IoIHNlZ21lbnRzICkgfHwgMTI7XG5cdHBoaVN0YXJ0ID0gcGhpU3RhcnQgfHwgMDtcblx0cGhpTGVuZ3RoID0gcGhpTGVuZ3RoIHx8IE1hdGguUEkgKiAyO1xuXG5cdC8vIGNsYW1wIHBoaUxlbmd0aCBzbyBpdCdzIGluIHJhbmdlIG9mIFsgMCwgMlBJIF1cblxuXHRwaGlMZW5ndGggPSBfTWF0aC5jbGFtcCggcGhpTGVuZ3RoLCAwLCBNYXRoLlBJICogMiApO1xuXG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBiYXNlO1xuXHR2YXIgaW52ZXJzZVNlZ21lbnRzID0gMS4wIC8gc2VnbWVudHM7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgaSwgajtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcyBhbmQgdXZzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHR2YXIgcGhpID0gcGhpU3RhcnQgKyBpICogaW52ZXJzZVNlZ21lbnRzICogcGhpTGVuZ3RoO1xuXG5cdFx0dmFyIHNpbiA9IE1hdGguc2luKCBwaGkgKTtcblx0XHR2YXIgY29zID0gTWF0aC5jb3MoIHBoaSApO1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPD0gKCBwb2ludHMubGVuZ3RoIC0gMSApOyBqICsrICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSBwb2ludHNbIGogXS54ICogc2luO1xuXHRcdFx0dmVydGV4LnkgPSBwb2ludHNbIGogXS55O1xuXHRcdFx0dmVydGV4LnogPSBwb2ludHNbIGogXS54ICogY29zO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2LnggPSBpIC8gc2VnbWVudHM7XG5cdFx0XHR1di55ID0gaiAvICggcG9pbnRzLmxlbmd0aCAtIDEgKTtcblxuXHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaSA9IDA7IGkgPCBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgKCBwb2ludHMubGVuZ3RoIC0gMSApOyBqICsrICkge1xuXG5cdFx0XHRiYXNlID0gaiArIGkgKiBwb2ludHMubGVuZ3RoO1xuXG5cdFx0XHR2YXIgYSA9IGJhc2U7XG5cdFx0XHR2YXIgYiA9IGJhc2UgKyBwb2ludHMubGVuZ3RoO1xuXHRcdFx0dmFyIGMgPSBiYXNlICsgcG9pbnRzLmxlbmd0aCArIDE7XG5cdFx0XHR2YXIgZCA9IGJhc2UgKyAxO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyBnZW5lcmF0ZSBub3JtYWxzXG5cblx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIHdlIG5lZWQgdG8gYXZlcmFnZSB0aGUgbm9ybWFscyBhbG9uZyB0aGUgc2VhbS5cblx0Ly8gYmVjYXVzZSB0aGUgY29ycmVzcG9uZGluZyB2ZXJ0aWNlcyBhcmUgaWRlbnRpY2FsIChidXQgc3RpbGwgaGF2ZSBkaWZmZXJlbnQgVVZzKS5cblxuXHRpZiAoIHBoaUxlbmd0aCA9PT0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHR2YXIgbm9ybWFscyA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cdFx0dmFyIG4xID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbjIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBuID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIHRoaXMgaXMgdGhlIGJ1ZmZlciBvZmZzZXQgZm9yIHRoZSBsYXN0IGxpbmUgb2YgdmVydGljZXNcblxuXHRcdGJhc2UgPSBzZWdtZW50cyAqIHBvaW50cy5sZW5ndGggKiAzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGogPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArKywgaiArPSAzICkge1xuXG5cdFx0XHQvLyBzZWxlY3QgdGhlIG5vcm1hbCBvZiB0aGUgdmVydGV4IGluIHRoZSBmaXJzdCBsaW5lXG5cblx0XHRcdG4xLnggPSBub3JtYWxzWyBqICsgMCBdO1xuXHRcdFx0bjEueSA9IG5vcm1hbHNbIGogKyAxIF07XG5cdFx0XHRuMS56ID0gbm9ybWFsc1sgaiArIDIgXTtcblxuXHRcdFx0Ly8gc2VsZWN0IHRoZSBub3JtYWwgb2YgdGhlIHZlcnRleCBpbiB0aGUgbGFzdCBsaW5lXG5cblx0XHRcdG4yLnggPSBub3JtYWxzWyBiYXNlICsgaiArIDAgXTtcblx0XHRcdG4yLnkgPSBub3JtYWxzWyBiYXNlICsgaiArIDEgXTtcblx0XHRcdG4yLnogPSBub3JtYWxzWyBiYXNlICsgaiArIDIgXTtcblxuXHRcdFx0Ly8gYXZlcmFnZSBub3JtYWxzXG5cblx0XHRcdG4uYWRkVmVjdG9ycyggbjEsIG4yICkubm9ybWFsaXplKCk7XG5cblx0XHRcdC8vIGFzc2lnbiB0aGUgbmV3IHZhbHVlcyB0byBib3RoIG5vcm1hbHNcblxuXHRcdFx0bm9ybWFsc1sgaiArIDAgXSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMCBdID0gbi54O1xuXHRcdFx0bm9ybWFsc1sgaiArIDEgXSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMSBdID0gbi55O1xuXHRcdFx0bm9ybWFsc1sgaiArIDIgXSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMiBdID0gbi56O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5MYXRoZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuTGF0aGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXRoZUJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBTaGFwZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNoYXBlR2VvbWV0cnkoIHNoYXBlcywgY3VydmVTZWdtZW50cyApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlR2VvbWV0cnknO1xuXG5cdGlmICggdHlwZW9mIGN1cnZlU2VnbWVudHMgPT09ICdvYmplY3QnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGVHZW9tZXRyeTogT3B0aW9ucyBwYXJhbWV0ZXIgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHRjdXJ2ZVNlZ21lbnRzID0gY3VydmVTZWdtZW50cy5jdXJ2ZVNlZ21lbnRzO1xuXG5cdH1cblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0Y3VydmVTZWdtZW50czogY3VydmVTZWdtZW50c1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgU2hhcGVCdWZmZXJHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVHZW9tZXRyeTtcblxuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cblx0cmV0dXJuIHRvSlNPTiQxKCBzaGFwZXMsIGRhdGEgKTtcblxufTtcblxuLy8gU2hhcGVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBTaGFwZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIGN1cnZlU2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFwZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0Y3VydmVTZWdtZW50czogY3VydmVTZWdtZW50c1xuXHR9O1xuXG5cdGN1cnZlU2VnbWVudHMgPSBjdXJ2ZVNlZ21lbnRzIHx8IDEyO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgZ3JvdXBTdGFydCA9IDA7XG5cdHZhciBncm91cENvdW50ID0gMDtcblxuXHQvLyBhbGxvdyBzaW5nbGUgYW5kIGFycmF5IHZhbHVlcyBmb3IgXCJzaGFwZXNcIiBwYXJhbWV0ZXJcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApID09PSBmYWxzZSApIHtcblxuXHRcdGFkZFNoYXBlKCBzaGFwZXMgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgc2hhcGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0YWRkU2hhcGUoIHNoYXBlc1sgaSBdICk7XG5cblx0XHRcdHRoaXMuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIGkgKTsgLy8gZW5hYmxlcyBNdWx0aU1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXHRcdFx0Z3JvdXBDb3VudCA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXG5cdC8vIGhlbHBlciBmdW5jdGlvbnNcblxuXHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHR2YXIgaSwgbCwgc2hhcGVIb2xlO1xuXG5cdFx0dmFyIGluZGV4T2Zmc2V0ID0gdmVydGljZXMubGVuZ3RoIC8gMztcblx0XHR2YXIgcG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyggY3VydmVTZWdtZW50cyApO1xuXG5cdFx0dmFyIHNoYXBlVmVydGljZXMgPSBwb2ludHMuc2hhcGU7XG5cdFx0dmFyIHNoYXBlSG9sZXMgPSBwb2ludHMuaG9sZXM7XG5cblx0XHQvLyBjaGVjayBkaXJlY3Rpb24gb2YgdmVydGljZXNcblxuXHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVWZXJ0aWNlcyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0c2hhcGVWZXJ0aWNlcyA9IHNoYXBlVmVydGljZXMucmV2ZXJzZSgpO1xuXG5cdFx0XHQvLyBhbHNvIGNoZWNrIGlmIGhvbGVzIGFyZSBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHNoYXBlSG9sZSApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c2hhcGVIb2xlc1sgaSBdID0gc2hhcGVIb2xlLnJldmVyc2UoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyApO1xuXG5cdFx0Ly8gam9pbiB2ZXJ0aWNlcyBvZiBpbm5lciBhbmQgb3V0ZXIgcGF0aHMgdG8gYSBzaW5nbGUgYXJyYXlcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRzaGFwZUhvbGUgPSBzaGFwZUhvbGVzWyBpIF07XG5cdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5jb25jYXQoIHNoYXBlSG9sZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdmVydGljZXMsIG5vcm1hbHMsIHV2c1xuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZVZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSBzaGFwZVZlcnRpY2VzWyBpIF07XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgMCApO1xuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdFx0XHR1dnMucHVzaCggdmVydGV4LngsIHZlcnRleC55ICk7IC8vIHdvcmxkIHV2c1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5jaWRlc1xuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdHZhciBhID0gZmFjZVsgMCBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHR2YXIgYiA9IGZhY2VbIDEgXSArIGluZGV4T2Zmc2V0O1xuXHRcdFx0dmFyIGMgPSBmYWNlWyAyIF0gKyBpbmRleE9mZnNldDtcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBjICk7XG5cdFx0XHRncm91cENvdW50ICs9IDM7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5TaGFwZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYXBlQnVmZmVyR2VvbWV0cnk7XG5cblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdHJldHVybiB0b0pTT04kMSggc2hhcGVzLCBkYXRhICk7XG5cbn07XG5cbi8vXG5cbmZ1bmN0aW9uIHRvSlNPTiQxKCBzaGFwZXMsIGRhdGEgKSB7XG5cblx0ZGF0YS5zaGFwZXMgPSBbXTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XG5cblx0fVxuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIEVkZ2VzR2VvbWV0cnkoIGdlb21ldHJ5LCB0aHJlc2hvbGRBbmdsZSApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0VkZ2VzR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR0aHJlc2hvbGRBbmdsZTogdGhyZXNob2xkQW5nbGVcblx0fTtcblxuXHR0aHJlc2hvbGRBbmdsZSA9ICggdGhyZXNob2xkQW5nbGUgIT09IHVuZGVmaW5lZCApID8gdGhyZXNob2xkQW5nbGUgOiAxO1xuXG5cdC8vIGJ1ZmZlclxuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgdGhyZXNob2xkRG90ID0gTWF0aC5jb3MoIF9NYXRoLkRFRzJSQUQgKiB0aHJlc2hvbGRBbmdsZSApO1xuXHR2YXIgZWRnZSA9IFsgMCwgMCBdLCBlZGdlcyA9IHt9LCBlZGdlMSwgZWRnZTI7XG5cdHZhciBrZXksIGtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblxuXHQvLyBwcmVwYXJlIHNvdXJjZSBnZW9tZXRyeVxuXG5cdHZhciBnZW9tZXRyeTI7XG5cblx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0Z2VvbWV0cnkyID0gbmV3IEdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkyLmZyb21CdWZmZXJHZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Z2VvbWV0cnkyID0gZ2VvbWV0cnkuY2xvbmUoKTtcblxuXHR9XG5cblx0Z2VvbWV0cnkyLm1lcmdlVmVydGljZXMoKTtcblx0Z2VvbWV0cnkyLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG5cdHZhciBzb3VyY2VWZXJ0aWNlcyA9IGdlb21ldHJ5Mi52ZXJ0aWNlcztcblx0dmFyIGZhY2VzID0gZ2VvbWV0cnkyLmZhY2VzO1xuXG5cdC8vIG5vdyBjcmVhdGUgYSBkYXRhIHN0cnVjdHVyZSB3aGVyZSBlYWNoIGVudHJ5IHJlcHJlc2VudHMgYW4gZWRnZSB3aXRoIGl0cyBhZGpvaW5pbmcgZmFjZXNcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0ZWRnZTEgPSBmYWNlWyBrZXlzWyBqIF0gXTtcblx0XHRcdGVkZ2UyID0gZmFjZVsga2V5c1sgKCBqICsgMSApICUgMyBdIF07XG5cdFx0XHRlZGdlWyAwIF0gPSBNYXRoLm1pbiggZWRnZTEsIGVkZ2UyICk7XG5cdFx0XHRlZGdlWyAxIF0gPSBNYXRoLm1heCggZWRnZTEsIGVkZ2UyICk7XG5cblx0XHRcdGtleSA9IGVkZ2VbIDAgXSArICcsJyArIGVkZ2VbIDEgXTtcblxuXHRcdFx0aWYgKCBlZGdlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRlZGdlc1sga2V5IF0gPSB7IGluZGV4MTogZWRnZVsgMCBdLCBpbmRleDI6IGVkZ2VbIDEgXSwgZmFjZTE6IGksIGZhY2UyOiB1bmRlZmluZWQgfTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRlZGdlc1sga2V5IF0uZmFjZTIgPSBpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzXG5cblx0Zm9yICgga2V5IGluIGVkZ2VzICkge1xuXG5cdFx0dmFyIGUgPSBlZGdlc1sga2V5IF07XG5cblx0XHQvLyBhbiBlZGdlIGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhlIGFuZ2xlIChpbiBkZWdyZWVzKSBiZXR3ZWVuIHRoZSBmYWNlIG5vcm1hbHMgb2YgdGhlIGFkam9pbmluZyBmYWNlcyBleGNlZWRzIHRoaXMgdmFsdWUuIGRlZmF1bHQgPSAxIGRlZ3JlZS5cblxuXHRcdGlmICggZS5mYWNlMiA9PT0gdW5kZWZpbmVkIHx8IGZhY2VzWyBlLmZhY2UxIF0ubm9ybWFsLmRvdCggZmFjZXNbIGUuZmFjZTIgXS5ub3JtYWwgKSA8PSB0aHJlc2hvbGREb3QgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSBzb3VyY2VWZXJ0aWNlc1sgZS5pbmRleDEgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0dmVydGV4ID0gc291cmNlVmVydGljZXNbIGUuaW5kZXgyIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cbn1cblxuRWRnZXNHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkVkZ2VzR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRWRnZXNHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBDeWxpbmRlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEN5bGluZGVyR2VvbWV0cnkoIHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N5bGluZGVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcblx0XHRyYWRpdXNCb3R0b206IHJhZGl1c0JvdHRvbSxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5KCByYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDeWxpbmRlckdlb21ldHJ5O1xuXG4vLyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEN5bGluZGVyQnVmZmVyR2VvbWV0cnkoIHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N5bGluZGVyQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcblx0XHRyYWRpdXNCb3R0b206IHJhZGl1c0JvdHRvbSxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRyYWRpdXNUb3AgPSByYWRpdXNUb3AgIT09IHVuZGVmaW5lZCA/IHJhZGl1c1RvcCA6IDE7XG5cdHJhZGl1c0JvdHRvbSA9IHJhZGl1c0JvdHRvbSAhPT0gdW5kZWZpbmVkID8gcmFkaXVzQm90dG9tIDogMTtcblx0aGVpZ2h0ID0gaGVpZ2h0IHx8IDE7XG5cblx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApIHx8IDg7XG5cdGhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCAxO1xuXG5cdG9wZW5FbmRlZCA9IG9wZW5FbmRlZCAhPT0gdW5kZWZpbmVkID8gb3BlbkVuZGVkIDogZmFsc2U7XG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMC4wO1xuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgaW5kZXggPSAwO1xuXHR2YXIgaW5kZXhBcnJheSA9IFtdO1xuXHR2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblxuXHQvLyBnZW5lcmF0ZSBnZW9tZXRyeVxuXG5cdGdlbmVyYXRlVG9yc28oKTtcblxuXHRpZiAoIG9wZW5FbmRlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRpZiAoIHJhZGl1c1RvcCA+IDAgKSBnZW5lcmF0ZUNhcCggdHJ1ZSApO1xuXHRcdGlmICggcmFkaXVzQm90dG9tID4gMCApIGdlbmVyYXRlQ2FwKCBmYWxzZSApO1xuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVUb3JzbygpIHtcblxuXHRcdHZhciB4LCB5O1xuXHRcdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0Ly8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWxcblx0XHR2YXIgc2xvcGUgPSAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApIC8gaGVpZ2h0O1xuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggeSA9IDA7IHkgPD0gaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdHZhciBpbmRleFJvdyA9IFtdO1xuXG5cdFx0XHR2YXIgdiA9IHkgLyBoZWlnaHRTZWdtZW50cztcblxuXHRcdFx0Ly8gY2FsY3VsYXRlIHRoZSByYWRpdXMgb2YgdGhlIGN1cnJlbnQgcm93XG5cblx0XHRcdHZhciByYWRpdXMgPSB2ICogKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSArIHJhZGl1c1RvcDtcblxuXHRcdFx0Zm9yICggeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdFx0dmFyIHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0dmFyIHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcblxuXHRcdFx0XHR2YXIgc2luVGhldGEgPSBNYXRoLnNpbiggdGhldGEgKTtcblx0XHRcdFx0dmFyIGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTtcblx0XHRcdFx0dmVydGV4LnkgPSAtIHYgKiBoZWlnaHQgKyBoYWxmSGVpZ2h0O1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIGNvc1RoZXRhO1xuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0bm9ybWFsLnNldCggc2luVGhldGEsIHNsb3BlLCBjb3NUaGV0YSApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2cy5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0XHRcdC8vIHNhdmUgaW5kZXggb2YgdmVydGV4IGluIHJlc3BlY3RpdmUgcm93XG5cblx0XHRcdFx0aW5kZXhSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBub3cgc2F2ZSB2ZXJ0aWNlcyBvZiB0aGUgcm93IGluIG91ciBpbmRleCBhcnJheVxuXG5cdFx0XHRpbmRleEFycmF5LnB1c2goIGluZGV4Um93ICk7XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRmb3IgKCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRmb3IgKCB5ID0gMDsgeSA8IGhlaWdodFNlZ21lbnRzOyB5ICsrICkge1xuXG5cdFx0XHRcdC8vIHdlIHVzZSB0aGUgaW5kZXggYXJyYXkgdG8gYWNjZXNzIHRoZSBjb3JyZWN0IGluZGljZXNcblxuXHRcdFx0XHR2YXIgYSA9IGluZGV4QXJyYXlbIHkgXVsgeCBdO1xuXHRcdFx0XHR2YXIgYiA9IGluZGV4QXJyYXlbIHkgKyAxIF1bIHggXTtcblx0XHRcdFx0dmFyIGMgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4ICsgMSBdO1xuXHRcdFx0XHR2YXIgZCA9IGluZGV4QXJyYXlbIHkgXVsgeCArIDEgXTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHQvLyB1cGRhdGUgZ3JvdXAgY291bnRlclxuXG5cdFx0XHRcdGdyb3VwQ291bnQgKz0gNjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCAwICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVDYXAoIHRvcCApIHtcblxuXHRcdHZhciB4LCBjZW50ZXJJbmRleFN0YXJ0LCBjZW50ZXJJbmRleEVuZDtcblxuXHRcdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHR2YXIgcmFkaXVzID0gKCB0b3AgPT09IHRydWUgKSA/IHJhZGl1c1RvcCA6IHJhZGl1c0JvdHRvbTtcblx0XHR2YXIgc2lnbiA9ICggdG9wID09PSB0cnVlICkgPyAxIDogLSAxO1xuXG5cdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNlbnRlciB2ZXJ0ZXhcblx0XHRjZW50ZXJJbmRleFN0YXJ0ID0gaW5kZXg7XG5cblx0XHQvLyBmaXJzdCB3ZSBnZW5lcmF0ZSB0aGUgY2VudGVyIHZlcnRleCBkYXRhIG9mIHRoZSBjYXAuXG5cdFx0Ly8gYmVjYXVzZSB0aGUgZ2VvbWV0cnkgbmVlZHMgb25lIHNldCBvZiB1dnMgcGVyIGZhY2UsXG5cdFx0Ly8gd2UgbXVzdCBnZW5lcmF0ZSBhIGNlbnRlciB2ZXJ0ZXggcGVyIGZhY2Uvc2VnbWVudFxuXG5cdFx0Zm9yICggeCA9IDE7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCBoYWxmSGVpZ2h0ICogc2lnbiwgMCApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCBzaWduLCAwICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRpbmRleCArKztcblxuXHRcdH1cblxuXHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGNlbnRlciB2ZXJ0ZXhcblxuXHRcdGNlbnRlckluZGV4RW5kID0gaW5kZXg7XG5cblx0XHQvLyBub3cgd2UgZ2VuZXJhdGUgdGhlIHN1cnJvdW5kaW5nIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIHggPSAwOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblx0XHRcdHZhciB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XG5cblx0XHRcdHZhciBjb3NUaGV0YSA9IE1hdGguY29zKCB0aGV0YSApO1xuXHRcdFx0dmFyIHNpblRoZXRhID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xuXHRcdFx0dmVydGV4LnkgPSBoYWxmSGVpZ2h0ICogc2lnbjtcblx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXYueCA9ICggY29zVGhldGEgKiAwLjUgKSArIDAuNTtcblx0XHRcdHV2LnkgPSAoIHNpblRoZXRhICogMC41ICogc2lnbiApICsgMC41O1xuXHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcblxuXHRcdFx0aW5kZXggKys7XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRmb3IgKCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHR2YXIgYyA9IGNlbnRlckluZGV4U3RhcnQgKyB4O1xuXHRcdFx0dmFyIGkgPSBjZW50ZXJJbmRleEVuZCArIHg7XG5cblx0XHRcdGlmICggdG9wID09PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIGZhY2UgdG9wXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBpLCBpICsgMSwgYyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGZhY2UgYm90dG9tXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBpICsgMSwgaSwgYyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdH1cblxuXHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgdG9wID09PSB0cnVlID8gMSA6IDIgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdH1cblxufVxuXG5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgYWJlbG5hdGlvbiAvIGh0dHA6Ly9naXRodWIuY29tL2FiZWxuYXRpb25cbiAqL1xuXG4vLyBDb25lR2VvbWV0cnlcblxuZnVuY3Rpb24gQ29uZUdlb21ldHJ5KCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEN5bGluZGVyR2VvbWV0cnkuY2FsbCggdGhpcywgMCwgcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApO1xuXG5cdHRoaXMudHlwZSA9ICdDb25lR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cbn1cblxuQ29uZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5Db25lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uZUdlb21ldHJ5O1xuXG4vLyBDb25lQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ29uZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEN5bGluZGVyQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgMCwgcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApO1xuXG5cdHRoaXMudHlwZSA9ICdDb25lQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cbn1cblxuQ29uZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5Db25lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uZUJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIEBhdXRob3IgaHVnaGVzXG4gKi9cblxuLy8gQ2lyY2xlR2VvbWV0cnlcblxuZnVuY3Rpb24gQ2lyY2xlR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ2lyY2xlR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IENpcmNsZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkNpcmNsZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2lyY2xlR2VvbWV0cnk7XG5cbi8vIENpcmNsZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIENpcmNsZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0NpcmNsZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XG5cdHNlZ21lbnRzID0gc2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IE1hdGgubWF4KCAzLCBzZWdtZW50cyApIDogODtcblxuXHR0aGV0YVN0YXJ0ID0gdGhldGFTdGFydCAhPT0gdW5kZWZpbmVkID8gdGhldGFTdGFydCA6IDA7XG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpLCBzO1xuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcblxuXHQvLyBjZW50ZXIgcG9pbnRcblxuXHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXHR1dnMucHVzaCggMC41LCAwLjUgKTtcblxuXHRmb3IgKCBzID0gMCwgaSA9IDM7IHMgPD0gc2VnbWVudHM7IHMgKyssIGkgKz0gMyApIHtcblxuXHRcdHZhciBzZWdtZW50ID0gdGhldGFTdGFydCArIHMgLyBzZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0Ly8gdmVydGV4XG5cblx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7XG5cdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0Ly8gbm9ybWFsXG5cblx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdC8vIHV2c1xuXG5cdFx0dXYueCA9ICggdmVydGljZXNbIGkgXSAvIHJhZGl1cyArIDEgKSAvIDI7XG5cdFx0dXYueSA9ICggdmVydGljZXNbIGkgKyAxIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHR9XG5cblx0Ly8gaW5kaWNlc1xuXG5cdGZvciAoIGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0aW5kaWNlcy5wdXNoKCBpLCBpICsgMSwgMCApO1xuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuQ2lyY2xlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVCdWZmZXJHZW9tZXRyeTtcblxuXG5cbnZhciBHZW9tZXRyaWVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRXaXJlZnJhbWVHZW9tZXRyeTogV2lyZWZyYW1lR2VvbWV0cnksXG5cdFBhcmFtZXRyaWNHZW9tZXRyeTogUGFyYW1ldHJpY0dlb21ldHJ5LFxuXHRQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk6IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSxcblx0VGV0cmFoZWRyb25HZW9tZXRyeTogVGV0cmFoZWRyb25HZW9tZXRyeSxcblx0VGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTogVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSxcblx0T2N0YWhlZHJvbkdlb21ldHJ5OiBPY3RhaGVkcm9uR2VvbWV0cnksXG5cdE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTogT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRJY29zYWhlZHJvbkdlb21ldHJ5OiBJY29zYWhlZHJvbkdlb21ldHJ5LFxuXHRJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHREb2RlY2FoZWRyb25HZW9tZXRyeTogRG9kZWNhaGVkcm9uR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSxcblx0UG9seWhlZHJvbkdlb21ldHJ5OiBQb2x5aGVkcm9uR2VvbWV0cnksXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTogUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRUdWJlR2VvbWV0cnk6IFR1YmVHZW9tZXRyeSxcblx0VHViZUJ1ZmZlckdlb21ldHJ5OiBUdWJlQnVmZmVyR2VvbWV0cnksXG5cdFRvcnVzS25vdEdlb21ldHJ5OiBUb3J1c0tub3RHZW9tZXRyeSxcblx0VG9ydXNLbm90QnVmZmVyR2VvbWV0cnk6IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LFxuXHRUb3J1c0dlb21ldHJ5OiBUb3J1c0dlb21ldHJ5LFxuXHRUb3J1c0J1ZmZlckdlb21ldHJ5OiBUb3J1c0J1ZmZlckdlb21ldHJ5LFxuXHRUZXh0R2VvbWV0cnk6IFRleHRHZW9tZXRyeSxcblx0VGV4dEJ1ZmZlckdlb21ldHJ5OiBUZXh0QnVmZmVyR2VvbWV0cnksXG5cdFNwaGVyZUdlb21ldHJ5OiBTcGhlcmVHZW9tZXRyeSxcblx0U3BoZXJlQnVmZmVyR2VvbWV0cnk6IFNwaGVyZUJ1ZmZlckdlb21ldHJ5LFxuXHRSaW5nR2VvbWV0cnk6IFJpbmdHZW9tZXRyeSxcblx0UmluZ0J1ZmZlckdlb21ldHJ5OiBSaW5nQnVmZmVyR2VvbWV0cnksXG5cdFBsYW5lR2VvbWV0cnk6IFBsYW5lR2VvbWV0cnksXG5cdFBsYW5lQnVmZmVyR2VvbWV0cnk6IFBsYW5lQnVmZmVyR2VvbWV0cnksXG5cdExhdGhlR2VvbWV0cnk6IExhdGhlR2VvbWV0cnksXG5cdExhdGhlQnVmZmVyR2VvbWV0cnk6IExhdGhlQnVmZmVyR2VvbWV0cnksXG5cdFNoYXBlR2VvbWV0cnk6IFNoYXBlR2VvbWV0cnksXG5cdFNoYXBlQnVmZmVyR2VvbWV0cnk6IFNoYXBlQnVmZmVyR2VvbWV0cnksXG5cdEV4dHJ1ZGVHZW9tZXRyeTogRXh0cnVkZUdlb21ldHJ5LFxuXHRFeHRydWRlQnVmZmVyR2VvbWV0cnk6IEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSxcblx0RWRnZXNHZW9tZXRyeTogRWRnZXNHZW9tZXRyeSxcblx0Q29uZUdlb21ldHJ5OiBDb25lR2VvbWV0cnksXG5cdENvbmVCdWZmZXJHZW9tZXRyeTogQ29uZUJ1ZmZlckdlb21ldHJ5LFxuXHRDeWxpbmRlckdlb21ldHJ5OiBDeWxpbmRlckdlb21ldHJ5LFxuXHRDeWxpbmRlckJ1ZmZlckdlb21ldHJ5OiBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LFxuXHRDaXJjbGVHZW9tZXRyeTogQ2lyY2xlR2VvbWV0cnksXG5cdENpcmNsZUJ1ZmZlckdlb21ldHJ5OiBDaXJjbGVCdWZmZXJHZW9tZXRyeSxcblx0Qm94R2VvbWV0cnk6IEJveEdlb21ldHJ5LFxuXHRCb3hCdWZmZXJHZW9tZXRyeTogQm94QnVmZmVyR2VvbWV0cnlcbn0pO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPFRIUkVFLkNvbG9yPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIFNoYWRvd01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhZG93TWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFkb3dNYXRlcmlhbDtcblxuU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlLmlzU2hhZG93TWF0ZXJpYWwgPSB0cnVlO1xuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBSYXdTaGFkZXJNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRTaGFkZXJNYXRlcmlhbC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJzICk7XG5cblx0dGhpcy50eXBlID0gJ1Jhd1NoYWRlck1hdGVyaWFsJztcblxufVxuXG5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgKTtcblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJhd1NoYWRlck1hdGVyaWFsO1xuXG5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuaXNSYXdTaGFkZXJNYXRlcmlhbCA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgcm91Z2huZXNzOiA8ZmxvYXQ+LFxuICogIG1ldGFsbmVzczogPGZsb2F0PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgcm91Z2huZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBtZXRhbG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgZW52TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFN0YW5kYXJkTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2Vcblx0dGhpcy5yb3VnaG5lc3MgPSAwLjU7XG5cdHRoaXMubWV0YWxuZXNzID0gMC41O1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5yb3VnaG5lc3NNYXAgPSBudWxsO1xuXG5cdHRoaXMubWV0YWxuZXNzTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuZW52TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaFN0YW5kYXJkTWF0ZXJpYWw7XG5cbk1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID0gdHJ1ZTtcblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmRlZmluZXMgPSB7ICdTVEFOREFSRCc6ICcnIH07XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5yb3VnaG5lc3MgPSBzb3VyY2Uucm91Z2huZXNzO1xuXHR0aGlzLm1ldGFsbmVzcyA9IHNvdXJjZS5tZXRhbG5lc3M7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gc291cmNlLmVtaXNzaXZlTWFwO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHRoaXMucm91Z2huZXNzTWFwID0gc291cmNlLnJvdWdobmVzc01hcDtcblxuXHR0aGlzLm1ldGFsbmVzc01hcCA9IHNvdXJjZS5tZXRhbG5lc3NNYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdHRoaXMuZW52TWFwSW50ZW5zaXR5ID0gc291cmNlLmVudk1hcEludGVuc2l0eTtcblxuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFBoeXNpY2FsTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1BIWVNJQ0FMJzogJycgfTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaFBoeXNpY2FsTWF0ZXJpYWwnO1xuXG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gMC41OyAvLyBtYXBzIHRvIEYwID0gMC4wNFxuXG5cdHRoaXMuY2xlYXJDb2F0ID0gMC4wO1xuXHR0aGlzLmNsZWFyQ29hdFJvdWdobmVzcyA9IDAuMDtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hQaHlzaWNhbE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaFBoeXNpY2FsTWF0ZXJpYWw7XG5cbk1lc2hQaHlzaWNhbE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hQaHlzaWNhbE1hdGVyaWFsID0gdHJ1ZTtcblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmRlZmluZXMgPSB7ICdQSFlTSUNBTCc6ICcnIH07XG5cblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXG5cdHRoaXMuY2xlYXJDb2F0ID0gc291cmNlLmNsZWFyQ29hdDtcblx0dGhpcy5jbGVhckNvYXRSb3VnaG5lc3MgPSBzb3VyY2UuY2xlYXJDb2F0Um91Z2huZXNzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIHNwZWN1bGFyOiA8aGV4PixcbiAqICBzaGluaW5lc3M6IDxmbG9hdD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBlbWlzc2l2ZTogPGhleD4sXG4gKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD5cbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBidW1wU2NhbGU6IDxmbG9hdD4sXG4gKlxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsXG4gKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIHNwZWN1bGFyTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZW52TWFwOiBuZXcgVEhSRUUuQ3ViZVRleHR1cmUoIFtwb3N4LCBuZWd4LCBwb3N5LCBuZWd5LCBwb3N6LCBuZWd6XSApLFxuICogIGNvbWJpbmU6IFRIUkVFLk11bHRpcGx5LFxuICogIHJlZmxlY3Rpdml0eTogPGZsb2F0PixcbiAqICByZWZyYWN0aW9uUmF0aW86IDxmbG9hdD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hQaG9uZ01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaFBob25nTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2Vcblx0dGhpcy5zcGVjdWxhciA9IG5ldyBDb2xvciggMHgxMTExMTEgKTtcblx0dGhpcy5zaGluaW5lc3MgPSAzMDtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5saWdodE1hcCA9IG51bGw7XG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5hb01hcCA9IG51bGw7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcblx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoUGhvbmdNYXRlcmlhbDtcblxuTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBob25nTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdHRoaXMuc3BlY3VsYXIuY29weSggc291cmNlLnNwZWN1bGFyICk7XG5cdHRoaXMuc2hpbmluZXNzID0gc291cmNlLnNoaW5pbmVzcztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHRha2FoaXJveCAvIGh0dHA6Ly9naXRodWIuY29tL3Rha2FoaXJveFxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZ3JhZGllbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+IClcbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoVG9vbk1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1lc2hQaG9uZ01hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmRlZmluZXMgPSB7ICdUT09OJzogJycgfTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaFRvb25NYXRlcmlhbCc7XG5cblx0dGhpcy5ncmFkaWVudE1hcCA9IG51bGw7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaFRvb25NYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoVG9vbk1hdGVyaWFsO1xuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hUb29uTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5ncmFkaWVudE1hcCA9IHNvdXJjZS5ncmFkaWVudE1hcDtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+XG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTm9ybWFsTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoTm9ybWFsTWF0ZXJpYWwnO1xuXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0dGhpcy5mb2cgPSBmYWxzZTtcblx0dGhpcy5saWdodHMgPSBmYWxzZTtcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaE5vcm1hbE1hdGVyaWFsO1xuXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaE5vcm1hbE1hdGVyaWFsID0gdHJ1ZTtcblxuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBlbWlzc2l2ZTogPGhleD4sXG4gKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD5cbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaExhbWJlcnRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hMYW1iZXJ0TWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5saWdodE1hcCA9IG51bGw7XG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5hb01hcCA9IG51bGw7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTGFtYmVydE1hdGVyaWFsO1xuXG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXRjYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBidW1wU2NhbGU6IDxmbG9hdD4sXG4gKlxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsXG4gKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaE1hdGNhcE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoTWF0Y2FwTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHR0aGlzLm1hdGNhcCA9IG51bGw7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5saWdodHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdC8vIGEgbWF0Y2FwIGlzIHJlcXVpcmVkXG5cblx0aWYgKCB0aGlzLm1hdGNhcCA9PT0gbnVsbCApIHtcblxuXHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xuXHRcdGNhbnZhcy53aWR0aCA9IDE7XG5cdFx0Y2FudmFzLmhlaWdodCA9IDE7XG5cblx0XHR2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cblx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJztcblx0XHRjb250ZXh0LmZpbGxSZWN0KCAwLCAwLCAxLCAxICk7XG5cblx0XHR0aGlzLm1hdGNhcCA9IG5ldyBUSFJFRS5DYW52YXNUZXh0dXJlKCBjYW52YXMgKTtcblxuXHR9XG5cbn1cblxuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hNYXRjYXBNYXRlcmlhbDtcblxuTWVzaE1hdGNhcE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hNYXRjYXBNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hdGNhcCA9IHNvdXJjZS5tYXRjYXA7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBsaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNjYWxlOiA8ZmxvYXQ+LFxuICogIGRhc2hTaXplOiA8ZmxvYXQ+LFxuICogIGdhcFNpemU6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBMaW5lRGFzaGVkTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TGluZUJhc2ljTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lRGFzaGVkTWF0ZXJpYWwnO1xuXG5cdHRoaXMuc2NhbGUgPSAxO1xuXHR0aGlzLmRhc2hTaXplID0gMztcblx0dGhpcy5nYXBTaXplID0gMTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgKTtcbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaW5lRGFzaGVkTWF0ZXJpYWw7XG5cbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgPSB0cnVlO1xuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnNjYWxlID0gc291cmNlLnNjYWxlO1xuXHR0aGlzLmRhc2hTaXplID0gc291cmNlLmRhc2hTaXplO1xuXHR0aGlzLmdhcFNpemUgPSBzb3VyY2UuZ2FwU2l6ZTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5cbnZhciBNYXRlcmlhbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFNoYWRvd01hdGVyaWFsOiBTaGFkb3dNYXRlcmlhbCxcblx0U3ByaXRlTWF0ZXJpYWw6IFNwcml0ZU1hdGVyaWFsLFxuXHRSYXdTaGFkZXJNYXRlcmlhbDogUmF3U2hhZGVyTWF0ZXJpYWwsXG5cdFNoYWRlck1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbCxcblx0UG9pbnRzTWF0ZXJpYWw6IFBvaW50c01hdGVyaWFsLFxuXHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogTWVzaFBoeXNpY2FsTWF0ZXJpYWwsXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiBNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWVzaFBob25nTWF0ZXJpYWw6IE1lc2hQaG9uZ01hdGVyaWFsLFxuXHRNZXNoVG9vbk1hdGVyaWFsOiBNZXNoVG9vbk1hdGVyaWFsLFxuXHRNZXNoTm9ybWFsTWF0ZXJpYWw6IE1lc2hOb3JtYWxNYXRlcmlhbCxcblx0TWVzaExhbWJlcnRNYXRlcmlhbDogTWVzaExhbWJlcnRNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWw6IE1lc2hEZXB0aE1hdGVyaWFsLFxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogTWVzaERpc3RhbmNlTWF0ZXJpYWwsXG5cdE1lc2hCYXNpY01hdGVyaWFsOiBNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaE1hdGNhcE1hdGVyaWFsOiBNZXNoTWF0Y2FwTWF0ZXJpYWwsXG5cdExpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLFxuXHRMaW5lQmFzaWNNYXRlcmlhbDogTGluZUJhc2ljTWF0ZXJpYWwsXG5cdE1hdGVyaWFsOiBNYXRlcmlhbFxufSk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbnZhciBBbmltYXRpb25VdGlscyA9IHtcblxuXHQvLyBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IGFsc28gd29ya3Mgb24gdHlwZWQgYXJyYXlzXG5cdGFycmF5U2xpY2U6IGZ1bmN0aW9uICggYXJyYXksIGZyb20sIHRvICkge1xuXG5cdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdC8vIGluIGlvczkgYXJyYXkuc3ViYXJyYXkoZnJvbSwgdW5kZWZpbmVkKSB3aWxsIHJldHVybiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gYnV0IGFycmF5LnN1YmFycmF5KGZyb20pIG9yIGFycmF5LnN1YmFycmF5KGZyb20sIGxlbikgaXMgY29ycmVjdFxuXHRcdFx0cmV0dXJuIG5ldyBhcnJheS5jb25zdHJ1Y3RvciggYXJyYXkuc3ViYXJyYXkoIGZyb20sIHRvICE9PSB1bmRlZmluZWQgPyB0byA6IGFycmF5Lmxlbmd0aCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXkuc2xpY2UoIGZyb20sIHRvICk7XG5cblx0fSxcblxuXHQvLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGVcblx0Y29udmVydEFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCB0eXBlLCBmb3JjZUNsb25lICkge1xuXG5cdFx0aWYgKCAhIGFycmF5IHx8IC8vIGxldCAndW5kZWZpbmVkJyBhbmQgJ251bGwnIHBhc3Ncblx0XHRcdFx0ISBmb3JjZUNsb25lICYmIGFycmF5LmNvbnN0cnVjdG9yID09PSB0eXBlICkgcmV0dXJuIGFycmF5O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgdHlwZSggYXJyYXkgKTsgLy8gY3JlYXRlIHR5cGVkIGFycmF5XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFycmF5ICk7IC8vIGNyZWF0ZSBBcnJheVxuXG5cdH0sXG5cblx0aXNUeXBlZEFycmF5OiBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoIG9iamVjdCApICYmXG5cdFx0XHRcdCEgKCBvYmplY3QgaW5zdGFuY2VvZiBEYXRhVmlldyApO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJucyBhbiBhcnJheSBieSB3aGljaCB0aW1lcyBhbmQgdmFsdWVzIGNhbiBiZSBzb3J0ZWRcblx0Z2V0S2V5ZnJhbWVPcmRlcjogZnVuY3Rpb24gKCB0aW1lcyApIHtcblxuXHRcdGZ1bmN0aW9uIGNvbXBhcmVUaW1lKCBpLCBqICkge1xuXG5cdFx0XHRyZXR1cm4gdGltZXNbIGkgXSAtIHRpbWVzWyBqIF07XG5cblx0XHR9XG5cblx0XHR2YXIgbiA9IHRpbWVzLmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KCBuICk7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkgcmVzdWx0WyBpIF0gPSBpO1xuXG5cdFx0cmVzdWx0LnNvcnQoIGNvbXBhcmVUaW1lICk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH0sXG5cblx0Ly8gdXNlcyB0aGUgYXJyYXkgcHJldmlvdXNseSByZXR1cm5lZCBieSAnZ2V0S2V5ZnJhbWVPcmRlcicgdG8gc29ydCBkYXRhXG5cdHNvcnRlZEFycmF5OiBmdW5jdGlvbiAoIHZhbHVlcywgc3RyaWRlLCBvcmRlciApIHtcblxuXHRcdHZhciBuVmFsdWVzID0gdmFsdWVzLmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IHZhbHVlcy5jb25zdHJ1Y3RvciggblZhbHVlcyApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBkc3RPZmZzZXQgPSAwOyBkc3RPZmZzZXQgIT09IG5WYWx1ZXM7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBzcmNPZmZzZXQgPSBvcmRlclsgaSBdICogc3RyaWRlO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogIT09IHN0cmlkZTsgKysgaiApIHtcblxuXHRcdFx0XHRyZXN1bHRbIGRzdE9mZnNldCArKyBdID0gdmFsdWVzWyBzcmNPZmZzZXQgKyBqIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyBmdW5jdGlvbiBmb3IgcGFyc2luZyBBT1Mga2V5ZnJhbWUgZm9ybWF0c1xuXHRmbGF0dGVuSlNPTjogZnVuY3Rpb24gKCBqc29uS2V5cywgdGltZXMsIHZhbHVlcywgdmFsdWVQcm9wZXJ0eU5hbWUgKSB7XG5cblx0XHR2YXIgaSA9IDEsIGtleSA9IGpzb25LZXlzWyAwIF07XG5cblx0XHR3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICYmIGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxuXG5cdFx0dmFyIHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXG5cdFx0XHRkbyB7XG5cblx0XHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaC5hcHBseSggdmFsdWVzLCB2YWx1ZSApOyAvLyBwdXNoIGFsbCBlbGVtZW50c1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gLi4uYXNzdW1lIFRIUkVFLk1hdGgtaXNoXG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlLnRvQXJyYXkoIHZhbHVlcywgdmFsdWVzLmxlbmd0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG90aGVyd2lzZSBwdXNoIGFzLWlzXG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBpbnRlcnBvbGFudHMgb3ZlciBwYXJhbWV0cmljIHNhbXBsZXMuXG4gKlxuICogVGhlIHBhcmFtZXRlciBkb21haW4gaXMgb25lIGRpbWVuc2lvbmFsLCB0eXBpY2FsbHkgdGhlIHRpbWUgb3IgYSBwYXRoXG4gKiBhbG9uZyBhIGN1cnZlIGRlZmluZWQgYnkgdGhlIGRhdGEuXG4gKlxuICogVGhlIHNhbXBsZSB2YWx1ZXMgY2FuIGhhdmUgYW55IGRpbWVuc2lvbmFsaXR5IGFuZCBkZXJpdmVkIGNsYXNzZXMgbWF5XG4gKiBhcHBseSBzcGVjaWFsIGludGVycHJldGF0aW9ucyB0byB0aGUgZGF0YS5cbiAqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHRoZSBpbnRlcnZhbCBzZWVrIGluIGEgVGVtcGxhdGUgTWV0aG9kLCBkZWZlcnJpbmdcbiAqIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiB0byBkZXJpdmVkIGNsYXNzZXMuXG4gKlxuICogVGltZSBjb21wbGV4aXR5IGlzIE8oMSkgZm9yIGxpbmVhciBhY2Nlc3MgY3Jvc3NpbmcgYXQgbW9zdCB0d28gcG9pbnRzXG4gKiBhbmQgTyhsb2cgTikgZm9yIHJhbmRvbSBhY2Nlc3MsIHdoZXJlIE4gaXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbnMuXG4gKlxuICogUmVmZXJlbmNlczpcbiAqXG4gKiBcdFx0aHR0cDovL3d3dy5vb2Rlc2lnbi5jb20vdGVtcGxhdGUtbWV0aG9kLXBhdHRlcm4uaHRtbFxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHR0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyA9IHBhcmFtZXRlclBvc2l0aW9ucztcblx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXG5cdHRoaXMucmVzdWx0QnVmZmVyID0gcmVzdWx0QnVmZmVyICE9PSB1bmRlZmluZWQgP1xuXHRcdHJlc3VsdEJ1ZmZlciA6IG5ldyBzYW1wbGVWYWx1ZXMuY29uc3RydWN0b3IoIHNhbXBsZVNpemUgKTtcblx0dGhpcy5zYW1wbGVWYWx1ZXMgPSBzYW1wbGVWYWx1ZXM7XG5cdHRoaXMudmFsdWVTaXplID0gc2FtcGxlU2l6ZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBJbnRlcnBvbGFudC5wcm90b3R5cGUsIHtcblxuXHRldmFsdWF0ZTogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0dmFyIHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHRpMSA9IHRoaXMuX2NhY2hlZEluZGV4LFxuXG5cdFx0XHR0MSA9IHBwWyBpMSBdLFxuXHRcdFx0dDAgPSBwcFsgaTEgLSAxIF07XG5cblx0XHR2YWxpZGF0ZV9pbnRlcnZhbDoge1xuXG5cdFx0XHRzZWVrOiB7XG5cblx0XHRcdFx0dmFyIHJpZ2h0O1xuXG5cdFx0XHRcdGxpbmVhcl9zY2FuOiB7XG5cblx0XHRcdFx0XHQvLy0gU2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NvbXBhcmlzb24tdG8tdW5kZWZpbmVkLzNcblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXG5cdFx0XHRcdFx0Ly8tIFx0XHRcdFx0aWYgKCB0ID49IHQxIHx8IHQxID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0Zm9yd2FyZF9zY2FuOiBpZiAoICEgKCB0IDwgdDEgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGdpdmVVcEF0ID0gaTEgKyAyOyA7ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggdCA8IHQwICkgYnJlYWsgZm9yd2FyZF9zY2FuO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYWZ0ZXIgZW5kXG5cblx0XHRcdFx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0LCB0MCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MCA9IHQxO1xuXHRcdFx0XHRcdFx0XHR0MSA9IHBwWyArKyBpMSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdCA8IHQxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWxcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHRyaWdodCA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8tIHNsb3dlciBjb2RlOlxuXHRcdFx0XHRcdC8vLVx0XHRcdFx0XHRpZiAoIHQgPCB0MCB8fCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGlmICggISAoIHQgPj0gdDAgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbG9vcGluZz9cblxuXHRcdFx0XHRcdFx0dmFyIHQxZ2xvYmFsID0gcHBbIDEgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0IDwgdDFnbG9iYWwgKSB7XG5cblx0XHRcdFx0XHRcdFx0aTEgPSAyOyAvLyArIDEsIHVzaW5nIHRoZSBzY2FuIGZvciB0aGUgZGV0YWlsc1xuXHRcdFx0XHRcdFx0XHR0MCA9IHQxZ2xvYmFsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIGxpbmVhciByZXZlcnNlIHNjYW5cblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGdpdmVVcEF0ID0gaTEgLSAyOyA7ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdDAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIGJlZm9yZSBzdGFydFxuXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmJlZm9yZVN0YXJ0XyggMCwgdCwgdDEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpMSA9PT0gZ2l2ZVVwQXQgKSBicmVhazsgLy8gdGhpcyBsb29wXG5cblx0XHRcdFx0XHRcdFx0dDEgPSB0MDtcblx0XHRcdFx0XHRcdFx0dDAgPSBwcFsgLS0gaTEgLSAxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0ID49IHQwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWxcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gaTE7XG5cdFx0XHRcdFx0XHRpMSA9IDA7XG5cdFx0XHRcdFx0XHRicmVhayBsaW5lYXJfc2NhbjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRoZSBpbnRlcnZhbCBpcyB2YWxpZFxuXG5cdFx0XHRcdFx0YnJlYWsgdmFsaWRhdGVfaW50ZXJ2YWw7XG5cblx0XHRcdFx0fSAvLyBsaW5lYXIgc2NhblxuXG5cdFx0XHRcdC8vIGJpbmFyeSBzZWFyY2hcblxuXHRcdFx0XHR3aGlsZSAoIGkxIDwgcmlnaHQgKSB7XG5cblx0XHRcdFx0XHR2YXIgbWlkID0gKCBpMSArIHJpZ2h0ICkgPj4+IDE7XG5cblx0XHRcdFx0XHRpZiAoIHQgPCBwcFsgbWlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdHJpZ2h0ID0gbWlkO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aTEgPSBtaWQgKyAxO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0MSA9IHBwWyBpMSBdO1xuXHRcdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdFx0XHQvLyBjaGVjayBib3VuZGFyeSBjYXNlcywgYWdhaW5cblxuXHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHQxID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0MCwgdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSAvLyBzZWVrXG5cblx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cblx0XHRcdHRoaXMuaW50ZXJ2YWxDaGFuZ2VkXyggaTEsIHQwLCB0MSApO1xuXG5cdFx0fSAvLyB2YWxpZGF0ZV9pbnRlcnZhbFxuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICk7XG5cblx0fSxcblxuXHRzZXR0aW5nczogbnVsbCwgLy8gb3B0aW9uYWwsIHN1YmNsYXNzLXNwZWNpZmljIHNldHRpbmdzIHN0cnVjdHVyZVxuXHQvLyBOb3RlOiBUaGUgaW5kaXJlY3Rpb24gYWxsb3dzIGNlbnRyYWwgY29udHJvbCBvZiBtYW55IGludGVycG9sYW50cy5cblxuXHQvLyAtLS0gUHJvdGVjdGVkIGludGVyZmFjZVxuXG5cdERlZmF1bHRTZXR0aW5nc186IHt9LFxuXG5cdGdldFNldHRpbmdzXzogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MgfHwgdGhpcy5EZWZhdWx0U2V0dGluZ3NfO1xuXG5cdH0sXG5cblx0Y29weVNhbXBsZVZhbHVlXzogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdC8vIGNvcGllcyBhIHNhbXBsZSB2YWx1ZSB0byB0aGUgcmVzdWx0IGJ1ZmZlclxuXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGluZGV4ICogc3RyaWRlO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID0gdmFsdWVzWyBvZmZzZXQgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH0sXG5cblx0Ly8gVGVtcGxhdGUgbWV0aG9kcyBmb3IgZGVyaXZlZCBjbGFzc2VzOlxuXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKCAvKiBpMSwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnY2FsbCB0byBhYnN0cmFjdCBtZXRob2QnICk7XG5cdFx0Ly8gaW1wbGVtZW50YXRpb25zIHNoYWxsIHJldHVybiB0aGlzLnJlc3VsdEJ1ZmZlclxuXG5cdH0sXG5cblx0aW50ZXJ2YWxDaGFuZ2VkXzogZnVuY3Rpb24gKCAvKiBpMSwgdDAsIHQxICovICkge1xuXG5cdFx0Ly8gZW1wdHlcblxuXHR9XG5cbn0gKTtcblxuLy8hXFwgREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlICFcbk9iamVjdC5hc3NpZ24oIEludGVycG9sYW50LnByb3RvdHlwZSwge1xuXG5cdC8vKCAwLCB0LCB0MCApLCByZXR1cm5zIHRoaXMucmVzdWx0QnVmZmVyXG5cdGJlZm9yZVN0YXJ0XzogSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sXG5cblx0Ly8oIE4tMSwgdE4tMSwgdCApLCByZXR1cm5zIHRoaXMucmVzdWx0QnVmZmVyXG5cdGFmdGVyRW5kXzogSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sXG5cbn0gKTtcblxuLyoqXG4gKiBGYXN0IGFuZCBzaW1wbGUgY3ViaWMgc3BsaW5lIGludGVycG9sYW50LlxuICpcbiAqIEl0IHdhcyBkZXJpdmVkIGZyb20gYSBIZXJtaXRpYW4gY29uc3RydWN0aW9uIHNldHRpbmcgdGhlIGZpcnN0IGRlcml2YXRpdmVcbiAqIGF0IGVhY2ggc2FtcGxlIHBvc2l0aW9uIHRvIHRoZSBsaW5lYXIgc2xvcGUgYmV0d2VlbiBuZWlnaGJvcmluZyBwb3NpdGlvbnNcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBDdWJpY0ludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR0aGlzLl93ZWlnaHRQcmV2ID0gLSAwO1xuXHR0aGlzLl9vZmZzZXRQcmV2ID0gLSAwO1xuXHR0aGlzLl93ZWlnaHROZXh0ID0gLSAwO1xuXHR0aGlzLl9vZmZzZXROZXh0ID0gLSAwO1xuXG59XG5cbkN1YmljSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ3ViaWNJbnRlcnBvbGFudCxcblxuXHREZWZhdWx0U2V0dGluZ3NfOiB7XG5cblx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHR9LFxuXG5cdGludGVydmFsQ2hhbmdlZF86IGZ1bmN0aW9uICggaTEsIHQwLCB0MSApIHtcblxuXHRcdHZhciBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0aVByZXYgPSBpMSAtIDIsXG5cdFx0XHRpTmV4dCA9IGkxICsgMSxcblxuXHRcdFx0dFByZXYgPSBwcFsgaVByZXYgXSxcblx0XHRcdHROZXh0ID0gcHBbIGlOZXh0IF07XG5cblx0XHRpZiAoIHRQcmV2ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nU3RhcnQgKSB7XG5cblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyBmJyh0MCkgPSAwXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IDIgKiB0MCAtIHQxO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBXcmFwQXJvdW5kRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBvdGhlciBlbmQgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0aVByZXYgPSBwcC5sZW5ndGggLSAyO1xuXHRcdFx0XHRcdHRQcmV2ID0gdDAgKyBwcFsgaVByZXYgXSAtIHBwWyBpUHJldiArIDEgXTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6IC8vIFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdFx0XHRcdC8vIGYnJyh0MCkgPSAwIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlQcmV2ID0gaTE7XG5cdFx0XHRcdFx0dFByZXYgPSB0MTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0TmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ0VuZCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHROKSA9IDBcblx0XHRcdFx0XHRpTmV4dCA9IGkxO1xuXHRcdFx0XHRcdHROZXh0ID0gMiAqIHQxIC0gdDA7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpTmV4dCA9IDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MSArIHBwWyAxIF0gLSBwcFsgMCBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHROKSA9IDAsIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlOZXh0ID0gaTEgLSAxO1xuXHRcdFx0XHRcdHROZXh0ID0gdDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBoYWxmRHQgPSAoIHQxIC0gdDAgKSAqIDAuNSxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplO1xuXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IGhhbGZEdCAvICggdDAgLSB0UHJldiApO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSBoYWxmRHQgLyAoIHROZXh0IC0gdDEgKTtcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gaVByZXYgKiBzdHJpZGU7XG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IGlOZXh0ICogc3RyaWRlO1xuXG5cdH0sXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvMSA9IGkxICogc3RyaWRlLFx0XHRvMCA9IG8xIC0gc3RyaWRlLFxuXHRcdFx0b1AgPSB0aGlzLl9vZmZzZXRQcmV2LCBcdG9OID0gdGhpcy5fb2Zmc2V0TmV4dCxcblx0XHRcdHdQID0gdGhpcy5fd2VpZ2h0UHJldixcdHdOID0gdGhpcy5fd2VpZ2h0TmV4dCxcblxuXHRcdFx0cCA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHBwID0gcCAqIHAsXG5cdFx0XHRwcHAgPSBwcCAqIHA7XG5cblx0XHQvLyBldmFsdWF0ZSBwb2x5bm9taWFsc1xuXG5cdFx0dmFyIHNQID0gLSB3UCAqIHBwcCArIDIgKiB3UCAqIHBwIC0gd1AgKiBwO1xuXHRcdHZhciBzMCA9ICggMSArIHdQICkgKiBwcHAgKyAoIC0gMS41IC0gMiAqIHdQICkgKiBwcCArICggLSAwLjUgKyB3UCApICogcCArIDE7XG5cdFx0dmFyIHMxID0gKCAtIDEgLSB3TiApICogcHBwICsgKCAxLjUgKyB3TiApICogcHAgKyAwLjUgKiBwO1xuXHRcdHZhciBzTiA9IHdOICogcHBwIC0gd04gKiBwcDtcblxuXHRcdC8vIGNvbWJpbmUgZGF0YSBsaW5lYXJseVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHRzUCAqIHZhbHVlc1sgb1AgKyBpIF0gK1xuXHRcdFx0XHRcdHMwICogdmFsdWVzWyBvMCArIGkgXSArXG5cdFx0XHRcdFx0czEgKiB2YWx1ZXNbIG8xICsgaSBdICtcblx0XHRcdFx0XHRzTiAqIHZhbHVlc1sgb04gKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBMaW5lYXJJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuTGluZWFySW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZWFySW50ZXJwb2xhbnQsXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvZmZzZXQxID0gaTEgKiBzdHJpZGUsXG5cdFx0XHRvZmZzZXQwID0gb2Zmc2V0MSAtIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0MSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHdlaWdodDAgPSAxIC0gd2VpZ2h0MTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9XG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQwICsgaSBdICogd2VpZ2h0MCArXG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQxICsgaSBdICogd2VpZ2h0MTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEludGVycG9sYW50IHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBzYW1wbGUgdmFsdWUgYXQgdGhlIHBvc2l0aW9uIHByZWNlZWRpbmdcbiAqIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIERpc2NyZXRlSW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG59XG5cbkRpc2NyZXRlSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRGlzY3JldGVJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEgLyosIHQwLCB0LCB0MSAqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oIGkxIC0gMSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIHRpbWVkIHNlcXVlbmNlIG9mIGtleWZyYW1lcyBmb3IgYSBzcGVjaWZpYyBwcm9wZXJ0eS5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEtleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZCcgKTtcblx0aWYgKCB0aW1lcyA9PT0gdW5kZWZpbmVkIHx8IHRpbWVzLmxlbmd0aCA9PT0gMCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IG5vIGtleWZyYW1lcyBpbiB0cmFjayBuYW1lZCAnICsgbmFtZSApO1xuXG5cdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHZhbHVlcywgdGhpcy5WYWx1ZUJ1ZmZlclR5cGUgKTtcblxuXHR0aGlzLnNldEludGVycG9sYXRpb24oIGludGVycG9sYXRpb24gfHwgdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApO1xuXG59XG5cbi8vIFN0YXRpYyBtZXRob2RzXG5cbk9iamVjdC5hc3NpZ24oIEtleWZyYW1lVHJhY2ssIHtcblxuXHQvLyBTZXJpYWxpemF0aW9uIChpbiBzdGF0aWMgY29udGV4dCwgYmVjYXVzZSBvZiBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uXG5cdC8vIGFuZCBhdXRvbWF0aWMgaW52b2NhdGlvbiBvZiAudG9KU09OKTpcblxuXHR0b0pTT046IGZ1bmN0aW9uICggdHJhY2sgKSB7XG5cblx0XHR2YXIgdHJhY2tUeXBlID0gdHJhY2suY29uc3RydWN0b3I7XG5cblx0XHR2YXIganNvbjtcblxuXHRcdC8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHRvSlNPTiBtZXRob2Rcblx0XHRpZiAoIHRyYWNrVHlwZS50b0pTT04gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0anNvbiA9IHRyYWNrVHlwZS50b0pTT04oIHRyYWNrICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBieSBkZWZhdWx0LCB3ZSBhc3N1bWUgdGhlIGRhdGEgY2FuIGJlIHNlcmlhbGl6ZWQgYXMtaXNcblx0XHRcdGpzb24gPSB7XG5cblx0XHRcdFx0J25hbWUnOiB0cmFjay5uYW1lLFxuXHRcdFx0XHQndGltZXMnOiBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHRyYWNrLnRpbWVzLCBBcnJheSApLFxuXHRcdFx0XHQndmFsdWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay52YWx1ZXMsIEFycmF5IClcblxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGludGVycG9sYXRpb24gPSB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKCk7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhdGlvbiAhPT0gdHJhY2suRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0anNvbi5pbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0anNvbi50eXBlID0gdHJhY2suVmFsdWVUeXBlTmFtZTsgLy8gbWFuZGF0b3J5XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUsIHtcblxuXHRjb25zdHJ1Y3RvcjogS2V5ZnJhbWVUcmFjayxcblxuXHRUaW1lQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxuXG5cdFZhbHVlQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZUxpbmVhcixcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IERpc2NyZXRlSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IExpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IGZ1bmN0aW9uICggcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDdWJpY0ludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRzZXRJbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHR2YXIgZmFjdG9yeU1ldGhvZDtcblxuXHRcdHN3aXRjaCAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVEaXNjcmV0ZTpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZUxpbmVhcjpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVTbW9vdGg6XG5cblx0XHRcdFx0ZmFjdG9yeU1ldGhvZCA9IHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmYWN0b3J5TWV0aG9kID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBtZXNzYWdlID0gXCJ1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciBcIiArXG5cdFx0XHRcdHRoaXMuVmFsdWVUeXBlTmFtZSArIFwiIGtleWZyYW1lIHRyYWNrIG5hbWVkIFwiICsgdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcblx0XHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggbWVzc2FnZSApOyAvLyBmYXRhbCwgaW4gdGhpcyBjYXNlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLktleWZyYW1lVHJhY2s6JywgbWVzc2FnZSApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNyZWF0ZUludGVycG9sYW50ID0gZmFjdG9yeU1ldGhvZDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0SW50ZXJwb2xhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0c3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcblxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XG5cblx0XHR9XG5cblx0fSxcblxuXHRnZXRWYWx1ZVNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGggLyB0aGlzLnRpbWVzLmxlbmd0aDtcblxuXHR9LFxuXG5cdC8vIG1vdmUgYWxsIGtleWZyYW1lcyBlaXRoZXIgZm9yd2FyZHMgb3IgYmFja3dhcmRzIGluIHRpbWVcblx0c2hpZnQ6IGZ1bmN0aW9uICggdGltZU9mZnNldCApIHtcblxuXHRcdGlmICggdGltZU9mZnNldCAhPT0gMC4wICkge1xuXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dGltZXNbIGkgXSArPSB0aW1lT2Zmc2V0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIHNjYWxlIGFsbCBrZXlmcmFtZSB0aW1lcyBieSBhIGZhY3RvciAodXNlZnVsIGZvciBmcmFtZSA8LT4gc2Vjb25kcyBjb252ZXJzaW9ucylcblx0c2NhbGU6IGZ1bmN0aW9uICggdGltZVNjYWxlICkge1xuXG5cdFx0aWYgKCB0aW1lU2NhbGUgIT09IDEuMCApIHtcblxuXHRcdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcztcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gdGltZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHRpbWVzWyBpIF0gKj0gdGltZVNjYWxlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIHJlbW92ZXMga2V5ZnJhbWVzIGJlZm9yZSBhbmQgYWZ0ZXIgYW5pbWF0aW9uIHdpdGhvdXQgY2hhbmdpbmcgYW55IHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtzdGFydFRpbWUsIGVuZFRpbWVdLlxuXHQvLyBJTVBPUlRBTlQ6IFdlIGRvIG5vdCBzaGlmdCBhcm91bmQga2V5cyB0byB0aGUgc3RhcnQgb2YgdGhlIHRyYWNrIHRpbWUsIGJlY2F1c2UgZm9yIGludGVycG9sYXRlZCBrZXlzIHRoaXMgd2lsbCBjaGFuZ2UgdGhlaXIgdmFsdWVzXG5cdHRyaW06IGZ1bmN0aW9uICggc3RhcnRUaW1lLCBlbmRUaW1lICkge1xuXG5cdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoLFxuXHRcdFx0ZnJvbSA9IDAsXG5cdFx0XHR0byA9IG5LZXlzIC0gMTtcblxuXHRcdHdoaWxlICggZnJvbSAhPT0gbktleXMgJiYgdGltZXNbIGZyb20gXSA8IHN0YXJ0VGltZSApIHtcblxuXHRcdFx0KysgZnJvbTtcblxuXHRcdH1cblxuXHRcdHdoaWxlICggdG8gIT09IC0gMSAmJiB0aW1lc1sgdG8gXSA+IGVuZFRpbWUgKSB7XG5cblx0XHRcdC0tIHRvO1xuXG5cdFx0fVxuXG5cdFx0KysgdG87IC8vIGluY2x1c2l2ZSAtPiBleGNsdXNpdmUgYm91bmRcblxuXHRcdGlmICggZnJvbSAhPT0gMCB8fCB0byAhPT0gbktleXMgKSB7XG5cblx0XHRcdC8vIGVtcHR5IHRyYWNrcyBhcmUgZm9yYmlkZGVuLCBzbyBrZWVwIGF0IGxlYXN0IG9uZSBrZXlmcmFtZVxuXHRcdFx0aWYgKCBmcm9tID49IHRvICkgdG8gPSBNYXRoLm1heCggdG8sIDEgKSwgZnJvbSA9IHRvIC0gMTtcblxuXHRcdFx0dmFyIHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIGZyb20sIHRvICk7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCBmcm9tICogc3RyaWRlLCB0byAqIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBlbnN1cmUgd2UgZG8gbm90IGdldCBhIEdhcmJhZ2VJbkdhcmJhZ2VPdXQgc2l0dWF0aW9uLCBtYWtlIHN1cmUgdHJhY2tzIGFyZSBhdCBsZWFzdCBtaW5pbWFsbHkgdmlhYmxlXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFsaWQgPSB0cnVlO1xuXG5cdFx0dmFyIHZhbHVlU2l6ZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0aWYgKCB2YWx1ZVNpemUgLSBNYXRoLmZsb29yKCB2YWx1ZVNpemUgKSAhPT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IEludmFsaWQgdmFsdWUgc2l6ZSBpbiB0cmFjay4nLCB0aGlzICk7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdHZhbHVlcyA9IHRoaXMudmFsdWVzLFxuXG5cdFx0XHRuS2V5cyA9IHRpbWVzLmxlbmd0aDtcblxuXHRcdGlmICggbktleXMgPT09IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBUcmFjayBpcyBlbXB0eS4nLCB0aGlzICk7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHByZXZUaW1lID0gbnVsbDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbktleXM7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJyVGltZSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdGlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy4nLCB0aGlzLCBpLCBjdXJyVGltZSwgcHJldlRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcblxuXHRcdH1cblxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQW5pbWF0aW9uVXRpbHMuaXNUeXBlZEFycmF5KCB2YWx1ZXMgKSApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gdmFsdWVzWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIGlzTmFOKCB2YWx1ZSApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVmFsdWUgaXMgbm90IGEgdmFsaWQgbnVtYmVyLicsIHRoaXMsIGksIHZhbHVlICk7XG5cdFx0XHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWQ7XG5cblx0fSxcblxuXHQvLyByZW1vdmVzIGVxdWl2YWxlbnQgc2VxdWVudGlhbCBrZXlzIGFzIGNvbW1vbiBpbiBtb3JwaCB0YXJnZXQgc2VxdWVuY2VzXG5cdC8vICgwLDAsMCwwLDEsMSwxLDAsMCwwLDAsMCwwLDApIC0tPiAoMCwwLDEsMSwwLDApXG5cdG9wdGltaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpLFxuXG5cdFx0XHRzbW9vdGhJbnRlcnBvbGF0aW9uID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uKCkgPT09IEludGVycG9sYXRlU21vb3RoLFxuXG5cdFx0XHR3cml0ZUluZGV4ID0gMSxcblx0XHRcdGxhc3RJbmRleCA9IHRpbWVzLmxlbmd0aCAtIDE7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDE7IGkgPCBsYXN0SW5kZXg7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBrZWVwID0gZmFsc2U7XG5cblx0XHRcdHZhciB0aW1lID0gdGltZXNbIGkgXTtcblx0XHRcdHZhciB0aW1lTmV4dCA9IHRpbWVzWyBpICsgMSBdO1xuXG5cdFx0XHQvLyByZW1vdmUgYWRqYWNlbnQga2V5ZnJhbWVzIHNjaGVkdWxlZCBhdCB0aGUgc2FtZSB0aW1lXG5cblx0XHRcdGlmICggdGltZSAhPT0gdGltZU5leHQgJiYgKCBpICE9PSAxIHx8IHRpbWUgIT09IHRpbWVbIDAgXSApICkge1xuXG5cdFx0XHRcdGlmICggISBzbW9vdGhJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIHVubmVjZXNzYXJ5IGtleWZyYW1lcyBzYW1lIGFzIHRoZWlyIG5laWdoYm9yc1xuXG5cdFx0XHRcdFx0dmFyIG9mZnNldCA9IGkgKiBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXRQID0gb2Zmc2V0IC0gc3RyaWRlLFxuXHRcdFx0XHRcdFx0b2Zmc2V0TiA9IG9mZnNldCArIHN0cmlkZTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSB2YWx1ZXNbIG9mZnNldCArIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdmFsdWVzWyBvZmZzZXRQICsgaiBdIHx8XG5cdFx0XHRcdFx0XHRcdHZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldE4gKyBqIF0gKSB7XG5cblx0XHRcdFx0XHRcdFx0a2VlcCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGtlZXAgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbi1wbGFjZSBjb21wYWN0aW9uXG5cblx0XHRcdGlmICgga2VlcCApIHtcblxuXHRcdFx0XHRpZiAoIGkgIT09IHdyaXRlSW5kZXggKSB7XG5cblx0XHRcdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGkgXTtcblxuXHRcdFx0XHRcdHZhciByZWFkT2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdHdyaXRlT2Zmc2V0ID0gd3JpdGVJbmRleCAqIHN0cmlkZTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHR2YWx1ZXNbIHdyaXRlT2Zmc2V0ICsgaiBdID0gdmFsdWVzWyByZWFkT2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBmbHVzaCBsYXN0IGtleWZyYW1lIChjb21wYWN0aW9uIGxvb2tzIGFoZWFkKVxuXG5cdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xuXG5cdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRmb3IgKCB2YXIgcmVhZE9mZnNldCA9IGxhc3RJbmRleCAqIHN0cmlkZSwgd3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlLCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Kysgd3JpdGVJbmRleDtcblxuXHRcdH1cblxuXHRcdGlmICggd3JpdGVJbmRleCAhPT0gdGltZXMubGVuZ3RoICkge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIDAsIHdyaXRlSW5kZXggKTtcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdmFsdWVzLCAwLCB3cml0ZUluZGV4ICogc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiBCb29sZWFuIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEJvb2xlYW5LZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcyApO1xuXG59XG5cbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQm9vbGVhbktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ2Jvb2wnLFxuXHRWYWx1ZUJ1ZmZlclR5cGU6IEFycmF5LFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZURpc2NyZXRlLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogdW5kZWZpbmVkLFxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IHVuZGVmaW5lZFxuXG5cdC8vIE5vdGU6IEFjdHVhbGx5IHRoaXMgdHJhY2sgY291bGQgaGF2ZSBhIG9wdGltaXplZCAvIGNvbXByZXNzZWRcblx0Ly8gcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgdmFsdWUgYW5kIGEgY3VzdG9tIGludGVycG9sYW50IHRoYXRcblx0Ly8gY29tcHV0ZXMgXCJmaXJzdFZhbHVlIF4gaXNPZGQoIGluZGV4IClcIi5cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIGtleWZyYW1lIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBjb2xvci5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIENvbG9yS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5Db2xvcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDb2xvcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ2NvbG9yJ1xuXG5cdC8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblxuXHQvLyBEZWZhdWx0SW50ZXJwb2xhdGlvbiBpcyBpbmhlcml0ZWRcblxuXHQvLyBOb3RlOiBWZXJ5IGJhc2ljIGltcGxlbWVudGF0aW9uIGFuZCBub3RoaW5nIHNwZWNpYWwgeWV0LlxuXHQvLyBIb3dldmVyLCB0aGlzIGlzIHRoZSBwbGFjZSBmb3IgY29sb3Igc3BhY2UgcGFyYW1ldGVyaXphdGlvbi5cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIG51bWVyaWMga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBOdW1iZXJLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cbk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBOdW1iZXJLZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdudW1iZXInXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxuXG59ICk7XG5cbi8qKlxuICogU3BoZXJpY2FsIGxpbmVhciB1bml0IHF1YXRlcm5pb24gaW50ZXJwb2xhbnQuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVycG9sYW50LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9mZnNldCA9IGkxICogc3RyaWRlLFxuXG5cdFx0XHRhbHBoYSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKTtcblxuXHRcdGZvciAoIHZhciBlbmQgPSBvZmZzZXQgKyBzdHJpZGU7IG9mZnNldCAhPT0gZW5kOyBvZmZzZXQgKz0gNCApIHtcblxuXHRcdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIHJlc3VsdCwgMCwgdmFsdWVzLCBvZmZzZXQgLSBzdHJpZGUsIHZhbHVlcywgb2Zmc2V0LCBhbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiBxdWF0ZXJuaW9uIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUXVhdGVybmlvbktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAncXVhdGVybmlvbicsXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZUxpbmVhcixcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IGZ1bmN0aW9uICggcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIG5ldyBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogdW5kZWZpbmVkIC8vIG5vdCB5ZXQgaW1wbGVtZW50ZWRcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIHRoYXQgaW50ZXJwb2xhdGVzIFN0cmluZ3NcbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFN0cmluZ0tleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFN0cmluZ0tleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3N0cmluZycsXG5cdFZhbHVlQnVmZmVyVHlwZTogQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlRGlzY3JldGUsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiB1bmRlZmluZWQsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWRcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIHZlY3RvcmVkIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFZlY3RvcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuVmVjdG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFZlY3RvcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3ZlY3RvcidcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0Ly8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbn0gKTtcblxuLyoqXG4gKlxuICogUmV1c2FibGUgc2V0IG9mIFRyYWNrcyB0aGF0IHJlcHJlc2VudCBhbiBhbmltYXRpb24uXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkNsaXAoIG5hbWUsIGR1cmF0aW9uLCB0cmFja3MgKSB7XG5cblx0dGhpcy5uYW1lID0gbmFtZTtcblx0dGhpcy50cmFja3MgPSB0cmFja3M7XG5cdHRoaXMuZHVyYXRpb24gPSAoIGR1cmF0aW9uICE9PSB1bmRlZmluZWQgKSA/IGR1cmF0aW9uIDogLSAxO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdC8vIHRoaXMgbWVhbnMgaXQgc2hvdWxkIGZpZ3VyZSBvdXQgaXRzIGR1cmF0aW9uIGJ5IHNjYW5uaW5nIHRoZSB0cmFja3Ncblx0aWYgKCB0aGlzLmR1cmF0aW9uIDwgMCApIHtcblxuXHRcdHRoaXMucmVzZXREdXJhdGlvbigpO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lKCB0eXBlTmFtZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXG5cdFx0Y2FzZSAnc2NhbGFyJzpcblx0XHRjYXNlICdkb3VibGUnOlxuXHRcdGNhc2UgJ2Zsb2F0Jzpcblx0XHRjYXNlICdudW1iZXInOlxuXHRcdGNhc2UgJ2ludGVnZXInOlxuXG5cdFx0XHRyZXR1cm4gTnVtYmVyS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3ZlY3Rvcic6XG5cdFx0Y2FzZSAndmVjdG9yMic6XG5cdFx0Y2FzZSAndmVjdG9yMyc6XG5cdFx0Y2FzZSAndmVjdG9yNCc6XG5cblx0XHRcdHJldHVybiBWZWN0b3JLZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnY29sb3InOlxuXG5cdFx0XHRyZXR1cm4gQ29sb3JLZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAncXVhdGVybmlvbic6XG5cblx0XHRcdHJldHVybiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ2Jvb2wnOlxuXHRcdGNhc2UgJ2Jvb2xlYW4nOlxuXG5cdFx0XHRyZXR1cm4gQm9vbGVhbktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdzdHJpbmcnOlxuXG5cdFx0XHRyZXR1cm4gU3RyaW5nS2V5ZnJhbWVUcmFjaztcblxuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVW5zdXBwb3J0ZWQgdHlwZU5hbWU6ICcgKyB0eXBlTmFtZSApO1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlS2V5ZnJhbWVUcmFjaygganNvbiApIHtcblxuXHRpZiAoIGpzb24udHlwZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogdHJhY2sgdHlwZSB1bmRlZmluZWQsIGNhbiBub3QgcGFyc2UnICk7XG5cblx0fVxuXG5cdHZhciB0cmFja1R5cGUgPSBnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lKCBqc29uLnR5cGUgKTtcblxuXHRpZiAoIGpzb24udGltZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHZhciB0aW1lcyA9IFtdLCB2YWx1ZXMgPSBbXTtcblxuXHRcdEFuaW1hdGlvblV0aWxzLmZsYXR0ZW5KU09OKCBqc29uLmtleXMsIHRpbWVzLCB2YWx1ZXMsICd2YWx1ZScgKTtcblxuXHRcdGpzb24udGltZXMgPSB0aW1lcztcblx0XHRqc29uLnZhbHVlcyA9IHZhbHVlcztcblxuXHR9XG5cblx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgcGFyc2UgbWV0aG9kXG5cdGlmICggdHJhY2tUeXBlLnBhcnNlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyZXR1cm4gdHJhY2tUeXBlLnBhcnNlKCBqc29uICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSBhIGNvbnN0cnVjdG9yIGNvbXBhdGlibGUgd2l0aCB0aGUgYmFzZVxuXHRcdHJldHVybiBuZXcgdHJhY2tUeXBlKCBqc29uLm5hbWUsIGpzb24udGltZXMsIGpzb24udmFsdWVzLCBqc29uLmludGVycG9sYXRpb24gKTtcblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uQ2xpcCwge1xuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgdHJhY2tzID0gW10sXG5cdFx0XHRqc29uVHJhY2tzID0ganNvbi50cmFja3MsXG5cdFx0XHRmcmFtZVRpbWUgPSAxLjAgLyAoIGpzb24uZnBzIHx8IDEuMCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0ganNvblRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBwYXJzZUtleWZyYW1lVHJhY2soIGpzb25UcmFja3NbIGkgXSApLnNjYWxlKCBmcmFtZVRpbWUgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCBqc29uLm5hbWUsIGpzb24uZHVyYXRpb24sIHRyYWNrcyApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIGNsaXAgKSB7XG5cblx0XHR2YXIgdHJhY2tzID0gW10sXG5cdFx0XHRjbGlwVHJhY2tzID0gY2xpcC50cmFja3M7XG5cblx0XHR2YXIganNvbiA9IHtcblxuXHRcdFx0J25hbWUnOiBjbGlwLm5hbWUsXG5cdFx0XHQnZHVyYXRpb24nOiBjbGlwLmR1cmF0aW9uLFxuXHRcdFx0J3RyYWNrcyc6IHRyYWNrcyxcblx0XHRcdCd1dWlkJzogY2xpcC51dWlkXG5cblx0XHR9O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gY2xpcFRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnRvSlNPTiggY2xpcFRyYWNrc1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH0sXG5cblx0Q3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2U6IGZ1bmN0aW9uICggbmFtZSwgbW9ycGhUYXJnZXRTZXF1ZW5jZSwgZnBzLCBub0xvb3AgKSB7XG5cblx0XHR2YXIgbnVtTW9ycGhUYXJnZXRzID0gbW9ycGhUYXJnZXRTZXF1ZW5jZS5sZW5ndGg7XG5cdFx0dmFyIHRyYWNrcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbnVtTW9ycGhUYXJnZXRzOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdGltZXMgPSBbXTtcblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0dGltZXMucHVzaChcblx0XHRcdFx0KCBpICsgbnVtTW9ycGhUYXJnZXRzIC0gMSApICUgbnVtTW9ycGhUYXJnZXRzLFxuXHRcdFx0XHRpLFxuXHRcdFx0XHQoIGkgKyAxICkgJSBudW1Nb3JwaFRhcmdldHMgKTtcblxuXHRcdFx0dmFsdWVzLnB1c2goIDAsIDEsIDAgKTtcblxuXHRcdFx0dmFyIG9yZGVyID0gQW5pbWF0aW9uVXRpbHMuZ2V0S2V5ZnJhbWVPcmRlciggdGltZXMgKTtcblx0XHRcdHRpbWVzID0gQW5pbWF0aW9uVXRpbHMuc29ydGVkQXJyYXkoIHRpbWVzLCAxLCBvcmRlciApO1xuXHRcdFx0dmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuc29ydGVkQXJyYXkoIHZhbHVlcywgMSwgb3JkZXIgKTtcblxuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgYSBrZXkgYXQgdGhlIGZpcnN0IGZyYW1lLCBkdXBsaWNhdGUgaXQgYXMgdGhlXG5cdFx0XHQvLyBsYXN0IGZyYW1lIGFzIHdlbGwgZm9yIHBlcmZlY3QgbG9vcC5cblx0XHRcdGlmICggISBub0xvb3AgJiYgdGltZXNbIDAgXSA9PT0gMCApIHtcblxuXHRcdFx0XHR0aW1lcy5wdXNoKCBudW1Nb3JwaFRhcmdldHMgKTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlc1sgMCBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dHJhY2tzLnB1c2goXG5cdFx0XHRcdG5ldyBOdW1iZXJLZXlmcmFtZVRyYWNrKFxuXHRcdFx0XHRcdCcubW9ycGhUYXJnZXRJbmZsdWVuY2VzWycgKyBtb3JwaFRhcmdldFNlcXVlbmNlWyBpIF0ubmFtZSArICddJyxcblx0XHRcdFx0XHR0aW1lcywgdmFsdWVzXG5cdFx0XHRcdCkuc2NhbGUoIDEuMCAvIGZwcyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IEFuaW1hdGlvbkNsaXAoIG5hbWUsIC0gMSwgdHJhY2tzICk7XG5cblx0fSxcblxuXHRmaW5kQnlOYW1lOiBmdW5jdGlvbiAoIG9iamVjdE9yQ2xpcEFycmF5LCBuYW1lICkge1xuXG5cdFx0dmFyIGNsaXBBcnJheSA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXG5cdFx0aWYgKCAhIEFycmF5LmlzQXJyYXkoIG9iamVjdE9yQ2xpcEFycmF5ICkgKSB7XG5cblx0XHRcdHZhciBvID0gb2JqZWN0T3JDbGlwQXJyYXk7XG5cdFx0XHRjbGlwQXJyYXkgPSBvLmdlb21ldHJ5ICYmIG8uZ2VvbWV0cnkuYW5pbWF0aW9ucyB8fCBvLmFuaW1hdGlvbnM7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjbGlwQXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGNsaXBBcnJheVsgaSBdLm5hbWUgPT09IG5hbWUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGNsaXBBcnJheVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9LFxuXG5cdENyZWF0ZUNsaXBzRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2VzOiBmdW5jdGlvbiAoIG1vcnBoVGFyZ2V0cywgZnBzLCBub0xvb3AgKSB7XG5cblx0XHR2YXIgYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgPSB7fTtcblxuXHRcdC8vIHRlc3RlZCB3aXRoIGh0dHBzOi8vcmVnZXgxMDEuY29tLyBvbiB0cmljayBzZXF1ZW5jZXNcblx0XHQvLyBzdWNoIGZsYW1pbmdvX2ZseUFfMDAzLCBmbGFtaW5nb19ydW4xXzAwMywgY3JkZWF0aDAwNTlcblx0XHR2YXIgcGF0dGVybiA9IC9eKFtcXHctXSo/KShbXFxkXSspJC87XG5cblx0XHQvLyBzb3J0IG1vcnBoIHRhcmdldCBuYW1lcyBpbnRvIGFuaW1hdGlvbiBncm91cHMgYmFzZWRcblx0XHQvLyBwYXR0ZXJucyBsaWtlIFdhbGtfMDAxLCBXYWxrXzAwMiwgUnVuXzAwMSwgUnVuXzAwMlxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaSBdO1xuXHRcdFx0dmFyIHBhcnRzID0gbW9ycGhUYXJnZXQubmFtZS5tYXRjaCggcGF0dGVybiApO1xuXG5cdFx0XHRpZiAoIHBhcnRzICYmIHBhcnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdFx0dmFyIG5hbWUgPSBwYXJ0c1sgMSBdO1xuXG5cdFx0XHRcdHZhciBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdO1xuXHRcdFx0XHRpZiAoICEgYW5pbWF0aW9uTW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0YW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXSA9IGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyA9IFtdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhbmltYXRpb25Nb3JwaFRhcmdldHMucHVzaCggbW9ycGhUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGNsaXBzID0gW107XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0Y2xpcHMucHVzaCggQW5pbWF0aW9uQ2xpcC5DcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSggbmFtZSwgYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXSwgZnBzLCBub0xvb3AgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsaXBzO1xuXG5cdH0sXG5cblx0Ly8gcGFyc2UgdGhlIGFuaW1hdGlvbi5oaWVyYXJjaHkgZm9ybWF0XG5cdHBhcnNlQW5pbWF0aW9uOiBmdW5jdGlvbiAoIGFuaW1hdGlvbiwgYm9uZXMgKSB7XG5cblx0XHRpZiAoICEgYW5pbWF0aW9uICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQW5pbWF0aW9uQ2xpcDogTm8gYW5pbWF0aW9uIGluIEpTT05Mb2FkZXIgZGF0YS4nICk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHZhciBhZGROb25lbXB0eVRyYWNrID0gZnVuY3Rpb24gKCB0cmFja1R5cGUsIHRyYWNrTmFtZSwgYW5pbWF0aW9uS2V5cywgcHJvcGVydHlOYW1lLCBkZXN0VHJhY2tzICkge1xuXG5cdFx0XHQvLyBvbmx5IHJldHVybiB0cmFjayBpZiB0aGVyZSBhcmUgYWN0dWFsbHkga2V5cy5cblx0XHRcdGlmICggYW5pbWF0aW9uS2V5cy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0dmFyIHRpbWVzID0gW107XG5cdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRBbmltYXRpb25VdGlscy5mbGF0dGVuSlNPTiggYW5pbWF0aW9uS2V5cywgdGltZXMsIHZhbHVlcywgcHJvcGVydHlOYW1lICk7XG5cblx0XHRcdFx0Ly8gZW1wdHkga2V5cyBhcmUgZmlsdGVyZWQgb3V0LCBzbyBjaGVjayBhZ2FpblxuXHRcdFx0XHRpZiAoIHRpbWVzLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0XHRcdGRlc3RUcmFja3MucHVzaCggbmV3IHRyYWNrVHlwZSggdHJhY2tOYW1lLCB0aW1lcywgdmFsdWVzICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR2YXIgdHJhY2tzID0gW107XG5cblx0XHR2YXIgY2xpcE5hbWUgPSBhbmltYXRpb24ubmFtZSB8fCAnZGVmYXVsdCc7XG5cdFx0Ly8gYXV0b21hdGljIGxlbmd0aCBkZXRlcm1pbmF0aW9uIGluIEFuaW1hdGlvbkNsaXAuXG5cdFx0dmFyIGR1cmF0aW9uID0gYW5pbWF0aW9uLmxlbmd0aCB8fCAtIDE7XG5cdFx0dmFyIGZwcyA9IGFuaW1hdGlvbi5mcHMgfHwgMzA7XG5cblx0XHR2YXIgaGllcmFyY2h5VHJhY2tzID0gYW5pbWF0aW9uLmhpZXJhcmNoeSB8fCBbXTtcblxuXHRcdGZvciAoIHZhciBoID0gMDsgaCA8IGhpZXJhcmNoeVRyYWNrcy5sZW5ndGg7IGggKysgKSB7XG5cblx0XHRcdHZhciBhbmltYXRpb25LZXlzID0gaGllcmFyY2h5VHJhY2tzWyBoIF0ua2V5cztcblxuXHRcdFx0Ly8gc2tpcCBlbXB0eSB0cmFja3Ncblx0XHRcdGlmICggISBhbmltYXRpb25LZXlzIHx8IGFuaW1hdGlvbktleXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggdGFyZ2V0c1xuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyAwIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdC8vIGZpZ3VyZSBvdXQgYWxsIG1vcnBoIHRhcmdldHMgdXNlZCBpbiB0aGlzIHRyYWNrXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldE5hbWVzID0ge307XG5cblx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDwgYW5pbWF0aW9uS2V5cy5sZW5ndGg7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBtID0gMDsgbSA8IGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHMubGVuZ3RoOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG1vcnBoVGFyZ2V0TmFtZXNbIGFuaW1hdGlvbktleXNbIGsgXS5tb3JwaFRhcmdldHNbIG0gXSBdID0gLSAxO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNyZWF0ZSBhIHRyYWNrIGZvciBlYWNoIG1vcnBoIHRhcmdldCB3aXRoIGFsbCB6ZXJvXG5cdFx0XHRcdC8vIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBleGNlcHQgZm9yIHRoZSBrZXlzIGluIHdoaWNoXG5cdFx0XHRcdC8vIHRoZSBtb3JwaFRhcmdldCBpcyBuYW1lZC5cblx0XHRcdFx0Zm9yICggdmFyIG1vcnBoVGFyZ2V0TmFtZSBpbiBtb3JwaFRhcmdldE5hbWVzICkge1xuXG5cdFx0XHRcdFx0dmFyIHRpbWVzID0gW107XG5cdFx0XHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIG0gPSAwOyBtICE9PSBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgKysgbSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGFuaW1hdGlvbktleSA9IGFuaW1hdGlvbktleXNbIGsgXTtcblxuXHRcdFx0XHRcdFx0dGltZXMucHVzaCggYW5pbWF0aW9uS2V5LnRpbWUgKTtcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCAoIGFuaW1hdGlvbktleS5tb3JwaFRhcmdldCA9PT0gbW9ycGhUYXJnZXROYW1lICkgPyAxIDogMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHJhY2tzLnB1c2goIG5ldyBOdW1iZXJLZXlmcmFtZVRyYWNrKCAnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlWycgKyBtb3JwaFRhcmdldE5hbWUgKyAnXScsIHRpbWVzLCB2YWx1ZXMgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkdXJhdGlvbiA9IG1vcnBoVGFyZ2V0TmFtZXMubGVuZ3RoICogKCBmcHMgfHwgMS4wICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gLi4uYXNzdW1lIHNrZWxldGFsIGFuaW1hdGlvblxuXG5cdFx0XHRcdHZhciBib25lTmFtZSA9ICcuYm9uZXNbJyArIGJvbmVzWyBoIF0ubmFtZSArICddJztcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5wb3NpdGlvbicsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3BvcycsIHRyYWNrcyApO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0UXVhdGVybmlvbktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5xdWF0ZXJuaW9uJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncm90JywgdHJhY2tzICk7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcuc2NhbGUnLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdzY2wnLCB0cmFja3MgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0cmFja3MubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHZhciBjbGlwID0gbmV3IEFuaW1hdGlvbkNsaXAoIGNsaXBOYW1lLCBkdXJhdGlvbiwgdHJhY2tzICk7XG5cblx0XHRyZXR1cm4gY2xpcDtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uQ2xpcC5wcm90b3R5cGUsIHtcblxuXHRyZXNldER1cmF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdHJhY2tzID0gdGhpcy50cmFja3MsIGR1cmF0aW9uID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciB0cmFjayA9IHRoaXMudHJhY2tzWyBpIF07XG5cblx0XHRcdGR1cmF0aW9uID0gTWF0aC5tYXgoIGR1cmF0aW9uLCB0cmFjay50aW1lc1sgdHJhY2sudGltZXMubGVuZ3RoIC0gMSBdICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyaW06IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50cmFja3NbIGkgXS50cmltKCAwLCB0aGlzLmR1cmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YWxpZCA9IHZhbGlkICYmIHRoaXMudHJhY2tzWyBpIF0udmFsaWRhdGUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9LFxuXG5cdG9wdGltaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0ub3B0aW1pemUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIENhY2hlID0ge1xuXG5cdGVuYWJsZWQ6IGZhbHNlLFxuXG5cdGZpbGVzOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uICgga2V5LCBmaWxlICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdBZGRpbmcga2V5OicsIGtleSApO1xuXG5cdFx0dGhpcy5maWxlc1sga2V5IF0gPSBmaWxlO1xuXG5cdH0sXG5cblx0Z2V0OiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQ2hlY2tpbmcga2V5OicsIGtleSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsZXNbIGtleSBdO1xuXG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdGRlbGV0ZSB0aGlzLmZpbGVzWyBrZXkgXTtcblxuXHR9LFxuXG5cdGNsZWFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmZpbGVzID0ge307XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTG9hZGluZ01hbmFnZXIoIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciBpc0xvYWRpbmcgPSBmYWxzZTtcblx0dmFyIGl0ZW1zTG9hZGVkID0gMDtcblx0dmFyIGl0ZW1zVG90YWwgPSAwO1xuXHR2YXIgdXJsTW9kaWZpZXIgPSB1bmRlZmluZWQ7XG5cblx0Ly8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydFxuXHQvLyBpbiB0aGUgY29uc3RydWN0b3JcblxuXHR0aGlzLm9uU3RhcnQgPSB1bmRlZmluZWQ7XG5cdHRoaXMub25Mb2FkID0gb25Mb2FkO1xuXHR0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzO1xuXHR0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuXG5cdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpdGVtc1RvdGFsICsrO1xuXG5cdFx0aWYgKCBpc0xvYWRpbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5vblN0YXJ0KCB1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlzTG9hZGluZyA9IHRydWU7XG5cblx0fTtcblxuXHR0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGl0ZW1zTG9hZGVkICsrO1xuXG5cdFx0aWYgKCBzY29wZS5vblByb2dyZXNzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm9uUHJvZ3Jlc3MoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggaXRlbXNMb2FkZWQgPT09IGl0ZW1zVG90YWwgKSB7XG5cblx0XHRcdGlzTG9hZGluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uTG9hZCgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLml0ZW1FcnJvciA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0aWYgKCBzY29wZS5vbkVycm9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm9uRXJyb3IoIHVybCApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5yZXNvbHZlVVJMID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpZiAoIHVybE1vZGlmaWVyICkge1xuXG5cdFx0XHRyZXR1cm4gdXJsTW9kaWZpZXIoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0VVJMTW9kaWZpZXIgPSBmdW5jdGlvbiAoIHRyYW5zZm9ybSApIHtcblxuXHRcdHVybE1vZGlmaWVyID0gdHJhbnNmb3JtO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cbn1cblxudmFyIERlZmF1bHRMb2FkaW5nTWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlcigpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIGxvYWRpbmcgPSB7fTtcblxuZnVuY3Rpb24gRmlsZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGaWxlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHJlcXVlc3QgaXMgZHVwbGljYXRlXG5cblx0XHRpZiAoIGxvYWRpbmdbIHVybCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBkYXRhOiBVUklcblx0XHR2YXIgZGF0YVVyaVJlZ2V4ID0gL15kYXRhOiguKj8pKDtiYXNlNjQpPywoLiopJC87XG5cdFx0dmFyIGRhdGFVcmlSZWdleFJlc3VsdCA9IHVybC5tYXRjaCggZGF0YVVyaVJlZ2V4ICk7XG5cblx0XHQvLyBTYWZhcmkgY2FuIG5vdCBoYW5kbGUgRGF0YSBVUklzIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Qgc28gcHJvY2VzcyBtYW51YWxseVxuXHRcdGlmICggZGF0YVVyaVJlZ2V4UmVzdWx0ICkge1xuXG5cdFx0XHR2YXIgbWltZVR5cGUgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDEgXTtcblx0XHRcdHZhciBpc0Jhc2U2NCA9ICEhIGRhdGFVcmlSZWdleFJlc3VsdFsgMiBdO1xuXHRcdFx0dmFyIGRhdGEgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDMgXTtcblxuXHRcdFx0ZGF0YSA9IGRlY29kZVVSSUNvbXBvbmVudCggZGF0YSApO1xuXG5cdFx0XHRpZiAoIGlzQmFzZTY0ICkgZGF0YSA9IGF0b2IoIGRhdGEgKTtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHR2YXIgcmVzcG9uc2U7XG5cdFx0XHRcdHZhciByZXNwb25zZVR5cGUgPSAoIHRoaXMucmVzcG9uc2VUeXBlIHx8ICcnICkudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0XHRzd2l0Y2ggKCByZXNwb25zZVR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdhcnJheWJ1ZmZlcic6XG5cdFx0XHRcdFx0Y2FzZSAnYmxvYic6XG5cblx0XHRcdFx0XHRcdHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZpZXdbIGkgXSA9IGRhdGEuY2hhckNvZGVBdCggaSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggcmVzcG9uc2VUeXBlID09PSAnYmxvYicgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgQmxvYiggWyB2aWV3LmJ1ZmZlciBdLCB7IHR5cGU6IG1pbWVUeXBlIH0gKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IHZpZXcuYnVmZmVyO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnZG9jdW1lbnQnOlxuXG5cdFx0XHRcdFx0XHR2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBtaW1lVHlwZSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ2pzb24nOlxuXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IEpTT04ucGFyc2UoIGRhdGEgKTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OiAvLyAndGV4dCcgb3Igb3RoZXJcblxuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBkYXRhO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2FpdCBmb3IgbmV4dCBicm93c2VyIHRpY2sgbGlrZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBldmVudCBkaXNwYXRjaGluZyBkb2VzXG5cdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCByZXNwb25zZSApO1xuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9LCAwICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0XHQvLyBXYWl0IGZvciBuZXh0IGJyb3dzZXIgdGljayBsaWtlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IGV2ZW50IGRpc3BhdGNoaW5nIGRvZXNcblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXJyb3IgKTtcblxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0sIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSW5pdGlhbGlzZSBhcnJheSBmb3IgZHVwbGljYXRlIHJlcXVlc3RzXG5cblx0XHRcdGxvYWRpbmdbIHVybCBdID0gW107XG5cblx0XHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cblx0XHRcdHJlcXVlc3Qub3BlbiggJ0dFVCcsIHVybCwgdHJ1ZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuXHRcdFx0XHR2YXIgcmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlO1xuXG5cdFx0XHRcdENhY2hlLmFkZCggdXJsLCByZXNwb25zZSApO1xuXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0aWYgKCB0aGlzLnN0YXR1cyA9PT0gMjAwIHx8IHRoaXMuc3RhdHVzID09PSAwICkge1xuXG5cdFx0XHRcdFx0Ly8gU29tZSBicm93c2VycyByZXR1cm4gSFRUUCBTdGF0dXMgMCB3aGVuIHVzaW5nIG5vbi1odHRwIHByb3RvY29sXG5cdFx0XHRcdFx0Ly8gZS5nLiAnZmlsZTovLycgb3IgJ2RhdGE6Ly8nLiBIYW5kbGUgYXMgc3VjY2Vzcy5cblxuXHRcdFx0XHRcdGlmICggdGhpcy5zdGF0dXMgPT09IDAgKSBjb25zb2xlLndhcm4oICdUSFJFRS5GaWxlTG9hZGVyOiBIVFRQIFN0YXR1cyAwIHJlY2VpdmVkLicgKTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkxvYWQgKSBjYWxsYmFjay5vbkxvYWQoIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25FcnJvciApIGNhbGxiYWNrLm9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIGZhbHNlICk7XG5cblx0XHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciggJ3Byb2dyZXNzJywgZnVuY3Rpb24gKCBldmVudCApIHtcblxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Qcm9ncmVzcyApIGNhbGxiYWNrLm9uUHJvZ3Jlc3MoIGV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkVycm9yICkgY2FsbGJhY2sub25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdhYm9ydCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkVycm9yICkgY2FsbGJhY2sub25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIHRoaXMucmVzcG9uc2VUeXBlICE9PSB1bmRlZmluZWQgKSByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IHRoaXMucmVzcG9uc2VUeXBlO1xuXHRcdFx0aWYgKCB0aGlzLndpdGhDcmVkZW50aWFscyAhPT0gdW5kZWZpbmVkICkgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcblxuXHRcdFx0aWYgKCByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUgKSByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoIHRoaXMubWltZVR5cGUgIT09IHVuZGVmaW5lZCA/IHRoaXMubWltZVR5cGUgOiAndGV4dC9wbGFpbicgKTtcblxuXHRcdFx0Zm9yICggdmFyIGhlYWRlciBpbiB0aGlzLnJlcXVlc3RIZWFkZXIgKSB7XG5cblx0XHRcdFx0cmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCBoZWFkZXIsIHRoaXMucmVxdWVzdEhlYWRlclsgaGVhZGVyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXF1ZXN0LnNlbmQoIG51bGwgKTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdHJldHVybiByZXF1ZXN0O1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UmVzcG9uc2VUeXBlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNwb25zZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFdpdGhDcmVkZW50aWFsczogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMud2l0aENyZWRlbnRpYWxzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRNaW1lVHlwZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubWltZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBBbmltYXRpb25Mb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggc2NvcGUucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdHZhciBhbmltYXRpb25zID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHR9XG5cblx0XHRvbkxvYWQoIGFuaW1hdGlvbnMgKTtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICpcbiAqIEFic3RyYWN0IEJhc2UgY2xhc3MgdG8gYmxvY2sgYmFzZWQgdGV4dHVyZXMgbG9hZGVyIChkZHMsIHB2ciwgLi4uKVxuICovXG5cbmZ1bmN0aW9uIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG5cdC8vIG92ZXJyaWRlIGluIHN1YiBjbGFzc2VzXG5cdHRoaXMuX3BhcnNlciA9IG51bGw7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgaW1hZ2VzID0gW107XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBDb21wcmVzc2VkVGV4dHVyZSgpO1xuXHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybFsgaSBdLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHR2YXIgdGV4RGF0YXMgPSBzY29wZS5fcGFyc2VyKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpbWFnZXNbIGkgXSA9IHtcblx0XHRcdFx0XHR3aWR0aDogdGV4RGF0YXMud2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsXG5cdFx0XHRcdFx0Zm9ybWF0OiB0ZXhEYXRhcy5mb3JtYXQsXG5cdFx0XHRcdFx0bWlwbWFwczogdGV4RGF0YXMubWlwbWFwc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxvYWRlZCArPSAxO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdHZhciBsb2FkZWQgPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdXJsLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZVxuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHR2YXIgdGV4RGF0YXMgPSBzY29wZS5fcGFyc2VyKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLmlzQ3ViZW1hcCApIHtcblxuXHRcdFx0XHRcdHZhciBmYWNlcyA9IHRleERhdGFzLm1pcG1hcHMubGVuZ3RoIC8gdGV4RGF0YXMubWlwbWFwQ291bnQ7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgZiA9IDA7IGYgPCBmYWNlczsgZiArKyApIHtcblxuXHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0gPSB7IG1pcG1hcHM6IFtdIH07XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRleERhdGFzLm1pcG1hcENvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLm1pcG1hcHMucHVzaCggdGV4RGF0YXMubWlwbWFwc1sgZiAqIHRleERhdGFzLm1pcG1hcENvdW50ICsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0O1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblx0XHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIE5pa29zIE0uIC8gaHR0cHM6Ly9naXRodWIuY29tL2ZvbzEyMy9cbiAqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGxvYWQgZ2VuZXJpYyBiaW5hcnkgdGV4dHVyZXMgZm9ybWF0cyAocmdiZSwgaGRyLCAuLi4pXG4gKi9cblxuZnVuY3Rpb24gRGF0YVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0Ly8gb3ZlcnJpZGUgaW4gc3ViIGNsYXNzZXNcblx0dGhpcy5fcGFyc2VyID0gbnVsbDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBEYXRhVGV4dHVyZUxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciB0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdHZhciB0ZXhEYXRhID0gc2NvcGUuX3BhcnNlciggYnVmZmVyICk7XG5cblx0XHRcdGlmICggISB0ZXhEYXRhICkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoIHRleERhdGEuaW1hZ2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlID0gdGV4RGF0YS5pbWFnZTtcblxuXHRcdFx0fSBlbHNlIGlmICggdGV4RGF0YS5kYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZS53aWR0aCA9IHRleERhdGEud2lkdGg7XG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gdGV4RGF0YS5oZWlnaHQ7XG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UuZGF0YSA9IHRleERhdGEuZGF0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlLndyYXBTID0gdGV4RGF0YS53cmFwUyAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cdFx0XHR0ZXh0dXJlLndyYXBUID0gdGV4RGF0YS53cmFwVCAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwVCA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gdGV4RGF0YS5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSB0ZXhEYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5taW5GaWx0ZXIgOiBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdHRleHR1cmUuYW5pc290cm9weSA9IHRleERhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5hbmlzb3Ryb3B5IDogMTtcblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YS5mb3JtYXQ7XG5cblx0XHRcdH1cblx0XHRcdGlmICggdGV4RGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS50eXBlID0gdGV4RGF0YS50eXBlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YS5taXBtYXBzO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBDb3VudCA9PT0gMSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUsIHRleERhdGEgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIEltYWdlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEltYWdlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0aWYgKCB1cmwgPT09IHVuZGVmaW5lZCApIHVybCA9ICcnO1xuXG5cdFx0aWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHVybCA9IHRoaXMucGF0aCArIHVybDtcblxuXHRcdHVybCA9IHRoaXMubWFuYWdlci5yZXNvbHZlVVJMKCB1cmwgKTtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHR2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2ltZycgKTtcblxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgdGhpcyApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGhpcyApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHtcblxuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UgKTtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH1cblxuXHRcdGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0aWYgKCB1cmwuc3Vic3RyKCAwLCA1ICkgIT09ICdkYXRhOicgKSB7XG5cblx0XHRcdGlmICggdGhpcy5jcm9zc09yaWdpbiAhPT0gdW5kZWZpbmVkICkgaW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmNyb3NzT3JpZ2luO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0aW1hZ2Uuc3JjID0gdXJsO1xuXG5cdFx0cmV0dXJuIGltYWdlO1xuXG5cdH0sXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIEN1YmVUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEN1YmVUZXh0dXJlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybHMsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHR2YXIgbG9hZGVkID0gMDtcblxuXHRcdGZ1bmN0aW9uIGxvYWRUZXh0dXJlKCBpICkge1xuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsc1sgaSBdLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2VzWyBpIF0gPSBpbWFnZTtcblxuXHRcdFx0XHRsb2FkZWQgKys7XG5cblx0XHRcdFx0aWYgKCBsb2FkZWQgPT09IDYgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCB1bmRlZmluZWQsIG9uRXJyb3IgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRsb2FkVGV4dHVyZSggaSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gVGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBUZXh0dXJlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlO1xuXG5cdFx0XHQvLyBKUEVHcyBjYW4ndCBoYXZlIGFuIGFscGhhIGNoYW5uZWwsIHNvIG1lbW9yeSBjYW4gYmUgc2F2ZWQgYnkgc3RvcmluZyB0aGVtIGFzIFJHQi5cblx0XHRcdHZhciBpc0pQRUcgPSB1cmwuc2VhcmNoKCAvXFwuanBlP2ckL2kgKSA+IDAgfHwgdXJsLnNlYXJjaCggL15kYXRhXFw6aW1hZ2VcXC9qcGVnLyApID09PSAwO1xuXG5cdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IGlzSlBFRyA/IFJHQkZvcm1hdCA6IFJHQkFGb3JtYXQ7XG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBFeHRlbnNpYmxlIGN1cnZlIG9iamVjdFxuICpcbiAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6XG4gKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0IClcbiAqIC5nZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudEF0KCB1IClcbiAqIC5nZXRQb2ludHMoKSwgLmdldFNwYWNlZFBvaW50cygpXG4gKiAuZ2V0TGVuZ3RoKClcbiAqIC51cGRhdGVBcmNMZW5ndGhzKClcbiAqXG4gKiBUaGlzIGZvbGxvd2luZyBjdXJ2ZXMgaW5oZXJpdCBmcm9tIFRIUkVFLkN1cnZlOlxuICpcbiAqIC0tIDJEIGN1cnZlcyAtLVxuICogVEhSRUUuQXJjQ3VydmVcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLkVsbGlwc2VDdXJ2ZVxuICogVEhSRUUuTGluZUN1cnZlXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuU3BsaW5lQ3VydmVcbiAqXG4gKiAtLSAzRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTNcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUzXG4gKiBUSFJFRS5MaW5lQ3VydmUzXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTNcbiAqXG4gKiBBIHNlcmllcyBvZiBjdXJ2ZXMgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgVEhSRUUuQ3VydmVQYXRoLlxuICpcbiAqKi9cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlx0QWJzdHJhY3QgQ3VydmUgYmFzZSBjbGFzc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBDdXJ2ZSgpIHtcblxuXHR0aGlzLnR5cGUgPSAnQ3VydmUnO1xuXG5cdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gMjAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEN1cnZlLnByb3RvdHlwZSwge1xuXG5cdC8vIFZpcnR1YWwgYmFzZSBjbGFzcyBtZXRob2QgdG8gb3ZlcndyaXRlIGFuZCBpbXBsZW1lbnQgaW4gc3ViY2xhc3Nlc1xuXHQvL1x0LSB0IFswIC4uIDFdXG5cblx0Z2V0UG9pbnQ6IGZ1bmN0aW9uICggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicgKTtcblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9LFxuXG5cdC8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aFxuXHQvLyAtIHUgWzAgLi4gMV1cblxuXHRnZXRQb2ludEF0OiBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fSxcblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50KCB0IClcblxuXHRnZXRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDU7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludEF0KCB1IClcblxuXHRnZXRTcGFjZWRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDU7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludEF0KCBkIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHQvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XG5cblx0fSxcblxuXHQvLyBHZXQgbGlzdCBvZiBjdW11bGF0aXZlIHNlZ21lbnQgbGVuZ3Roc1xuXG5cdGdldExlbmd0aHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0aWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxuXHRcdFx0KCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSAmJlxuXHRcdFx0ISB0aGlzLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR2YXIgY2FjaGUgPSBbXTtcblx0XHR2YXIgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTtcblx0XHR2YXIgcCwgc3VtID0gMDtcblxuXHRcdGNhY2hlLnB1c2goIDAgKTtcblxuXHRcdGZvciAoIHAgPSAxOyBwIDw9IGRpdmlzaW9uczsgcCArKyApIHtcblxuXHRcdFx0Y3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTtcblx0XHRcdHN1bSArPSBjdXJyZW50LmRpc3RhbmNlVG8oIGxhc3QgKTtcblx0XHRcdGNhY2hlLnB1c2goIHN1bSApO1xuXHRcdFx0bGFzdCA9IGN1cnJlbnQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlO1xuXG5cdFx0cmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC5cblxuXHR9LFxuXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdH0sXG5cblx0Ly8gR2l2ZW4gdSAoIDAgLi4gMSApLCBnZXQgYSB0IHRvIGZpbmQgcC4gVGhpcyBnaXZlcyB5b3UgcG9pbnRzIHdoaWNoIGFyZSBlcXVpZGlzdGFudFxuXG5cdGdldFV0b1RtYXBwaW5nOiBmdW5jdGlvbiAoIHUsIGRpc3RhbmNlICkge1xuXG5cdFx0dmFyIGFyY0xlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblxuXHRcdHZhciBpID0gMCwgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDtcblxuXHRcdHZhciB0YXJnZXRBcmNMZW5ndGg7IC8vIFRoZSB0YXJnZXRlZCB1IGRpc3RhbmNlIHZhbHVlIHRvIGdldFxuXG5cdFx0aWYgKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gZGlzdGFuY2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1sgaWwgLSAxIF07XG5cblx0XHR9XG5cblx0XHQvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxuXG5cdFx0dmFyIGxvdyA9IDAsIGhpZ2ggPSBpbCAtIDEsIGNvbXBhcmlzb247XG5cblx0XHR3aGlsZSAoIGxvdyA8PSBoaWdoICkge1xuXG5cdFx0XHRpID0gTWF0aC5mbG9vciggbG93ICsgKCBoaWdoIC0gbG93ICkgLyAyICk7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcblxuXHRcdFx0Y29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcblxuXHRcdFx0aWYgKCBjb21wYXJpc29uIDwgMCApIHtcblxuXHRcdFx0XHRsb3cgPSBpICsgMTtcblxuXHRcdFx0fSBlbHNlIGlmICggY29tcGFyaXNvbiA+IDAgKSB7XG5cblx0XHRcdFx0aGlnaCA9IGkgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGhpZ2ggPSBpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvLyBET05FXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGkgPSBoaWdoO1xuXG5cdFx0aWYgKCBhcmNMZW5ndGhzWyBpIF0gPT09IHRhcmdldEFyY0xlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIGkgLyAoIGlsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcblxuXHRcdHZhciBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzWyBpIF07XG5cdFx0dmFyIGxlbmd0aEFmdGVyID0gYXJjTGVuZ3Roc1sgaSArIDEgXTtcblxuXHRcdHZhciBzZWdtZW50TGVuZ3RoID0gbGVuZ3RoQWZ0ZXIgLSBsZW5ndGhCZWZvcmU7XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xuXG5cdFx0dmFyIHNlZ21lbnRGcmFjdGlvbiA9ICggdGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlICkgLyBzZWdtZW50TGVuZ3RoO1xuXG5cdFx0Ly8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxuXG5cdFx0dmFyIHQgPSAoIGkgKyBzZWdtZW50RnJhY3Rpb24gKSAvICggaWwgLSAxICk7XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9LFxuXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcblx0Ly8gSW4gY2FzZSBhbnkgc3ViIGN1cnZlIGRvZXMgbm90IGltcGxlbWVudCBpdHMgdGFuZ2VudCBkZXJpdmF0aW9uLFxuXHQvLyAyIHBvaW50cyBhIHNtYWxsIGRlbHRhIGFwYXJ0IHdpbGwgYmUgdXNlZCB0byBmaW5kIGl0cyBncmFkaWVudFxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXG5cblx0Z2V0VGFuZ2VudDogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0dmFyIGRlbHRhID0gMC4wMDAxO1xuXHRcdHZhciB0MSA9IHQgLSBkZWx0YTtcblx0XHR2YXIgdDIgPSB0ICsgZGVsdGE7XG5cblx0XHQvLyBDYXBwaW5nIGluIGNhc2Ugb2YgZGFuZ2VyXG5cblx0XHRpZiAoIHQxIDwgMCApIHQxID0gMDtcblx0XHRpZiAoIHQyID4gMSApIHQyID0gMTtcblxuXHRcdHZhciBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApO1xuXHRcdHZhciBwdDIgPSB0aGlzLmdldFBvaW50KCB0MiApO1xuXG5cdFx0dmFyIHZlYyA9IHB0Mi5jbG9uZSgpLnN1YiggcHQxICk7XG5cdFx0cmV0dXJuIHZlYy5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdGdldFRhbmdlbnRBdDogZnVuY3Rpb24gKCB1ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCApO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUZyZW5ldEZyYW1lczogZnVuY3Rpb24gKCBzZWdtZW50cywgY2xvc2VkICkge1xuXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cuY3MuaW5kaWFuYS5lZHUvcHViL3RlY2hyZXBvcnRzL1RSNDI1LnBkZlxuXG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdGFuZ2VudHMgPSBbXTtcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXHRcdHZhciBiaW5vcm1hbHMgPSBbXTtcblxuXHRcdHZhciB2ZWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtYXQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0dmFyIGksIHUsIHRoZXRhO1xuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgdGFuZ2VudCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0dSA9IGkgLyBzZWdtZW50cztcblxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1ICk7XG5cdFx0XHR0YW5nZW50c1sgaSBdLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGFuIGluaXRpYWwgbm9ybWFsIHZlY3RvciBwZXJwZW5kaWN1bGFyIHRvIHRoZSBmaXJzdCB0YW5nZW50IHZlY3Rvcixcblx0XHQvLyBhbmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWluaW11bSB0YW5nZW50IHh5eiBjb21wb25lbnRcblxuXHRcdG5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Ymlub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXHRcdHZhciB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTtcblx0XHR2YXIgdHkgPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS55ICk7XG5cdFx0dmFyIHR6ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueiApO1xuXG5cdFx0aWYgKCB0eCA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR4O1xuXHRcdFx0bm9ybWFsLnNldCggMSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eSA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR5O1xuXHRcdFx0bm9ybWFsLnNldCggMCwgMSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eiA8PSBtaW4gKSB7XG5cblx0XHRcdG5vcm1hbC5zZXQoIDAsIDAsIDEgKTtcblxuXHRcdH1cblxuXHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0bm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgdmVjICk7XG5cdFx0Ymlub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWxzWyAwIF0gKTtcblxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgc2xvd2x5LXZhcnlpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0bm9ybWFsc1sgaSBdID0gbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIHZlYy5sZW5ndGgoKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZlYy5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR0aGV0YSA9IE1hdGguYWNvcyggX01hdGguY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtIDEsIDEgKSApOyAvLyBjbGFtcCBmb3IgZmxvYXRpbmcgcHQgZXJyb3JzXG5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHZlYywgdGhldGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgY3VydmUgaXMgY2xvc2VkLCBwb3N0cHJvY2VzcyB0aGUgdmVjdG9ycyBzbyB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9ybWFsIHZlY3RvcnMgYXJlIHRoZSBzYW1lXG5cblx0XHRpZiAoIGNsb3NlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhldGEgPSBNYXRoLmFjb3MoIF9NYXRoLmNsYW1wKCBub3JtYWxzWyAwIF0uZG90KCBub3JtYWxzWyBzZWdtZW50cyBdICksIC0gMSwgMSApICk7XG5cdFx0XHR0aGV0YSAvPSBzZWdtZW50cztcblxuXHRcdFx0aWYgKCB0YW5nZW50c1sgMCBdLmRvdCggdmVjLmNyb3NzVmVjdG9ycyggbm9ybWFsc1sgMCBdLCBub3JtYWxzWyBzZWdtZW50cyBdICkgKSA+IDAgKSB7XG5cblx0XHRcdFx0dGhldGEgPSAtIHRoZXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIHR3aXN0IGEgbGl0dGxlLi4uXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB0YW5nZW50c1sgaSBdLCB0aGV0YSAqIGkgKSApO1xuXHRcdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dGFuZ2VudHM6IHRhbmdlbnRzLFxuXHRcdFx0bm9ybWFsczogbm9ybWFscyxcblx0XHRcdGJpbm9ybWFsczogYmlub3JtYWxzXG5cdFx0fTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gc291cmNlLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0N1cnZlJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQ3VydmUudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRkYXRhLmFyY0xlbmd0aERpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0ganNvbi5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuZnVuY3Rpb24gRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7XG5cblx0dGhpcy5hWCA9IGFYIHx8IDA7XG5cdHRoaXMuYVkgPSBhWSB8fCAwO1xuXG5cdHRoaXMueFJhZGl1cyA9IHhSYWRpdXMgfHwgMTtcblx0dGhpcy55UmFkaXVzID0geVJhZGl1cyB8fCAxO1xuXG5cdHRoaXMuYVN0YXJ0QW5nbGUgPSBhU3RhcnRBbmdsZSB8fCAwO1xuXHR0aGlzLmFFbmRBbmdsZSA9IGFFbmRBbmdsZSB8fCAyICogTWF0aC5QSTtcblxuXHR0aGlzLmFDbG9ja3dpc2UgPSBhQ2xvY2t3aXNlIHx8IGZhbHNlO1xuXG5cdHRoaXMuYVJvdGF0aW9uID0gYVJvdGF0aW9uIHx8IDA7XG5cbn1cblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVsbGlwc2VDdXJ2ZTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5pc0VsbGlwc2VDdXJ2ZSA9IHRydWU7XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIHR3b1BpID0gTWF0aC5QSSAqIDI7XG5cdHZhciBkZWx0YUFuZ2xlID0gdGhpcy5hRW5kQW5nbGUgLSB0aGlzLmFTdGFydEFuZ2xlO1xuXHR2YXIgc2FtZVBvaW50cyA9IE1hdGguYWJzKCBkZWx0YUFuZ2xlICkgPCBOdW1iZXIuRVBTSUxPTjtcblxuXHQvLyBlbnN1cmVzIHRoYXQgZGVsdGFBbmdsZSBpcyAwIC4uIDIgUElcblx0d2hpbGUgKCBkZWx0YUFuZ2xlIDwgMCApIGRlbHRhQW5nbGUgKz0gdHdvUGk7XG5cdHdoaWxlICggZGVsdGFBbmdsZSA+IHR3b1BpICkgZGVsdGFBbmdsZSAtPSB0d29QaTtcblxuXHRpZiAoIGRlbHRhQW5nbGUgPCBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdGlmICggc2FtZVBvaW50cyApIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gdHdvUGk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGlmICggdGhpcy5hQ2xvY2t3aXNlID09PSB0cnVlICYmICEgc2FtZVBvaW50cyApIHtcblxuXHRcdGlmICggZGVsdGFBbmdsZSA9PT0gdHdvUGkgKSB7XG5cblx0XHRcdGRlbHRhQW5nbGUgPSAtIHR3b1BpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IGRlbHRhQW5nbGUgLSB0d29QaTtcblxuXHRcdH1cblxuXHR9XG5cblx0dmFyIGFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZSArIHQgKiBkZWx0YUFuZ2xlO1xuXHR2YXIgeCA9IHRoaXMuYVggKyB0aGlzLnhSYWRpdXMgKiBNYXRoLmNvcyggYW5nbGUgKTtcblx0dmFyIHkgPSB0aGlzLmFZICsgdGhpcy55UmFkaXVzICogTWF0aC5zaW4oIGFuZ2xlICk7XG5cblx0aWYgKCB0aGlzLmFSb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdHZhciBjb3MgPSBNYXRoLmNvcyggdGhpcy5hUm90YXRpb24gKTtcblx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHRoaXMuYVJvdGF0aW9uICk7XG5cblx0XHR2YXIgdHggPSB4IC0gdGhpcy5hWDtcblx0XHR2YXIgdHkgPSB5IC0gdGhpcy5hWTtcblxuXHRcdC8vIFJvdGF0ZSB0aGUgcG9pbnQgYWJvdXQgdGhlIGNlbnRlciBvZiB0aGUgZWxsaXBzZS5cblx0XHR4ID0gdHggKiBjb3MgLSB0eSAqIHNpbiArIHRoaXMuYVg7XG5cdFx0eSA9IHR4ICogc2luICsgdHkgKiBjb3MgKyB0aGlzLmFZO1xuXG5cdH1cblxuXHRyZXR1cm4gcG9pbnQuc2V0KCB4LCB5ICk7XG5cbn07XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuYVggPSBzb3VyY2UuYVg7XG5cdHRoaXMuYVkgPSBzb3VyY2UuYVk7XG5cblx0dGhpcy54UmFkaXVzID0gc291cmNlLnhSYWRpdXM7XG5cdHRoaXMueVJhZGl1cyA9IHNvdXJjZS55UmFkaXVzO1xuXG5cdHRoaXMuYVN0YXJ0QW5nbGUgPSBzb3VyY2UuYVN0YXJ0QW5nbGU7XG5cdHRoaXMuYUVuZEFuZ2xlID0gc291cmNlLmFFbmRBbmdsZTtcblxuXHR0aGlzLmFDbG9ja3dpc2UgPSBzb3VyY2UuYUNsb2Nrd2lzZTtcblxuXHR0aGlzLmFSb3RhdGlvbiA9IHNvdXJjZS5hUm90YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLmFYID0gdGhpcy5hWDtcblx0ZGF0YS5hWSA9IHRoaXMuYVk7XG5cblx0ZGF0YS54UmFkaXVzID0gdGhpcy54UmFkaXVzO1xuXHRkYXRhLnlSYWRpdXMgPSB0aGlzLnlSYWRpdXM7XG5cblx0ZGF0YS5hU3RhcnRBbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGU7XG5cdGRhdGEuYUVuZEFuZ2xlID0gdGhpcy5hRW5kQW5nbGU7XG5cblx0ZGF0YS5hQ2xvY2t3aXNlID0gdGhpcy5hQ2xvY2t3aXNlO1xuXG5cdGRhdGEuYVJvdGF0aW9uID0gdGhpcy5hUm90YXRpb247XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLmFYID0ganNvbi5hWDtcblx0dGhpcy5hWSA9IGpzb24uYVk7XG5cblx0dGhpcy54UmFkaXVzID0ganNvbi54UmFkaXVzO1xuXHR0aGlzLnlSYWRpdXMgPSBqc29uLnlSYWRpdXM7XG5cblx0dGhpcy5hU3RhcnRBbmdsZSA9IGpzb24uYVN0YXJ0QW5nbGU7XG5cdHRoaXMuYUVuZEFuZ2xlID0ganNvbi5hRW5kQW5nbGU7XG5cblx0dGhpcy5hQ2xvY2t3aXNlID0ganNvbi5hQ2xvY2t3aXNlO1xuXG5cdHRoaXMuYVJvdGF0aW9uID0ganNvbi5hUm90YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIEFyY0N1cnZlKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0RWxsaXBzZUN1cnZlLmNhbGwoIHRoaXMsIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdHRoaXMudHlwZSA9ICdBcmNDdXJ2ZSc7XG5cbn1cblxuQXJjQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRWxsaXBzZUN1cnZlLnByb3RvdHlwZSApO1xuQXJjQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXJjQ3VydmU7XG5cbkFyY0N1cnZlLnByb3RvdHlwZS5pc0FyY0N1cnZlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqXG4gKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZ1xuICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuXG4gKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZlxuICpcbiAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbVxuICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNVxuICovXG5cblxuLypcbkJhc2VkIG9uIGFuIG9wdGltaXplZCBjKysgc29sdXRpb24gaW5cbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXG4gLSBodHRwOi8vaWRlb25lLmNvbS9Ob0ViVk1cblxuVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxuYnV0IGZvciB0aHJlZS5qcyBjdXJ2ZSB1c2UsIGl0IGNvdWxkIGJlIHBvc3NpYmxlIGlubGluZWQgYW5kIGZsYXR0ZW4gaW50byBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsXG53aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuXG4qL1xuXG5mdW5jdGlvbiBDdWJpY1BvbHkoKSB7XG5cblx0dmFyIGMwID0gMCwgYzEgPSAwLCBjMiA9IDAsIGMzID0gMDtcblxuXHQvKlxuXHQgKiBDb21wdXRlIGNvZWZmaWNpZW50cyBmb3IgYSBjdWJpYyBwb2x5bm9taWFsXG5cdCAqICAgcChzKSA9IGMwICsgYzEqcyArIGMyKnNeMiArIGMzKnNeM1xuXHQgKiBzdWNoIHRoYXRcblx0ICogICBwKDApID0geDAsIHAoMSkgPSB4MVxuXHQgKiAgYW5kXG5cdCAqICAgcCcoMCkgPSB0MCwgcCcoMSkgPSB0MS5cblx0ICovXG5cdGZ1bmN0aW9uIGluaXQoIHgwLCB4MSwgdDAsIHQxICkge1xuXG5cdFx0YzAgPSB4MDtcblx0XHRjMSA9IHQwO1xuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcblx0XHRjMyA9IDIgKiB4MCAtIDIgKiB4MSArIHQwICsgdDE7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRpbml0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgdGVuc2lvbiApIHtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xuXG5cdFx0fSxcblxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxuXHRcdFx0dmFyIHQxID0gKCB4MSAtIHgwICkgLyBkdDAgLSAoIHgyIC0geDAgKSAvICggZHQwICsgZHQxICkgKyAoIHgyIC0geDEgKSAvIGR0MTtcblx0XHRcdHZhciB0MiA9ICggeDIgLSB4MSApIC8gZHQxIC0gKCB4MyAtIHgxICkgLyAoIGR0MSArIGR0MiApICsgKCB4MyAtIHgyICkgLyBkdDI7XG5cblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxuXHRcdFx0dDEgKj0gZHQxO1xuXHRcdFx0dDIgKj0gZHQxO1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHQxLCB0MiApO1xuXG5cdFx0fSxcblxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdFx0dmFyIHQyID0gdCAqIHQ7XG5cdFx0XHR2YXIgdDMgPSB0MiAqIHQ7XG5cdFx0XHRyZXR1cm4gYzAgKyBjMSAqIHQgKyBjMiAqIHQyICsgYzMgKiB0MztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8vXG5cbnZhciB0bXAgPSBuZXcgVmVjdG9yMygpO1xudmFyIHB4ID0gbmV3IEN1YmljUG9seSgpLCBweSA9IG5ldyBDdWJpY1BvbHkoKSwgcHogPSBuZXcgQ3ViaWNQb2x5KCk7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DdXJ2ZTMoIHBvaW50cywgY2xvc2VkLCBjdXJ2ZVR5cGUsIHRlbnNpb24gKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDYXRtdWxsUm9tQ3VydmUzJztcblxuXHR0aGlzLnBvaW50cyA9IHBvaW50cyB8fCBbXTtcblx0dGhpcy5jbG9zZWQgPSBjbG9zZWQgfHwgZmFsc2U7XG5cdHRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlIHx8ICdjZW50cmlwZXRhbCc7XG5cdHRoaXMudGVuc2lvbiA9IHRlbnNpb24gfHwgMC41O1xuXG59XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhdG11bGxSb21DdXJ2ZTM7XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdHZhciBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7XG5cdHZhciBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0dmFyIHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHRpZiAoIHRoaXMuY2xvc2VkICkge1xuXG5cdFx0aW50UG9pbnQgKz0gaW50UG9pbnQgPiAwID8gMCA6ICggTWF0aC5mbG9vciggTWF0aC5hYnMoIGludFBvaW50ICkgLyBsICkgKyAxICkgKiBsO1xuXG5cdH0gZWxzZSBpZiAoIHdlaWdodCA9PT0gMCAmJiBpbnRQb2ludCA9PT0gbCAtIDEgKSB7XG5cblx0XHRpbnRQb2ludCA9IGwgLSAyO1xuXHRcdHdlaWdodCA9IDE7XG5cblx0fVxuXG5cdHZhciBwMCwgcDEsIHAyLCBwMzsgLy8gNCBwb2ludHNcblxuXHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ID4gMCApIHtcblxuXHRcdHAwID0gcG9pbnRzWyAoIGludFBvaW50IC0gMSApICUgbCBdO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBleHRyYXBvbGF0ZSBmaXJzdCBwb2ludFxuXHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIDAgXSwgcG9pbnRzWyAxIF0gKS5hZGQoIHBvaW50c1sgMCBdICk7XG5cdFx0cDAgPSB0bXA7XG5cblx0fVxuXG5cdHAxID0gcG9pbnRzWyBpbnRQb2ludCAlIGwgXTtcblx0cDIgPSBwb2ludHNbICggaW50UG9pbnQgKyAxICkgJSBsIF07XG5cblx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCArIDIgPCBsICkge1xuXG5cdFx0cDMgPSBwb2ludHNbICggaW50UG9pbnQgKyAyICkgJSBsIF07XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGV4dHJhcG9sYXRlIGxhc3QgcG9pbnRcblx0XHR0bXAuc3ViVmVjdG9ycyggcG9pbnRzWyBsIC0gMSBdLCBwb2ludHNbIGwgLSAyIF0gKS5hZGQoIHBvaW50c1sgbCAtIDEgXSApO1xuXHRcdHAzID0gdG1wO1xuXG5cdH1cblxuXHRpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2VudHJpcGV0YWwnIHx8IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgKSB7XG5cblx0XHQvLyBpbml0IENlbnRyaXBldGFsIC8gQ2hvcmRhbCBDYXRtdWxsLVJvbVxuXHRcdHZhciBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTtcblx0XHR2YXIgZHQwID0gTWF0aC5wb3coIHAwLmRpc3RhbmNlVG9TcXVhcmVkKCBwMSApLCBwb3cgKTtcblx0XHR2YXIgZHQxID0gTWF0aC5wb3coIHAxLmRpc3RhbmNlVG9TcXVhcmVkKCBwMiApLCBwb3cgKTtcblx0XHR2YXIgZHQyID0gTWF0aC5wb3coIHAyLmRpc3RhbmNlVG9TcXVhcmVkKCBwMyApLCBwb3cgKTtcblxuXHRcdC8vIHNhZmV0eSBjaGVjayBmb3IgcmVwZWF0ZWQgcG9pbnRzXG5cdFx0aWYgKCBkdDEgPCAxZS00ICkgZHQxID0gMS4wO1xuXHRcdGlmICggZHQwIDwgMWUtNCApIGR0MCA9IGR0MTtcblx0XHRpZiAoIGR0MiA8IDFlLTQgKSBkdDIgPSBkdDE7XG5cblx0XHRweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRweS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRwei5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIGR0MCwgZHQxLCBkdDIgKTtcblxuXHR9IGVsc2UgaWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nICkge1xuXG5cdFx0cHguaW5pdENhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIHRoaXMudGVuc2lvbiApO1xuXHRcdHB5LmluaXRDYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCB0aGlzLnRlbnNpb24gKTtcblx0XHRwei5pbml0Q2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgdGhpcy50ZW5zaW9uICk7XG5cblx0fVxuXG5cdHBvaW50LnNldChcblx0XHRweC5jYWxjKCB3ZWlnaHQgKSxcblx0XHRweS5jYWxjKCB3ZWlnaHQgKSxcblx0XHRwei5jYWxjKCB3ZWlnaHQgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xuXG5cdH1cblxuXHR0aGlzLmNsb3NlZCA9IHNvdXJjZS5jbG9zZWQ7XG5cdHRoaXMuY3VydmVUeXBlID0gc291cmNlLmN1cnZlVHlwZTtcblx0dGhpcy50ZW5zaW9uID0gc291cmNlLnRlbnNpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0ZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7XG5cblx0fVxuXG5cdGRhdGEuY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG5cdGRhdGEuY3VydmVUeXBlID0gdGhpcy5jdXJ2ZVR5cGU7XG5cdGRhdGEudGVuc2lvbiA9IHRoaXMudGVuc2lvbjtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdO1xuXHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb2ludCApICk7XG5cblx0fVxuXG5cdHRoaXMuY2xvc2VkID0ganNvbi5jbG9zZWQ7XG5cdHRoaXMuY3VydmVUeXBlID0ganNvbi5jdXJ2ZVR5cGU7XG5cdHRoaXMudGVuc2lvbiA9IGpzb24udGVuc2lvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKlxuICogQmV6aWVyIEN1cnZlcyBmb3JtdWxhcyBvYnRhaW5lZCBmcm9tXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0LDqXppZXJfY3VydmVcbiAqL1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKCB0LCBwMCwgcDEsIHAyLCBwMyApIHtcblxuXHR2YXIgdjAgPSAoIHAyIC0gcDAgKSAqIDAuNTtcblx0dmFyIHYxID0gKCBwMyAtIHAxICkgKiAwLjU7XG5cdHZhciB0MiA9IHQgKiB0O1xuXHR2YXIgdDMgPSB0ICogdDI7XG5cdHJldHVybiAoIDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEgKSAqIHQzICsgKCAtIDMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxICkgKiB0MiArIHYwICogdCArIHAxO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAwKCB0LCBwICkge1xuXG5cdHZhciBrID0gMSAtIHQ7XG5cdHJldHVybiBrICogayAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDEoIHQsIHAgKSB7XG5cblx0cmV0dXJuIDIgKiAoIDEgLSB0ICkgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMiggdCwgcCApIHtcblxuXHRyZXR1cm4gdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllciggdCwgcDAsIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAwICkgKyBRdWFkcmF0aWNCZXppZXJQMSggdCwgcDEgKSArXG5cdFx0UXVhZHJhdGljQmV6aWVyUDIoIHQsIHAyICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMCggdCwgcCApIHtcblxuXHR2YXIgayA9IDEgLSB0O1xuXHRyZXR1cm4gayAqIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAxKCB0LCBwICkge1xuXG5cdHZhciBrID0gMSAtIHQ7XG5cdHJldHVybiAzICogayAqIGsgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiAzICogKCAxIC0gdCApICogdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDMoIHQsIHAgKSB7XG5cblx0cmV0dXJuIHQgKiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXIoIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdHJldHVybiBDdWJpY0JlemllclAwKCB0LCBwMCApICsgQ3ViaWNCZXppZXJQMSggdCwgcDEgKSArIEN1YmljQmV6aWVyUDIoIHQsIHAyICkgK1xuXHRcdEN1YmljQmV6aWVyUDMoIHQsIHAzICk7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJDdXJ2ZSggdjAsIHYxLCB2MiwgdjMgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYzID0gdjMgfHwgbmV3IFZlY3RvcjIoKTtcblxufVxuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJpY0JlemllckN1cnZlO1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzO1xuXG5cdHBvaW50LnNldChcblx0XHRDdWJpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCwgdjMueCApLFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJDdXJ2ZTMoIHYwLCB2MSwgdjIsIHYzICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZTMnO1xuXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjMgPSB2MyB8fCBuZXcgVmVjdG9yMygpO1xuXG59XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViaWNCZXppZXJDdXJ2ZTM7XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XG5cblx0cG9pbnQuc2V0KFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKSxcblx0XHRDdWJpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiwgdjMueiApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdHRoaXMudjMuY29weSggc291cmNlLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdHRoaXMudjMuZnJvbUFycmF5KCBqc29uLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIExpbmVDdXJ2ZSggdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlJztcblxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7XG5cbn1cblxuTGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuTGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5pc0xpbmVDdXJ2ZSA9IHRydWU7XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG4vLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludEF0ID0gZnVuY3Rpb24gKCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxufTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50ID0gZnVuY3Rpb24gKCAvKiB0ICovICkge1xuXG5cdHZhciB0YW5nZW50ID0gdGhpcy52Mi5jbG9uZSgpLnN1YiggdGhpcy52MSApO1xuXG5cdHJldHVybiB0YW5nZW50Lm5vcm1hbGl6ZSgpO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gTGluZUN1cnZlMyggdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlMyc7XG5cblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpO1xuXG59XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5MaW5lQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTM7XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmlzTGluZUN1cnZlMyA9IHRydWU7XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdGlmICggdCA9PT0gMSApIHtcblxuXHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApO1xuXHRcdHBvaW50Lm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnYxICk7XG5cblx0fVxuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuLy8gTGluZSBjdXJ2ZSBpcyBsaW5lYXIsIHNvIHdlIGNhbiBvdmVyd3JpdGUgZGVmYXVsdCBnZXRQb2ludEF0XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50QXQgPSBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyQ3VydmUoIHYwLCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTtcblxufVxuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1YWRyYXRpY0JlemllckN1cnZlO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSA9IHRydWU7XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcblxuXHRwb2ludC5zZXQoXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllckN1cnZlMyggdjAsIHYxLCB2MiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlMyc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcblxufVxuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZHJhdGljQmV6aWVyQ3VydmUzO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcblxuXHRwb2ludC5zZXQoXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55ICksXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIFNwbGluZUN1cnZlKCBwb2ludHMgLyogYXJyYXkgb2YgVmVjdG9yMiAqLyApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NwbGluZUN1cnZlJztcblxuXHR0aGlzLnBvaW50cyA9IHBvaW50cyB8fCBbXTtcblxufVxuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblNwbGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwbGluZUN1cnZlO1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuaXNTcGxpbmVDdXJ2ZSA9IHRydWU7XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdHZhciBwID0gKCBwb2ludHMubGVuZ3RoIC0gMSApICogdDtcblxuXHR2YXIgaW50UG9pbnQgPSBNYXRoLmZsb29yKCBwICk7XG5cdHZhciB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0dmFyIHAwID0gcG9pbnRzWyBpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxIF07XG5cdHZhciBwMSA9IHBvaW50c1sgaW50UG9pbnQgXTtcblx0dmFyIHAyID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAyID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDEgXTtcblx0dmFyIHAzID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDIgXTtcblxuXHRwb2ludC5zZXQoXG5cdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC54LCBwMS54LCBwMi54LCBwMy54ICksXG5cdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC55LCBwMS55LCBwMi55LCBwMy55IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07XG5cblx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0dGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuXG52YXIgQ3VydmVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRBcmNDdXJ2ZTogQXJjQ3VydmUsXG5cdENhdG11bGxSb21DdXJ2ZTM6IENhdG11bGxSb21DdXJ2ZTMsXG5cdEN1YmljQmV6aWVyQ3VydmU6IEN1YmljQmV6aWVyQ3VydmUsXG5cdEN1YmljQmV6aWVyQ3VydmUzOiBDdWJpY0JlemllckN1cnZlMyxcblx0RWxsaXBzZUN1cnZlOiBFbGxpcHNlQ3VydmUsXG5cdExpbmVDdXJ2ZTogTGluZUN1cnZlLFxuXHRMaW5lQ3VydmUzOiBMaW5lQ3VydmUzLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTogUXVhZHJhdGljQmV6aWVyQ3VydmUsXG5cdFF1YWRyYXRpY0JlemllckN1cnZlMzogUXVhZHJhdGljQmV6aWVyQ3VydmUzLFxuXHRTcGxpbmVDdXJ2ZTogU3BsaW5lQ3VydmVcbn0pO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqXG4gKiovXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcdEN1cnZlZCBQYXRoIC0gYSBjdXJ2ZSBwYXRoIGlzIHNpbXBseSBhIGFycmF5IG9mIGNvbm5lY3RlZFxuICogIGN1cnZlcywgYnV0IHJldGFpbnMgdGhlIGFwaSBvZiBhIGN1cnZlXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIEN1cnZlUGF0aCgpIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N1cnZlUGF0aCc7XG5cblx0dGhpcy5jdXJ2ZXMgPSBbXTtcblx0dGhpcy5hdXRvQ2xvc2UgPSBmYWxzZTsgLy8gQXV0b21hdGljYWxseSBjbG9zZXMgdGhlIHBhdGhcblxufVxuXG5DdXJ2ZVBhdGgucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ3VydmVQYXRoLFxuXG5cdGFkZDogZnVuY3Rpb24gKCBjdXJ2ZSApIHtcblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0fSxcblxuXHRjbG9zZVBhdGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIEFkZCBhIGxpbmUgY3VydmUgaWYgc3RhcnQgYW5kIGVuZCBvZiBsaW5lcyBhcmUgbm90IGNvbm5lY3RlZFxuXHRcdHZhciBzdGFydFBvaW50ID0gdGhpcy5jdXJ2ZXNbIDAgXS5nZXRQb2ludCggMCApO1xuXHRcdHZhciBlbmRQb2ludCA9IHRoaXMuY3VydmVzWyB0aGlzLmN1cnZlcy5sZW5ndGggLSAxIF0uZ2V0UG9pbnQoIDEgKTtcblxuXHRcdGlmICggISBzdGFydFBvaW50LmVxdWFscyggZW5kUG9pbnQgKSApIHtcblxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IExpbmVDdXJ2ZSggZW5kUG9pbnQsIHN0YXJ0UG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gVG8gZ2V0IGFjY3VyYXRlIHBvaW50IHdpdGggcmVmZXJlbmNlIHRvXG5cdC8vIGVudGlyZSBwYXRoIGRpc3RhbmNlIGF0IHRpbWUgdCxcblx0Ly8gZm9sbG93aW5nIGhhcyB0byBiZSBkb25lOlxuXG5cdC8vIDEuIExlbmd0aCBvZiBlYWNoIHN1YiBwYXRoIGhhdmUgdG8gYmUga25vd25cblx0Ly8gMi4gTG9jYXRlIGFuZCBpZGVudGlmeSB0eXBlIG9mIGN1cnZlXG5cdC8vIDMuIEdldCB0IGZvciB0aGUgY3VydmVcblx0Ly8gNC4gUmV0dXJuIGN1cnZlLmdldFBvaW50QXQodCcpXG5cblx0Z2V0UG9pbnQ6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdHZhciBkID0gdCAqIHRoaXMuZ2V0TGVuZ3RoKCk7XG5cdFx0dmFyIGN1cnZlTGVuZ3RocyA9IHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0Ly8gVG8gdGhpbmsgYWJvdXQgYm91bmRhcmllcyBwb2ludHMuXG5cblx0XHR3aGlsZSAoIGkgPCBjdXJ2ZUxlbmd0aHMubGVuZ3RoICkge1xuXG5cdFx0XHRpZiAoIGN1cnZlTGVuZ3Roc1sgaSBdID49IGQgKSB7XG5cblx0XHRcdFx0dmFyIGRpZmYgPSBjdXJ2ZUxlbmd0aHNbIGkgXSAtIGQ7XG5cdFx0XHRcdHZhciBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cblx0XHRcdFx0dmFyIHNlZ21lbnRMZW5ndGggPSBjdXJ2ZS5nZXRMZW5ndGgoKTtcblx0XHRcdFx0dmFyIHUgPSBzZWdtZW50TGVuZ3RoID09PSAwID8gMCA6IDEgLSBkaWZmIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdFx0XHRyZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCggdSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGkgKys7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdC8vIGxvb3Agd2hlcmUgc3VtICE9IDAsIHN1bSA+IGQgLCBzdW0rMSA8ZFxuXG5cdH0sXG5cblx0Ly8gV2UgY2Fubm90IHVzZSB0aGUgZGVmYXVsdCBUSFJFRS5DdXJ2ZSBnZXRQb2ludCgpIHdpdGggZ2V0TGVuZ3RoKCkgYmVjYXVzZSBpblxuXHQvLyBUSFJFRS5DdXJ2ZSwgZ2V0TGVuZ3RoKCkgZGVwZW5kcyBvbiBnZXRQb2ludCgpIGJ1dCBpbiBUSFJFRS5DdXJ2ZVBhdGhcblx0Ly8gZ2V0UG9pbnQoKSBkZXBlbmRzIG9uIGdldExlbmd0aFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGxlbnMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5zWyBsZW5zLmxlbmd0aCAtIDEgXTtcblxuXHR9LFxuXG5cdC8vIGNhY2hlTGVuZ3RocyBtdXN0IGJlIHJlY2FsY3VsYXRlZC5cblx0dXBkYXRlQXJjTGVuZ3RoczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBudWxsO1xuXHRcdHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cblx0fSxcblxuXHQvLyBDb21wdXRlIGxlbmd0aHMgYW5kIGNhY2hlIHRoZW1cblx0Ly8gV2UgY2Fubm90IG92ZXJ3cml0ZSBnZXRMZW5ndGhzKCkgYmVjYXVzZSBVdG9UIG1hcHBpbmcgdXNlcyBpdC5cblxuXHRnZXRDdXJ2ZUxlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIFdlIHVzZSBjYWNoZSB2YWx1ZXMgaWYgY3VydmVzIGFuZCBjYWNoZSBhcnJheSBhcmUgc2FtZSBsZW5ndGhcblxuXHRcdGlmICggdGhpcy5jYWNoZUxlbmd0aHMgJiYgdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoID09PSB0aGlzLmN1cnZlcy5sZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdC8vIEdldCBsZW5ndGggb2Ygc3ViLWN1cnZlXG5cdFx0Ly8gUHVzaCBzdW1zIGludG8gY2FjaGVkIGFycmF5XG5cblx0XHR2YXIgbGVuZ3RocyA9IFtdLCBzdW1zID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHN1bXMgKz0gdGhpcy5jdXJ2ZXNbIGkgXS5nZXRMZW5ndGgoKTtcblx0XHRcdGxlbmd0aHMucHVzaCggc3VtcyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBsZW5ndGhzO1xuXG5cdFx0cmV0dXJuIGxlbmd0aHM7XG5cblx0fSxcblxuXHRnZXRTcGFjZWRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDQwO1xuXG5cdFx0dmFyIHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGkgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Z2V0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCAxMjtcblxuXHRcdHZhciBwb2ludHMgPSBbXSwgbGFzdDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgY3VydmVzID0gdGhpcy5jdXJ2ZXM7IGkgPCBjdXJ2ZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSBjdXJ2ZXNbIGkgXTtcblx0XHRcdHZhciByZXNvbHV0aW9uID0gKCBjdXJ2ZSAmJiBjdXJ2ZS5pc0VsbGlwc2VDdXJ2ZSApID8gZGl2aXNpb25zICogMlxuXHRcdFx0XHQ6ICggY3VydmUgJiYgKCBjdXJ2ZS5pc0xpbmVDdXJ2ZSB8fCBjdXJ2ZS5pc0xpbmVDdXJ2ZTMgKSApID8gMVxuXHRcdFx0XHRcdDogKCBjdXJ2ZSAmJiBjdXJ2ZS5pc1NwbGluZUN1cnZlICkgPyBkaXZpc2lvbnMgKiBjdXJ2ZS5wb2ludHMubGVuZ3RoXG5cdFx0XHRcdFx0XHQ6IGRpdmlzaW9ucztcblxuXHRcdFx0dmFyIHB0cyA9IGN1cnZlLmdldFBvaW50cyggcmVzb2x1dGlvbiApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBwdHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBwb2ludCA9IHB0c1sgaiBdO1xuXG5cdFx0XHRcdGlmICggbGFzdCAmJiBsYXN0LmVxdWFscyggcG9pbnQgKSApIGNvbnRpbnVlOyAvLyBlbnN1cmVzIG5vIGNvbnNlY3V0aXZlIHBvaW50cyBhcmUgZHVwbGljYXRlc1xuXG5cdFx0XHRcdHBvaW50cy5wdXNoKCBwb2ludCApO1xuXHRcdFx0XHRsYXN0ID0gcG9pbnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgJiYgcG9pbnRzLmxlbmd0aCA+IDEgJiYgISBwb2ludHNbIHBvaW50cy5sZW5ndGggLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggcG9pbnRzWyAwIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnZlID0gc291cmNlLmN1cnZlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF1dG9DbG9zZSA9IHNvdXJjZS5hdXRvQ2xvc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEuYXV0b0Nsb3NlID0gdGhpcy5hdXRvQ2xvc2U7XG5cdFx0ZGF0YS5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cdFx0XHRkYXRhLmN1cnZlcy5wdXNoKCBjdXJ2ZS50b0pTT04oKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0ganNvbi5hdXRvQ2xvc2U7XG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IGpzb24uY3VydmVzWyBpIF07XG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBuZXcgQ3VydmVzWyBjdXJ2ZS50eXBlIF0oKS5mcm9tSlNPTiggY3VydmUgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQ3JlYXRlcyBmcmVlIGZvcm0gMmQgcGF0aCB1c2luZyBzZXJpZXMgb2YgcG9pbnRzLCBsaW5lcyBvciBjdXJ2ZXMuXG4gKiovXG5cbmZ1bmN0aW9uIFBhdGgoIHBvaW50cyApIHtcblxuXHRDdXJ2ZVBhdGguY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQYXRoJztcblxuXHR0aGlzLmN1cnJlbnRQb2ludCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0aWYgKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdH1cblxufVxuXG5QYXRoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEN1cnZlUGF0aC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQYXRoLFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tb3ZlVG8oIHBvaW50c1sgMCBdLngsIHBvaW50c1sgMCBdLnkgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmxpbmVUbyggcG9pbnRzWyBpIF0ueCwgcG9pbnRzWyBpIF0ueSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bW92ZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTsgLy8gVE9ETyBjb25zaWRlciByZWZlcmVuY2luZyB2ZWN0b3JzIGluc3RlYWQgb2YgY29weWluZz9cblxuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24gKCB4LCB5ICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IExpbmVDdXJ2ZSggdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSwgbmV3IFZlY3RvcjIoIHgsIHkgKSApO1xuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTtcblxuXHR9LFxuXG5cdHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uICggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IFF1YWRyYXRpY0JlemllckN1cnZlKFxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1B4LCBhQ1B5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0fSxcblxuXHRiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgQ3ViaWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMXgsIGFDUDF5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMngsIGFDUDJ5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0fSxcblxuXHRzcGxpbmVUaHJ1OiBmdW5jdGlvbiAoIHB0cyAvKkFycmF5IG9mIFZlY3RvciovICkge1xuXG5cdFx0dmFyIG5wdHMgPSBbIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCkgXS5jb25jYXQoIHB0cyApO1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IFNwbGluZUN1cnZlKCBucHRzICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHB0c1sgcHRzLmxlbmd0aCAtIDEgXSApO1xuXG5cdH0sXG5cblx0YXJjOiBmdW5jdGlvbiAoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHZhciB4MCA9IHRoaXMuY3VycmVudFBvaW50Lng7XG5cdFx0dmFyIHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzYXJjKCBhWCArIHgwLCBhWSArIHkwLCBhUmFkaXVzLFxuXHRcdFx0YVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdH0sXG5cblx0YWJzYXJjOiBmdW5jdGlvbiAoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0fSxcblxuXHRlbGxpcHNlOiBmdW5jdGlvbiAoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0dmFyIHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcblx0XHR2YXIgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55O1xuXG5cdFx0dGhpcy5hYnNlbGxpcHNlKCBhWCArIHgwLCBhWSArIHkwLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTtcblxuXHR9LFxuXG5cdGFic2VsbGlwc2U6IGZ1bmN0aW9uICggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0aWYgKCB0aGlzLmN1cnZlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pblxuXHRcdFx0dmFyIGZpcnN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMCApO1xuXG5cdFx0XHRpZiAoICEgZmlyc3RQb2ludC5lcXVhbHMoIHRoaXMuY3VycmVudFBvaW50ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5saW5lVG8oIGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR2YXIgbGFzdFBvaW50ID0gY3VydmUuZ2V0UG9pbnQoIDEgKTtcblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBsYXN0UG9pbnQgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0Q3VydmVQYXRoLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggc291cmNlLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gQ3VydmVQYXRoLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdFx0ZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRDdXJ2ZVBhdGgucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmZyb21BcnJheSgganNvbi5jdXJyZW50UG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIERlZmluZXMgYSAyZCBzaGFwZSBwbGFuZSB1c2luZyBwYXRocy5cbiAqKi9cblxuLy8gU1RFUCAxIENyZWF0ZSBhIHBhdGguXG4vLyBTVEVQIDIgVHVybiBwYXRoIGludG8gc2hhcGUuXG4vLyBTVEVQIDMgRXh0cnVkZUdlb21ldHJ5IHRha2VzIGluIFNoYXBlL1NoYXBlc1xuLy8gU1RFUCAzYSAtIEV4dHJhY3QgcG9pbnRzIGZyb20gZWFjaCBzaGFwZSwgdHVybiB0byB2ZXJ0aWNlc1xuLy8gU1RFUCAzYiAtIFRyaWFuZ3VsYXRlIGVhY2ggc2hhcGUsIGFkZCBmYWNlcy5cblxuZnVuY3Rpb24gU2hhcGUoIHBvaW50cyApIHtcblxuXHRQYXRoLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFwZSc7XG5cblx0dGhpcy5ob2xlcyA9IFtdO1xuXG59XG5cblNoYXBlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFBhdGgucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU2hhcGUsXG5cblx0Z2V0UG9pbnRzSG9sZXM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0dmFyIGhvbGVzUHRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGhvbGVzUHRzWyBpIF0gPSB0aGlzLmhvbGVzWyBpIF0uZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBob2xlc1B0cztcblxuXHR9LFxuXG5cdC8vIGdldCBwb2ludHMgb2Ygc2hhcGUgYW5kIGhvbGVzIChrZXlwb2ludHMgYmFzZWQgb24gc2VnbWVudHMgcGFyYW1ldGVyKVxuXG5cdGV4dHJhY3RQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2hhcGU6IHRoaXMuZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKSxcblx0XHRcdGhvbGVzOiB0aGlzLmdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKVxuXG5cdFx0fTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0UGF0aC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaG9sZSA9IHNvdXJjZS5ob2xlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goIGhvbGUuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gUGF0aC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBob2xlID0gdGhpcy5ob2xlc1sgaSBdO1xuXHRcdFx0ZGF0YS5ob2xlcy5wdXNoKCBob2xlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRQYXRoLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0XHR0aGlzLnV1aWQgPSBqc29uLnV1aWQ7XG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaG9sZSA9IGpzb24uaG9sZXNbIGkgXTtcblx0XHRcdHRoaXMuaG9sZXMucHVzaCggbmV3IFBhdGgoKS5mcm9tSlNPTiggaG9sZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaWdodCggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xpZ2h0JztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXHR0aGlzLmludGVuc2l0eSA9IGludGVuc2l0eSAhPT0gdW5kZWZpbmVkID8gaW50ZW5zaXR5IDogMTtcblxuXHR0aGlzLnJlY2VpdmVTaGFkb3cgPSB1bmRlZmluZWQ7XG5cbn1cblxuTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGlnaHQsXG5cblx0aXNMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0XHR0aGlzLmludGVuc2l0eSA9IHNvdXJjZS5pbnRlbnNpdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmNvbG9yID0gdGhpcy5jb2xvci5nZXRIZXgoKTtcblx0XHRkYXRhLm9iamVjdC5pbnRlbnNpdHkgPSB0aGlzLmludGVuc2l0eTtcblxuXHRcdGlmICggdGhpcy5ncm91bmRDb2xvciAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZ3JvdW5kQ29sb3IgPSB0aGlzLmdyb3VuZENvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLmRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5kaXN0YW5jZSA9IHRoaXMuZGlzdGFuY2U7XG5cdFx0aWYgKCB0aGlzLmFuZ2xlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5hbmdsZSA9IHRoaXMuYW5nbGU7XG5cdFx0aWYgKCB0aGlzLmRlY2F5ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5kZWNheSA9IHRoaXMuZGVjYXk7XG5cdFx0aWYgKCB0aGlzLnBlbnVtYnJhICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5wZW51bWJyYSA9IHRoaXMucGVudW1icmE7XG5cblx0XHRpZiAoIHRoaXMuc2hhZG93ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5zaGFkb3cgPSB0aGlzLnNoYWRvdy50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0KCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBza3lDb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ0hlbWlzcGhlcmVMaWdodCc7XG5cblx0dGhpcy5jYXN0U2hhZG93ID0gdW5kZWZpbmVkO1xuXG5cdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy5ncm91bmRDb2xvciA9IG5ldyBDb2xvciggZ3JvdW5kQ29sb3IgKTtcblxufVxuXG5IZW1pc3BoZXJlTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSGVtaXNwaGVyZUxpZ2h0LFxuXG5cdGlzSGVtaXNwaGVyZUxpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoIHNvdXJjZS5ncm91bmRDb2xvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaWdodFNoYWRvdyggY2FtZXJhICkge1xuXG5cdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdHRoaXMuYmlhcyA9IDA7XG5cdHRoaXMucmFkaXVzID0gMTtcblxuXHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMiggNTEyLCA1MTIgKTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBMaWdodFNoYWRvdy5wcm90b3R5cGUsIHtcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xuXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoIHNvdXJjZS5tYXBTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3QgPSB7fTtcblxuXHRcdGlmICggdGhpcy5iaWFzICE9PSAwICkgb2JqZWN0LmJpYXMgPSB0aGlzLmJpYXM7XG5cdFx0aWYgKCB0aGlzLnJhZGl1cyAhPT0gMSApIG9iamVjdC5yYWRpdXMgPSB0aGlzLnJhZGl1cztcblx0XHRpZiAoIHRoaXMubWFwU2l6ZS54ICE9PSA1MTIgfHwgdGhpcy5tYXBTaXplLnkgIT09IDUxMiApIG9iamVjdC5tYXBTaXplID0gdGhpcy5tYXBTaXplLnRvQXJyYXkoKTtcblxuXHRcdG9iamVjdC5jYW1lcmEgPSB0aGlzLmNhbWVyYS50b0pTT04oIGZhbHNlICkub2JqZWN0O1xuXHRcdGRlbGV0ZSBvYmplY3QuY2FtZXJhLm1hdHJpeDtcblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTcG90TGlnaHRTaGFkb3coKSB7XG5cblx0TGlnaHRTaGFkb3cuY2FsbCggdGhpcywgbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA1MCwgMSwgMC41LCA1MDAgKSApO1xuXG59XG5cblNwb3RMaWdodFNoYWRvdy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFNoYWRvdy5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTcG90TGlnaHRTaGFkb3csXG5cblx0aXNTcG90TGlnaHRTaGFkb3c6IHRydWUsXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0dmFyIGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG5cdFx0dmFyIGZvdiA9IF9NYXRoLlJBRDJERUcgKiAyICogbGlnaHQuYW5nbGU7XG5cdFx0dmFyIGFzcGVjdCA9IHRoaXMubWFwU2l6ZS53aWR0aCAvIHRoaXMubWFwU2l6ZS5oZWlnaHQ7XG5cdFx0dmFyIGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7XG5cblx0XHRpZiAoIGZvdiAhPT0gY2FtZXJhLmZvdiB8fCBhc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgfHwgZmFyICE9PSBjYW1lcmEuZmFyICkge1xuXG5cdFx0XHRjYW1lcmEuZm92ID0gZm92O1xuXHRcdFx0Y2FtZXJhLmFzcGVjdCA9IGFzcGVjdDtcblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XG5cdFx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3BvdExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwb3RMaWdodCc7XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ3Bvd2VyJywge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNykgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggcG93ZXIgKSB7XG5cblx0XHRcdC8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS5cblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE3KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0XHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJO1xuXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5kaXN0YW5jZSA9ICggZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApID8gZGlzdGFuY2UgOiAwO1xuXHR0aGlzLmFuZ2xlID0gKCBhbmdsZSAhPT0gdW5kZWZpbmVkICkgPyBhbmdsZSA6IE1hdGguUEkgLyAzO1xuXHR0aGlzLnBlbnVtYnJhID0gKCBwZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgPyBwZW51bWJyYSA6IDA7XG5cdHRoaXMuZGVjYXkgPSAoIGRlY2F5ICE9PSB1bmRlZmluZWQgKSA/IGRlY2F5IDogMTtcdC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHR0aGlzLnNoYWRvdyA9IG5ldyBTcG90TGlnaHRTaGFkb3coKTtcblxufVxuXG5TcG90TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3BvdExpZ2h0LFxuXG5cdGlzU3BvdExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuYW5nbGUgPSBzb3VyY2UuYW5nbGU7XG5cdFx0dGhpcy5wZW51bWJyYSA9IHNvdXJjZS5wZW51bWJyYTtcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xuXG5cdFx0dGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBQb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdwb3dlcicsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCBwb3dlciApIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTtcblxuXHRcdH1cblx0fSApO1xuXG5cdHRoaXMuZGlzdGFuY2UgPSAoIGRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSA/IGRpc3RhbmNlIDogMDtcblx0dGhpcy5kZWNheSA9ICggZGVjYXkgIT09IHVuZGVmaW5lZCApID8gZGVjYXkgOiAxO1x0Ly8gZm9yIHBoeXNpY2FsbHkgY29ycmVjdCBsaWdodHMsIHNob3VsZCBiZSAyLlxuXG5cdHRoaXMuc2hhZG93ID0gbmV3IExpZ2h0U2hhZG93KCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDkwLCAxLCAwLjUsIDUwMCApICk7XG5cbn1cblxuUG9pbnRMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQb2ludExpZ2h0LFxuXG5cdGlzUG9pbnRMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kaXN0YW5jZSA9IHNvdXJjZS5kaXN0YW5jZTtcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xuXG5cdFx0dGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBhcm9zZSAvIGh0dHA6Ly9naXRodWIuY29tL2Fyb3NlXG4gKi9cblxuZnVuY3Rpb24gT3J0aG9ncmFwaGljQ2FtZXJhKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHtcblxuXHRDYW1lcmEuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdPcnRob2dyYXBoaWNDYW1lcmEnO1xuXG5cdHRoaXMuem9vbSA9IDE7XG5cdHRoaXMudmlldyA9IG51bGw7XG5cblx0dGhpcy5sZWZ0ID0gKCBsZWZ0ICE9PSB1bmRlZmluZWQgKSA/IGxlZnQgOiAtIDE7XG5cdHRoaXMucmlnaHQgPSAoIHJpZ2h0ICE9PSB1bmRlZmluZWQgKSA/IHJpZ2h0IDogMTtcblx0dGhpcy50b3AgPSAoIHRvcCAhPT0gdW5kZWZpbmVkICkgPyB0b3AgOiAxO1xuXHR0aGlzLmJvdHRvbSA9ICggYm90dG9tICE9PSB1bmRlZmluZWQgKSA/IGJvdHRvbSA6IC0gMTtcblxuXHR0aGlzLm5lYXIgPSAoIG5lYXIgIT09IHVuZGVmaW5lZCApID8gbmVhciA6IDAuMTtcblx0dGhpcy5mYXIgPSAoIGZhciAhPT0gdW5kZWZpbmVkICkgPyBmYXIgOiAyMDAwO1xuXG5cdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG59XG5cbk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDYW1lcmEucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogT3J0aG9ncmFwaGljQ2FtZXJhLFxuXG5cdGlzT3J0aG9ncmFwaGljQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRDYW1lcmEucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMubGVmdCA9IHNvdXJjZS5sZWZ0O1xuXHRcdHRoaXMucmlnaHQgPSBzb3VyY2UucmlnaHQ7XG5cdFx0dGhpcy50b3AgPSBzb3VyY2UudG9wO1xuXHRcdHRoaXMuYm90dG9tID0gc291cmNlLmJvdHRvbTtcblx0XHR0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjtcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XG5cblx0XHR0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTtcblx0XHR0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0Vmlld09mZnNldDogZnVuY3Rpb24gKCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZHggPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvICggMiAqIHRoaXMuem9vbSApO1xuXHRcdHZhciBkeSA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0dmFyIGN4ID0gKCB0aGlzLnJpZ2h0ICsgdGhpcy5sZWZ0ICkgLyAyO1xuXHRcdHZhciBjeSA9ICggdGhpcy50b3AgKyB0aGlzLmJvdHRvbSApIC8gMjtcblxuXHRcdHZhciBsZWZ0ID0gY3ggLSBkeDtcblx0XHR2YXIgcmlnaHQgPSBjeCArIGR4O1xuXHRcdHZhciB0b3AgPSBjeSArIGR5O1xuXHRcdHZhciBib3R0b20gPSBjeSAtIGR5O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQgKSB7XG5cblx0XHRcdHZhciB6b29tVyA9IHRoaXMuem9vbSAvICggdGhpcy52aWV3LndpZHRoIC8gdGhpcy52aWV3LmZ1bGxXaWR0aCApO1xuXHRcdFx0dmFyIHpvb21IID0gdGhpcy56b29tIC8gKCB0aGlzLnZpZXcuaGVpZ2h0IC8gdGhpcy52aWV3LmZ1bGxIZWlnaHQgKTtcblx0XHRcdHZhciBzY2FsZVcgPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvIHRoaXMudmlldy53aWR0aDtcblx0XHRcdHZhciBzY2FsZUggPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvIHRoaXMudmlldy5oZWlnaHQ7XG5cblx0XHRcdGxlZnQgKz0gc2NhbGVXICogKCB0aGlzLnZpZXcub2Zmc2V0WCAvIHpvb21XICk7XG5cdFx0XHRyaWdodCA9IGxlZnQgKyBzY2FsZVcgKiAoIHRoaXMudmlldy53aWR0aCAvIHpvb21XICk7XG5cdFx0XHR0b3AgLT0gc2NhbGVIICogKCB0aGlzLnZpZXcub2Zmc2V0WSAvIHpvb21IICk7XG5cdFx0XHRib3R0b20gPSB0b3AgLSBzY2FsZUggKiAoIHRoaXMudmlldy5oZWlnaHQgLyB6b29tSCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VPcnRob2dyYXBoaWMoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgdGhpcy5uZWFyLCB0aGlzLmZhciApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0Lnpvb20gPSB0aGlzLnpvb207XG5cdFx0ZGF0YS5vYmplY3QubGVmdCA9IHRoaXMubGVmdDtcblx0XHRkYXRhLm9iamVjdC5yaWdodCA9IHRoaXMucmlnaHQ7XG5cdFx0ZGF0YS5vYmplY3QudG9wID0gdGhpcy50b3A7XG5cdFx0ZGF0YS5vYmplY3QuYm90dG9tID0gdGhpcy5ib3R0b207XG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodFNoYWRvdyggKSB7XG5cblx0TGlnaHRTaGFkb3cuY2FsbCggdGhpcywgbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggLSA1LCA1LCA1LCAtIDUsIDAuNSwgNTAwICkgKTtcblxufVxuXG5EaXJlY3Rpb25hbExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IERpcmVjdGlvbmFsTGlnaHRTaGFkb3dcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdGlvbmFsTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdEaXJlY3Rpb25hbExpZ2h0JztcblxuXHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApO1xuXHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdHRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0dGhpcy5zaGFkb3cgPSBuZXcgRGlyZWN0aW9uYWxMaWdodFNoYWRvdygpO1xuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRGlyZWN0aW9uYWxMaWdodCxcblxuXHRpc0RpcmVjdGlvbmFsTGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpO1xuXG5cdFx0dGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEFtYmllbnRMaWdodCggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ0FtYmllbnRMaWdodCc7XG5cblx0dGhpcy5jYXN0U2hhZG93ID0gdW5kZWZpbmVkO1xuXG59XG5cbkFtYmllbnRMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBbWJpZW50TGlnaHQsXG5cblx0aXNBbWJpZW50TGlnaHQ6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWJlbG5hdGlvbiAvIGh0dHA6Ly9naXRodWIuY29tL2FiZWxuYXRpb25cbiAqL1xuXG5mdW5jdGlvbiBSZWN0QXJlYUxpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmVjdEFyZWFMaWdodCc7XG5cblx0dGhpcy53aWR0aCA9ICggd2lkdGggIT09IHVuZGVmaW5lZCApID8gd2lkdGggOiAxMDtcblx0dGhpcy5oZWlnaHQgPSAoIGhlaWdodCAhPT0gdW5kZWZpbmVkICkgPyBoZWlnaHQgOiAxMDtcblxufVxuXG5SZWN0QXJlYUxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFJlY3RBcmVhTGlnaHQsXG5cblx0aXNSZWN0QXJlYUxpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLndpZHRoID0gc291cmNlLndpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gc291cmNlLmhlaWdodDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IExpZ2h0LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3Qud2lkdGggPSB0aGlzLndpZHRoO1xuXHRcdGRhdGEub2JqZWN0LmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBNYXRlcmlhbExvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdGVyaWFsTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdG9uTG9hZCggc2NvcGUucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIHRleHR1cmVzID0gdGhpcy50ZXh0dXJlcztcblxuXHRcdGZ1bmN0aW9uIGdldFRleHR1cmUoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsTG9hZGVyOiBVbmRlZmluZWQgdGV4dHVyZScsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZXNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdHZhciBtYXRlcmlhbCA9IG5ldyBNYXRlcmlhbHNbIGpzb24udHlwZSBdKCk7XG5cblx0XHRpZiAoIGpzb24udXVpZCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXVpZCA9IGpzb24udXVpZDtcblx0XHRpZiAoIGpzb24ubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24uY29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yLnNldEhleCgganNvbi5jb2xvciApO1xuXHRcdGlmICgganNvbi5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzcyA9IGpzb24ucm91Z2huZXNzO1xuXHRcdGlmICgganNvbi5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzcyA9IGpzb24ubWV0YWxuZXNzO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmUuc2V0SGV4KCBqc29uLmVtaXNzaXZlICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhci5zZXRIZXgoIGpzb24uc3BlY3VsYXIgKTtcblx0XHRpZiAoIGpzb24uc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGluaW5lc3MgPSBqc29uLnNoaW5pbmVzcztcblx0XHRpZiAoIGpzb24uY2xlYXJDb2F0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhckNvYXQgPSBqc29uLmNsZWFyQ29hdDtcblx0XHRpZiAoIGpzb24uY2xlYXJDb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgPSBqc29uLmNsZWFyQ29hdFJvdWdobmVzcztcblx0XHRpZiAoIGpzb24udmVydGV4Q29sb3JzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBqc29uLnZlcnRleENvbG9ycztcblx0XHRpZiAoIGpzb24uZm9nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mb2cgPSBqc29uLmZvZztcblx0XHRpZiAoIGpzb24uZmxhdFNoYWRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5mbGF0U2hhZGluZztcblx0XHRpZiAoIGpzb24uYmxlbmRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kaW5nID0ganNvbi5ibGVuZGluZztcblx0XHRpZiAoIGpzb24uY29tYmluZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29tYmluZSA9IGpzb24uY29tYmluZTtcblx0XHRpZiAoIGpzb24uc2lkZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2lkZSA9IGpzb24uc2lkZTtcblx0XHRpZiAoIGpzb24ub3BhY2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwub3BhY2l0eSA9IGpzb24ub3BhY2l0eTtcblx0XHRpZiAoIGpzb24udHJhbnNwYXJlbnQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0ganNvbi50cmFuc3BhcmVudDtcblx0XHRpZiAoIGpzb24uYWxwaGFUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYVRlc3QgPSBqc29uLmFscGhhVGVzdDtcblx0XHRpZiAoIGpzb24uZGVwdGhUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFRlc3QgPSBqc29uLmRlcHRoVGVzdDtcblx0XHRpZiAoIGpzb24uZGVwdGhXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhXcml0ZSA9IGpzb24uZGVwdGhXcml0ZTtcblx0XHRpZiAoIGpzb24uY29sb3JXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3JXcml0ZSA9IGpzb24uY29sb3JXcml0ZTtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWUgPSBqc29uLndpcmVmcmFtZTtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggPSBqc29uLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWNhcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWNhcCA9IGpzb24ud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWpvaW4gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVqb2luID0ganNvbi53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICgganNvbi5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm90YXRpb24gPSBqc29uLnJvdGF0aW9uO1xuXG5cdFx0aWYgKCBqc29uLmxpbmV3aWR0aCAhPT0gMSApIG1hdGVyaWFsLmxpbmV3aWR0aCA9IGpzb24ubGluZXdpZHRoO1xuXHRcdGlmICgganNvbi5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplO1xuXHRcdGlmICgganNvbi5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5nYXBTaXplID0ganNvbi5nYXBTaXplO1xuXHRcdGlmICgganNvbi5zY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2NhbGUgPSBqc29uLnNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQgPSBqc29uLnBvbHlnb25PZmZzZXQ7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzID0ganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIGpzb24uc2tpbm5pbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNraW5uaW5nID0ganNvbi5za2lubmluZztcblx0XHRpZiAoIGpzb24ubW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tb3JwaFRhcmdldHMgPSBqc29uLm1vcnBoVGFyZ2V0cztcblx0XHRpZiAoIGpzb24uZGl0aGVyaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXRoZXJpbmcgPSBqc29uLmRpdGhlcmluZztcblxuXHRcdGlmICgganNvbi52aXNpYmxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52aXNpYmxlID0ganNvbi52aXNpYmxlO1xuXHRcdGlmICgganNvbi51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xuXG5cdFx0Ly8gU2hhZGVyIE1hdGVyaWFsXG5cblx0XHRpZiAoIGpzb24udW5pZm9ybXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4ganNvbi51bmlmb3JtcyApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybSA9IGpzb24udW5pZm9ybXNbIG5hbWUgXTtcblxuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdID0ge307XG5cblx0XHRcdFx0c3dpdGNoICggdW5pZm9ybS50eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAndCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gZ2V0VGV4dHVyZSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdjJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjInOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3YzJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2NCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnbTQnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZWZpbmVzID0ganNvbi5kZWZpbmVzO1xuXHRcdGlmICgganNvbi52ZXJ0ZXhTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZlcnRleFNoYWRlciA9IGpzb24udmVydGV4U2hhZGVyO1xuXHRcdGlmICgganNvbi5mcmFnbWVudFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgPSBqc29uLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0Ly8gRGVwcmVjYXRlZFxuXG5cdFx0aWYgKCBqc29uLnNoYWRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5zaGFkaW5nID09PSAxOyAvLyBUSFJFRS5GbGF0U2hhZGluZ1xuXG5cdFx0Ly8gZm9yIFBvaW50c01hdGVyaWFsXG5cblx0XHRpZiAoIGpzb24uc2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2l6ZSA9IGpzb24uc2l6ZTtcblx0XHRpZiAoIGpzb24uc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPSBqc29uLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdC8vIG1hcHNcblxuXHRcdGlmICgganNvbi5tYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1hcCA9IGdldFRleHR1cmUoIGpzb24ubWFwICk7XG5cblx0XHRpZiAoIGpzb24uYWxwaGFNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWF0ZXJpYWwuYWxwaGFNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFscGhhTWFwICk7XG5cdFx0XHRtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uYnVtcE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcE1hcCA9IGdldFRleHR1cmUoIGpzb24uYnVtcE1hcCApO1xuXHRcdGlmICgganNvbi5idW1wU2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJ1bXBTY2FsZSA9IGpzb24uYnVtcFNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLm5vcm1hbE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwID0gZ2V0VGV4dHVyZSgganNvbi5ub3JtYWxNYXAgKTtcblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwVHlwZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9IGpzb24ubm9ybWFsTWFwVHlwZTtcblx0XHRpZiAoIGpzb24ubm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vcm1hbFNjYWxlID0ganNvbi5ub3JtYWxTY2FsZTtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBub3JtYWxTY2FsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBCbGVuZGVyIGV4cG9ydGVyIHVzZWQgdG8gZXhwb3J0IGEgc2NhbGFyLiBTZWUgIzc0NTlcblxuXHRcdFx0XHRub3JtYWxTY2FsZSA9IFsgbm9ybWFsU2NhbGUsIG5vcm1hbFNjYWxlIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWwubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggbm9ybWFsU2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZGlzcGxhY2VtZW50TWFwICk7XG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudFNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IGpzb24uZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudEJpYXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXMgPSBqc29uLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHRpZiAoIGpzb24ucm91Z2huZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnJvdWdobmVzc01hcCApO1xuXHRcdGlmICgganNvbi5tZXRhbG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ubWV0YWxuZXNzTWFwICk7XG5cblx0XHRpZiAoIGpzb24uZW1pc3NpdmVNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlTWFwID0gZ2V0VGV4dHVyZSgganNvbi5lbWlzc2l2ZU1hcCApO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgPSBqc29uLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhck1hcCA9IGdldFRleHR1cmUoIGpzb24uc3BlY3VsYXJNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbnZNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcCA9IGdldFRleHR1cmUoIGpzb24uZW52TWFwICk7XG5cdFx0aWYgKCBqc29uLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5ID0ganNvbi5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSBqc29uLnJlZmxlY3Rpdml0eTtcblxuXHRcdGlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmxpZ2h0TWFwICk7XG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IGpzb24ubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hb01hcCApO1xuXHRcdGlmICgganNvbi5hb01hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSBqc29uLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZ3JhZGllbnRNYXAgKTtcblxuXHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFRleHR1cmVzOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbVxuICovXG5cbnZhciBMb2FkZXJVdGlscyA9IHtcblxuXHRkZWNvZGVUZXh0OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKCBhcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQXZvaWQgdGhlIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkpIHNob3J0Y3V0LCB3aGljaFxuXHRcdC8vIHRocm93cyBhIFwibWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIiBlcnJvciBmb3IgbGFyZ2UgYXJyYXlzLlxuXG5cdFx0dmFyIHMgPSAnJztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gSW1wbGljaXRseSBhc3N1bWVzIGxpdHRsZS1lbmRpYW4uXG5cdFx0XHRzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGFycmF5WyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIE1lcmdlcyBtdWx0aS1ieXRlIHV0Zi04IGNoYXJhY3RlcnMuXG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggZXNjYXBlKCBzICkgKTtcblxuXHR9LFxuXG5cdGV4dHJhY3RVcmxCYXNlOiBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdHZhciBpbmRleCA9IHVybC5sYXN0SW5kZXhPZiggJy8nICk7XG5cblx0XHRpZiAoIGluZGV4ID09PSAtIDEgKSByZXR1cm4gJy4vJztcblxuXHRcdHJldHVybiB1cmwuc3Vic3RyKCAwLCBpbmRleCArIDEgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXJHZW9tZXRyeUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJHZW9tZXRyeUxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0dmFyIGluZGV4ID0ganNvbi5kYXRhLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgdHlwZWRBcnJheSA9IG5ldyBUWVBFRF9BUlJBWVNbIGluZGV4LnR5cGUgXSggaW5kZXguYXJyYXkgKTtcblx0XHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCAxICkgKTtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGVzID0ganNvbi5kYXRhLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgYXR0cmlidXRlLnR5cGUgXSggYXR0cmlidXRlLmFycmF5ICk7XG5cblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgga2V5LCBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICkgKTtcblxuXHRcdH1cblxuXHRcdHZhciBncm91cHMgPSBqc29uLmRhdGEuZ3JvdXBzIHx8IGpzb24uZGF0YS5kcmF3Y2FsbHMgfHwganNvbi5kYXRhLm9mZnNldHM7XG5cblx0XHRpZiAoIGdyb3VwcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBncm91cHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRcdGdlb21ldHJ5LmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0ganNvbi5kYXRhLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0aWYgKCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjZW50ZXIuZnJvbUFycmF5KCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoIGNlbnRlciwgYm91bmRpbmdTcGhlcmUucmFkaXVzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbnZhciBUWVBFRF9BUlJBWVMgPSB7XG5cdEludDhBcnJheTogSW50OEFycmF5LFxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxuXHQvLyBXb3JrYXJvdW5kIGZvciBJRTExIHByZSBLQjI5Mjk0MzcuIFNlZSAjMTE0NDBcblx0VWludDhDbGFtcGVkQXJyYXk6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OENsYW1wZWRBcnJheSA6IFVpbnQ4QXJyYXksXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXG5cdFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcblx0SW50MzJBcnJheTogSW50MzJBcnJheSxcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuXHRGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcblx0RmxvYXQ2NEFycmF5OiBGbG9hdDY0QXJyYXlcbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMb2FkZXIoKSB7fVxuXG5Mb2FkZXIuSGFuZGxlcnMgPSB7XG5cblx0aGFuZGxlcnM6IFtdLFxuXG5cdGFkZDogZnVuY3Rpb24gKCByZWdleCwgbG9hZGVyICkge1xuXG5cdFx0dGhpcy5oYW5kbGVycy5wdXNoKCByZWdleCwgbG9hZGVyICk7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICggZmlsZSApIHtcblxuXHRcdHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdHZhciByZWdleCA9IGhhbmRsZXJzWyBpIF07XG5cdFx0XHR2YXIgbG9hZGVyID0gaGFuZGxlcnNbIGkgKyAxIF07XG5cblx0XHRcdGlmICggcmVnZXgudGVzdCggZmlsZSApICkge1xuXG5cdFx0XHRcdHJldHVybiBsb2FkZXI7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxufTtcblxuT2JqZWN0LmFzc2lnbiggTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRvbkxvYWRTdGFydDogZnVuY3Rpb24gKCkge30sXG5cblx0b25Mb2FkUHJvZ3Jlc3M6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdG9uTG9hZENvbXBsZXRlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRpbml0TWF0ZXJpYWxzOiBmdW5jdGlvbiAoIG1hdGVyaWFscywgdGV4dHVyZVBhdGgsIGNyb3NzT3JpZ2luICkge1xuXG5cdFx0dmFyIGFycmF5ID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBtYXRlcmlhbHMubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRhcnJheVsgaSBdID0gdGhpcy5jcmVhdGVNYXRlcmlhbCggbWF0ZXJpYWxzWyBpIF0sIHRleHR1cmVQYXRoLCBjcm9zc09yaWdpbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0Y3JlYXRlTWF0ZXJpYWw6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIEJsZW5kaW5nTW9kZSA9IHtcblx0XHRcdE5vQmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0XHROb3JtYWxCbGVuZGluZzogTm9ybWFsQmxlbmRpbmcsXG5cdFx0XHRBZGRpdGl2ZUJsZW5kaW5nOiBBZGRpdGl2ZUJsZW5kaW5nLFxuXHRcdFx0U3VidHJhY3RpdmVCbGVuZGluZzogU3VidHJhY3RpdmVCbGVuZGluZyxcblx0XHRcdE11bHRpcGx5QmxlbmRpbmc6IE11bHRpcGx5QmxlbmRpbmcsXG5cdFx0XHRDdXN0b21CbGVuZGluZzogQ3VzdG9tQmxlbmRpbmdcblx0XHR9O1xuXG5cdFx0dmFyIGNvbG9yID0gbmV3IENvbG9yKCk7XG5cdFx0dmFyIHRleHR1cmVMb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlcigpO1xuXHRcdHZhciBtYXRlcmlhbExvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU1hdGVyaWFsKCBtLCB0ZXh0dXJlUGF0aCwgY3Jvc3NPcmlnaW4gKSB7XG5cblx0XHRcdC8vIGNvbnZlcnQgZnJvbSBvbGQgbWF0ZXJpYWwgZm9ybWF0XG5cblx0XHRcdHZhciB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggcGF0aCwgcmVwZWF0LCBvZmZzZXQsIHdyYXAsIGFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0dmFyIGZ1bGxQYXRoID0gdGV4dHVyZVBhdGggKyBwYXRoO1xuXHRcdFx0XHR2YXIgbG9hZGVyID0gTG9hZGVyLkhhbmRsZXJzLmdldCggZnVsbFBhdGggKTtcblxuXHRcdFx0XHR2YXIgdGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIGxvYWRlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUgPSBsb2FkZXIubG9hZCggZnVsbFBhdGggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZUxvYWRlci5zZXRDcm9zc09yaWdpbiggY3Jvc3NPcmlnaW4gKTtcblx0XHRcdFx0XHR0ZXh0dXJlID0gdGV4dHVyZUxvYWRlci5sb2FkKCBmdWxsUGF0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHJlcGVhdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCByZXBlYXQgKTtcblxuXHRcdFx0XHRcdGlmICggcmVwZWF0WyAwIF0gIT09IDEgKSB0ZXh0dXJlLndyYXBTID0gUmVwZWF0V3JhcHBpbmc7XG5cdFx0XHRcdFx0aWYgKCByZXBlYXRbIDEgXSAhPT0gMSApIHRleHR1cmUud3JhcFQgPSBSZXBlYXRXcmFwcGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggb2Zmc2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggd3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCB3cmFwWyAwIF0gPT09ICdyZXBlYXQnICkgdGV4dHVyZS53cmFwUyA9IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0XHRcdGlmICggd3JhcFsgMCBdID09PSAnbWlycm9yJyApIHRleHR1cmUud3JhcFMgPSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRcdFx0aWYgKCB3cmFwWyAxIF0gPT09ICdyZXBlYXQnICkgdGV4dHVyZS53cmFwVCA9IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0XHRcdGlmICggd3JhcFsgMSBdID09PSAnbWlycm9yJyApIHRleHR1cmUud3JhcFQgPSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuYW5pc290cm9weSA9IGFuaXNvdHJvcHk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB1dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHRcdFx0dGV4dHVyZXNbIHV1aWQgXSA9IHRleHR1cmU7XG5cblx0XHRcdFx0cmV0dXJuIHV1aWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0dmFyIGpzb24gPSB7XG5cdFx0XHRcdHV1aWQ6IF9NYXRoLmdlbmVyYXRlVVVJRCgpLFxuXHRcdFx0XHR0eXBlOiAnTWVzaExhbWJlcnRNYXRlcmlhbCdcblx0XHRcdH07XG5cblx0XHRcdGZvciAoIHZhciBuYW1lIGluIG0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbHVlID0gbVsgbmFtZSBdO1xuXG5cdFx0XHRcdHN3aXRjaCAoIG5hbWUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdEYmdDb2xvcic6XG5cdFx0XHRcdFx0Y2FzZSAnRGJnSW5kZXgnOlxuXHRcdFx0XHRcdGNhc2UgJ29wdGljYWxEZW5zaXR5Jzpcblx0XHRcdFx0XHRjYXNlICdpbGx1bWluYXRpb24nOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRGJnTmFtZSc6XG5cdFx0XHRcdFx0XHRqc29uLm5hbWUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2JsZW5kaW5nJzpcblx0XHRcdFx0XHRcdGpzb24uYmxlbmRpbmcgPSBCbGVuZGluZ01vZGVbIHZhbHVlIF07XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvckFtYmllbnQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFtYmllbnQnOlxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOicsIG5hbWUsICdpcyBubyBsb25nZXIgc3VwcG9ydGVkLicgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yRGlmZnVzZSc6XG5cdFx0XHRcdFx0XHRqc29uLmNvbG9yID0gY29sb3IuZnJvbUFycmF5KCB2YWx1ZSApLmdldEhleCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JTcGVjdWxhcic6XG5cdFx0XHRcdFx0XHRqc29uLnNwZWN1bGFyID0gY29sb3IuZnJvbUFycmF5KCB2YWx1ZSApLmdldEhleCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JFbWlzc2l2ZSc6XG5cdFx0XHRcdFx0XHRqc29uLmVtaXNzaXZlID0gY29sb3IuZnJvbUFycmF5KCB2YWx1ZSApLmdldEhleCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3BlY3VsYXJDb2VmJzpcblx0XHRcdFx0XHRcdGpzb24uc2hpbmluZXNzID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaGFkaW5nJzpcblx0XHRcdFx0XHRcdGlmICggdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Jhc2ljJyApIGpzb24udHlwZSA9ICdNZXNoQmFzaWNNYXRlcmlhbCc7XG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdwaG9uZycgKSBqc29uLnR5cGUgPSAnTWVzaFBob25nTWF0ZXJpYWwnO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAnc3RhbmRhcmQnICkganNvbi50eXBlID0gJ01lc2hTdGFuZGFyZE1hdGVyaWFsJztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcERpZmZ1c2UnOlxuXHRcdFx0XHRcdFx0anNvbi5tYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwRGlmZnVzZVJlcGVhdCwgbS5tYXBEaWZmdXNlT2Zmc2V0LCBtLm1hcERpZmZ1c2VXcmFwLCBtLm1hcERpZmZ1c2VBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRGlmZnVzZUFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmUnOlxuXHRcdFx0XHRcdFx0anNvbi5lbWlzc2l2ZU1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBFbWlzc2l2ZVJlcGVhdCwgbS5tYXBFbWlzc2l2ZU9mZnNldCwgbS5tYXBFbWlzc2l2ZVdyYXAsIG0ubWFwRW1pc3NpdmVBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBFbWlzc2l2ZVJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmVPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEVtaXNzaXZlV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmVBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0Jzpcblx0XHRcdFx0XHRcdGpzb24ubGlnaHRNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwTGlnaHRSZXBlYXQsIG0ubWFwTGlnaHRPZmZzZXQsIG0ubWFwTGlnaHRXcmFwLCBtLm1hcExpZ2h0QW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTGlnaHRSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0T2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBMaWdodFdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0QW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBBTyc6XG5cdFx0XHRcdFx0XHRqc29uLmFvTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcEFPUmVwZWF0LCBtLm1hcEFPT2Zmc2V0LCBtLm1hcEFPV3JhcCwgbS5tYXBBT0FuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEFPUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBT09mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQU9XcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBBT0FuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcCc6XG5cdFx0XHRcdFx0XHRqc29uLmJ1bXBNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwQnVtcFJlcGVhdCwgbS5tYXBCdW1wT2Zmc2V0LCBtLm1hcEJ1bXBXcmFwLCBtLm1hcEJ1bXBBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wU2NhbGUnOlxuXHRcdFx0XHRcdFx0anNvbi5idW1wU2NhbGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWwnOlxuXHRcdFx0XHRcdFx0anNvbi5ub3JtYWxNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwTm9ybWFsUmVwZWF0LCBtLm1hcE5vcm1hbE9mZnNldCwgbS5tYXBOb3JtYWxXcmFwLCBtLm1hcE5vcm1hbEFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbEZhY3Rvcic6XG5cdFx0XHRcdFx0XHRqc29uLm5vcm1hbFNjYWxlID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWxSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbE9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhcic6XG5cdFx0XHRcdFx0XHRqc29uLnNwZWN1bGFyTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcFNwZWN1bGFyUmVwZWF0LCBtLm1hcFNwZWN1bGFyT2Zmc2V0LCBtLm1hcFNwZWN1bGFyV3JhcCwgbS5tYXBTcGVjdWxhckFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcFNwZWN1bGFyUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhck9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwU3BlY3VsYXJXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhckFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzJzpcblx0XHRcdFx0XHRcdGpzb24ubWV0YWxuZXNzTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcE1ldGFsbmVzc1JlcGVhdCwgbS5tYXBNZXRhbG5lc3NPZmZzZXQsIG0ubWFwTWV0YWxuZXNzV3JhcCwgbS5tYXBNZXRhbG5lc3NBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBNZXRhbG5lc3NSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE1ldGFsbmVzc09mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3MnOlxuXHRcdFx0XHRcdFx0anNvbi5yb3VnaG5lc3NNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwUm91Z2huZXNzUmVwZWF0LCBtLm1hcFJvdWdobmVzc09mZnNldCwgbS5tYXBSb3VnaG5lc3NXcmFwLCBtLm1hcFJvdWdobmVzc0FuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcFJvdWdobmVzc1JlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwUm91Z2huZXNzT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3NXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3NBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhJzpcblx0XHRcdFx0XHRcdGpzb24uYWxwaGFNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwQWxwaGFSZXBlYXQsIG0ubWFwQWxwaGFPZmZzZXQsIG0ubWFwQWxwaGFXcmFwLCBtLm1hcEFscGhhQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQWxwaGFSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBbHBoYVdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdmbGlwU2lkZWQnOlxuXHRcdFx0XHRcdFx0anNvbi5zaWRlID0gQmFja1NpZGU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb3VibGVTaWRlZCc6XG5cdFx0XHRcdFx0XHRqc29uLnNpZGUgPSBEb3VibGVTaWRlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndHJhbnNwYXJlbmN5Jzpcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxvYWRlci5jcmVhdGVNYXRlcmlhbDogdHJhbnNwYXJlbmN5IGhhcyBiZWVuIHJlbmFtZWQgdG8gb3BhY2l0eScgKTtcblx0XHRcdFx0XHRcdGpzb24ub3BhY2l0eSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGVwdGhUZXN0Jzpcblx0XHRcdFx0XHRjYXNlICdkZXB0aFdyaXRlJzpcblx0XHRcdFx0XHRjYXNlICdjb2xvcldyaXRlJzpcblx0XHRcdFx0XHRjYXNlICdvcGFjaXR5Jzpcblx0XHRcdFx0XHRjYXNlICdyZWZsZWN0aXZpdHknOlxuXHRcdFx0XHRcdGNhc2UgJ3RyYW5zcGFyZW50Jzpcblx0XHRcdFx0XHRjYXNlICd2aXNpYmxlJzpcblx0XHRcdFx0XHRjYXNlICd3aXJlZnJhbWUnOlxuXHRcdFx0XHRcdFx0anNvblsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICd2ZXJ0ZXhDb2xvcnMnOlxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIGpzb24udmVydGV4Q29sb3JzID0gVmVydGV4Q29sb3JzO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gJ2ZhY2UnICkganNvbi52ZXJ0ZXhDb2xvcnMgPSBGYWNlQ29sb3JzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6IFVuc3VwcG9ydGVkJywgbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24udHlwZSA9PT0gJ01lc2hCYXNpY01hdGVyaWFsJyApIGRlbGV0ZSBqc29uLmVtaXNzaXZlO1xuXHRcdFx0aWYgKCBqc29uLnR5cGUgIT09ICdNZXNoUGhvbmdNYXRlcmlhbCcgKSBkZWxldGUganNvbi5zcGVjdWxhcjtcblxuXHRcdFx0aWYgKCBqc29uLm9wYWNpdHkgPCAxICkganNvbi50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHRcdG1hdGVyaWFsTG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxMb2FkZXIucGFyc2UoIGpzb24gKTtcblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEpTT05Mb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0aWYgKCB0eXBlb2YgbWFuYWdlciA9PT0gJ2Jvb2xlYW4nICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSlNPTkxvYWRlcjogc2hvd1N0YXR1cyBwYXJhbWV0ZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGNvbnN0cnVjdG9yLicgKTtcblx0XHRtYW5hZ2VyID0gdW5kZWZpbmVkO1xuXG5cdH1cblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuXHR0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEpTT05Mb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIHBhdGggPSAoIHRoaXMucGF0aCA9PT0gdW5kZWZpbmVkICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dmFyIGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0ICk7XG5cdFx0XHR2YXIgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0XHRpZiAoIG1ldGFkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHR5cGUgPSBtZXRhZGF0YS50eXBlO1xuXG5cdFx0XHRcdGlmICggdHlwZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdvYmplY3QnICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSlNPTkxvYWRlcjogJyArIHVybCArICcgc2hvdWxkIGJlIGxvYWRlZCB3aXRoIFRIUkVFLk9iamVjdExvYWRlciBpbnN0ZWFkLicgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG9iamVjdCA9IHNjb3BlLnBhcnNlKCBqc29uLCBwYXRoICk7XG5cdFx0XHRvbkxvYWQoIG9iamVjdC5nZW9tZXRyeSwgb2JqZWN0Lm1hdGVyaWFscyApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UmVzb3VyY2VQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cGFyc2U6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0ZnVuY3Rpb24gcGFyc2VNb2RlbCgganNvbiwgZ2VvbWV0cnkgKSB7XG5cblx0XHRcdGZ1bmN0aW9uIGlzQml0U2V0KCB2YWx1ZSwgcG9zaXRpb24gKSB7XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlICYgKCAxIDw8IHBvc2l0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGksIGosIGZpLFxuXG5cdFx0XHRcdG9mZnNldCwgekxlbmd0aCxcblxuXHRcdFx0XHRjb2xvckluZGV4LCBub3JtYWxJbmRleCwgdXZJbmRleCwgbWF0ZXJpYWxJbmRleCxcblxuXHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRpc1F1YWQsXG5cdFx0XHRcdGhhc01hdGVyaWFsLFxuXHRcdFx0XHRoYXNGYWNlVmVydGV4VXYsXG5cdFx0XHRcdGhhc0ZhY2VOb3JtYWwsIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwsXG5cdFx0XHRcdGhhc0ZhY2VDb2xvciwgaGFzRmFjZVZlcnRleENvbG9yLFxuXG5cdFx0XHRcdHZlcnRleCwgZmFjZSwgZmFjZUEsIGZhY2VCLCBoZXgsIG5vcm1hbCxcblxuXHRcdFx0XHR1dkxheWVyLCB1diwgdSwgdixcblxuXHRcdFx0XHRmYWNlcyA9IGpzb24uZmFjZXMsXG5cdFx0XHRcdHZlcnRpY2VzID0ganNvbi52ZXJ0aWNlcyxcblx0XHRcdFx0bm9ybWFscyA9IGpzb24ubm9ybWFscyxcblx0XHRcdFx0Y29sb3JzID0ganNvbi5jb2xvcnMsXG5cblx0XHRcdFx0c2NhbGUgPSBqc29uLnNjYWxlLFxuXG5cdFx0XHRcdG5VdkxheWVycyA9IDA7XG5cblxuXHRcdFx0aWYgKCBqc29uLnV2cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGRpc3JlZ2FyZCBlbXB0eSBhcnJheXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGpzb24udXZzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICgganNvbi51dnNbIGkgXS5sZW5ndGggKSBuVXZMYXllcnMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgblV2TGF5ZXJzOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgaSBdID0gW107XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdG9mZnNldCA9IDA7XG5cdFx0XHR6TGVuZ3RoID0gdmVydGljZXMubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldCA8IHpMZW5ndGggKSB7XG5cblx0XHRcdFx0dmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHZlcnRpY2VzWyBvZmZzZXQgKysgXSAqIHNjYWxlO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRpY2VzWyBvZmZzZXQgKysgXSAqIHNjYWxlO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHZlcnRpY2VzWyBvZmZzZXQgKysgXSAqIHNjYWxlO1xuXG5cdFx0XHRcdGdlb21ldHJ5LnZlcnRpY2VzLnB1c2goIHZlcnRleCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9mZnNldCA9IDA7XG5cdFx0XHR6TGVuZ3RoID0gZmFjZXMubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldCA8IHpMZW5ndGggKSB7XG5cblx0XHRcdFx0dHlwZSA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHRpc1F1YWQgPSBpc0JpdFNldCggdHlwZSwgMCApO1xuXHRcdFx0XHRoYXNNYXRlcmlhbCA9IGlzQml0U2V0KCB0eXBlLCAxICk7XG5cdFx0XHRcdGhhc0ZhY2VWZXJ0ZXhVdiA9IGlzQml0U2V0KCB0eXBlLCAzICk7XG5cdFx0XHRcdGhhc0ZhY2VOb3JtYWwgPSBpc0JpdFNldCggdHlwZSwgNCApO1xuXHRcdFx0XHRoYXNGYWNlVmVydGV4Tm9ybWFsID0gaXNCaXRTZXQoIHR5cGUsIDUgKTtcblx0XHRcdFx0aGFzRmFjZUNvbG9yID0gaXNCaXRTZXQoIHR5cGUsIDYgKTtcblx0XHRcdFx0aGFzRmFjZVZlcnRleENvbG9yID0gaXNCaXRTZXQoIHR5cGUsIDcgKTtcblxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcInR5cGVcIiwgdHlwZSwgXCJiaXRzXCIsIGlzUXVhZCwgaGFzTWF0ZXJpYWwsIGhhc0ZhY2VWZXJ0ZXhVdiwgaGFzRmFjZU5vcm1hbCwgaGFzRmFjZVZlcnRleE5vcm1hbCwgaGFzRmFjZUNvbG9yLCBoYXNGYWNlVmVydGV4Q29sb3IpO1xuXG5cdFx0XHRcdGlmICggaXNRdWFkICkge1xuXG5cdFx0XHRcdFx0ZmFjZUEgPSBuZXcgRmFjZTMoKTtcblx0XHRcdFx0XHRmYWNlQS5hID0gZmFjZXNbIG9mZnNldCBdO1xuXHRcdFx0XHRcdGZhY2VBLmIgPSBmYWNlc1sgb2Zmc2V0ICsgMSBdO1xuXHRcdFx0XHRcdGZhY2VBLmMgPSBmYWNlc1sgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0XHRcdFx0ZmFjZUIgPSBuZXcgRmFjZTMoKTtcblx0XHRcdFx0XHRmYWNlQi5hID0gZmFjZXNbIG9mZnNldCArIDEgXTtcblx0XHRcdFx0XHRmYWNlQi5iID0gZmFjZXNbIG9mZnNldCArIDIgXTtcblx0XHRcdFx0XHRmYWNlQi5jID0gZmFjZXNbIG9mZnNldCArIDMgXTtcblxuXHRcdFx0XHRcdG9mZnNldCArPSA0O1xuXG5cdFx0XHRcdFx0aWYgKCBoYXNNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdFx0bWF0ZXJpYWxJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblx0XHRcdFx0XHRcdGZhY2VBLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4O1xuXHRcdFx0XHRcdFx0ZmFjZUIubWF0ZXJpYWxJbmRleCA9IG1hdGVyaWFsSW5kZXg7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0byBnZXQgZmFjZSA8PT4gdXYgaW5kZXggY29ycmVzcG9uZGVuY2VcblxuXHRcdFx0XHRcdGZpID0gZ2VvbWV0cnkuZmFjZXMubGVuZ3RoO1xuXG5cdFx0XHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4VXYgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgblV2TGF5ZXJzOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHV2TGF5ZXIgPSBqc29uLnV2c1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIGkgXVsgZmkgXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyBpIF1bIGZpICsgMSBdID0gW107XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggaiA9IDA7IGogPCA0OyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0dXZJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHRcdFx0XHRcdHUgPSB1dkxheWVyWyB1dkluZGV4ICogMiBdO1xuXHRcdFx0XHRcdFx0XHRcdHYgPSB1dkxheWVyWyB1dkluZGV4ICogMiArIDEgXTtcblxuXHRcdFx0XHRcdFx0XHRcdHV2ID0gbmV3IFZlY3RvcjIoIHUsIHYgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggaiAhPT0gMiApIGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIGkgXVsgZmkgXS5wdXNoKCB1diApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggaiAhPT0gMCApIGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIGkgXVsgZmkgKyAxIF0ucHVzaCggdXYgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZU5vcm1hbCApIHtcblxuXHRcdFx0XHRcdFx0bm9ybWFsSW5kZXggPSBmYWNlc1sgb2Zmc2V0ICsrIF0gKiAzO1xuXG5cdFx0XHRcdFx0XHRmYWNlQS5ub3JtYWwuc2V0KFxuXHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCBdXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRmYWNlQi5ub3JtYWwuY29weSggZmFjZUEubm9ybWFsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgNDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRub3JtYWxJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXSAqIDM7XG5cblx0XHRcdFx0XHRcdFx0bm9ybWFsID0gbmV3IFZlY3RvcjMoXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggKysgXSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4IF1cblx0XHRcdFx0XHRcdFx0KTtcblxuXG5cdFx0XHRcdFx0XHRcdGlmICggaSAhPT0gMiApIGZhY2VBLnZlcnRleE5vcm1hbHMucHVzaCggbm9ybWFsICk7XG5cdFx0XHRcdFx0XHRcdGlmICggaSAhPT0gMCApIGZhY2VCLnZlcnRleE5vcm1hbHMucHVzaCggbm9ybWFsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdFx0aWYgKCBoYXNGYWNlQ29sb3IgKSB7XG5cblx0XHRcdFx0XHRcdGNvbG9ySW5kZXggPSBmYWNlc1sgb2Zmc2V0ICsrIF07XG5cdFx0XHRcdFx0XHRoZXggPSBjb2xvcnNbIGNvbG9ySW5kZXggXTtcblxuXHRcdFx0XHRcdFx0ZmFjZUEuY29sb3Iuc2V0SGV4KCBoZXggKTtcblx0XHRcdFx0XHRcdGZhY2VCLmNvbG9yLnNldEhleCggaGV4ICk7XG5cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZVZlcnRleENvbG9yICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IDQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29sb3JJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblx0XHRcdFx0XHRcdFx0aGV4ID0gY29sb3JzWyBjb2xvckluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpICE9PSAyICkgZmFjZUEudmVydGV4Q29sb3JzLnB1c2goIG5ldyBDb2xvciggaGV4ICkgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCBpICE9PSAwICkgZmFjZUIudmVydGV4Q29sb3JzLnB1c2goIG5ldyBDb2xvciggaGV4ICkgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuZmFjZXMucHVzaCggZmFjZUEgKTtcblx0XHRcdFx0XHRnZW9tZXRyeS5mYWNlcy5wdXNoKCBmYWNlQiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRmYWNlID0gbmV3IEZhY2UzKCk7XG5cdFx0XHRcdFx0ZmFjZS5hID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXHRcdFx0XHRcdGZhY2UuYiA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblx0XHRcdFx0XHRmYWNlLmMgPSBmYWNlc1sgb2Zmc2V0ICsrIF07XG5cblx0XHRcdFx0XHRpZiAoIGhhc01hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRtYXRlcmlhbEluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXHRcdFx0XHRcdFx0ZmFjZS5tYXRlcmlhbEluZGV4ID0gbWF0ZXJpYWxJbmRleDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRvIGdldCBmYWNlIDw9PiB1diBpbmRleCBjb3JyZXNwb25kZW5jZVxuXG5cdFx0XHRcdFx0ZmkgPSBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7XG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdiApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBuVXZMYXllcnM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dXZMYXllciA9IGpzb24udXZzWyBpIF07XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgaSBdWyBmaSBdID0gW107XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0dXZJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHRcdFx0XHRcdHUgPSB1dkxheWVyWyB1dkluZGV4ICogMiBdO1xuXHRcdFx0XHRcdFx0XHRcdHYgPSB1dkxheWVyWyB1dkluZGV4ICogMiArIDEgXTtcblxuXHRcdFx0XHRcdFx0XHRcdHV2ID0gbmV3IFZlY3RvcjIoIHUsIHYgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIGkgXVsgZmkgXS5wdXNoKCB1diApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBoYXNGYWNlTm9ybWFsICkge1xuXG5cdFx0XHRcdFx0XHRub3JtYWxJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXSAqIDM7XG5cblx0XHRcdFx0XHRcdGZhY2Uubm9ybWFsLnNldChcblx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggKysgXSxcblx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggKysgXSxcblx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggXVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZVZlcnRleE5vcm1hbCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCAzOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG5vcm1hbEluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdICogMztcblxuXHRcdFx0XHRcdFx0XHRub3JtYWwgPSBuZXcgVmVjdG9yMyhcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4ICsrIF0sXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggXVxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdGZhY2UudmVydGV4Tm9ybWFscy5wdXNoKCBub3JtYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VDb2xvciApIHtcblxuXHRcdFx0XHRcdFx0Y29sb3JJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblx0XHRcdFx0XHRcdGZhY2UuY29sb3Iuc2V0SGV4KCBjb2xvcnNbIGNvbG9ySW5kZXggXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhDb2xvciApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCAzOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbG9ySW5kZXggPSBmYWNlc1sgb2Zmc2V0ICsrIF07XG5cdFx0XHRcdFx0XHRcdGZhY2UudmVydGV4Q29sb3JzLnB1c2goIG5ldyBDb2xvciggY29sb3JzWyBjb2xvckluZGV4IF0gKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRnZW9tZXRyeS5mYWNlcy5wdXNoKCBmYWNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZVNraW4oIGpzb24sIGdlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgaW5mbHVlbmNlc1BlclZlcnRleCA9ICgganNvbi5pbmZsdWVuY2VzUGVyVmVydGV4ICE9PSB1bmRlZmluZWQgKSA/IGpzb24uaW5mbHVlbmNlc1BlclZlcnRleCA6IDI7XG5cblx0XHRcdGlmICgganNvbi5za2luV2VpZ2h0cyApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLnNraW5XZWlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKz0gaW5mbHVlbmNlc1BlclZlcnRleCApIHtcblxuXHRcdFx0XHRcdHZhciB4ID0ganNvbi5za2luV2VpZ2h0c1sgaSBdO1xuXHRcdFx0XHRcdHZhciB5ID0gKCBpbmZsdWVuY2VzUGVyVmVydGV4ID4gMSApID8ganNvbi5za2luV2VpZ2h0c1sgaSArIDEgXSA6IDA7XG5cdFx0XHRcdFx0dmFyIHogPSAoIGluZmx1ZW5jZXNQZXJWZXJ0ZXggPiAyICkgPyBqc29uLnNraW5XZWlnaHRzWyBpICsgMiBdIDogMDtcblx0XHRcdFx0XHR2YXIgdyA9ICggaW5mbHVlbmNlc1BlclZlcnRleCA+IDMgKSA/IGpzb24uc2tpbldlaWdodHNbIGkgKyAzIF0gOiAwO1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2tpbldlaWdodHMucHVzaCggbmV3IFZlY3RvcjQoIHgsIHksIHosIHcgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24uc2tpbkluZGljZXMgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5za2luSW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IGluZmx1ZW5jZXNQZXJWZXJ0ZXggKSB7XG5cblx0XHRcdFx0XHR2YXIgYSA9IGpzb24uc2tpbkluZGljZXNbIGkgXTtcblx0XHRcdFx0XHR2YXIgYiA9ICggaW5mbHVlbmNlc1BlclZlcnRleCA+IDEgKSA/IGpzb24uc2tpbkluZGljZXNbIGkgKyAxIF0gOiAwO1xuXHRcdFx0XHRcdHZhciBjID0gKCBpbmZsdWVuY2VzUGVyVmVydGV4ID4gMiApID8ganNvbi5za2luSW5kaWNlc1sgaSArIDIgXSA6IDA7XG5cdFx0XHRcdFx0dmFyIGQgPSAoIGluZmx1ZW5jZXNQZXJWZXJ0ZXggPiAzICkgPyBqc29uLnNraW5JbmRpY2VzWyBpICsgMyBdIDogMDtcblxuXHRcdFx0XHRcdGdlb21ldHJ5LnNraW5JbmRpY2VzLnB1c2goIG5ldyBWZWN0b3I0KCBhLCBiLCBjLCBkICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkuYm9uZXMgPSBqc29uLmJvbmVzO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvbmVzICYmIGdlb21ldHJ5LmJvbmVzLmxlbmd0aCA+IDAgJiYgKCBnZW9tZXRyeS5za2luV2VpZ2h0cy5sZW5ndGggIT09IGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCB8fCBnZW9tZXRyeS5za2luSW5kaWNlcy5sZW5ndGggIT09IGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1doZW4gc2tpbm5pbmcsIG51bWJlciBvZiB2ZXJ0aWNlcyAoJyArIGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCArICcpLCBza2luSW5kaWNlcyAoJyArXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoICsgJyksIGFuZCBza2luV2VpZ2h0cyAoJyArIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCArICcpIHNob3VsZCBtYXRjaC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBhcnNlTW9ycGhpbmcoIGpzb24sIGdlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgc2NhbGUgPSBqc29uLnNjYWxlO1xuXG5cdFx0XHRpZiAoIGpzb24ubW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5tb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1sgaSBdID0ge307XG5cdFx0XHRcdFx0Z2VvbWV0cnkubW9ycGhUYXJnZXRzWyBpIF0ubmFtZSA9IGpzb24ubW9ycGhUYXJnZXRzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRnZW9tZXRyeS5tb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcyA9IFtdO1xuXG5cdFx0XHRcdFx0dmFyIGRzdFZlcnRpY2VzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzWyBpIF0udmVydGljZXM7XG5cdFx0XHRcdFx0dmFyIHNyY1ZlcnRpY2VzID0ganNvbi5tb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcztcblxuXHRcdFx0XHRcdGZvciAoIHZhciB2ID0gMCwgdmwgPSBzcmNWZXJ0aWNlcy5sZW5ndGg7IHYgPCB2bDsgdiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0XHRcdHZlcnRleC54ID0gc3JjVmVydGljZXNbIHYgXSAqIHNjYWxlO1xuXHRcdFx0XHRcdFx0dmVydGV4LnkgPSBzcmNWZXJ0aWNlc1sgdiArIDEgXSAqIHNjYWxlO1xuXHRcdFx0XHRcdFx0dmVydGV4LnogPSBzcmNWZXJ0aWNlc1sgdiArIDIgXSAqIHNjYWxlO1xuXG5cdFx0XHRcdFx0XHRkc3RWZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBqc29uLm1vcnBoQ29sb3JzICE9PSB1bmRlZmluZWQgJiYganNvbi5tb3JwaENvbG9ycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkpTT05Mb2FkZXI6IFwibW9ycGhDb2xvcnNcIiBubyBsb25nZXIgc3VwcG9ydGVkLiBVc2luZyB0aGVtIGFzIGZhY2UgY29sb3JzLicgKTtcblxuXHRcdFx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcblx0XHRcdFx0dmFyIG1vcnBoQ29sb3JzID0ganNvbi5tb3JwaENvbG9yc1sgMCBdLmNvbG9ycztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0ZmFjZXNbIGkgXS5jb2xvci5mcm9tQXJyYXkoIG1vcnBoQ29sb3JzLCBpICogMyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VBbmltYXRpb25zKCBqc29uLCBnZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG91dHB1dEFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdFx0Ly8gcGFyc2Ugb2xkIHN0eWxlIEJvbmUvSGllcmFyY2h5IGFuaW1hdGlvbnNcblx0XHRcdHZhciBhbmltYXRpb25zID0gW107XG5cblx0XHRcdGlmICgganNvbi5hbmltYXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhbmltYXRpb25zLnB1c2goIGpzb24uYW5pbWF0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBqc29uLmFuaW1hdGlvbnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGpzb24uYW5pbWF0aW9ucy5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHRhbmltYXRpb25zID0gYW5pbWF0aW9ucy5jb25jYXQoIGpzb24uYW5pbWF0aW9ucyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRhbmltYXRpb25zLnB1c2goIGpzb24uYW5pbWF0aW9ucyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhbmltYXRpb25zLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgY2xpcCA9IEFuaW1hdGlvbkNsaXAucGFyc2VBbmltYXRpb24oIGFuaW1hdGlvbnNbIGkgXSwgZ2VvbWV0cnkuYm9uZXMgKTtcblx0XHRcdFx0aWYgKCBjbGlwICkgb3V0cHV0QW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcGFyc2UgaW1wbGljaXQgbW9ycGggYW5pbWF0aW9uc1xuXHRcdFx0aWYgKCBnZW9tZXRyeS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0Ly8gVE9ETzogRmlndXJlIG91dCB3aGF0IGFuIGFwcHJvcHJhaXRlIEZQUyBpcyBmb3IgbW9ycGggdGFyZ2V0IGFuaW1hdGlvbnMgLS0gZGVmYXVsdGluZyB0byAxMCwgYnV0IHJlYWxseSBpdCBpcyBjb21wbGV0ZWx5IGFyYml0cmFyeS5cblx0XHRcdFx0dmFyIG1vcnBoQW5pbWF0aW9uQ2xpcHMgPSBBbmltYXRpb25DbGlwLkNyZWF0ZUNsaXBzRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2VzKCBnZW9tZXRyeS5tb3JwaFRhcmdldHMsIDEwICk7XG5cdFx0XHRcdG91dHB1dEFuaW1hdGlvbnMgPSBvdXRwdXRBbmltYXRpb25zLmNvbmNhdCggbW9ycGhBbmltYXRpb25DbGlwcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb3V0cHV0QW5pbWF0aW9ucy5sZW5ndGggPiAwICkgZ2VvbWV0cnkuYW5pbWF0aW9ucyA9IG91dHB1dEFuaW1hdGlvbnM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcGFyc2UoIGpzb24sIHBhdGggKSB7XG5cblx0XHRcdGlmICgganNvbi5kYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gR2VvbWV0cnkgNC4wIHNwZWNcblx0XHRcdFx0anNvbiA9IGpzb24uZGF0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24uc2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRqc29uLnNjYWxlID0gMS4wIC8ganNvbi5zY2FsZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRqc29uLnNjYWxlID0gMS4wO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXG5cdFx0XHRwYXJzZU1vZGVsKCBqc29uLCBnZW9tZXRyeSApO1xuXHRcdFx0cGFyc2VTa2luKCBqc29uLCBnZW9tZXRyeSApO1xuXHRcdFx0cGFyc2VNb3JwaGluZygganNvbiwgZ2VvbWV0cnkgKTtcblx0XHRcdHBhcnNlQW5pbWF0aW9ucygganNvbiwgZ2VvbWV0cnkgKTtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0aWYgKCBqc29uLm1hdGVyaWFscyA9PT0gdW5kZWZpbmVkIHx8IGpzb24ubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4geyBnZW9tZXRyeTogZ2VvbWV0cnkgfTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgbWF0ZXJpYWxzID0gTG9hZGVyLnByb3RvdHlwZS5pbml0TWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aCwgdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRcdHJldHVybiB7IGdlb21ldHJ5OiBnZW9tZXRyeSwgbWF0ZXJpYWxzOiBtYXRlcmlhbHMgfTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBPYmplY3RMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cdHRoaXMucmVzb3VyY2VQYXRoID0gJyc7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggT2JqZWN0TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBwYXRoID0gKCB0aGlzLnBhdGggPT09IHVuZGVmaW5lZCApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHzCoHBhdGg7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHR2YXIganNvbiA9IG51bGw7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgb25FcnJvciggZXJyb3IgKTtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUU6T2JqZWN0TG9hZGVyOiBDYW5cXCd0IHBhcnNlICcgKyB1cmwgKyAnLicsIGVycm9yLm1lc3NhZ2UgKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1ldGFkYXRhID0ganNvbi5tZXRhZGF0YTtcblxuXHRcdFx0aWYgKCBtZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdnZW9tZXRyeScgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKyAnLiBVc2UgVEhSRUUuSlNPTkxvYWRlciBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLnBhcnNlKCBqc29uLCBvbkxvYWQgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFJlc291cmNlUGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdHZhciBzaGFwZXMgPSB0aGlzLnBhcnNlU2hhcGUoIGpzb24uc2hhcGVzICk7XG5cdFx0dmFyIGdlb21ldHJpZXMgPSB0aGlzLnBhcnNlR2VvbWV0cmllcygganNvbi5nZW9tZXRyaWVzLCBzaGFwZXMgKTtcblxuXHRcdHZhciBpbWFnZXMgPSB0aGlzLnBhcnNlSW1hZ2VzKCBqc29uLmltYWdlcywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH0gKTtcblxuXHRcdHZhciB0ZXh0dXJlcyA9IHRoaXMucGFyc2VUZXh0dXJlcygganNvbi50ZXh0dXJlcywgaW1hZ2VzICk7XG5cdFx0dmFyIG1hdGVyaWFscyA9IHRoaXMucGFyc2VNYXRlcmlhbHMoIGpzb24ubWF0ZXJpYWxzLCB0ZXh0dXJlcyApO1xuXG5cdFx0dmFyIG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoIGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKTtcblxuXHRcdGlmICgganNvbi5hbmltYXRpb25zICkge1xuXG5cdFx0XHRvYmplY3QuYW5pbWF0aW9ucyA9IHRoaXMucGFyc2VBbmltYXRpb25zKCBqc29uLmFuaW1hdGlvbnMgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5pbWFnZXMgPT09IHVuZGVmaW5lZCB8fCBqc29uLmltYWdlcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSBvbkxvYWQoIG9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iamVjdDtcblxuXHR9LFxuXG5cdHBhcnNlU2hhcGU6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBzaGFwZXMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHNoYXBlID0gbmV3IFNoYXBlKCkuZnJvbUpTT04oIGpzb25bIGkgXSApO1xuXG5cdFx0XHRcdHNoYXBlc1sgc2hhcGUudXVpZCBdID0gc2hhcGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fSxcblxuXHRwYXJzZUdlb21ldHJpZXM6IGZ1bmN0aW9uICgganNvbiwgc2hhcGVzICkge1xuXG5cdFx0dmFyIGdlb21ldHJpZXMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnlMb2FkZXIgPSBuZXcgSlNPTkxvYWRlcigpO1xuXHRcdFx0dmFyIGJ1ZmZlckdlb21ldHJ5TG9hZGVyID0gbmV3IEJ1ZmZlckdlb21ldHJ5TG9hZGVyKCk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnk7XG5cdFx0XHRcdHZhciBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ1BsYW5lR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1BsYW5lQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGhTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50c1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdCb3hHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnQm94QnVmZmVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0N1YmVHZW9tZXRyeSc6IC8vIGJhY2t3YXJkcyBjb21wYXRpYmxlXG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXB0aCxcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmRlcHRoU2VnbWVudHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQ2lyY2xlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0NpcmNsZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQ3lsaW5kZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1c1RvcCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXNCb3R0b20sXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLm9wZW5FbmRlZCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0NvbmVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnQ29uZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcGVuRW5kZWQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdTcGhlcmVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnU3BoZXJlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGhTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5waGlTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5waGlMZW5ndGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdEb2RlY2FoZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0ljb3NhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0ljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ09jdGFoZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdUZXRyYWhlZHJvbkdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmRldGFpbFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdSaW5nR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1JpbmdCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLmlubmVyUmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLm91dGVyUmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdUb3J1c0dlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdUb3J1c0J1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YmUsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmFyY1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdUb3J1c0tub3RHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNLbm90QnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEudHViZSxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5xXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0xhdGhlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0xhdGhlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5wb2ludHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuc2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1BvbHloZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEudmVydGljZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaW5kaWNlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGV0YWlsc1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdTaGFwZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdTaGFwZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5jdXJ2ZVNlZ21lbnRzXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXG5cdFx0XHRcdFx0Y2FzZSAnRXh0cnVkZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdFeHRydWRlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHR2YXIgZ2VvbWV0cnlTaGFwZXMgPSBbXTtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xuXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLnB1c2goIHNoYXBlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGV4dHJ1ZGVQYXRoID0gZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gbmV3IEN1cnZlc1sgZXh0cnVkZVBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGV4dHJ1ZGVQYXRoICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLm9wdGlvbnNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhLCB0aGlzLnJlc291cmNlUGF0aCApLmdlb21ldHJ5O1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5zdXBwb3J0ZWQgZ2VvbWV0cnkgdHlwZSBcIicgKyBkYXRhLnR5cGUgKyAnXCInICk7XG5cblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS5uYW1lID0gZGF0YS5uYW1lO1xuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgPT09IHRydWUgJiYgZGF0YS51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgZ2VvbWV0cnkudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhO1xuXG5cdFx0XHRcdGdlb21ldHJpZXNbIGRhdGEudXVpZCBdID0gZ2VvbWV0cnk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyaWVzO1xuXG5cdH0sXG5cblx0cGFyc2VNYXRlcmlhbHM6IGZ1bmN0aW9uICgganNvbiwgdGV4dHVyZXMgKSB7XG5cblx0XHR2YXIgY2FjaGUgPSB7fTsgLy8gTXVsdGlNYXRlcmlhbFxuXHRcdHZhciBtYXRlcmlhbHMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgbG9hZGVyID0gbmV3IE1hdGVyaWFsTG9hZGVyKCk7XG5cdFx0XHRsb2FkZXIuc2V0VGV4dHVyZXMoIHRleHR1cmVzICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRpZiAoIGRhdGEudHlwZSA9PT0gJ011bHRpTWF0ZXJpYWwnICkge1xuXG5cdFx0XHRcdFx0Ly8gRGVwcmVjYXRlZFxuXG5cdFx0XHRcdFx0dmFyIGFycmF5ID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBkYXRhLm1hdGVyaWFscy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBtYXRlcmlhbCA9IGRhdGEubWF0ZXJpYWxzWyBqIF07XG5cblx0XHRcdFx0XHRcdGlmICggY2FjaGVbIG1hdGVyaWFsLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlWyBtYXRlcmlhbC51dWlkIF0gPSBsb2FkZXIucGFyc2UoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YXJyYXkucHVzaCggY2FjaGVbIG1hdGVyaWFsLnV1aWQgXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGFycmF5O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRtYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cdFx0XHRcdFx0Y2FjaGVbIGRhdGEudXVpZCBdID0gbWF0ZXJpYWxzWyBkYXRhLnV1aWQgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0fSxcblxuXHRwYXJzZUFuaW1hdGlvbnM6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBhbmltYXRpb25zID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdHZhciBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRpZiAoIGRhdGEudXVpZCAhPT0gdW5kZWZpbmVkICkgY2xpcC51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRhbmltYXRpb25zLnB1c2goIGNsaXAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhbmltYXRpb25zO1xuXG5cdH0sXG5cblx0cGFyc2VJbWFnZXM6IGZ1bmN0aW9uICgganNvbiwgb25Mb2FkICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblx0XHR2YXIgaW1hZ2VzID0ge307XG5cblx0XHRmdW5jdGlvbiBsb2FkSW1hZ2UoIHVybCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgbWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlciggb25Mb2FkICk7XG5cblx0XHRcdHZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgaW1hZ2UgPSBqc29uWyBpIF07XG5cdFx0XHRcdHZhciB1cmwgPSBpbWFnZS51cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjdXJyZW50VXJsID0gdXJsWyBqIF07XG5cblx0XHRcdFx0XHRcdHZhciBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCBjdXJyZW50VXJsICkgPyBjdXJyZW50VXJsIDogc2NvcGUucmVzb3VyY2VQYXRoICsgY3VycmVudFVybDtcblxuXHRcdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0ucHVzaCggbG9hZEltYWdlKCBwYXRoICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gbG9hZCBzaW5nbGUgaW1hZ2VcblxuXHRcdFx0XHRcdHZhciBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCBpbWFnZS51cmwgKSA/IGltYWdlLnVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIGltYWdlLnVybDtcblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbG9hZEltYWdlKCBwYXRoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2VzO1xuXG5cdH0sXG5cblx0cGFyc2VUZXh0dXJlczogZnVuY3Rpb24gKCBqc29uLCBpbWFnZXMgKSB7XG5cblx0XHRmdW5jdGlvbiBwYXJzZUNvbnN0YW50KCB2YWx1ZSwgdHlwZSApIHtcblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkgcmV0dXJuIHZhbHVlO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VUZXh0dXJlOiBDb25zdGFudCBzaG91bGQgYmUgaW4gbnVtZXJpYyBmb3JtLicsIHZhbHVlICk7XG5cblx0XHRcdHJldHVybiB0eXBlWyB2YWx1ZSBdO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRleHR1cmVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSggaW1hZ2VzWyBkYXRhLmltYWdlIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBUZXh0dXJlKCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR0ZXh0dXJlLnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubmFtZSA9IGRhdGEubmFtZTtcblxuXHRcdFx0XHRpZiAoIGRhdGEubWFwcGluZyAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYXBwaW5nID0gcGFyc2VDb25zdGFudCggZGF0YS5tYXBwaW5nLCBURVhUVVJFX01BUFBJTkcgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEub2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm9mZnNldC5mcm9tQXJyYXkoIGRhdGEub2Zmc2V0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5yZXBlYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUucmVwZWF0LmZyb21BcnJheSggZGF0YS5yZXBlYXQgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5jZW50ZXIuZnJvbUFycmF5KCBkYXRhLmNlbnRlciApO1xuXHRcdFx0XHRpZiAoIGRhdGEucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHRleHR1cmUucm90YXRpb24gPSBkYXRhLnJvdGF0aW9uO1xuXG5cdFx0XHRcdGlmICggZGF0YS53cmFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLndyYXBTID0gcGFyc2VDb25zdGFudCggZGF0YS53cmFwWyAwIF0sIFRFWFRVUkVfV1JBUFBJTkcgKTtcblx0XHRcdFx0XHR0ZXh0dXJlLndyYXBUID0gcGFyc2VDb25zdGFudCggZGF0YS53cmFwWyAxIF0sIFRFWFRVUkVfV1JBUFBJTkcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5mb3JtYXQgPSBkYXRhLmZvcm1hdDtcblxuXHRcdFx0XHRpZiAoIGRhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1pbkZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWluRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApO1xuXHRcdFx0XHRpZiAoIGRhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1hZ0ZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFnRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApO1xuXHRcdFx0XHRpZiAoIGRhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5hbmlzb3Ryb3B5ID0gZGF0YS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHRcdGlmICggZGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5mbGlwWSA9IGRhdGEuZmxpcFk7XG5cblx0XHRcdFx0dGV4dHVyZXNbIGRhdGEudXVpZCBdID0gdGV4dHVyZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmVzO1xuXG5cdH0sXG5cblx0cGFyc2VPYmplY3Q6IGZ1bmN0aW9uICggZGF0YSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzICkge1xuXG5cdFx0dmFyIG9iamVjdDtcblxuXHRcdGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJpZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5JywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZW9tZXRyaWVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbCggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblxuXHRcdFx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBuYW1lLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdXVpZCA9IG5hbWVbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggbWF0ZXJpYWxzWyB1dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgbWF0ZXJpYWwnLCB1dWlkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRhcnJheS5wdXNoKCBtYXRlcmlhbHNbIHV1aWQgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gYXJyYXk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbHNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbHNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcblxuXHRcdFx0Y2FzZSAnU2NlbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIE51bWJlci5pc0ludGVnZXIoIGRhdGEuYmFja2dyb3VuZCApICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvciggZGF0YS5iYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5mb2cgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggZGF0YS5mb2cudHlwZSA9PT0gJ0ZvZycgKSB7XG5cblx0XHRcdFx0XHRcdG9iamVjdC5mb2cgPSBuZXcgRm9nKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cubmVhciwgZGF0YS5mb2cuZmFyICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nRXhwMicgKSB7XG5cblx0XHRcdFx0XHRcdG9iamVjdC5mb2cgPSBuZXcgRm9nRXhwMiggZGF0YS5mb2cuY29sb3IsIGRhdGEuZm9nLmRlbnNpdHkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BlcnNwZWN0aXZlQ2FtZXJhJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGRhdGEuZm92LCBkYXRhLmFzcGVjdCwgZGF0YS5uZWFyLCBkYXRhLmZhciApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5mb2N1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZvY3VzID0gZGF0YS5mb2N1cztcblx0XHRcdFx0aWYgKCBkYXRhLnpvb20gIT09IHVuZGVmaW5lZCApIG9iamVjdC56b29tID0gZGF0YS56b29tO1xuXHRcdFx0XHRpZiAoIGRhdGEuZmlsbUdhdWdlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbUdhdWdlID0gZGF0YS5maWxtR2F1Z2U7XG5cdFx0XHRcdGlmICggZGF0YS5maWxtT2Zmc2V0ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbU9mZnNldCA9IGRhdGEuZmlsbU9mZnNldDtcblx0XHRcdFx0aWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdPcnRob2dyYXBoaWNDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIGRhdGEubGVmdCwgZGF0YS5yaWdodCwgZGF0YS50b3AsIGRhdGEuYm90dG9tLCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLnpvb20gIT09IHVuZGVmaW5lZCApIG9iamVjdC56b29tID0gZGF0YS56b29tO1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0FtYmllbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEFtYmllbnRMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IERpcmVjdGlvbmFsTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5kZWNheSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdSZWN0QXJlYUxpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUmVjdEFyZWFMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNwb3RMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEuZGlzdGFuY2UsIGRhdGEuYW5nbGUsIGRhdGEucGVudW1icmEsIGRhdGEuZGVjYXkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnSGVtaXNwaGVyZUxpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgSGVtaXNwaGVyZUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmdyb3VuZENvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdTa2lubmVkTWVzaCc6XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyLnBhcnNlT2JqZWN0KCkgZG9lcyBub3Qgc3VwcG9ydCBTa2lubmVkTWVzaCB5ZXQuJyApO1xuXG5cdFx0XHRjYXNlICdNZXNoJzpcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuYm9uZXMgJiYgZ2VvbWV0cnkuYm9uZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdG9iamVjdCA9IG5ldyBTa2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdG9iamVjdCA9IG5ldyBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xPRCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExPRCgpO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZSggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSwgZGF0YS5tb2RlICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmVMb29wJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZUxvb3AoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZVNlZ21lbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BvaW50Q2xvdWQnOlxuXHRcdFx0Y2FzZSAnUG9pbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUG9pbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1Nwcml0ZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNwcml0ZSggZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdHcm91cCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEdyb3VwKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHR9XG5cblx0XHRvYmplY3QudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBvYmplY3QubmFtZSA9IGRhdGEubmFtZTtcblxuXHRcdGlmICggZGF0YS5tYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2JqZWN0Lm1hdHJpeC5mcm9tQXJyYXkoIGRhdGEubWF0cml4ICk7XG5cblx0XHRcdGlmICggZGF0YS5tYXRyaXhBdXRvVXBkYXRlICE9PSB1bmRlZmluZWQgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGRhdGEubWF0cml4QXV0b1VwZGF0ZTtcblx0XHRcdGlmICggb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgKSBvYmplY3QubWF0cml4LmRlY29tcG9zZSggb2JqZWN0LnBvc2l0aW9uLCBvYmplY3QucXVhdGVybmlvbiwgb2JqZWN0LnNjYWxlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRhdGEucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5wb3NpdGlvbi5mcm9tQXJyYXkoIGRhdGEucG9zaXRpb24gKTtcblx0XHRcdGlmICggZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5yb3RhdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnF1YXRlcm5pb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5xdWF0ZXJuaW9uLmZyb21BcnJheSggZGF0YS5xdWF0ZXJuaW9uICk7XG5cdFx0XHRpZiAoIGRhdGEuc2NhbGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zY2FsZS5mcm9tQXJyYXkoIGRhdGEuc2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5jYXN0U2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuY2FzdFNoYWRvdyA9IGRhdGEuY2FzdFNoYWRvdztcblx0XHRpZiAoIGRhdGEucmVjZWl2ZVNoYWRvdyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSBkYXRhLnJlY2VpdmVTaGFkb3c7XG5cblx0XHRpZiAoIGRhdGEuc2hhZG93ICkge1xuXG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmJpYXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuYmlhcyA9IGRhdGEuc2hhZG93LmJpYXM7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LnJhZGl1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5yYWRpdXMgPSBkYXRhLnNoYWRvdy5yYWRpdXM7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93Lm1hcFNpemUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cubWFwU2l6ZS5mcm9tQXJyYXkoIGRhdGEuc2hhZG93Lm1hcFNpemUgKTtcblx0XHRcdGlmICggZGF0YS5zaGFkb3cuY2FtZXJhICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LmNhbWVyYSA9IHRoaXMucGFyc2VPYmplY3QoIGRhdGEuc2hhZG93LmNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aXNpYmxlID0gZGF0YS52aXNpYmxlO1xuXHRcdGlmICggZGF0YS5mcnVzdHVtQ3VsbGVkICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGRhdGEuZnJ1c3R1bUN1bGxlZDtcblx0XHRpZiAoIGRhdGEucmVuZGVyT3JkZXIgIT09IHVuZGVmaW5lZCApIG9iamVjdC5yZW5kZXJPcmRlciA9IGRhdGEucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBvYmplY3QudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhO1xuXHRcdGlmICggZGF0YS5sYXllcnMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5sYXllcnMubWFzayA9IGRhdGEubGF5ZXJzO1xuXG5cdFx0aWYgKCBkYXRhLmNoaWxkcmVuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkKCB0aGlzLnBhcnNlT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudHlwZSA9PT0gJ0xPRCcgKSB7XG5cblx0XHRcdHZhciBsZXZlbHMgPSBkYXRhLmxldmVscztcblxuXHRcdFx0Zm9yICggdmFyIGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbIGwgXTtcblx0XHRcdFx0dmFyIGNoaWxkID0gb2JqZWN0LmdldE9iamVjdEJ5UHJvcGVydHkoICd1dWlkJywgbGV2ZWwub2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBjaGlsZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmFkZExldmVsKCBjaGlsZCwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG59ICk7XG5cbnZhciBURVhUVVJFX01BUFBJTkcgPSB7XG5cdFVWTWFwcGluZzogVVZNYXBwaW5nLFxuXHRDdWJlUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVSZWZsZWN0aW9uTWFwcGluZyxcblx0Q3ViZVJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyxcblx0RXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLFxuXHRTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzogU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nXG59O1xuXG52YXIgVEVYVFVSRV9XUkFQUElORyA9IHtcblx0UmVwZWF0V3JhcHBpbmc6IFJlcGVhdFdyYXBwaW5nLFxuXHRDbGFtcFRvRWRnZVdyYXBwaW5nOiBDbGFtcFRvRWRnZVdyYXBwaW5nLFxuXHRNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOiBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nXG59O1xuXG52YXIgVEVYVFVSRV9GSUxURVIgPSB7XG5cdE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyOiBOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcjogTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcixcblx0TGluZWFyRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXI6IExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIsXG5cdExpbmVhck1pcE1hcExpbmVhckZpbHRlcjogTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyXG59O1xuXG4vKipcbiAqIEBhdXRob3IgdGhlc3BpdGUgLyBodHRwOi8vY2xpY2t0b3JlbGVhc2UuY29tL1xuICovXG5cblxuZnVuY3Rpb24gSW1hZ2VCaXRtYXBMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0aWYgKCB0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGNyZWF0ZUltYWdlQml0bWFwKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlQml0bWFwTG9hZGVyOiBmZXRjaCgpIG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdH1cblxuXHR0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyICE9PSB1bmRlZmluZWQgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXHR0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cbn1cblxuSW1hZ2VCaXRtYXBMb2FkZXIucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBJbWFnZUJpdG1hcExvYWRlcixcblxuXHRzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKCBvcHRpb25zICkge1xuXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0ZmV0Y2goIHVybCApLnRoZW4oIGZ1bmN0aW9uICggcmVzICkge1xuXG5cdFx0XHRyZXR1cm4gcmVzLmJsb2IoKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGJsb2IgKSB7XG5cblx0XHRcdHJldHVybiBjcmVhdGVJbWFnZUJpdG1hcCggYmxvYiwgc2NvcGUub3B0aW9ucyApO1xuXG5cdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggaW1hZ2VCaXRtYXAgKSB7XG5cblx0XHRcdENhY2hlLmFkZCggdXJsLCBpbWFnZUJpdG1hcCApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH0gKS5jYXRjaCggZnVuY3Rpb24gKCBlICkge1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICk7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBtaW5pbWFsIGNsYXNzIGZvciBwcm94aW5nIGZ1bmN0aW9ucyB0byBQYXRoLiBSZXBsYWNlcyBvbGQgXCJleHRyYWN0U3VicGF0aHMoKVwiXG4gKiovXG5cbmZ1bmN0aW9uIFNoYXBlUGF0aCgpIHtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGVQYXRoJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCk7XG5cblx0dGhpcy5zdWJQYXRocyA9IFtdO1xuXHR0aGlzLmN1cnJlbnRQYXRoID0gbnVsbDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBTaGFwZVBhdGgucHJvdG90eXBlLCB7XG5cblx0bW92ZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoID0gbmV3IFBhdGgoKTtcblx0XHR0aGlzLnN1YlBhdGhzLnB1c2goIHRoaXMuY3VycmVudFBhdGggKTtcblx0XHR0aGlzLmN1cnJlbnRQYXRoLm1vdmVUbyggeCwgeSApO1xuXG5cdH0sXG5cblx0bGluZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLmxpbmVUbyggeCwgeSApO1xuXG5cdH0sXG5cblx0cXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGFDUHgsIGFDUHksIGFYLCBhWSApO1xuXG5cdH0sXG5cblx0YmV6aWVyQ3VydmVUbzogZnVuY3Rpb24gKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5iZXppZXJDdXJ2ZVRvKCBhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZICk7XG5cblx0fSxcblxuXHRzcGxpbmVUaHJ1OiBmdW5jdGlvbiAoIHB0cyApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGguc3BsaW5lVGhydSggcHRzICk7XG5cblx0fSxcblxuXHR0b1NoYXBlczogZnVuY3Rpb24gKCBpc0NDVywgbm9Ib2xlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHRvU2hhcGVzTm9Ib2xlcyggaW5TdWJwYXRocyApIHtcblxuXHRcdFx0dmFyIHNoYXBlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpblN1YnBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHRtcFBhdGggPSBpblN1YnBhdGhzWyBpIF07XG5cblx0XHRcdFx0dmFyIHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpc1BvaW50SW5zaWRlUG9seWdvbiggaW5QdCwgaW5Qb2x5Z29uICkge1xuXG5cdFx0XHR2YXIgcG9seUxlbiA9IGluUG9seWdvbi5sZW5ndGg7XG5cblx0XHRcdC8vIGluUHQgb24gcG9seWdvbiBjb250b3VyID0+IGltbWVkaWF0ZSBzdWNjZXNzICAgIG9yXG5cdFx0XHQvLyB0b2dnbGluZyBvZiBpbnNpZGUvb3V0c2lkZSBhdCBldmVyeSBzaW5nbGUhIGludGVyc2VjdGlvbiBwb2ludCBvZiBhbiBlZGdlXG5cdFx0XHQvLyAgd2l0aCB0aGUgaG9yaXpvbnRhbCBsaW5lIHRocm91Z2ggaW5QdCwgbGVmdCBvZiBpblB0XG5cdFx0XHQvLyAgbm90IGNvdW50aW5nIGxvd2VyWSBlbmRwb2ludHMgb2YgZWRnZXMgYW5kIHdob2xlIGVkZ2VzIG9uIHRoYXQgbGluZVxuXHRcdFx0dmFyIGluc2lkZSA9IGZhbHNlO1xuXHRcdFx0Zm9yICggdmFyIHAgPSBwb2x5TGVuIC0gMSwgcSA9IDA7IHEgPCBwb2x5TGVuOyBwID0gcSArKyApIHtcblxuXHRcdFx0XHR2YXIgZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBwIF07XG5cdFx0XHRcdHZhciBlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBxIF07XG5cblx0XHRcdFx0dmFyIGVkZ2VEeCA9IGVkZ2VIaWdoUHQueCAtIGVkZ2VMb3dQdC54O1xuXHRcdFx0XHR2YXIgZWRnZUR5ID0gZWRnZUhpZ2hQdC55IC0gZWRnZUxvd1B0Lnk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggZWRnZUR5ICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdC8vIG5vdCBwYXJhbGxlbFxuXHRcdFx0XHRcdGlmICggZWRnZUR5IDwgMCApIHtcblxuXHRcdFx0XHRcdFx0ZWRnZUxvd1B0ID0gaW5Qb2x5Z29uWyBxIF07IGVkZ2VEeCA9IC0gZWRnZUR4O1xuXHRcdFx0XHRcdFx0ZWRnZUhpZ2hQdCA9IGluUG9seWdvblsgcCBdOyBlZGdlRHkgPSAtIGVkZ2VEeTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoICggaW5QdC55IDwgZWRnZUxvd1B0LnkgKSB8fCAoIGluUHQueSA+IGVkZ2VIaWdoUHQueSApICkgXHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBpblB0LnkgPT09IGVkZ2VMb3dQdC55ICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGluUHQueCA9PT0gZWRnZUxvd1B0LnggKVx0XHRyZXR1cm5cdHRydWU7XHRcdC8vIGluUHQgaXMgb24gY29udG91ciA/XG5cdFx0XHRcdFx0XHQvLyBjb250aW51ZTtcdFx0XHRcdC8vIG5vIGludGVyc2VjdGlvbiBvciBlZGdlTG93UHQgPT4gZG9lc24ndCBjb3VudCAhISFcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHZhciBwZXJwRWRnZSA9IGVkZ2VEeSAqICggaW5QdC54IC0gZWRnZUxvd1B0LnggKSAtIGVkZ2VEeCAqICggaW5QdC55IC0gZWRnZUxvd1B0LnkgKTtcblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPT09IDAgKVx0XHRcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0aWYgKCBwZXJwRWRnZSA8IDAgKSBcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XHRcdC8vIHRydWUgaW50ZXJzZWN0aW9uIGxlZnQgb2YgaW5QdFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwYXJhbGxlbCBvciBjb2xsaW5lYXJcblx0XHRcdFx0XHRpZiAoIGluUHQueSAhPT0gZWRnZUxvd1B0LnkgKSBcdFx0Y29udGludWU7XHRcdFx0Ly8gcGFyYWxsZWxcblx0XHRcdFx0XHQvLyBlZGdlIGxpZXMgb24gdGhlIHNhbWUgaG9yaXpvbnRhbCBsaW5lIGFzIGluUHRcblx0XHRcdFx0XHRpZiAoICggKCBlZGdlSGlnaFB0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUxvd1B0LnggKSApIHx8XG5cdFx0XHRcdFx0XHQgKCAoIGVkZ2VMb3dQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VIaWdoUHQueCApICkgKVx0XHRyZXR1cm5cdHRydWU7XHQvLyBpblB0OiBQb2ludCBvbiBjb250b3VyICFcblx0XHRcdFx0XHQvLyBjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuXHRpbnNpZGU7XG5cblx0XHR9XG5cblx0XHR2YXIgaXNDbG9ja1dpc2UgPSBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlO1xuXG5cdFx0dmFyIHN1YlBhdGhzID0gdGhpcy5zdWJQYXRocztcblx0XHRpZiAoIHN1YlBhdGhzLmxlbmd0aCA9PT0gMCApIHJldHVybiBbXTtcblxuXHRcdGlmICggbm9Ib2xlcyA9PT0gdHJ1ZSApXHRyZXR1cm5cdHRvU2hhcGVzTm9Ib2xlcyggc3ViUGF0aHMgKTtcblxuXG5cdFx0dmFyIHNvbGlkLCB0bXBQYXRoLCB0bXBTaGFwZSwgc2hhcGVzID0gW107XG5cblx0XHRpZiAoIHN1YlBhdGhzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyAwIF07XG5cdFx0XHR0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xuXHRcdFx0dG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHR2YXIgaG9sZXNGaXJzdCA9ICEgaXNDbG9ja1dpc2UoIHN1YlBhdGhzWyAwIF0uZ2V0UG9pbnRzKCkgKTtcblx0XHRob2xlc0ZpcnN0ID0gaXNDQ1cgPyAhIGhvbGVzRmlyc3QgOiBob2xlc0ZpcnN0O1xuXG5cdFx0Ly8gY29uc29sZS5sb2coXCJIb2xlcyBmaXJzdFwiLCBob2xlc0ZpcnN0KTtcblxuXHRcdHZhciBiZXR0ZXJTaGFwZUhvbGVzID0gW107XG5cdFx0dmFyIG5ld1NoYXBlcyA9IFtdO1xuXHRcdHZhciBuZXdTaGFwZUhvbGVzID0gW107XG5cdFx0dmFyIG1haW5JZHggPSAwO1xuXHRcdHZhciB0bXBQb2ludHM7XG5cblx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHVuZGVmaW5lZDtcblx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHN1YlBhdGhzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgaSBdO1xuXHRcdFx0dG1wUG9pbnRzID0gdG1wUGF0aC5nZXRQb2ludHMoKTtcblx0XHRcdHNvbGlkID0gaXNDbG9ja1dpc2UoIHRtcFBvaW50cyApO1xuXHRcdFx0c29saWQgPSBpc0NDVyA/ICEgc29saWQgOiBzb2xpZDtcblxuXHRcdFx0aWYgKCBzb2xpZCApIHtcblxuXHRcdFx0XHRpZiAoICggISBob2xlc0ZpcnN0ICkgJiYgKCBuZXdTaGFwZXNbIG1haW5JZHggXSApIClcdG1haW5JZHggKys7XG5cblx0XHRcdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0gPSB7IHM6IG5ldyBTaGFwZSgpLCBwOiB0bXBQb2ludHMgfTtcblx0XHRcdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0ucy5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblxuXHRcdFx0XHRpZiAoIGhvbGVzRmlyc3QgKVx0bWFpbklkeCArKztcblx0XHRcdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnY3cnLCBpKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0ucHVzaCggeyBoOiB0bXBQYXRoLCBwOiB0bXBQb2ludHNbIDAgXSB9ICk7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnY2N3JywgaSk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgSG9sZXM/IC0+IHByb2JhYmx5IGFsbCBTaGFwZXMgd2l0aCB3cm9uZyBvcmllbnRhdGlvblxuXHRcdGlmICggISBuZXdTaGFwZXNbIDAgXSApXHRyZXR1cm5cdHRvU2hhcGVzTm9Ib2xlcyggc3ViUGF0aHMgKTtcblxuXG5cdFx0aWYgKCBuZXdTaGFwZXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0dmFyIGFtYmlndW91cyA9IGZhbHNlO1xuXHRcdFx0dmFyIHRvQ2hhbmdlID0gW107XG5cblx0XHRcdGZvciAoIHZhciBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkge1xuXG5cdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHNJZHggXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkge1xuXG5cdFx0XHRcdHZhciBzaG8gPSBuZXdTaGFwZUhvbGVzWyBzSWR4IF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGhJZHggPSAwOyBoSWR4IDwgc2hvLmxlbmd0aDsgaElkeCArKyApIHtcblxuXHRcdFx0XHRcdHZhciBobyA9IHNob1sgaElkeCBdO1xuXHRcdFx0XHRcdHZhciBob2xlX3VuYXNzaWduZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIHMySWR4ID0gMDsgczJJZHggPCBuZXdTaGFwZXMubGVuZ3RoOyBzMklkeCArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpc1BvaW50SW5zaWRlUG9seWdvbiggaG8ucCwgbmV3U2hhcGVzWyBzMklkeCBdLnAgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHNJZHggIT09IHMySWR4IClcdHRvQ2hhbmdlLnB1c2goIHsgZnJvbXM6IHNJZHgsIHRvczogczJJZHgsIGhvbGU6IGhJZHggfSApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGhvbGVfdW5hc3NpZ25lZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHMySWR4IF0ucHVzaCggaG8gKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0YW1iaWd1b3VzID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhcImFtYmlndW91czogXCIsIGFtYmlndW91cyk7XG5cdFx0XHRpZiAoIHRvQ2hhbmdlLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJ0byBjaGFuZ2U6IFwiLCB0b0NoYW5nZSk7XG5cdFx0XHRcdGlmICggISBhbWJpZ3VvdXMgKVx0bmV3U2hhcGVIb2xlcyA9IGJldHRlclNoYXBlSG9sZXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciB0bXBIb2xlcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBuZXdTaGFwZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFNoYXBlID0gbmV3U2hhcGVzWyBpIF0ucztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0dG1wSG9sZXMgPSBuZXdTaGFwZUhvbGVzWyBpIF07XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSB0bXBIb2xlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR0bXBTaGFwZS5ob2xlcy5wdXNoKCB0bXBIb2xlc1sgaiBdLmggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9jb25zb2xlLmxvZyhcInNoYXBlXCIsIHNoYXBlcyk7XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBGb250KCBkYXRhICkge1xuXG5cdHRoaXMudHlwZSA9ICdGb250JztcblxuXHR0aGlzLmRhdGEgPSBkYXRhO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZvbnQucHJvdG90eXBlLCB7XG5cblx0aXNGb250OiB0cnVlLFxuXG5cdGdlbmVyYXRlU2hhcGVzOiBmdW5jdGlvbiAoIHRleHQsIHNpemUgKSB7XG5cblx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxMDA7XG5cblx0XHR2YXIgc2hhcGVzID0gW107XG5cdFx0dmFyIHBhdGhzID0gY3JlYXRlUGF0aHMoIHRleHQsIHNpemUsIHRoaXMuZGF0YSApO1xuXG5cdFx0Zm9yICggdmFyIHAgPSAwLCBwbCA9IHBhdGhzLmxlbmd0aDsgcCA8IHBsOyBwICsrICkge1xuXG5cdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSggc2hhcGVzLCBwYXRoc1sgcCBdLnRvU2hhcGVzKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fVxuXG59ICk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGhzKCB0ZXh0LCBzaXplLCBkYXRhICkge1xuXG5cdHZhciBjaGFycyA9IEFycmF5LmZyb20gPyBBcnJheS5mcm9tKCB0ZXh0ICkgOiBTdHJpbmcoIHRleHQgKS5zcGxpdCggJycgKTsgLy8gc2VlICMxMzk4OFxuXHR2YXIgc2NhbGUgPSBzaXplIC8gZGF0YS5yZXNvbHV0aW9uO1xuXHR2YXIgbGluZV9oZWlnaHQgPSAoIGRhdGEuYm91bmRpbmdCb3gueU1heCAtIGRhdGEuYm91bmRpbmdCb3gueU1pbiArIGRhdGEudW5kZXJsaW5lVGhpY2tuZXNzICkgKiBzY2FsZTtcblxuXHR2YXIgcGF0aHMgPSBbXTtcblxuXHR2YXIgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZhciBjaGFyID0gY2hhcnNbIGkgXTtcblxuXHRcdGlmICggY2hhciA9PT0gJ1xcbicgKSB7XG5cblx0XHRcdG9mZnNldFggPSAwO1xuXHRcdFx0b2Zmc2V0WSAtPSBsaW5lX2hlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciByZXQgPSBjcmVhdGVQYXRoKCBjaGFyLCBzY2FsZSwgb2Zmc2V0WCwgb2Zmc2V0WSwgZGF0YSApO1xuXHRcdFx0b2Zmc2V0WCArPSByZXQub2Zmc2V0WDtcblx0XHRcdHBhdGhzLnB1c2goIHJldC5wYXRoICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBwYXRocztcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRoKCBjaGFyLCBzY2FsZSwgb2Zmc2V0WCwgb2Zmc2V0WSwgZGF0YSApIHtcblxuXHR2YXIgZ2x5cGggPSBkYXRhLmdseXBoc1sgY2hhciBdIHx8IGRhdGEuZ2x5cGhzWyAnPycgXTtcblxuXHRpZiAoICEgZ2x5cGggKSByZXR1cm47XG5cblx0dmFyIHBhdGggPSBuZXcgU2hhcGVQYXRoKCk7XG5cblx0dmFyIHgsIHksIGNweCwgY3B5LCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyO1xuXG5cdGlmICggZ2x5cGgubyApIHtcblxuXHRcdHZhciBvdXRsaW5lID0gZ2x5cGguX2NhY2hlZE91dGxpbmUgfHwgKCBnbHlwaC5fY2FjaGVkT3V0bGluZSA9IGdseXBoLm8uc3BsaXQoICcgJyApICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBvdXRsaW5lLmxlbmd0aDsgaSA8IGw7ICkge1xuXG5cdFx0XHR2YXIgYWN0aW9uID0gb3V0bGluZVsgaSArKyBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBhY3Rpb24gKSB7XG5cblx0XHRcdFx0Y2FzZSAnbSc6IC8vIG1vdmVUb1xuXG5cdFx0XHRcdFx0eCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHR5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5tb3ZlVG8oIHgsIHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2wnOiAvLyBsaW5lVG9cblxuXHRcdFx0XHRcdHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0eSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdxJzogLy8gcXVhZHJhdGljQ3VydmVUb1xuXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGNweDEsIGNweTEsIGNweCwgY3B5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdiJzogLy8gYmV6aWVyQ3VydmVUb1xuXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgxID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cdFx0XHRcdFx0Y3B4MiA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRjcHkyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5iZXppZXJDdXJ2ZVRvKCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyLCBjcHgsIGNweSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgb2Zmc2V0WDogZ2x5cGguaGEgKiBzY2FsZSwgcGF0aDogcGF0aCB9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGb250TG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZvbnRMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHZhciBqc29uO1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0ICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZvbnRMb2FkZXI6IHR5cGVmYWNlLmpzIHN1cHBvcnQgaXMgYmVpbmcgZGVwcmVjYXRlZC4gVXNlIHR5cGVmYWNlLmpzb24gaW5zdGVhZC4nICk7XG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0LnN1YnN0cmluZyggNjUsIHRleHQubGVuZ3RoIC0gMiApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGZvbnQgPSBzY29wZS5wYXJzZSgganNvbiApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggZm9udCApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHJldHVybiBuZXcgRm9udCgganNvbiApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIGNvbnRleHQ7XG5cbnZhciBBdWRpb0NvbnRleHQgPSB7XG5cblx0Z2V0Q29udGV4dDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCBjb250ZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnRleHQgPSBuZXcgKCB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgKSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnRleHQ7XG5cblx0fSxcblxuXHRzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29udGV4dCA9IHZhbHVlO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFJlZWNlIEFhcm9uIExlY3JpdmFpbiAvIGh0dHA6Ly9yZWVjZW5vdGVzLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpb0xvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBBdWRpb0xvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2Rcblx0XHRcdC8vIGRldGFjaGVzIHRoZSBidWZmZXIgd2hlbiBjb21wbGV0ZSwgcHJldmVudGluZyByZXVzZS5cblx0XHRcdHZhciBidWZmZXJDb3B5ID0gYnVmZmVyLnNsaWNlKCAwICk7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcblx0XHRcdGNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBidWZmZXJDb3B5LCBmdW5jdGlvbiAoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0XHRcdG9uTG9hZCggYXVkaW9CdWZmZXIgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3RlcmVvQ2FtZXJhKCkge1xuXG5cdHRoaXMudHlwZSA9ICdTdGVyZW9DYW1lcmEnO1xuXG5cdHRoaXMuYXNwZWN0ID0gMTtcblxuXHR0aGlzLmV5ZVNlcCA9IDAuMDY0O1xuXG5cdHRoaXMuY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHR0aGlzLmNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xuXHR0aGlzLmNhbWVyYUwubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHR0aGlzLmNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApO1xuXHR0aGlzLmNhbWVyYVIubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFN0ZXJlb0NhbWVyYS5wcm90b3R5cGUsIHtcblxuXHR1cGRhdGU6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGluc3RhbmNlLCBmb2N1cywgZm92LCBhc3BlY3QsIG5lYXIsIGZhciwgem9vbSwgZXllU2VwO1xuXG5cdFx0dmFyIGV5ZVJpZ2h0ID0gbmV3IE1hdHJpeDQoKTtcblx0XHR2YXIgZXllTGVmdCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCBjYW1lcmEgKSB7XG5cblx0XHRcdHZhciBuZWVkc1VwZGF0ZSA9IGluc3RhbmNlICE9PSB0aGlzIHx8IGZvY3VzICE9PSBjYW1lcmEuZm9jdXMgfHwgZm92ICE9PSBjYW1lcmEuZm92IHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdCB8fCBuZWFyICE9PSBjYW1lcmEubmVhciB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZmFyICE9PSBjYW1lcmEuZmFyIHx8IHpvb20gIT09IGNhbWVyYS56b29tIHx8IGV5ZVNlcCAhPT0gdGhpcy5leWVTZXA7XG5cblx0XHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdFx0aW5zdGFuY2UgPSB0aGlzO1xuXHRcdFx0XHRmb2N1cyA9IGNhbWVyYS5mb2N1cztcblx0XHRcdFx0Zm92ID0gY2FtZXJhLmZvdjtcblx0XHRcdFx0YXNwZWN0ID0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0O1xuXHRcdFx0XHRuZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRcdGZhciA9IGNhbWVyYS5mYXI7XG5cdFx0XHRcdHpvb20gPSBjYW1lcmEuem9vbTtcblxuXHRcdFx0XHQvLyBPZmYtYXhpcyBzdGVyZW9zY29waWMgZWZmZWN0IGJhc2VkIG9uXG5cdFx0XHRcdC8vIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9zdGVyZW9ncmFwaGljcy9zdGVyZW9yZW5kZXIvXG5cblx0XHRcdFx0dmFyIHByb2plY3Rpb25NYXRyaXggPSBjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5jbG9uZSgpO1xuXHRcdFx0XHRleWVTZXAgPSB0aGlzLmV5ZVNlcCAvIDI7XG5cdFx0XHRcdHZhciBleWVTZXBPblByb2plY3Rpb24gPSBleWVTZXAgKiBuZWFyIC8gZm9jdXM7XG5cdFx0XHRcdHZhciB5bWF4ID0gKCBuZWFyICogTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiBmb3YgKiAwLjUgKSApIC8gem9vbTtcblx0XHRcdFx0dmFyIHhtaW4sIHhtYXg7XG5cblx0XHRcdFx0Ly8gdHJhbnNsYXRlIHhPZmZzZXRcblxuXHRcdFx0XHRleWVMZWZ0LmVsZW1lbnRzWyAxMiBdID0gLSBleWVTZXA7XG5cdFx0XHRcdGV5ZVJpZ2h0LmVsZW1lbnRzWyAxMiBdID0gZXllU2VwO1xuXG5cdFx0XHRcdC8vIGZvciBsZWZ0IGV5ZVxuXG5cdFx0XHRcdHhtaW4gPSAtIHltYXggKiBhc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cdFx0XHRcdHhtYXggPSB5bWF4ICogYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSA9IDIgKiBuZWFyIC8gKCB4bWF4IC0geG1pbiApO1xuXHRcdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XG5cblx0XHRcdFx0dGhpcy5jYW1lcmFMLnByb2plY3Rpb25NYXRyaXguY29weSggcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHRcdC8vIGZvciByaWdodCBleWVcblxuXHRcdFx0XHR4bWluID0gLSB5bWF4ICogYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0XHR4bWF4ID0geW1heCAqIGFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblxuXHRcdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogbmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHRcdHRoaXMuY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNhbWVyYUwubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIGV5ZUxlZnQgKTtcblx0XHRcdHRoaXMuY2FtZXJhUi5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggZXllUmlnaHQgKTtcblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIENhbWVyYSBmb3IgcmVuZGVyaW5nIGN1YmUgbWFwc1xuICpcdC0gcmVuZGVycyBzY2VuZSBpbnRvIGF4aXMtYWxpZ25lZCBjdWJlXG4gKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDdWJlQ2FtZXJhKCBuZWFyLCBmYXIsIGN1YmVSZXNvbHV0aW9uLCBvcHRpb25zICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3ViZUNhbWVyYSc7XG5cblx0dmFyIGZvdiA9IDkwLCBhc3BlY3QgPSAxO1xuXG5cdHZhciBjYW1lcmFQWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFQWC51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRjYW1lcmFQWC5sb29rQXQoIG5ldyBWZWN0b3IzKCAxLCAwLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYVBYICk7XG5cblx0dmFyIGNhbWVyYU5YID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYU5YLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYU5YLmxvb2tBdCggbmV3IFZlY3RvcjMoIC0gMSwgMCwgMCApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFOWCApO1xuXG5cdHZhciBjYW1lcmFQWSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFQWS51cC5zZXQoIDAsIDAsIDEgKTtcblx0Y2FtZXJhUFkubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFQWSApO1xuXG5cdHZhciBjYW1lcmFOWSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFOWS51cC5zZXQoIDAsIDAsIC0gMSApO1xuXHRjYW1lcmFOWS5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAtIDEsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhTlkgKTtcblxuXHR2YXIgY2FtZXJhUFogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhUFoudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhUFoubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMCwgMSApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFQWiApO1xuXG5cdHZhciBjYW1lcmFOWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFOWi51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRjYW1lcmFOWi5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhTlogKTtcblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7IGZvcm1hdDogUkdCRm9ybWF0LCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgbWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIgfTtcblxuXHR0aGlzLnJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldEN1YmUoIGN1YmVSZXNvbHV0aW9uLCBjdWJlUmVzb2x1dGlvbiwgb3B0aW9ucyApO1xuXHR0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSBcIkN1YmVDYW1lcmFcIjtcblxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdHZhciByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldDtcblx0XHR2YXIgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSAwO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBYLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IDE7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlgsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlID0gMjtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSAzO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5ZLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IDQ7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFosIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlID0gNTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFOWiwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSBpO1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0cmVuZGVyZXIuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBudWxsICk7XG5cblx0fTtcblxufVxuXG5DdWJlQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuQ3ViZUNhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlQ2FtZXJhO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gQ2xvY2soIGF1dG9TdGFydCApIHtcblxuXHR0aGlzLmF1dG9TdGFydCA9ICggYXV0b1N0YXJ0ICE9PSB1bmRlZmluZWQgKSA/IGF1dG9TdGFydCA6IHRydWU7XG5cblx0dGhpcy5zdGFydFRpbWUgPSAwO1xuXHR0aGlzLm9sZFRpbWUgPSAwO1xuXHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuXHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBDbG9jay5wcm90b3R5cGUsIHtcblxuXHRzdGFydDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zdGFydFRpbWUgPSAoIHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcgPyBEYXRlIDogcGVyZm9ybWFuY2UgKS5ub3coKTsgLy8gc2VlICMxMDczMlxuXG5cdFx0dGhpcy5vbGRUaW1lID0gdGhpcy5zdGFydFRpbWU7XG5cdFx0dGhpcy5lbGFwc2VkVGltZSA9IDA7XG5cdFx0dGhpcy5ydW5uaW5nID0gdHJ1ZTtcblxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ2V0RWxhcHNlZFRpbWUoKTtcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblx0XHR0aGlzLmF1dG9TdGFydCA9IGZhbHNlO1xuXG5cdH0sXG5cblx0Z2V0RWxhcHNlZFRpbWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ2V0RGVsdGEoKTtcblx0XHRyZXR1cm4gdGhpcy5lbGFwc2VkVGltZTtcblxuXHR9LFxuXG5cdGdldERlbHRhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGlmZiA9IDA7XG5cblx0XHRpZiAoIHRoaXMuYXV0b1N0YXJ0ICYmICEgdGhpcy5ydW5uaW5nICkge1xuXG5cdFx0XHR0aGlzLnN0YXJ0KCk7XG5cdFx0XHRyZXR1cm4gMDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ydW5uaW5nICkge1xuXG5cdFx0XHR2YXIgbmV3VGltZSA9ICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpO1xuXG5cdFx0XHRkaWZmID0gKCBuZXdUaW1lIC0gdGhpcy5vbGRUaW1lICkgLyAxMDAwO1xuXHRcdFx0dGhpcy5vbGRUaW1lID0gbmV3VGltZTtcblxuXHRcdFx0dGhpcy5lbGFwc2VkVGltZSArPSBkaWZmO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRpZmY7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpb0xpc3RlbmVyKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQXVkaW9MaXN0ZW5lcic7XG5cblx0dGhpcy5jb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcblxuXHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdHRoaXMudGltZURlbHRhID0gMDtcblxufVxuXG5BdWRpb0xpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEF1ZGlvTGlzdGVuZXIsXG5cblx0Z2V0SW5wdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fSxcblxuXHRyZW1vdmVGaWx0ZXI6IGZ1bmN0aW9uICggKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHRcdHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRGaWx0ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcjtcblxuXHR9LFxuXG5cdHNldEZpbHRlcjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmZpbHRlciA9IHZhbHVlO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdHRoaXMuZmlsdGVyLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXN0ZXJWb2x1bWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9LFxuXG5cdHNldE1hc3RlclZvbHVtZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIG9yaWVudGF0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgY2xvY2sgPSBuZXcgQ2xvY2soKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0XHR2YXIgbGlzdGVuZXIgPSB0aGlzLmNvbnRleHQubGlzdGVuZXI7XG5cdFx0XHR2YXIgdXAgPSB0aGlzLnVwO1xuXG5cdFx0XHR0aGlzLnRpbWVEZWx0YSA9IGNsb2NrLmdldERlbHRhKCk7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKTtcblxuXHRcdFx0b3JpZW50YXRpb24uc2V0KCAwLCAwLCAtIDEgKS5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdFx0aWYgKCBsaXN0ZW5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdFx0Ly8gY29kZSBwYXRoIGZvciBDaHJvbWUgKHNlZSAjMTQzOTMpXG5cblx0XHRcdFx0dmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLnRpbWVEZWx0YTtcblxuXHRcdFx0XHRsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHBvc2l0aW9uLngsIGVuZFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBwb3NpdGlvbi55LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggcG9zaXRpb24ueiwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueiwgZW5kVGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLngsIGVuZFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIudXBZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC55LCBlbmRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnVwWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueiwgZW5kVGltZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGxpc3RlbmVyLnNldFBvc2l0aW9uKCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGxpc3RlbmVyLnNldE9yaWVudGF0aW9uKCBvcmllbnRhdGlvbi54LCBvcmllbnRhdGlvbi55LCBvcmllbnRhdGlvbi56LCB1cC54LCB1cC55LCB1cC56ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFJlZWNlIEFhcm9uIExlY3JpdmFpbiAvIGh0dHA6Ly9yZWVjZW5vdGVzLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpbyggbGlzdGVuZXIgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdBdWRpbyc7XG5cblx0dGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXHR0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0O1xuXG5cdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdHRoaXMuZ2Fpbi5jb25uZWN0KCBsaXN0ZW5lci5nZXRJbnB1dCgpICk7XG5cblx0dGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdHRoaXMuYnVmZmVyID0gbnVsbDtcblx0dGhpcy5sb29wID0gZmFsc2U7XG5cdHRoaXMuc3RhcnRUaW1lID0gMDtcblx0dGhpcy5vZmZzZXQgPSAwO1xuXHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XG5cdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gdHJ1ZTtcblx0dGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JztcblxuXHR0aGlzLmZpbHRlcnMgPSBbXTtcblxufVxuXG5BdWRpby5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBdWRpbyxcblxuXHRnZXRPdXRwdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fSxcblxuXHRzZXROb2RlU291cmNlOiBmdW5jdGlvbiAoIGF1ZGlvTm9kZSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2F1ZGlvTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSBhdWRpb05vZGU7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldE1lZGlhRWxlbWVudFNvdXJjZTogZnVuY3Rpb24gKCBtZWRpYUVsZW1lbnQgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdtZWRpYU5vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSggbWVkaWFFbGVtZW50ICk7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEJ1ZmZlcjogZnVuY3Rpb24gKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdHRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XG5cblx0XHRpZiAoIHRoaXMuYXV0b3BsYXkgKSB0aGlzLnBsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cGxheTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IEF1ZGlvIGlzIGFscmVhZHkgcGxheWluZy4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblxuXHRcdHNvdXJjZS5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0XHRzb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblx0XHRzb3VyY2Uub25lbmRlZCA9IHRoaXMub25FbmRlZC5iaW5kKCB0aGlzICk7XG5cdFx0c291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuc3RhcnRUaW1lICk7XG5cdFx0dGhpcy5zdGFydFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWU7XG5cdFx0c291cmNlLnN0YXJ0KCB0aGlzLnN0YXJ0VGltZSwgdGhpcy5vZmZzZXQgKTtcblxuXHRcdHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTtcblxuXHRcdHRoaXMuc291cmNlID0gc291cmNlO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29ubmVjdCgpO1xuXG5cdH0sXG5cblx0cGF1c2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5zdG9wKCk7XG5cdFx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcblx0XHRcdHRoaXMub2Zmc2V0ICs9ICggdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lIC0gdGhpcy5zdGFydFRpbWUgKSAqIHRoaXMucGxheWJhY2tSYXRlO1xuXHRcdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcblx0XHR0aGlzLm9mZnNldCA9IDA7XG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29ubmVjdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuY29ubmVjdCggdGhpcy5maWx0ZXJzWyAwIF0gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmNvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzY29ubmVjdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyAwIF0gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0RmlsdGVyczogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVycztcblxuXHR9LFxuXG5cdHNldEZpbHRlcnM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoICEgdmFsdWUgKSB2YWx1ZSA9IFtdO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZTtcblx0XHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5maWx0ZXJzID0gdmFsdWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEZpbHRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RmlsdGVycygpWyAwIF07XG5cblx0fSxcblxuXHRzZXRGaWx0ZXI6IGZ1bmN0aW9uICggZmlsdGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RmlsdGVycyggZmlsdGVyID8gWyBmaWx0ZXIgXSA6IFtdICk7XG5cblx0fSxcblxuXHRzZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wbGF5YmFja1JhdGUgPSB2YWx1ZTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBsYXliYWNrUmF0ZTtcblxuXHR9LFxuXG5cdG9uRW5kZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0fSxcblxuXHRnZXRMb29wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubG9vcDtcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5sb29wID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5sb29wID0gdGhpcy5sb29wO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRWb2x1bWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9LFxuXG5cdHNldFZvbHVtZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBQb3NpdGlvbmFsQXVkaW8oIGxpc3RlbmVyICkge1xuXG5cdEF1ZGlvLmNhbGwoIHRoaXMsIGxpc3RlbmVyICk7XG5cblx0dGhpcy5wYW5uZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlUGFubmVyKCk7XG5cdHRoaXMucGFubmVyLmNvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG59XG5cblBvc2l0aW9uYWxBdWRpby5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBBdWRpby5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQb3NpdGlvbmFsQXVkaW8sXG5cblx0Z2V0T3V0cHV0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXI7XG5cblx0fSxcblxuXHRnZXRSZWZEaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLnJlZkRpc3RhbmNlO1xuXG5cdH0sXG5cblx0c2V0UmVmRGlzdGFuY2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yZWZEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRSb2xsb2ZmRmFjdG9yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvcjtcblxuXHR9LFxuXG5cdHNldFJvbGxvZmZGYWN0b3I6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldERpc3RhbmNlTW9kZWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsO1xuXG5cdH0sXG5cblx0c2V0RGlzdGFuY2VNb2RlbDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWwgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5tYXhEaXN0YW5jZTtcblxuXHR9LFxuXG5cdHNldE1heERpc3RhbmNlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIubWF4RGlzdGFuY2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RGlyZWN0aW9uYWxDb25lOiBmdW5jdGlvbiAoIGNvbmVJbm5lckFuZ2xlLCBjb25lT3V0ZXJBbmdsZSwgY29uZU91dGVyR2FpbiApIHtcblxuXHRcdHRoaXMucGFubmVyLmNvbmVJbm5lckFuZ2xlID0gY29uZUlubmVyQW5nbGU7XG5cdFx0dGhpcy5wYW5uZXIuY29uZU91dGVyQW5nbGUgPSBjb25lT3V0ZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJHYWluID0gY29uZU91dGVyR2FpbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0dmFyIHNjYWxlID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBvcmllbnRhdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0XHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHRcdFx0dmFyIHBhbm5lciA9IHRoaXMucGFubmVyO1xuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApO1xuXG5cdFx0XHRvcmllbnRhdGlvbi5zZXQoIDAsIDAsIDEgKS5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdFx0aWYgKCBwYW5uZXIucG9zaXRpb25YICkge1xuXG5cdFx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIGFuZCBGaXJlZm94IChzZWUgIzE0MzkzKVxuXG5cdFx0XHRcdHZhciBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy5saXN0ZW5lci50aW1lRGVsdGE7XG5cblx0XHRcdFx0cGFubmVyLnBvc2l0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggcG9zaXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0XHRwYW5uZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBwb3NpdGlvbi55LCBlbmRUaW1lICk7XG5cdFx0XHRcdHBhbm5lci5wb3NpdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHBvc2l0aW9uLnosIGVuZFRpbWUgKTtcblx0XHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0XHRwYW5uZXIub3JpZW50YXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi55LCBlbmRUaW1lICk7XG5cdFx0XHRcdHBhbm5lci5vcmllbnRhdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIG9yaWVudGF0aW9uLnosIGVuZFRpbWUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRwYW5uZXIuc2V0UG9zaXRpb24oIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKTtcblx0XHRcdFx0cGFubmVyLnNldE9yaWVudGF0aW9uKCBvcmllbnRhdGlvbi54LCBvcmllbnRhdGlvbi55LCBvcmllbnRhdGlvbi56ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSApKClcblxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpb0FuYWx5c2VyKCBhdWRpbywgZmZ0U2l6ZSApIHtcblxuXHR0aGlzLmFuYWx5c2VyID0gYXVkaW8uY29udGV4dC5jcmVhdGVBbmFseXNlcigpO1xuXHR0aGlzLmFuYWx5c2VyLmZmdFNpemUgPSBmZnRTaXplICE9PSB1bmRlZmluZWQgPyBmZnRTaXplIDogMjA0ODtcblxuXHR0aGlzLmRhdGEgPSBuZXcgVWludDhBcnJheSggdGhpcy5hbmFseXNlci5mcmVxdWVuY3lCaW5Db3VudCApO1xuXG5cdGF1ZGlvLmdldE91dHB1dCgpLmNvbm5lY3QoIHRoaXMuYW5hbHlzZXIgKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBBdWRpb0FuYWx5c2VyLnByb3RvdHlwZSwge1xuXG5cdGdldEZyZXF1ZW5jeURhdGE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuYW5hbHlzZXIuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEoIHRoaXMuZGF0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblxuXHR9LFxuXG5cdGdldEF2ZXJhZ2VGcmVxdWVuY3k6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2YWx1ZSA9IDAsIGRhdGEgPSB0aGlzLmdldEZyZXF1ZW5jeURhdGEoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YWx1ZSArPSBkYXRhWyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWUgLyBkYXRhLmxlbmd0aDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQnVmZmVyZWQgc2NlbmUgZ3JhcGggcHJvcGVydHkgdGhhdCBhbGxvd3Mgd2VpZ2h0ZWQgYWNjdW11bGF0aW9uLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUHJvcGVydHlNaXhlciggYmluZGluZywgdHlwZU5hbWUsIHZhbHVlU2l6ZSApIHtcblxuXHR0aGlzLmJpbmRpbmcgPSBiaW5kaW5nO1xuXHR0aGlzLnZhbHVlU2l6ZSA9IHZhbHVlU2l6ZTtcblxuXHR2YXIgYnVmZmVyVHlwZSA9IEZsb2F0NjRBcnJheSxcblx0XHRtaXhGdW5jdGlvbjtcblxuXHRzd2l0Y2ggKCB0eXBlTmFtZSApIHtcblxuXHRcdGNhc2UgJ3F1YXRlcm5pb24nOlxuXHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zbGVycDtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnc3RyaW5nJzpcblx0XHRjYXNlICdib29sJzpcblx0XHRcdGJ1ZmZlclR5cGUgPSBBcnJheTtcblx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2VsZWN0O1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9sZXJwO1xuXG5cdH1cblxuXHR0aGlzLmJ1ZmZlciA9IG5ldyBidWZmZXJUeXBlKCB2YWx1ZVNpemUgKiA0ICk7XG5cdC8vIGxheW91dDogWyBpbmNvbWluZyB8IGFjY3UwIHwgYWNjdTEgfCBvcmlnIF1cblx0Ly9cblx0Ly8gaW50ZXJwb2xhdG9ycyBjYW4gdXNlIC5idWZmZXIgYXMgdGhlaXIgLnJlc3VsdFxuXHQvLyB0aGUgZGF0YSB0aGVuIGdvZXMgdG8gJ2luY29taW5nJ1xuXHQvL1xuXHQvLyAnYWNjdTAnIGFuZCAnYWNjdTEnIGFyZSB1c2VkIGZyYW1lLWludGVybGVhdmVkIGZvclxuXHQvLyB0aGUgY3VtdWxhdGl2ZSByZXN1bHQgYW5kIGFyZSBjb21wYXJlZCB0byBkZXRlY3Rcblx0Ly8gY2hhbmdlc1xuXHQvL1xuXHQvLyAnb3JpZycgc3RvcmVzIHRoZSBvcmlnaW5hbCBzdGF0ZSBvZiB0aGUgcHJvcGVydHlcblxuXHR0aGlzLl9taXhCdWZmZXJSZWdpb24gPSBtaXhGdW5jdGlvbjtcblxuXHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXG5cdHRoaXMudXNlQ291bnQgPSAwO1xuXHR0aGlzLnJlZmVyZW5jZUNvdW50ID0gMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eU1peGVyLnByb3RvdHlwZSwge1xuXG5cdC8vIGFjY3VtdWxhdGUgZGF0YSBpbiB0aGUgJ2luY29taW5nJyByZWdpb24gaW50byAnYWNjdTxpPidcblx0YWNjdW11bGF0ZTogZnVuY3Rpb24gKCBhY2N1SW5kZXgsIHdlaWdodCApIHtcblxuXHRcdC8vIG5vdGU6IGhhcHBpbHkgYWNjdW11bGF0aW5nIG5vdGhpbmcgd2hlbiB3ZWlnaHQgPSAwLCB0aGUgY2FsbGVyIGtub3dzXG5cdFx0Ly8gdGhlIHdlaWdodCBhbmQgc2hvdWxkbid0IGhhdmUgbWFkZSB0aGUgY2FsbCBpbiB0aGUgZmlyc3QgcGxhY2VcblxuXHRcdHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gYWNjdUluZGV4ICogc3RyaWRlICsgc3RyaWRlLFxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0O1xuXG5cdFx0aWYgKCBjdXJyZW50V2VpZ2h0ID09PSAwICkge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBpbmNvbWluZyAqIHdlaWdodFxuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIG9mZnNldCArIGkgXSA9IGJ1ZmZlclsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGN1cnJlbnRXZWlnaHQgPSB3ZWlnaHQ7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIGluY29taW5nICogd2VpZ2h0XG5cblx0XHRcdGN1cnJlbnRXZWlnaHQgKz0gd2VpZ2h0O1xuXHRcdFx0dmFyIG1peCA9IHdlaWdodCAvIGN1cnJlbnRXZWlnaHQ7XG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24oIGJ1ZmZlciwgb2Zmc2V0LCAwLCBtaXgsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gY3VycmVudFdlaWdodDtcblxuXHR9LFxuXG5cdC8vIGFwcGx5IHRoZSBzdGF0ZSBvZiAnYWNjdTxpPicgdG8gdGhlIGJpbmRpbmcgd2hlbiBhY2N1cyBkaWZmZXJcblx0YXBwbHk6IGZ1bmN0aW9uICggYWNjdUluZGV4ICkge1xuXG5cdFx0dmFyIHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0YnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGUsXG5cblx0XHRcdHdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodCxcblxuXHRcdFx0YmluZGluZyA9IHRoaXMuYmluZGluZztcblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cblx0XHRpZiAoIHdlaWdodCA8IDEgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgb3JpZ2luYWwgKiAoIDEgLSBjdW11bGF0aXZlV2VpZ2h0IClcblxuXHRcdFx0dmFyIG9yaWdpbmFsVmFsdWVPZmZzZXQgPSBzdHJpZGUgKiAzO1xuXG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24oXG5cdFx0XHRcdGJ1ZmZlciwgb2Zmc2V0LCBvcmlnaW5hbFZhbHVlT2Zmc2V0LCAxIC0gd2VpZ2h0LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gc3RyaWRlLCBlID0gc3RyaWRlICsgc3RyaWRlOyBpICE9PSBlOyArKyBpICkge1xuXG5cdFx0XHRpZiAoIGJ1ZmZlclsgaSBdICE9PSBidWZmZXJbIGkgKyBzdHJpZGUgXSApIHtcblxuXHRcdFx0XHQvLyB2YWx1ZSBoYXMgY2hhbmdlZCAtPiB1cGRhdGUgc2NlbmUgZ3JhcGhcblxuXHRcdFx0XHRiaW5kaW5nLnNldFZhbHVlKCBidWZmZXIsIG9mZnNldCApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gcmVtZW1iZXIgdGhlIHN0YXRlIG9mIHRoZSBib3VuZCBwcm9wZXJ0eSBhbmQgY29weSBpdCB0byBib3RoIGFjY3VzXG5cdHNhdmVPcmlnaW5hbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYmluZGluZyA9IHRoaXMuYmluZGluZztcblxuXHRcdHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogMztcblxuXHRcdGJpbmRpbmcuZ2V0VmFsdWUoIGJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCApO1xuXG5cdFx0Ly8gYWNjdVswLi4xXSA6PSBvcmlnIC0tIGluaXRpYWxseSBkZXRlY3QgY2hhbmdlcyBhZ2FpbnN0IHRoZSBvcmlnaW5hbFxuXHRcdGZvciAoIHZhciBpID0gc3RyaWRlLCBlID0gb3JpZ2luYWxWYWx1ZU9mZnNldDsgaSAhPT0gZTsgKysgaSApIHtcblxuXHRcdFx0YnVmZmVyWyBpIF0gPSBidWZmZXJbIG9yaWdpbmFsVmFsdWVPZmZzZXQgKyAoIGkgJSBzdHJpZGUgKSBdO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblxuXHR9LFxuXG5cdC8vIGFwcGx5IHRoZSBzdGF0ZSBwcmV2aW91c2x5IHRha2VuIHZpYSAnc2F2ZU9yaWdpbmFsU3RhdGUnIHRvIHRoZSBiaW5kaW5nXG5cdHJlc3RvcmVPcmlnaW5hbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHRoaXMudmFsdWVTaXplICogMztcblx0XHR0aGlzLmJpbmRpbmcuc2V0VmFsdWUoIHRoaXMuYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0fSxcblxuXG5cdC8vIG1peCBmdW5jdGlvbnNcblxuXHRfc2VsZWN0OiBmdW5jdGlvbiAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGlmICggdCA+PSAwLjUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgZHN0T2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdF9zbGVycDogZnVuY3Rpb24gKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0ICkge1xuXG5cdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQsIHQgKTtcblxuXHR9LFxuXG5cdF9sZXJwOiBmdW5jdGlvbiAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdHZhciBzID0gMSAtIHQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0dmFyIGogPSBkc3RPZmZzZXQgKyBpO1xuXG5cdFx0XHRidWZmZXJbIGogXSA9IGJ1ZmZlclsgaiBdICogcyArIGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdICogdDtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSByZWZlcmVuY2UgdG8gYSByZWFsIHByb3BlcnR5IGluIHRoZSBzY2VuZSBncmFwaC5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbi8vIENoYXJhY3RlcnMgW10uOi8gYXJlIHJlc2VydmVkIGZvciB0cmFjayBiaW5kaW5nIHN5bnRheC5cbnZhciBSRVNFUlZFRF9DSEFSU19SRSA9ICdcXFxcW1xcXFxdXFxcXC46XFxcXC8nO1xuXG5mdW5jdGlvbiBDb21wb3NpdGUoIHRhcmdldEdyb3VwLCBwYXRoLCBvcHRpb25hbFBhcnNlZFBhdGggKSB7XG5cblx0dmFyIHBhcnNlZFBhdGggPSBvcHRpb25hbFBhcnNlZFBhdGggfHwgUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKCBwYXRoICk7XG5cblx0dGhpcy5fdGFyZ2V0R3JvdXAgPSB0YXJnZXRHcm91cDtcblx0dGhpcy5fYmluZGluZ3MgPSB0YXJnZXRHcm91cC5zdWJzY3JpYmVfKCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQ29tcG9zaXRlLnByb3RvdHlwZSwge1xuXG5cdGdldFZhbHVlOiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTsgLy8gYmluZCBhbGwgYmluZGluZ1xuXG5cdFx0dmFyIGZpcnN0VmFsaWRJbmRleCA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmcgPSB0aGlzLl9iaW5kaW5nc1sgZmlyc3RWYWxpZEluZGV4IF07XG5cblx0XHQvLyBhbmQgb25seSBjYWxsIC5nZXRWYWx1ZSBvbiB0aGUgZmlyc3Rcblx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIGJpbmRpbmcuZ2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKTtcblxuXHR9LFxuXG5cdHNldFZhbHVlOiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0XHQgIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uc2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRcdCAgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5iaW5kKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR1bmJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRcdCAgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS51bmJpbmQoKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuXG5mdW5jdGlvbiBQcm9wZXJ0eUJpbmRpbmcoIHJvb3ROb2RlLCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdHRoaXMucGF0aCA9IHBhdGg7XG5cdHRoaXMucGFyc2VkUGF0aCA9IHBhcnNlZFBhdGggfHwgUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKCBwYXRoICk7XG5cblx0dGhpcy5ub2RlID0gUHJvcGVydHlCaW5kaW5nLmZpbmROb2RlKCByb290Tm9kZSwgdGhpcy5wYXJzZWRQYXRoLm5vZGVOYW1lICkgfHwgcm9vdE5vZGU7XG5cblx0dGhpcy5yb290Tm9kZSA9IHJvb3ROb2RlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFByb3BlcnR5QmluZGluZywge1xuXG5cdENvbXBvc2l0ZTogQ29tcG9zaXRlLFxuXG5cdGNyZWF0ZTogZnVuY3Rpb24gKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0aWYgKCAhICggcm9vdCAmJiByb290LmlzQW5pbWF0aW9uT2JqZWN0R3JvdXAgKSApIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBuZXcgUHJvcGVydHlCaW5kaW5nLkNvbXBvc2l0ZSggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFJlcGxhY2VzIHNwYWNlcyB3aXRoIHVuZGVyc2NvcmVzIGFuZCByZW1vdmVzIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMgZnJvbVxuXHQgKiBub2RlIG5hbWVzLCB0byBlbnN1cmUgY29tcGF0aWJpbGl0eSB3aXRoIHBhcnNlVHJhY2tOYW1lKCkuXG5cdCAqXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gbmFtZSBOb2RlIG5hbWUgdG8gYmUgc2FuaXRpemVkLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRzYW5pdGl6ZU5vZGVOYW1lOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciByZXNlcnZlZFJlID0gbmV3IFJlZ0V4cCggJ1snICsgUkVTRVJWRURfQ0hBUlNfUkUgKyAnXScsICdnJyApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplTm9kZU5hbWUoIG5hbWUgKSB7XG5cblx0XHRcdHJldHVybiBuYW1lLnJlcGxhY2UoIC9cXHMvZywgJ18nICkucmVwbGFjZSggcmVzZXJ2ZWRSZSwgJycgKTtcblxuXHRcdH07XG5cblx0fSgpICksXG5cblx0cGFyc2VUcmFja05hbWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIEF0dGVtcHRzIHRvIGFsbG93IG5vZGUgbmFtZXMgZnJvbSBhbnkgbGFuZ3VhZ2UuIEVTNSdzIGBcXHdgIHJlZ2V4cCBtYXRjaGVzXG5cdFx0Ly8gb25seSBsYXRpbiBjaGFyYWN0ZXJzLCBhbmQgdGhlIHVuaWNvZGUgXFxwe0x9IGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBTb1xuXHRcdC8vIGluc3RlYWQsIHdlIGV4Y2x1ZGUgcmVzZXJ2ZWQgY2hhcmFjdGVycyBhbmQgbWF0Y2ggZXZlcnl0aGluZyBlbHNlLlxuXHRcdHZhciB3b3JkQ2hhciA9ICdbXicgKyBSRVNFUlZFRF9DSEFSU19SRSArICddJztcblx0XHR2YXIgd29yZENoYXJPckRvdCA9ICdbXicgKyBSRVNFUlZFRF9DSEFSU19SRS5yZXBsYWNlKCAnXFxcXC4nLCAnJyApICsgJ10nO1xuXG5cdFx0Ly8gUGFyZW50IGRpcmVjdG9yaWVzLCBkZWxpbWl0ZWQgYnkgJy8nIG9yICc6Jy4gQ3VycmVudGx5IHVudXNlZCwgYnV0IG11c3Rcblx0XHQvLyBiZSBtYXRjaGVkIHRvIHBhcnNlIHRoZSByZXN0IG9mIHRoZSB0cmFjayBuYW1lLlxuXHRcdHZhciBkaXJlY3RvcnlSZSA9IC8oKD86V0MrW1xcLzpdKSopLy5zb3VyY2UucmVwbGFjZSggJ1dDJywgd29yZENoYXIgKTtcblxuXHRcdC8vIFRhcmdldCBub2RlLiBNYXkgY29udGFpbiB3b3JkIGNoYXJhY3RlcnMgKGEtekEtWjAtOV8pIGFuZCAnLicgb3IgJy0nLlxuXHRcdHZhciBub2RlUmUgPSAvKFdDT0QrKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0NPRCcsIHdvcmRDaGFyT3JEb3QgKTtcblxuXHRcdC8vIE9iamVjdCBvbiB0YXJnZXQgbm9kZSwgYW5kIGFjY2Vzc29yLiBNYXkgbm90IGNvbnRhaW4gcmVzZXJ2ZWRcblx0XHQvLyBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXkgY29udGFpbiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBjbG9zaW5nIGJyYWNrZXQuXG5cdFx0dmFyIG9iamVjdFJlID0gLyg/OlxcLihXQyspKD86XFxbKC4rKVxcXSk/KT8vLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCB3b3JkQ2hhciApO1xuXG5cdFx0Ly8gUHJvcGVydHkgYW5kIGFjY2Vzc29yLiBNYXkgbm90IGNvbnRhaW4gcmVzZXJ2ZWQgY2hhcmFjdGVycy4gQWNjZXNzb3IgbWF5XG5cdFx0Ly8gY29udGFpbiBhbnkgbm9uLWJyYWNrZXQgY2hhcmFjdGVycy5cblx0XHR2YXIgcHJvcGVydHlSZSA9IC9cXC4oV0MrKSg/OlxcWyguKylcXF0pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIHdvcmRDaGFyICk7XG5cblx0XHR2YXIgdHJhY2tSZSA9IG5ldyBSZWdFeHAoICcnXG5cdFx0XHQrICdeJ1xuXHRcdFx0KyBkaXJlY3RvcnlSZVxuXHRcdFx0KyBub2RlUmVcblx0XHRcdCsgb2JqZWN0UmVcblx0XHRcdCsgcHJvcGVydHlSZVxuXHRcdFx0KyAnJCdcblx0XHQpO1xuXG5cdFx0dmFyIHN1cHBvcnRlZE9iamVjdE5hbWVzID0gWyAnbWF0ZXJpYWwnLCAnbWF0ZXJpYWxzJywgJ2JvbmVzJyBdO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHBhcnNlVHJhY2tOYW1lKCB0cmFja05hbWUgKSB7XG5cblx0XHRcdHZhciBtYXRjaGVzID0gdHJhY2tSZS5leGVjKCB0cmFja05hbWUgKTtcblxuXHRcdFx0aWYgKCAhIG1hdGNoZXMgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBDYW5ub3QgcGFyc2UgdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlc3VsdHMgPSB7XG5cdFx0XHRcdC8vIGRpcmVjdG9yeU5hbWU6IG1hdGNoZXNbIDEgXSwgLy8gKHRzY2h3KSBjdXJyZW50bHkgdW51c2VkXG5cdFx0XHRcdG5vZGVOYW1lOiBtYXRjaGVzWyAyIF0sXG5cdFx0XHRcdG9iamVjdE5hbWU6IG1hdGNoZXNbIDMgXSxcblx0XHRcdFx0b2JqZWN0SW5kZXg6IG1hdGNoZXNbIDQgXSxcblx0XHRcdFx0cHJvcGVydHlOYW1lOiBtYXRjaGVzWyA1IF0sIC8vIHJlcXVpcmVkXG5cdFx0XHRcdHByb3BlcnR5SW5kZXg6IG1hdGNoZXNbIDYgXVxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGxhc3REb3QgPSByZXN1bHRzLm5vZGVOYW1lICYmIHJlc3VsdHMubm9kZU5hbWUubGFzdEluZGV4T2YoICcuJyApO1xuXG5cdFx0XHRpZiAoIGxhc3REb3QgIT09IHVuZGVmaW5lZCAmJiBsYXN0RG90ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0dmFyIG9iamVjdE5hbWUgPSByZXN1bHRzLm5vZGVOYW1lLnN1YnN0cmluZyggbGFzdERvdCArIDEgKTtcblxuXHRcdFx0XHQvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYSB3aGl0ZWxpc3QuIE90aGVyd2lzZSwgdGhlcmVcblx0XHRcdFx0Ly8gaXMgbm8gd2F5IHRvIHBhcnNlICdmb28uYmFyLmJheic6ICdiYXonIG11c3QgYmUgYSBwcm9wZXJ0eSwgYnV0XG5cdFx0XHRcdC8vICdiYXInIGNvdWxkIGJlIHRoZSBvYmplY3ROYW1lLCBvciBwYXJ0IG9mIGEgbm9kZU5hbWUgKHdoaWNoIGNhblxuXHRcdFx0XHQvLyBpbmNsdWRlICcuJyBjaGFyYWN0ZXJzKS5cblx0XHRcdFx0aWYgKCBzdXBwb3J0ZWRPYmplY3ROYW1lcy5pbmRleE9mKCBvYmplY3ROYW1lICkgIT09IC0gMSApIHtcblxuXHRcdFx0XHRcdHJlc3VsdHMubm9kZU5hbWUgPSByZXN1bHRzLm5vZGVOYW1lLnN1YnN0cmluZyggMCwgbGFzdERvdCApO1xuXHRcdFx0XHRcdHJlc3VsdHMub2JqZWN0TmFtZSA9IG9iamVjdE5hbWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVzdWx0cy5wcm9wZXJ0eU5hbWUgPT09IG51bGwgfHwgcmVzdWx0cy5wcm9wZXJ0eU5hbWUubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogY2FuIG5vdCBwYXJzZSBwcm9wZXJ0eU5hbWUgZnJvbSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGZpbmROb2RlOiBmdW5jdGlvbiAoIHJvb3QsIG5vZGVOYW1lICkge1xuXG5cdFx0aWYgKCAhIG5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSBcIlwiIHx8IG5vZGVOYW1lID09PSBcInJvb3RcIiB8fCBub2RlTmFtZSA9PT0gXCIuXCIgfHwgbm9kZU5hbWUgPT09IC0gMSB8fCBub2RlTmFtZSA9PT0gcm9vdC5uYW1lIHx8IG5vZGVOYW1lID09PSByb290LnV1aWQgKSB7XG5cblx0XHRcdHJldHVybiByb290O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VhcmNoIGludG8gc2tlbGV0b24gYm9uZXMuXG5cdFx0aWYgKCByb290LnNrZWxldG9uICkge1xuXG5cdFx0XHR2YXIgYm9uZSA9IHJvb3Quc2tlbGV0b24uZ2V0Qm9uZUJ5TmFtZSggbm9kZU5hbWUgKTtcblxuXHRcdFx0aWYgKCBib25lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIG5vZGUgc3VidHJlZS5cblx0XHRpZiAoIHJvb3QuY2hpbGRyZW4gKSB7XG5cblx0XHRcdHZhciBzZWFyY2hOb2RlU3VidHJlZSA9IGZ1bmN0aW9uICggY2hpbGRyZW4gKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNoaWxkTm9kZSA9IGNoaWxkcmVuWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIGNoaWxkTm9kZS5uYW1lID09PSBub2RlTmFtZSB8fCBjaGlsZE5vZGUudXVpZCA9PT0gbm9kZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZE5vZGU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gc2VhcmNoTm9kZVN1YnRyZWUoIGNoaWxkTm9kZS5jaGlsZHJlbiApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXN1bHQgKSByZXR1cm4gcmVzdWx0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHN1YlRyZWVOb2RlID0gc2VhcmNoTm9kZVN1YnRyZWUoIHJvb3QuY2hpbGRyZW4gKTtcblxuXHRcdFx0aWYgKCBzdWJUcmVlTm9kZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gc3ViVHJlZU5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLCB7IC8vIHByb3RvdHlwZSwgY29udGludWVkXG5cblx0Ly8gdGhlc2UgYXJlIHVzZWQgdG8gXCJiaW5kXCIgYSBub25leGlzdGVudCBwcm9wZXJ0eVxuXHRfZ2V0VmFsdWVfdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHt9LFxuXHRfc2V0VmFsdWVfdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdEJpbmRpbmdUeXBlOiB7XG5cdFx0RGlyZWN0OiAwLFxuXHRcdEVudGlyZUFycmF5OiAxLFxuXHRcdEFycmF5RWxlbWVudDogMixcblx0XHRIYXNGcm9tVG9BcnJheTogM1xuXHR9LFxuXG5cdFZlcnNpb25pbmc6IHtcblx0XHROb25lOiAwLFxuXHRcdE5lZWRzVXBkYXRlOiAxLFxuXHRcdE1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6IDJcblx0fSxcblxuXHRHZXR0ZXJCeUJpbmRpbmdUeXBlOiBbXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy5ub2RlWyB0aGlzLnByb3BlcnR5TmFtZSBdO1xuXG5cdFx0fSxcblxuXHRcdGZ1bmN0aW9uIGdldFZhbHVlX2FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0dmFyIHNvdXJjZSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gc291cmNlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIG9mZnNldCArKyBdID0gc291cmNlWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXTtcblxuXHRcdH0sXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV90b0FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LnRvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0XSxcblxuXHRTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZzogW1xuXG5cdFx0W1xuXHRcdFx0Ly8gRGlyZWN0XG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2RpcmVjdCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9kaXJlY3Rfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9kaXJlY3Rfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XSwgW1xuXG5cdFx0XHQvLyBFbnRpcmVBcnJheVxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dmFyIGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdLCBbXG5cblx0XHRcdC8vIEFycmF5RWxlbWVudFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdF0sIFtcblxuXHRcdFx0Ly8gSGFzVG9Gcm9tQXJyYXlcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdXG5cblx0XSxcblxuXHRnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVfdW5ib3VuZCggdGFyZ2V0QXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpO1xuXHRcdHRoaXMuZ2V0VmFsdWUoIHRhcmdldEFycmF5LCBvZmZzZXQgKTtcblxuXHRcdC8vIE5vdGU6IFRoaXMgY2xhc3MgdXNlcyBhIFN0YXRlIHBhdHRlcm4gb24gYSBwZXItbWV0aG9kIGJhc2lzOlxuXHRcdC8vICdiaW5kJyBzZXRzICd0aGlzLmdldFZhbHVlJyAvICdzZXRWYWx1ZScgYW5kIHNoYWRvd3MgdGhlXG5cdFx0Ly8gcHJvdG90eXBlIHZlcnNpb24gb2YgdGhlc2UgbWV0aG9kcyB3aXRoIG9uZSB0aGF0IHJlcHJlc2VudHNcblx0XHQvLyB0aGUgYm91bmQgc3RhdGUuIFdoZW4gdGhlIHByb3BlcnR5IGlzIG5vdCBmb3VuZCwgdGhlIG1ldGhvZHNcblx0XHQvLyBiZWNvbWUgbm8tb3BzLlxuXG5cdH0sXG5cblx0c2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlX3VuYm91bmQoIHNvdXJjZUFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTtcblx0XHR0aGlzLnNldFZhbHVlKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblxuXHQvLyBjcmVhdGUgZ2V0dGVyIC8gc2V0dGVyIHBhaXIgZm9yIGEgcHJvcGVydHkgaW4gdGhlIHNjZW5lIGdyYXBoXG5cdGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0YXJnZXRPYmplY3QgPSB0aGlzLm5vZGUsXG5cdFx0XHRwYXJzZWRQYXRoID0gdGhpcy5wYXJzZWRQYXRoLFxuXG5cdFx0XHRvYmplY3ROYW1lID0gcGFyc2VkUGF0aC5vYmplY3ROYW1lLFxuXHRcdFx0cHJvcGVydHlOYW1lID0gcGFyc2VkUGF0aC5wcm9wZXJ0eU5hbWUsXG5cdFx0XHRwcm9wZXJ0eUluZGV4ID0gcGFyc2VkUGF0aC5wcm9wZXJ0eUluZGV4O1xuXG5cdFx0aWYgKCAhIHRhcmdldE9iamVjdCApIHtcblxuXHRcdFx0dGFyZ2V0T2JqZWN0ID0gUHJvcGVydHlCaW5kaW5nLmZpbmROb2RlKCB0aGlzLnJvb3ROb2RlLCBwYXJzZWRQYXRoLm5vZGVOYW1lICkgfHwgdGhpcy5yb290Tm9kZTtcblxuXHRcdFx0dGhpcy5ub2RlID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2V0IGZhaWwgc3RhdGUgc28gd2UgY2FuIGp1c3QgJ3JldHVybicgb24gZXJyb3Jcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5hdmFpbGFibGU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYXZhaWxhYmxlO1xuXG5cdFx0Ly8gZW5zdXJlIHRoZXJlIGlzIGEgdmFsdWUgbm9kZVxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgbm9kZSBmb3IgdHJhY2s6ICcgKyB0aGlzLnBhdGggKyAnIGJ1dCBpdCB3YXNuXFwndCBmb3VuZC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdE5hbWUgKSB7XG5cblx0XHRcdHZhciBvYmplY3RJbmRleCA9IHBhcnNlZFBhdGgub2JqZWN0SW5kZXg7XG5cblx0XHRcdC8vIHNwZWNpYWwgY2FzZXMgd2VyZSB3ZSBuZWVkIHRvIHJlYWNoIGRlZXBlciBpbnRvIHRoZSBoaWVyYXJjaHkgdG8gZ2V0IHRoZSBmYWNlIG1hdGVyaWFscy4uLi5cblx0XHRcdHN3aXRjaCAoIG9iamVjdE5hbWUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnbWF0ZXJpYWxzJzpcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QubWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsLm1hdGVyaWFscyBhcyBub2RlLm1hdGVyaWFsIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbHMgYXJyYXkuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscztcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2JvbmVzJzpcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3Quc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBib25lcyBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBza2VsZXRvbi4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBwb3RlbnRpYWwgZnV0dXJlIG9wdGltaXphdGlvbjogc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyXG5cdFx0XHRcdFx0Ly8gYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0LnNrZWxldG9uLmJvbmVzO1xuXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRhcmdldE9iamVjdC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBpIF0ubmFtZSA9PT0gb2JqZWN0SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0b2JqZWN0SW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG9iamVjdE5hbWUgb2Ygbm9kZSB1bmRlZmluZWQuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF07XG5cblx0XHRcdH1cblxuXG5cdFx0XHRpZiAoIG9iamVjdEluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byBiaW5kIHRvIG9iamVjdEluZGV4IG9mIG9iamVjdE5hbWUsIGJ1dCBpcyB1bmRlZmluZWQuJywgdGhpcywgdGFyZ2V0T2JqZWN0ICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHJlc29sdmUgcHJvcGVydHlcblx0XHR2YXIgbm9kZVByb3BlcnR5ID0gdGFyZ2V0T2JqZWN0WyBwcm9wZXJ0eU5hbWUgXTtcblxuXHRcdGlmICggbm9kZVByb3BlcnR5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBub2RlTmFtZSA9IHBhcnNlZFBhdGgubm9kZU5hbWU7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgcHJvcGVydHkgZm9yIHRyYWNrOiAnICsgbm9kZU5hbWUgK1xuXHRcdFx0XHQnLicgKyBwcm9wZXJ0eU5hbWUgKyAnIGJ1dCBpdCB3YXNuXFwndCBmb3VuZC4nLCB0YXJnZXRPYmplY3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIGRldGVybWluZSB2ZXJzaW9uaW5nIHNjaGVtZVxuXHRcdHZhciB2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5vbmU7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdDtcblxuXHRcdGlmICggdGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG1hdGVyaWFsXG5cblx0XHRcdHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTmVlZHNVcGRhdGU7XG5cblx0XHR9IGVsc2UgaWYgKCB0YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSAhPT0gdW5kZWZpbmVkICkgeyAvLyBub2RlIHRyYW5zZm9ybVxuXG5cdFx0XHR2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgaG93IHRoZSBwcm9wZXJ0eSBnZXRzIGJvdW5kXG5cdFx0dmFyIGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5EaXJlY3Q7XG5cblx0XHRpZiAoIHByb3BlcnR5SW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYWNjZXNzIGEgc3ViIGVsZW1lbnQgb2YgdGhlIHByb3BlcnR5IGFycmF5IChvbmx5IHByaW1pdGl2ZXMgYXJlIHN1cHBvcnRlZCByaWdodCBub3cpXG5cblx0XHRcdGlmICggcHJvcGVydHlOYW1lID09PSBcIm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1wiICkge1xuXG5cdFx0XHRcdC8vIHBvdGVudGlhbCBvcHRpbWl6YXRpb24sIHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlciwgYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvblsgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaFRhcmdldHMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5BcnJheUVsZW1lbnQ7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblx0XHRcdHRoaXMucHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5kZXg7XG5cblx0XHR9IGVsc2UgaWYgKCBub2RlUHJvcGVydHkuZnJvbUFycmF5ICE9PSB1bmRlZmluZWQgJiYgbm9kZVByb3BlcnR5LnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbXVzdCB1c2UgY29weSBmb3IgT2JqZWN0M0QuRXVsZXIvUXVhdGVybmlvblxuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuSGFzRnJvbVRvQXJyYXk7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIG5vZGVQcm9wZXJ0eSApICkge1xuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRW50aXJlQXJyYXk7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGdldHRlciAvIHNldHRlclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLkdldHRlckJ5QmluZGluZ1R5cGVbIGJpbmRpbmdUeXBlIF07XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmdbIGJpbmRpbmdUeXBlIF1bIHZlcnNpb25pbmcgXTtcblxuXHR9LFxuXG5cdHVuYmluZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5ub2RlID0gbnVsbDtcblxuXHRcdC8vIGJhY2sgdG8gdGhlIHByb3RvdHlwZSB2ZXJzaW9uIG9mIGdldFZhbHVlIC8gc2V0VmFsdWVcblx0XHQvLyBub3RlOiBhdm9pZGluZyB0byBtdXRhdGUgdGhlIHNoYXBlIG9mICd0aGlzJyB2aWEgJ2RlbGV0ZSdcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5ib3VuZDtcblxuXHR9XG5cbn0gKTtcblxuLy8hXFwgREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlICFcbk9iamVjdC5hc3NpZ24oIFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUsIHtcblxuXHQvLyBpbml0aWFsIHN0YXRlIG9mIHRoZXNlIG1ldGhvZHMgdGhhdCBjYWxscyAnYmluZCdcblx0X2dldFZhbHVlX3VuYm91bmQ6IFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuZ2V0VmFsdWUsXG5cdF9zZXRWYWx1ZV91bmJvdW5kOiBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLnNldFZhbHVlLFxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgZ3JvdXAgb2Ygb2JqZWN0cyB0aGF0IHJlY2VpdmVzIGEgc2hhcmVkIGFuaW1hdGlvbiBzdGF0ZS5cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiBcdC1cdEFkZCBvYmplY3RzIHlvdSB3b3VsZCBvdGhlcndpc2UgcGFzcyBhcyAncm9vdCcgdG8gdGhlXG4gKiBcdFx0Y29uc3RydWN0b3Igb3IgdGhlIC5jbGlwQWN0aW9uIG1ldGhvZCBvZiBBbmltYXRpb25NaXhlci5cbiAqXG4gKiBcdC1cdEluc3RlYWQgcGFzcyB0aGlzIG9iamVjdCBhcyAncm9vdCcuXG4gKlxuICogXHQtXHRZb3UgY2FuIGFsc28gYWRkIGFuZCByZW1vdmUgb2JqZWN0cyBsYXRlciB3aGVuIHRoZSBtaXhlclxuICogXHRcdGlzIHJ1bm5pbmcuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgXHRPYmplY3RzIG9mIHRoaXMgY2xhc3MgYXBwZWFyIGFzIG9uZSBvYmplY3QgdG8gdGhlIG1peGVyLFxuICogIFx0c28gY2FjaGUgY29udHJvbCBvZiB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG11c3QgYmUgZG9uZVxuICogIFx0b24gdGhlIGdyb3VwLlxuICpcbiAqIExpbWl0YXRpb246XG4gKlxuICogXHQtIFx0VGhlIGFuaW1hdGVkIHByb3BlcnRpZXMgbXVzdCBiZSBjb21wYXRpYmxlIGFtb25nIHRoZVxuICogXHRcdGFsbCBvYmplY3RzIGluIHRoZSBncm91cC5cbiAqXG4gKiAgLVx0QSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYVxuICogIFx0dGFyZ2V0IGdyb3VwIG9yIGRpcmVjdGx5LCBidXQgbm90IGJvdGguXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbk9iamVjdEdyb3VwKCkge1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdC8vIGNhY2hlZCBvYmplY3RzIGZvbGxvd2VkIGJ5IHRoZSBhY3RpdmUgb25lc1xuXHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXG5cdHRoaXMubkNhY2hlZE9iamVjdHNfID0gMDtcdFx0XHQvLyB0aHJlc2hvbGRcblx0Ly8gbm90ZTogcmVhZCBieSBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlXG5cblx0dmFyIGluZGljZXMgPSB7fTtcblx0dGhpcy5faW5kaWNlc0J5VVVJRCA9IGluZGljZXM7XHRcdC8vIGZvciBib29ra2VlcGluZ1xuXG5cdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRpbmRpY2VzWyBhcmd1bWVudHNbIGkgXS51dWlkIF0gPSBpO1xuXG5cdH1cblxuXHR0aGlzLl9wYXRocyA9IFtdO1x0XHRcdFx0XHQvLyBpbnNpZGU6IHN0cmluZ1xuXHR0aGlzLl9wYXJzZWRQYXRocyA9IFtdO1x0XHRcdFx0Ly8gaW5zaWRlOiB7IHdlIGRvbid0IGNhcmUsIGhlcmUgfVxuXHR0aGlzLl9iaW5kaW5ncyA9IFtdOyBcdFx0XHRcdC8vIGluc2lkZTogQXJyYXk8IFByb3BlcnR5QmluZGluZyA+XG5cdHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCA9IHt9OyBcdC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXNcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRvYmplY3RzOiB7XG5cdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDtcblxuXHRcdFx0fSxcblx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0IGJpbmRpbmdzUGVyT2JqZWN0KCkge1xuXG5cdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbk9iamVjdEdyb3VwLnByb3RvdHlwZSwge1xuXG5cdGlzQW5pbWF0aW9uT2JqZWN0R3JvdXA6IHRydWUsXG5cblx0YWRkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdHBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoLFxuXHRcdFx0a25vd25PYmplY3QgPSB1bmRlZmluZWQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyB1bmtub3duIG9iamVjdCAtPiBhZGQgaXQgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0YmluZGluZ3NbIGogXS5wdXNoKCBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHNpbmNlIHdlIGRvIG5vdCBib3RoZXIgdG8gY3JlYXRlIG5ldyBiaW5kaW5nc1xuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcblx0XHRcdFx0XHRcdC8vIG9yIG1heSBub3QgZXhpc3RcblxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0c1sgaW5kZXggXSAhPT0ga25vd25PYmplY3QgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbk9iamVjdEdyb3VwOiBEaWZmZXJlbnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIFVVSUQgJyArXG5cdFx0XHRcdFx0XHQnZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuJyApO1xuXG5cdFx0XHR9IC8vIGVsc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgaXQgdG8gYmVcblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdC8vIG1vdmUgZXhpc3Rpbmcgb2JqZWN0IGludG8gdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHR2YXIgbGFzdENhY2hlZEluZGV4ID0gbkNhY2hlZE9iamVjdHMgKyssXG5cdFx0XHRcdFx0Zmlyc3RBY3RpdmVPYmplY3QgPSBvYmplY3RzWyBsYXN0Q2FjaGVkSW5kZXggXTtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBmaXJzdEFjdGl2ZU9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGZpcnN0QWN0aXZlT2JqZWN0O1xuXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGxhc3RDYWNoZWRJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0Zmlyc3RBY3RpdmUgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGZpcnN0QWN0aXZlO1xuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlICYgZm9yZ2V0XG5cdHVuY2FjaGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdG5PYmplY3RzID0gb2JqZWN0cy5sZW5ndGgsXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGVsZXRlIGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHRcdHZhciBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0Q2FjaGVkT2JqZWN0ID0gb2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdLFxuXHRcdFx0XHRcdFx0bGFzdEluZGV4ID0gLS0gbk9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHQvLyBsYXN0IGNhY2hlZCBvYmplY3QgdGFrZXMgdGhpcyBvYmplY3QncyBwbGFjZVxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0XHQvLyBsYXN0IG9iamVjdCBnb2VzIHRvIHRoZSBhY3RpdmF0ZWQgc2xvdCBhbmQgcG9wXG5cdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdE9iamVjdC51dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdFx0bGFzdCA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBhY3RpdmUsIGp1c3Qgc3dhcCB3aXRoIHRoZSBsYXN0IGFuZCBwb3BcblxuXHRcdFx0XHRcdHZhciBsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSAvLyBjYWNoZWQgb3IgYWN0aXZlXG5cblx0XHRcdH0gLy8gaWYgb2JqZWN0IGlzIGtub3duXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fSxcblxuXHQvLyBJbnRlcm5hbCBpbnRlcmZhY2UgdXNlZCBieSBiZWZyaWVuZGVkIFByb3BlcnR5QmluZGluZy5Db21wb3NpdGU6XG5cblx0c3Vic2NyaWJlXzogZnVuY3Rpb24gKCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0Ly8gcmV0dXJucyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHBhdGggdGhhdCBpcyBjaGFuZ2VkXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIHRoZSBjb250YWluZWQgb2JqZWN0cyBpbiB0aGUgZ3JvdXBcblxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxuXHRcdFx0aW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF0sXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGJpbmRpbmdzWyBpbmRleCBdO1xuXG5cdFx0dmFyIHBhdGhzID0gdGhpcy5fcGF0aHMsXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0b2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTtcblxuXHRcdGluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0aW5kaWNlc0J5UGF0aFsgcGF0aCBdID0gaW5kZXg7XG5cblx0XHRwYXRocy5wdXNoKCBwYXRoICk7XG5cdFx0cGFyc2VkUGF0aHMucHVzaCggcGFyc2VkUGF0aCApO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmdzRm9yUGF0aCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSBuQ2FjaGVkT2JqZWN0cywgbiA9IG9iamVjdHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gb2JqZWN0c1sgaSBdO1xuXHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpIF0gPSBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kaW5nc0ZvclBhdGg7XG5cblx0fSxcblxuXHR1bnN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCApIHtcblxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcblx0XHQvLyB1cGRhdGUgdGhlIGFycmF5IHByZXZpb3VzbHkgb2J0YWluZWQgd2l0aCAnc3Vic2NyaWJlXydcblxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxuXHRcdFx0aW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF07XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdGxhc3RCaW5kaW5ncyA9IGJpbmRpbmdzWyBsYXN0QmluZGluZ3NJbmRleCBdLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NQYXRoID0gcGF0aFsgbGFzdEJpbmRpbmdzSW5kZXggXTtcblxuXHRcdFx0aW5kaWNlc0J5UGF0aFsgbGFzdEJpbmRpbmdzUGF0aCBdID0gaW5kZXg7XG5cblx0XHRcdGJpbmRpbmdzWyBpbmRleCBdID0gbGFzdEJpbmRpbmdzO1xuXHRcdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRcdHBhcnNlZFBhdGhzWyBpbmRleCBdID0gcGFyc2VkUGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXJzZWRQYXRocy5wb3AoKTtcblxuXHRcdFx0cGF0aHNbIGluZGV4IF0gPSBwYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTtcblx0XHRcdHBhdGhzLnBvcCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBY3Rpb24gcHJvdmlkZWQgYnkgQW5pbWF0aW9uTWl4ZXIgZm9yIHNjaGVkdWxpbmcgY2xpcCBwbGF5YmFjayBvbiBzcGVjaWZpY1xuICogb2JqZWN0cy5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKlxuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkFjdGlvbiggbWl4ZXIsIGNsaXAsIGxvY2FsUm9vdCApIHtcblxuXHR0aGlzLl9taXhlciA9IG1peGVyO1xuXHR0aGlzLl9jbGlwID0gY2xpcDtcblx0dGhpcy5fbG9jYWxSb290ID0gbG9jYWxSb290IHx8IG51bGw7XG5cblx0dmFyIHRyYWNrcyA9IGNsaXAudHJhY2tzLFxuXHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdGludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdHZhciBpbnRlcnBvbGFudFNldHRpbmdzID0ge1xuXHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXHR9O1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdHZhciBpbnRlcnBvbGFudCA9IHRyYWNrc1sgaSBdLmNyZWF0ZUludGVycG9sYW50KCBudWxsICk7XG5cdFx0aW50ZXJwb2xhbnRzWyBpIF0gPSBpbnRlcnBvbGFudDtcblx0XHRpbnRlcnBvbGFudC5zZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XG5cblx0fVxuXG5cdHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdHRoaXMuX2ludGVycG9sYW50cyA9IGludGVycG9sYW50cztcdC8vIGJvdW5kIGJ5IHRoZSBtaXhlclxuXG5cdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXG5cdHRoaXMuX3Byb3BlcnR5QmluZGluZ3MgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHR0aGlzLl9jYWNoZUluZGV4ID0gbnVsbDtcdFx0XHQvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdHRoaXMuX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1x0XHQvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cblx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cblx0dGhpcy5sb29wID0gTG9vcFJlcGVhdDtcblx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1xuXG5cdC8vIGdsb2JhbCBtaXhlciB0aW1lIHdoZW4gdGhlIGFjdGlvbiBpcyB0byBiZSBzdGFydGVkXG5cdC8vIGl0J3Mgc2V0IGJhY2sgdG8gJ251bGwnIHVwb24gc3RhcnQgb2YgdGhlIGFjdGlvblxuXHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xuXG5cdC8vIHNjYWxlZCBsb2NhbCB0aW1lIG9mIHRoZSBhY3Rpb25cblx0Ly8gZ2V0cyBjbGFtcGVkIG9yIHdyYXBwZWQgdG8gMC4uY2xpcC5kdXJhdGlvbiBhY2NvcmRpbmcgdG8gbG9vcFxuXHR0aGlzLnRpbWUgPSAwO1xuXG5cdHRoaXMudGltZVNjYWxlID0gMTtcblx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gMTtcblxuXHR0aGlzLndlaWdodCA9IDE7XG5cdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IDE7XG5cblx0dGhpcy5yZXBldGl0aW9ucyA9IEluZmluaXR5OyBcdFx0Ly8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xuXG5cdHRoaXMucGF1c2VkID0gZmFsc2U7XHRcdFx0XHQvLyB0cnVlIC0+IHplcm8gZWZmZWN0aXZlIHRpbWUgc2NhbGVcblx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcdFx0XHRcdC8vIGZhbHNlIC0+IHplcm8gZWZmZWN0aXZlIHdlaWdodFxuXG5cdHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgXHQ9IGZhbHNlO1x0Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xuXG5cdHRoaXMuemVyb1Nsb3BlQXRTdGFydCBcdD0gdHJ1ZTtcdFx0Ly8gZm9yIHNtb290aCBpbnRlcnBvbGF0aW9uIHcvbyBzZXBhcmF0ZVxuXHR0aGlzLnplcm9TbG9wZUF0RW5kXHRcdD0gdHJ1ZTtcdFx0Ly8gY2xpcHMgZm9yIHN0YXJ0LCBsb29wIGFuZCBlbmRcblxufVxuXG5PYmplY3QuYXNzaWduKCBBbmltYXRpb25BY3Rpb24ucHJvdG90eXBlLCB7XG5cblx0Ly8gU3RhdGUgJiBTY2hlZHVsaW5nXG5cblx0cGxheTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fbWl4ZXIuX2FjdGl2YXRlQWN0aW9uKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9kZWFjdGl2YXRlQWN0aW9uKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcy5yZXNldCgpO1xuXG5cdH0sXG5cblx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMucGF1c2VkID0gZmFsc2U7XG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdHRoaXMudGltZSA9IDA7XHRcdFx0Ly8gcmVzdGFydCBjbGlwXG5cdFx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1x0Ly8gZm9yZ2V0IHByZXZpb3VzIGxvb3BzXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDtcdC8vIGZvcmdldCBzY2hlZHVsaW5nXG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCkuc3RvcFdhcnBpbmcoKTtcblxuXHR9LFxuXG5cdGlzUnVubmluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZW5hYmxlZCAmJiAhIHRoaXMucGF1c2VkICYmIHRoaXMudGltZVNjYWxlICE9PSAwICYmXG5cdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9PT0gbnVsbCAmJiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybiB0cnVlIHdoZW4gcGxheSBoYXMgYmVlbiBjYWxsZWRcblx0aXNTY2hlZHVsZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdHN0YXJ0QXQ6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggbW9kZSwgcmVwZXRpdGlvbnMgKSB7XG5cblx0XHR0aGlzLmxvb3AgPSBtb2RlO1xuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSByZXBldGl0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gV2VpZ2h0XG5cblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcblx0Ly8gYWx0aG91Z2ggLmVuYWJsZWQgPSBmYWxzZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHdlaWdodCBvZiB6ZXJvLCB0aGlzXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAuZW5hYmxlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlV2VpZ2h0OiBmdW5jdGlvbiAoIHdlaWdodCApIHtcblxuXHRcdHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHRoaXMuZW5hYmxlZCA/IHdlaWdodCA6IDA7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhlIHdlaWdodCBjb25zaWRlcmluZyBmYWRpbmcgYW5kIC5lbmFibGVkXG5cdGdldEVmZmVjdGl2ZVdlaWdodDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodDtcblxuXHR9LFxuXG5cdGZhZGVJbjogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDAsIDEgKTtcblxuXHR9LFxuXG5cdGZhZGVPdXQ6IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCAxLCAwICk7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVGcm9tOiBmdW5jdGlvbiAoIGZhZGVPdXRBY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0ZmFkZU91dEFjdGlvbi5mYWRlT3V0KCBkdXJhdGlvbiApO1xuXHRcdHRoaXMuZmFkZUluKCBkdXJhdGlvbiApO1xuXG5cdFx0aWYgKCB3YXJwICkge1xuXG5cdFx0XHR2YXIgZmFkZUluRHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uLFxuXHRcdFx0XHRmYWRlT3V0RHVyYXRpb24gPSBmYWRlT3V0QWN0aW9uLl9jbGlwLmR1cmF0aW9uLFxuXG5cdFx0XHRcdHN0YXJ0RW5kUmF0aW8gPSBmYWRlT3V0RHVyYXRpb24gLyBmYWRlSW5EdXJhdGlvbixcblx0XHRcdFx0ZW5kU3RhcnRSYXRpbyA9IGZhZGVJbkR1cmF0aW9uIC8gZmFkZU91dER1cmF0aW9uO1xuXG5cdFx0XHRmYWRlT3V0QWN0aW9uLndhcnAoIDEuMCwgc3RhcnRFbmRSYXRpbywgZHVyYXRpb24gKTtcblx0XHRcdHRoaXMud2FycCggZW5kU3RhcnRSYXRpbywgMS4wLCBkdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVUbzogZnVuY3Rpb24gKCBmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApO1xuXG5cdH0sXG5cblx0c3RvcEZhZGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdlaWdodEludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIFRpbWUgU2NhbGUgQ29udHJvbFxuXG5cdC8vIHNldCB0aGUgdGltZSBzY2FsZSBzdG9wcGluZyBhbnkgc2NoZWR1bGVkIHdhcnBpbmdcblx0Ly8gYWx0aG91Z2ggLnBhdXNlZCA9IHRydWUgeWllbGRzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8sIHRoaXNcblx0Ly8gbWV0aG9kIGRvZXMgKm5vdCogY2hhbmdlIC5wYXVzZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXG5cdHNldEVmZmVjdGl2ZVRpbWVTY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aGlzLnBhdXNlZCA/IDAgOiB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoZSB0aW1lIHNjYWxlIGNvbnNpZGVyaW5nIHdhcnBpbmcgYW5kIC5wYXVzZWRcblx0Z2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH0sXG5cblx0c2V0RHVyYXRpb246IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRoaXMuX2NsaXAuZHVyYXRpb24gLyBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHRzeW5jV2l0aDogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0aGFsdDogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9LFxuXG5cdHdhcnA6IGZ1bmN0aW9uICggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHR2YXIgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZSxcblx0XHRcdGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQsXG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xuXG5cdFx0dmFsdWVzWyAwIF0gPSBzdGFydFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblx0XHR2YWx1ZXNbIDEgXSA9IGVuZFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcFdhcnBpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBPYmplY3QgQWNjZXNzb3JzXG5cblx0Z2V0TWl4ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9LFxuXG5cdGdldENsaXA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH0sXG5cblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcblxuXHR9LFxuXG5cdC8vIEludGVybmFcblxuXHRfdXBkYXRlOiBmdW5jdGlvbiAoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xuXG5cdFx0Ly8gY2FsbGVkIGJ5IHRoZSBtaXhlclxuXG5cdFx0aWYgKCAhIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxuXG5cdFx0XHR0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBzdGFydFRpbWUgPSB0aGlzLl9zdGFydFRpbWU7XG5cblx0XHRpZiAoIHN0YXJ0VGltZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIHNjaGVkdWxlZCBzdGFydCBvZiBhY3Rpb25cblxuXHRcdFx0dmFyIHRpbWVSdW5uaW5nID0gKCB0aW1lIC0gc3RhcnRUaW1lICkgKiB0aW1lRGlyZWN0aW9uO1xuXHRcdFx0aWYgKCB0aW1lUnVubmluZyA8IDAgfHwgdGltZURpcmVjdGlvbiA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm47IC8vIHlldCB0byBjb21lIC8gZG9uJ3QgZGVjaWRlIHdoZW4gZGVsdGEgPSAwXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RhcnRcblxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsgLy8gdW5zY2hlZHVsZVxuXHRcdFx0ZGVsdGFUaW1lID0gdGltZURpcmVjdGlvbiAqIHRpbWVSdW5uaW5nO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYXBwbHkgdGltZSBzY2FsZSBhbmQgYWR2YW5jZSB0aW1lXG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy5fdXBkYXRlVGltZVNjYWxlKCB0aW1lICk7XG5cdFx0dmFyIGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0dmFyIHdlaWdodCA9IHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPiAwICkge1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzO1xuXHRcdFx0dmFyIHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gaW50ZXJwb2xhbnRzLmxlbmd0aDsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfdXBkYXRlV2VpZ2h0OiBmdW5jdGlvbiAoIHRpbWUgKSB7XG5cblx0XHR2YXIgd2VpZ2h0ID0gMDtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLndlaWdodDtcblx0XHRcdHZhciBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBpbnRlcnBvbGFudFZhbHVlID0gaW50ZXJwb2xhbnQuZXZhbHVhdGUoIHRpbWUgKVsgMCBdO1xuXG5cdFx0XHRcdHdlaWdodCAqPSBpbnRlcnBvbGFudFZhbHVlO1xuXG5cdFx0XHRcdGlmICggdGltZSA+IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9uc1sgMSBdICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIGludGVycG9sYW50VmFsdWUgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGZhZGVkIG91dCwgZGlzYWJsZVxuXHRcdFx0XHRcdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0cmV0dXJuIHdlaWdodDtcblxuXHR9LFxuXG5cdF91cGRhdGVUaW1lU2NhbGU6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHZhciB0aW1lU2NhbGUgPSAwO1xuXG5cdFx0aWYgKCAhIHRoaXMucGF1c2VkICkge1xuXG5cdFx0XHR0aW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcblxuXHRcdFx0dmFyIGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH0sXG5cblx0X3VwZGF0ZVRpbWU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0dmFyIHRpbWUgPSB0aGlzLnRpbWUgKyBkZWx0YVRpbWU7XG5cdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5fY2xpcC5kdXJhdGlvbjtcblx0XHR2YXIgbG9vcCA9IHRoaXMubG9vcDtcblx0XHR2YXIgbG9vcENvdW50ID0gdGhpcy5fbG9vcENvdW50O1xuXG5cdFx0dmFyIHBpbmdQb25nID0gKCBsb29wID09PSBMb29wUGluZ1BvbmcgKTtcblxuXHRcdGlmICggZGVsdGFUaW1lID09PSAwICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkgcmV0dXJuIHRpbWU7XG5cblx0XHRcdHJldHVybiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsb29wID09PSBMb29wT25jZSApIHtcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcblxuXHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSAwO1xuXHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGhhbmRsZV9zdG9wOiB7XG5cblx0XHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGltZSA9IGR1cmF0aW9uO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRpbWUgPCAwICkge1xuXG5cdFx0XHRcdFx0dGltZSA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdGlmICggdGhpcy5jbGFtcFdoZW5GaW5pc2hlZCApIHRoaXMucGF1c2VkID0gdHJ1ZTtcblx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDFcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XG5cblx0XHRcdFx0XHRsb29wQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbFxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXG5cblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0Ly8gd3JhcCBhcm91bmRcblxuXHRcdFx0XHR2YXIgbG9vcERlbHRhID0gTWF0aC5mbG9vciggdGltZSAvIGR1cmF0aW9uICk7IC8vIHNpZ25lZFxuXHRcdFx0XHR0aW1lIC09IGR1cmF0aW9uICogbG9vcERlbHRhO1xuXG5cdFx0XHRcdGxvb3BDb3VudCArPSBNYXRoLmFicyggbG9vcERlbHRhICk7XG5cblx0XHRcdFx0dmFyIHBlbmRpbmcgPSB0aGlzLnJlcGV0aXRpb25zIC0gbG9vcENvdW50O1xuXG5cdFx0XHRcdGlmICggcGVuZGluZyA8PSAwICkge1xuXG5cdFx0XHRcdFx0Ly8gaGF2ZSB0byBzdG9wIChzd2l0Y2ggc3RhdGUsIGNsYW1wIHRpbWUsIGZpcmUgZXZlbnQpXG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdFx0ZWxzZSB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdHRpbWUgPSBkZWx0YVRpbWUgPiAwID8gZHVyYXRpb24gOiAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBkZWx0YVRpbWUgPiAwID8gMSA6IC0gMVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8ga2VlcCBydW5uaW5nXG5cblx0XHRcdFx0XHRpZiAoIHBlbmRpbmcgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGVudGVyaW5nIHRoZSBsYXN0IHJvdW5kXG5cblx0XHRcdFx0XHRcdHZhciBhdFN0YXJ0ID0gZGVsdGFUaW1lIDwgMDtcblx0XHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIGF0U3RhcnQsICEgYXRTdGFydCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIGZhbHNlLCBmYWxzZSwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IGxvb3BDb3VudDtcblxuXHRcdFx0XHRcdHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdsb29wJywgYWN0aW9uOiB0aGlzLCBsb29wRGVsdGE6IGxvb3BEZWx0YVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwaW5nUG9uZyAmJiAoIGxvb3BDb3VudCAmIDEgKSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBpbnZlcnQgdGltZSBmb3IgdGhlIFwicG9uZyByb3VuZFwiXG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblx0XHRcdFx0cmV0dXJuIGR1cmF0aW9uIC0gdGltZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy50aW1lID0gdGltZTtcblx0XHRyZXR1cm4gdGltZTtcblxuXHR9LFxuXG5cdF9zZXRFbmRpbmdzOiBmdW5jdGlvbiAoIGF0U3RhcnQsIGF0RW5kLCBwaW5nUG9uZyApIHtcblxuXHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3M7XG5cblx0XHRpZiAoIHBpbmdQb25nICkge1xuXG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCBcdD0gWmVyb1Nsb3BlRW5kaW5nO1xuXHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kXHRcdD0gWmVyb1Nsb3BlRW5kaW5nO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYXNzdW1pbmcgZm9yIExvb3BPbmNlIGF0U3RhcnQgPT0gYXRFbmQgPT0gdHJ1ZVxuXG5cdFx0XHRpZiAoIGF0U3RhcnQgKSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSB0aGlzLnplcm9TbG9wZUF0U3RhcnQgPyBaZXJvU2xvcGVFbmRpbmcgOiBaZXJvQ3VydmF0dXJlRW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gV3JhcEFyb3VuZEVuZGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGF0RW5kICkge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCA9IHRoaXMuemVyb1Nsb3BlQXRFbmQgPyBaZXJvU2xvcGVFbmRpbmcgOiBaZXJvQ3VydmF0dXJlRW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCBcdCA9IFdyYXBBcm91bmRFbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdF9zY2hlZHVsZUZhZGluZzogZnVuY3Rpb24gKCBkdXJhdGlvbiwgd2VpZ2h0Tm93LCB3ZWlnaHRUaGVuICkge1xuXG5cdFx0dmFyIG1peGVyID0gdGhpcy5fbWl4ZXIsIG5vdyA9IG1peGVyLnRpbWUsXG5cdFx0XHRpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7IFx0XHRcdFx0dmFsdWVzWyAwIF0gPSB3ZWlnaHROb3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1x0dmFsdWVzWyAxIF0gPSB3ZWlnaHRUaGVuO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIFBsYXllciBmb3IgQW5pbWF0aW9uQ2xpcHMuXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBBbmltYXRpb25NaXhlciggcm9vdCApIHtcblxuXHR0aGlzLl9yb290ID0gcm9vdDtcblx0dGhpcy5faW5pdE1lbW9yeU1hbmFnZXIoKTtcblx0dGhpcy5fYWNjdUluZGV4ID0gMDtcblxuXHR0aGlzLnRpbWUgPSAwO1xuXG5cdHRoaXMudGltZVNjYWxlID0gMS4wO1xuXG59XG5cbkFuaW1hdGlvbk1peGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBbmltYXRpb25NaXhlcixcblxuXHRfYmluZEFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24sIHByb3RvdHlwZUFjdGlvbiApIHtcblxuXHRcdHZhciByb290ID0gYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCxcblx0XHRcdHRyYWNrcyA9IGFjdGlvbi5fY2xpcC50cmFja3MsXG5cdFx0XHRuVHJhY2tzID0gdHJhY2tzLmxlbmd0aCxcblx0XHRcdGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzLFxuXHRcdFx0aW50ZXJwb2xhbnRzID0gYWN0aW9uLl9pbnRlcnBvbGFudHMsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblx0XHRcdGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ3NCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICggYmluZGluZ3NCeU5hbWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YmluZGluZ3NCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ3NCeU5hbWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5UcmFja3M7ICsrIGkgKSB7XG5cblx0XHRcdHZhciB0cmFjayA9IHRyYWNrc1sgaSBdLFxuXHRcdFx0XHR0cmFja05hbWUgPSB0cmFjay5uYW1lLFxuXHRcdFx0XHRiaW5kaW5nID0gYmluZGluZ3NCeU5hbWVbIHRyYWNrTmFtZSBdO1xuXG5cdFx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRiaW5kaW5nc1sgaSBdID0gYmluZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIGV4aXN0aW5nIGJpbmRpbmcsIG1ha2Ugc3VyZSB0aGUgY2FjaGUga25vd3NcblxuXHRcdFx0XHRcdGlmICggYmluZGluZy5fY2FjaGVJbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBwYXRoID0gcHJvdG90eXBlQWN0aW9uICYmIHByb3RvdHlwZUFjdGlvbi5cblx0XHRcdFx0XHRfcHJvcGVydHlCaW5kaW5nc1sgaSBdLmJpbmRpbmcucGFyc2VkUGF0aDtcblxuXHRcdFx0XHRiaW5kaW5nID0gbmV3IFByb3BlcnR5TWl4ZXIoXG5cdFx0XHRcdFx0UHJvcGVydHlCaW5kaW5nLmNyZWF0ZSggcm9vdCwgdHJhY2tOYW1lLCBwYXRoICksXG5cdFx0XHRcdFx0dHJhY2suVmFsdWVUeXBlTmFtZSwgdHJhY2suZ2V0VmFsdWVTaXplKCkgKTtcblxuXHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKTtcblxuXHRcdFx0XHRiaW5kaW5nc1sgaSBdID0gYmluZGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHRpbnRlcnBvbGFudHNbIGkgXS5yZXN1bHRCdWZmZXIgPSBiaW5kaW5nLmJ1ZmZlcjtcblxuXHRcdH1cblxuXHR9LFxuXG5cdF9hY3RpdmF0ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHRpZiAoICEgdGhpcy5faXNBY3RpdmVBY3Rpb24oIGFjdGlvbiApICkge1xuXG5cdFx0XHRpZiAoIGFjdGlvbi5fY2FjaGVJbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyB0aGlzIGFjdGlvbiBoYXMgYmVlbiBmb3Jnb3R0ZW4gYnkgdGhlIGNhY2hlLCBidXQgdGhlIHVzZXJcblx0XHRcdFx0Ly8gYXBwZWFycyB0byBiZSBzdGlsbCB1c2luZyBpdCAtPiByZWJpbmRcblxuXHRcdFx0XHR2YXIgcm9vdFV1aWQgPSAoIGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QgKS51dWlkLFxuXHRcdFx0XHRcdGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0XHRcdHRoaXMuX2JpbmRBY3Rpb24oIGFjdGlvbixcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCAmJiBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXSApO1xuXG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Ly8gaW5jcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0XHRpZiAoIGJpbmRpbmcudXNlQ291bnQgKysgPT09IDAgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl9sZW5kQmluZGluZyggYmluZGluZyApO1xuXHRcdFx0XHRcdGJpbmRpbmcuc2F2ZU9yaWdpbmFsU3RhdGUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbGVuZEFjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRfZGVhY3RpdmF0ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHRpZiAoIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcblxuXHRcdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBkZWNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggLS0gYmluZGluZy51c2VDb3VudCA9PT0gMCApIHtcblxuXHRcdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcblx0XHRcdFx0XHR0aGlzLl90YWtlQmFja0JpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fdGFrZUJhY2tBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gTWVtb3J5IG1hbmFnZXJcblxuXHRfaW5pdE1lbW9yeU1hbmFnZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX2FjdGlvbnMgPSBbXTsgLy8gJ25BY3RpdmVBY3Rpb25zJyBmb2xsb3dlZCBieSBpbmFjdGl2ZSBvbmVzXG5cdFx0dGhpcy5fbkFjdGl2ZUFjdGlvbnMgPSAwO1xuXG5cdFx0dGhpcy5fYWN0aW9uc0J5Q2xpcCA9IHt9O1xuXHRcdC8vIGluc2lkZTpcblx0XHQvLyB7XG5cdFx0Ly8gXHRcdGtub3duQWN0aW9uczogQXJyYXk8IEFuaW1hdGlvbkFjdGlvbiA+XHQtIHVzZWQgYXMgcHJvdG90eXBlc1xuXHRcdC8vIFx0XHRhY3Rpb25CeVJvb3Q6IEFuaW1hdGlvbkFjdGlvblx0XHRcdC0gbG9va3VwXG5cdFx0Ly8gfVxuXG5cblx0XHR0aGlzLl9iaW5kaW5ncyA9IFtdOyAvLyAnbkFjdGl2ZUJpbmRpbmdzJyBmb2xsb3dlZCBieSBpbmFjdGl2ZSBvbmVzXG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcblxuXHRcdHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSA9IHt9OyAvLyBpbnNpZGU6IE1hcDwgbmFtZSwgUHJvcGVydHlNaXhlciA+XG5cblxuXHRcdHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMgPSBbXTsgLy8gc2FtZSBnYW1lIGFzIGFib3ZlXG5cdFx0dGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgPSAwO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRcdGFjdGlvbnM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9hY3Rpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVBY3Rpb25zO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRiaW5kaW5nczoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y29udHJvbEludGVycG9sYW50czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2NvbnRyb2xJbnRlcnBvbGFudHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9LFxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IGZvciBBbmltYXRpb25BY3Rpb24gb2JqZWN0c1xuXG5cdF9pc0FjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR2YXIgaW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cdFx0cmV0dXJuIGluZGV4ICE9PSBudWxsICYmIGluZGV4IDwgdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XG5cblx0fSxcblxuXHRfYWRkSW5hY3RpdmVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKSB7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB7XG5cblx0XHRcdFx0a25vd25BY3Rpb25zOiBbIGFjdGlvbiBdLFxuXHRcdFx0XHRhY3Rpb25CeVJvb3Q6IHt9XG5cblx0XHRcdH07XG5cblx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IDA7XG5cblx0XHRcdGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0gPSBhY3Rpb25zRm9yQ2xpcDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBrbm93bkFjdGlvbnMgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XG5cblx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGtub3duQWN0aW9ucy5sZW5ndGg7XG5cdFx0XHRrbm93bkFjdGlvbnMucHVzaCggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBhY3Rpb25zLmxlbmd0aDtcblx0XHRhY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0YWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdID0gYWN0aW9uO1xuXG5cdH0sXG5cblx0X3JlbW92ZUluYWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdGFjdGlvbnMucG9wKCk7XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHR2YXIgY2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLFxuXHRcdFx0a25vd25BY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9ucyxcblxuXHRcdFx0bGFzdEtub3duQWN0aW9uID1cblx0XHRcdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsga25vd25BY3Rpb25zRm9yQ2xpcC5sZW5ndGggLSAxIF0sXG5cblx0XHRcdGJ5Q2xpcENhY2hlSW5kZXggPSBhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXg7XG5cblx0XHRsYXN0S25vd25BY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBieUNsaXBDYWNoZUluZGV4O1xuXHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGJ5Q2xpcENhY2hlSW5kZXggXSA9IGxhc3RLbm93bkFjdGlvbjtcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0dmFyIGFjdGlvbkJ5Um9vdCA9IGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdCxcblx0XHRcdHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZDtcblxuXHRcdGRlbGV0ZSBhY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGtub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApO1xuXG5cdH0sXG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRpZiAoIC0tIGJpbmRpbmcucmVmZXJlbmNlQ291bnQgPT09IDAgKSB7XG5cblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdF9sZW5kQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdC8vIFsgYWN0aXZlIGFjdGlvbnMgfCAgaW5hY3RpdmUgYWN0aW9ucyAgXVxuXHRcdC8vIFsgIGFjdGl2ZSBhY3Rpb25zID58IGluYWN0aXZlIGFjdGlvbnMgXVxuXHRcdC8vICAgICAgICAgICAgICAgICBzICAgICAgICBhXG5cdFx0Ly8gICAgICAgICAgICAgICAgICA8LXN3YXAtPlxuXHRcdC8vICAgICAgICAgICAgICAgICBhICAgICAgICBzXG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVBY3Rpb25zICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRmaXJzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUFjdGlvbjtcblxuXHR9LFxuXG5cdF90YWtlQmFja0FjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyAgfCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHw8IGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xuXHRcdC8vICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgcyAgICAgICAgYVxuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblxuXHRcdFx0bGFzdEFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0bGFzdEFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVBY3Rpb247XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgUHJvcGVydHlNaXhlciBvYmplY3RzXG5cblx0X2FkZEluYWN0aXZlQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdLFxuXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdID0gYmluZGluZztcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7XG5cdFx0YmluZGluZ3MucHVzaCggYmluZGluZyApO1xuXG5cdH0sXG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcm9wQmluZGluZyA9IGJpbmRpbmcuYmluZGluZyxcblx0XHRcdHJvb3RVdWlkID0gcHJvcEJpbmRpbmcucm9vdE5vZGUudXVpZCxcblx0XHRcdHRyYWNrTmFtZSA9IHByb3BCaW5kaW5nLnBhdGgsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSxcblxuXHRcdFx0bGFzdEluYWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBiaW5kaW5ncy5sZW5ndGggLSAxIF0sXG5cdFx0XHRjYWNoZUluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBjYWNoZUluZGV4IF0gPSBsYXN0SW5hY3RpdmVCaW5kaW5nO1xuXHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0ZGVsZXRlIGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdO1xuXG5cdFx0cmVtb3ZlX2VtcHR5X21hcDoge1xuXG5cdFx0XHRmb3IgKCB2YXIgXyBpbiBiaW5kaW5nQnlOYW1lICkgYnJlYWsgcmVtb3ZlX2VtcHR5X21hcDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cdFx0XHRkZWxldGUgYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHR9XG5cblx0fSxcblxuXHRfbGVuZEJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBsYXN0QWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVCaW5kaW5nO1xuXG5cdH0sXG5cblx0X3Rha2VCYWNrQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcmV2SW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLSB0aGlzLl9uQWN0aXZlQmluZGluZ3MsXG5cblx0XHRcdGxhc3RBY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcblx0XHRiaW5kaW5nc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0bGFzdEFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YmluZGluZ3NbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUJpbmRpbmc7XG5cblx0fSxcblxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IG9mIEludGVycG9sYW50cyBmb3Igd2VpZ2h0IGFuZCB0aW1lIHNjYWxlXG5cblx0X2xlbmRDb250cm9sSW50ZXJwb2xhbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgKyssXG5cdFx0XHRpbnRlcnBvbGFudCA9IGludGVycG9sYW50c1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRpZiAoIGludGVycG9sYW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGludGVycG9sYW50ID0gbmV3IExpbmVhckludGVycG9sYW50KFxuXHRcdFx0XHRuZXcgRmxvYXQzMkFycmF5KCAyICksIG5ldyBGbG9hdDMyQXJyYXkoIDIgKSxcblx0XHRcdFx0MSwgdGhpcy5fY29udHJvbEludGVycG9sYW50c1Jlc3VsdEJ1ZmZlciApO1xuXG5cdFx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0XHRpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW50ZXJwb2xhbnQ7XG5cblx0fSxcblxuXHRfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQ6IGZ1bmN0aW9uICggaW50ZXJwb2xhbnQgKSB7XG5cblx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdHByZXZJbmRleCA9IGludGVycG9sYW50Ll9fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMsXG5cblx0XHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudCA9IGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0bGFzdEFjdGl2ZUludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRpbnRlcnBvbGFudHNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUludGVycG9sYW50O1xuXG5cdH0sXG5cblx0X2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXI6IG5ldyBGbG9hdDMyQXJyYXkoIDEgKSxcblxuXHQvLyByZXR1cm4gYW4gYWN0aW9uIGZvciBhIGNsaXAgb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSByb290IHRhcmdldFxuXHQvLyBvYmplY3QgKHRoaXMgbWV0aG9kIGFsbG9jYXRlcyBhIGxvdCBvZiBkeW5hbWljIG1lbW9yeSBpbiBjYXNlIGFcblx0Ly8gcHJldmlvdXNseSB1bmtub3duIGNsaXAvcm9vdCBjb21iaW5hdGlvbiBpcyBzcGVjaWZpZWQpXG5cdGNsaXBBY3Rpb246IGZ1bmN0aW9uICggY2xpcCwgb3B0aW9uYWxSb290ICkge1xuXG5cdFx0dmFyIHJvb3QgPSBvcHRpb25hbFJvb3QgfHwgdGhpcy5fcm9vdCxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXG5cdFx0XHRjbGlwT2JqZWN0ID0gdHlwZW9mIGNsaXAgPT09ICdzdHJpbmcnID9cblx0XHRcdFx0QW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLFxuXG5cdFx0XHRjbGlwVXVpZCA9IGNsaXBPYmplY3QgIT09IG51bGwgPyBjbGlwT2JqZWN0LnV1aWQgOiBjbGlwLFxuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0sXG5cdFx0XHRwcm90b3R5cGVBY3Rpb24gPSBudWxsO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgZXhpc3RpbmdBY3Rpb24gPVxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdFx0aWYgKCBleGlzdGluZ0FjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBleGlzdGluZ0FjdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB3ZSBrbm93IHRoZSBjbGlwLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHBhcnNlIGFsbFxuXHRcdFx0Ly8gdGhlIGJpbmRpbmdzIGFnYWluIGJ1dCBjYW4ganVzdCBjb3B5XG5cdFx0XHRwcm90b3R5cGVBY3Rpb24gPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXTtcblxuXHRcdFx0Ly8gYWxzbywgdGFrZSB0aGUgY2xpcCBmcm9tIHRoZSBwcm90b3R5cGUgYWN0aW9uXG5cdFx0XHRpZiAoIGNsaXBPYmplY3QgPT09IG51bGwgKVxuXHRcdFx0XHRjbGlwT2JqZWN0ID0gcHJvdG90eXBlQWN0aW9uLl9jbGlwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY2xpcCBtdXN0IGJlIGtub3duIHdoZW4gc3BlY2lmaWVkIHZpYSBzdHJpbmdcblx0XHRpZiAoIGNsaXBPYmplY3QgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIGFsbG9jYXRlIGFsbCByZXNvdXJjZXMgcmVxdWlyZWQgdG8gcnVuIGl0XG5cdFx0dmFyIG5ld0FjdGlvbiA9IG5ldyBBbmltYXRpb25BY3Rpb24oIHRoaXMsIGNsaXBPYmplY3QsIG9wdGlvbmFsUm9vdCApO1xuXG5cdFx0dGhpcy5fYmluZEFjdGlvbiggbmV3QWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKTtcblxuXHRcdC8vIGFuZCBtYWtlIHRoZSBhY3Rpb24ga25vd24gdG8gdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIG5ld0FjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XG5cblx0XHRyZXR1cm4gbmV3QWN0aW9uO1xuXG5cdH0sXG5cblx0Ly8gZ2V0IGFuIGV4aXN0aW5nIGFjdGlvblxuXHRleGlzdGluZ0FjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHR2YXIgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cblx0XHRcdGNsaXBPYmplY3QgPSB0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRBbmltYXRpb25DbGlwLmZpbmRCeU5hbWUoIHJvb3QsIGNsaXAgKSA6IGNsaXAsXG5cblx0XHRcdGNsaXBVdWlkID0gY2xpcE9iamVjdCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsXG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSB8fCBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSxcblxuXHQvLyBkZWFjdGl2YXRlcyBhbGwgcHJldmlvdXNseSBzY2hlZHVsZWQgYWN0aW9uc1xuXHRzdG9wQWxsQWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRuQWN0aW9ucyA9IHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdHRoaXMuX25BY3RpdmVBY3Rpb25zID0gMDtcblx0XHR0aGlzLl9uQWN0aXZlQmluZGluZ3MgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuQWN0aW9uczsgKysgaSApIHtcblxuXHRcdFx0YWN0aW9uc1sgaSBdLnJlc2V0KCk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5CaW5kaW5nczsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS51c2VDb3VudCA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIGFkdmFuY2UgdGhlIHRpbWUgYW5kIHVwZGF0ZSBhcHBseSB0aGUgYW5pbWF0aW9uXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCBkZWx0YVRpbWUgKSB7XG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy50aW1lU2NhbGU7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRuQWN0aW9ucyA9IHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXG5cdFx0XHR0aW1lID0gdGhpcy50aW1lICs9IGRlbHRhVGltZSxcblx0XHRcdHRpbWVEaXJlY3Rpb24gPSBNYXRoLnNpZ24oIGRlbHRhVGltZSApLFxuXG5cdFx0XHRhY2N1SW5kZXggPSB0aGlzLl9hY2N1SW5kZXggXj0gMTtcblxuXHRcdC8vIHJ1biBhY3RpdmUgYWN0aW9uc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuQWN0aW9uczsgKysgaSApIHtcblxuXHRcdFx0dmFyIGFjdGlvbiA9IGFjdGlvbnNbIGkgXTtcblxuXHRcdFx0YWN0aW9uLl91cGRhdGUoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgc2NlbmUgZ3JhcGhcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYXBwbHkoIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhpcyBtaXhlcidzIHJvb3QgdGFyZ2V0IG9iamVjdFxuXHRnZXRSb290OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fcm9vdDtcblxuXHR9LFxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgY2xpcFxuXHR1bmNhY2hlQ2xpcDogZnVuY3Rpb24gKCBjbGlwICkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbm90ZToganVzdCBjYWxsaW5nIF9yZW1vdmVJbmFjdGl2ZUFjdGlvbiB3b3VsZCBtZXNzIHVwIHRoZVxuXHRcdFx0Ly8gaXRlcmF0aW9uIHN0YXRlIGFuZCBhbHNvIHJlcXVpcmUgdXBkYXRpbmcgdGhlIHN0YXRlIHdlIGNhblxuXHRcdFx0Ly8ganVzdCB0aHJvdyBhd2F5XG5cblx0XHRcdHZhciBhY3Rpb25zVG9SZW1vdmUgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFjdGlvbnNUb1JlbW92ZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGFjdGlvbiA9IGFjdGlvbnNUb1JlbW92ZVsgaSBdO1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHRcdHZhciBjYWNoZUluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXHRcdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7XG5cdFx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblx0XHRcdFx0bGFzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRcdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdFx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gZnJlZSBhbGwgcmVzb3VyY2VzIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciByb290IHRhcmdldCBvYmplY3Rcblx0dW5jYWNoZVJvb3Q6IGZ1bmN0aW9uICggcm9vdCApIHtcblxuXHRcdHZhciByb290VXVpZCA9IHJvb3QudXVpZCxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwO1xuXG5cdFx0Zm9yICggdmFyIGNsaXBVdWlkIGluIGFjdGlvbnNCeUNsaXAgKSB7XG5cblx0XHRcdHZhciBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLmFjdGlvbkJ5Um9vdCxcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGFjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgdHJhY2tOYW1lIGluIGJpbmRpbmdCeU5hbWUgKSB7XG5cblx0XHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlIGEgdGFyZ2V0ZWQgY2xpcCBmcm9tIHRoZSBjYWNoZVxuXHR1bmNhY2hlQWN0aW9uOiBmdW5jdGlvbiAoIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdHZhciBhY3Rpb24gPSB0aGlzLmV4aXN0aW5nQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdGlmICggYWN0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFVuaWZvcm0oIHZhbHVlICkge1xuXG5cdGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlVuaWZvcm06IFR5cGUgcGFyYW1ldGVyIGlzIG5vIGxvbmdlciBuZWVkZWQuJyApO1xuXHRcdHZhbHVlID0gYXJndW1lbnRzWyAxIF07XG5cblx0fVxuXG5cdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxufVxuXG5Vbmlmb3JtLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRyZXR1cm4gbmV3IFVuaWZvcm0oIHRoaXMudmFsdWUuY2xvbmUgPT09IHVuZGVmaW5lZCA/IHRoaXMudmFsdWUgOiB0aGlzLnZhbHVlLmNsb25lKCkgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSgpIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5Jztcblx0dGhpcy5tYXhJbnN0YW5jZWRDb3VudCA9IHVuZGVmaW5lZDtcblxufVxuXG5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSxcblxuXHRpc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm1heEluc3RhbmNlZENvdW50ID0gc291cmNlLm1heEluc3RhbmNlZENvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgc3RyaWRlLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdEludGVybGVhdmVkQnVmZmVyLmNhbGwoIHRoaXMsIGFycmF5LCBzdHJpZGUgKTtcblxuXHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlIHx8IDE7XG5cbn1cblxuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIsXG5cblx0aXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlcjogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRpZiAoIHR5cGVvZiAoIG5vcm1hbGl6ZWQgKSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRtZXNoUGVyQXR0cmlidXRlID0gbm9ybWFsaXplZDtcblxuXHRcdG5vcm1hbGl6ZWQgPSBmYWxzZTtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IFRoZSBjb25zdHJ1Y3RvciBub3cgZXhwZWN0cyBub3JtYWxpemVkIGFzIHRoZSB0aGlyZCBhcmd1bWVudC4nICk7XG5cblx0fVxuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlIHx8IDE7XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsXG5cblx0aXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBzdGVwaG9taSAvIGh0dHA6Ly9zdGVwaGFuZWdpbmllci5jb20vXG4gKi9cblxuZnVuY3Rpb24gUmF5Y2FzdGVyKCBvcmlnaW4sIGRpcmVjdGlvbiwgbmVhciwgZmFyICkge1xuXG5cdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcblxuXHR0aGlzLm5lYXIgPSBuZWFyIHx8IDA7XG5cdHRoaXMuZmFyID0gZmFyIHx8IEluZmluaXR5O1xuXG5cdHRoaXMucGFyYW1zID0ge1xuXHRcdE1lc2g6IHt9LFxuXHRcdExpbmU6IHt9LFxuXHRcdExPRDoge30sXG5cdFx0UG9pbnRzOiB7IHRocmVzaG9sZDogMSB9LFxuXHRcdFNwcml0ZToge31cblx0fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcy5wYXJhbXMsIHtcblx0XHRQb2ludENsb3VkOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXI6IHBhcmFtcy5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gcGFyYW1zLlBvaW50cy4nICk7XG5cdFx0XHRcdHJldHVybiB0aGlzLlBvaW50cztcblxuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXG59XG5cbmZ1bmN0aW9uIGFzY1NvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdE9iamVjdCggb2JqZWN0LCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApIHtcblxuXHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRvYmplY3QucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBSYXljYXN0ZXIucHJvdG90eXBlLCB7XG5cblx0bGluZVByZWNpc2lvbjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5yYXkuc2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhbWVyYTogZnVuY3Rpb24gKCBjb29yZHMsIGNhbWVyYSApIHtcblxuXHRcdGlmICggKCBjYW1lcmEgJiYgY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCBjb29yZHMueCwgY29vcmRzLnksIDAuNSApLnVucHJvamVjdCggY2FtZXJhICkuc3ViKCB0aGlzLnJheS5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblxuXHRcdH0gZWxzZSBpZiAoICggY2FtZXJhICYmIGNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYSApICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUmF5Y2FzdGVyOiBVbnN1cHBvcnRlZCBjYW1lcmEgdHlwZS4nICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRpbnRlcnNlY3RPYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0LCByZWN1cnNpdmUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGludGVyc2VjdHMgPSBvcHRpb25hbFRhcmdldCB8fCBbXTtcblxuXHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0LCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RPYmplY3RzOiBmdW5jdGlvbiAoIG9iamVjdHMsIHJlY3Vyc2l2ZSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHR2YXIgaW50ZXJzZWN0cyA9IG9wdGlvbmFsVGFyZ2V0IHx8IFtdO1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmplY3RzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0czogb2JqZWN0cyBpcyBub3QgYW4gQXJyYXkuJyApO1xuXHRcdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0c1sgaSBdLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdH1cblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TcGhlcmljYWxfY29vcmRpbmF0ZV9zeXN0ZW1cbiAqXG4gKiBUaGUgcG9sYXIgYW5nbGUgKHBoaSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgeS1heGlzLiBUaGUgcG9zaXRpdmUgeS1heGlzIGlzIHVwLlxuICogVGhlIGF6aW11dGhhbCBhbmdsZSAodGhldGEpIGlzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHotYXhpei5cbiAqL1xuXG5mdW5jdGlvbiBTcGhlcmljYWwoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHR0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDEuMDtcblx0dGhpcy5waGkgPSAoIHBoaSAhPT0gdW5kZWZpbmVkICkgPyBwaGkgOiAwOyAvLyBwb2xhciBhbmdsZVxuXHR0aGlzLnRoZXRhID0gKCB0aGV0YSAhPT0gdW5kZWZpbmVkICkgPyB0aGV0YSA6IDA7IC8vIGF6aW11dGhhbCBhbmdsZVxuXG5cdHJldHVybiB0aGlzO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyaWNhbC5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBwaGk7XG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMucGhpID0gb3RoZXIucGhpO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmVzdHJpY3QgcGhpIHRvIGJlIGJldHdlZSBFUFMgYW5kIFBJLUVQU1xuXHRtYWtlU2FmZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXHRcdHRoaXMucGhpID0gTWF0aC5tYXgoIEVQUywgTWF0aC5taW4oIE1hdGguUEkgLSBFUFMsIHRoaXMucGhpICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcblxuXHR9LFxuXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHM6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCB4ICogeCArIHkgKiB5ICsgeiAqIHogKTtcblxuXHRcdGlmICggdGhpcy5yYWRpdXMgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMudGhldGEgPSAwO1xuXHRcdFx0dGhpcy5waGkgPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHgsIHogKTtcblx0XHRcdHRoaXMucGhpID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N5bGluZHJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gKlxuICovXG5cbmZ1bmN0aW9uIEN5bGluZHJpY2FsKCByYWRpdXMsIHRoZXRhLCB5ICkge1xuXG5cdHRoaXMucmFkaXVzID0gKCByYWRpdXMgIT09IHVuZGVmaW5lZCApID8gcmFkaXVzIDogMS4wOyAvLyBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBwb2ludCBpbiB0aGUgeC16IHBsYW5lXG5cdHRoaXMudGhldGEgPSAoIHRoZXRhICE9PSB1bmRlZmluZWQgKSA/IHRoZXRhIDogMDsgLy8gY291bnRlcmNsb2Nrd2lzZSBhbmdsZSBpbiB0aGUgeC16IHBsYW5lIG1lYXN1cmVkIGluIHJhZGlhbnMgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzXG5cdHRoaXMueSA9ICggeSAhPT0gdW5kZWZpbmVkICkgPyB5IDogMDsgLy8gaGVpZ2h0IGFib3ZlIHRoZSB4LXogcGxhbmVcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5PYmplY3QuYXNzaWduKCBDeWxpbmRyaWNhbC5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblx0XHR0aGlzLnkgPSBvdGhlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeiAqIHogKTtcblx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gQm94MiggbWluLCBtYXggKSB7XG5cblx0dGhpcy5taW4gPSAoIG1pbiAhPT0gdW5kZWZpbmVkICkgPyBtaW4gOiBuZXcgVmVjdG9yMiggKyBJbmZpbml0eSwgKyBJbmZpbml0eSApO1xuXHR0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IyKCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQm94Mi5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBtaW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBtYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBwb2ludHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkge1xuXG5cdFx0XHR2YXIgaGFsZlNpemUgPSB2MS5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXHRcdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSArIEluZmluaXR5O1xuXHRcdHRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gLSBJbmZpbml0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aXNFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcblxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fSxcblxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRjb250YWluc0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHRoaXMubWluLnkgPD0gYm94Lm1pbi55ICYmIGJveC5tYXgueSA8PSB0aGlzLm1heC55O1xuXG5cdH0sXG5cblx0Z2V0UGFyYW1ldGVyOiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHQvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveFxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0UGFyYW1ldGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldChcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcblx0XHRcdCggcG9pbnQueSAtIHRoaXMubWluLnkgKSAvICggdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKVxuXHRcdCk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdC8vIHVzaW5nIDQgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zXG5cblx0XHRyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8IGJveC5taW4ueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRjbGFtcFBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0XHR2YXIgY2xhbXBlZFBvaW50ID0gdjEuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cdFx0XHRyZXR1cm4gY2xhbXBlZFBvaW50LnN1YiggcG9pbnQgKS5sZW5ndGgoKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGludGVyc2VjdDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dW5pb246IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIExpbmUzKCBzdGFydCwgZW5kICkge1xuXG5cdHRoaXMuc3RhcnQgPSAoIHN0YXJ0ICE9PSB1bmRlZmluZWQgKSA/IHN0YXJ0IDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5lbmQgPSAoIGVuZCAhPT0gdW5kZWZpbmVkICkgPyBlbmQgOiBuZXcgVmVjdG9yMygpO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIExpbmUzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBzdGFydCwgZW5kICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBzdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGVuZCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dGhpcy5lbmQuY29weSggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH0sXG5cblx0ZGVsdGE6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5kZWx0YSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuZW5kICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyggdGhpcy5lbmQgKTtcblxuXHR9LFxuXG5cdGF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHN0YXJ0UCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHN0YXJ0RW5kID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRcdHN0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApO1xuXHRcdFx0c3RhcnRFbmQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHRcdFx0dmFyIHN0YXJ0RW5kMiA9IHN0YXJ0RW5kLmRvdCggc3RhcnRFbmQgKTtcblx0XHRcdHZhciBzdGFydEVuZF9zdGFydFAgPSBzdGFydEVuZC5kb3QoIHN0YXJ0UCApO1xuXG5cdFx0XHR2YXIgdCA9IHN0YXJ0RW5kX3N0YXJ0UCAvIHN0YXJ0RW5kMjtcblxuXHRcdFx0aWYgKCBjbGFtcFRvTGluZSApIHtcblxuXHRcdFx0XHR0ID0gX01hdGguY2xhbXAoIHQsIDAsIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdDtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIGNsYW1wVG9MaW5lLCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdCA9IHRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciggcG9pbnQsIGNsYW1wVG9MaW5lICk7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuc3RhcnQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdHJldHVybiBsaW5lLnN0YXJ0LmVxdWFscyggdGhpcy5zdGFydCApICYmIGxpbmUuZW5kLmVxdWFscyggdGhpcy5lbmQgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEltbWVkaWF0ZVJlbmRlck9iamVjdCggbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIC8qIHJlbmRlckNhbGxiYWNrICovICkge307XG5cbn1cblxuSW1tZWRpYXRlUmVuZGVyT2JqZWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuSW1tZWRpYXRlUmVuZGVyT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEltbWVkaWF0ZVJlbmRlck9iamVjdDtcblxuSW1tZWRpYXRlUmVuZGVyT2JqZWN0LnByb3RvdHlwZS5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFZlcnRleE5vcm1hbHNIZWxwZXIoIG9iamVjdCwgc2l6ZSwgaGV4LCBsaW5ld2lkdGggKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0dGhpcy5zaXplID0gKCBzaXplICE9PSB1bmRlZmluZWQgKSA/IHNpemUgOiAxO1xuXG5cdHZhciBjb2xvciA9ICggaGV4ICE9PSB1bmRlZmluZWQgKSA/IGhleCA6IDB4ZmYwMDAwO1xuXG5cdHZhciB3aWR0aCA9ICggbGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSA/IGxpbmV3aWR0aCA6IDE7XG5cblx0Ly9cblxuXHR2YXIgbk5vcm1hbHMgPSAwO1xuXG5cdHZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG5cdGlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdG5Ob3JtYWxzID0gb2JqR2VvbWV0cnkuZmFjZXMubGVuZ3RoICogMztcblxuXHR9IGVsc2UgaWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0bk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC5jb3VudDtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5Ob3JtYWxzICogMiAqIDMsIDMgKTtcblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIHBvc2l0aW9ucyApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgbGluZXdpZHRoOiB3aWR0aCB9ICkgKTtcblxuXHQvL1xuXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZlcnRleE5vcm1hbHNIZWxwZXI7XG5cblZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR2YXIga2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdO1xuXG5cdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdG5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZDtcblxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdC8vXG5cblx0XHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggb2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIHZlcnRpY2VzID0gb2JqR2VvbWV0cnkudmVydGljZXM7XG5cblx0XHRcdHZhciBmYWNlcyA9IG9iakdlb21ldHJ5LmZhY2VzO1xuXG5cdFx0XHR2YXIgaWR4ID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZmFjZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlc1sgZmFjZVsga2V5c1sgaiBdIF0gXTtcblxuXHRcdFx0XHRcdHZhciBub3JtYWwgPSBmYWNlLnZlcnRleE5vcm1hbHNbIGogXTtcblxuXHRcdFx0XHRcdHYxLmNvcHkoIHZlcnRleCApLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHRcdHYyLmNvcHkoIG5vcm1hbCApLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIHRoaXMuc2l6ZSApLmFkZCggdjEgKTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBpZHgsIHYyLngsIHYyLnksIHYyLnogKTtcblxuXHRcdFx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgb2JqUG9zID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0dmFyIG9iak5vcm0gPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0dmFyIGlkeCA9IDA7XG5cblx0XHRcdC8vIGZvciBzaW1wbGljaXR5LCBpZ25vcmUgaW5kZXggYW5kIGRyYXdjYWxscywgYW5kIHJlbmRlciBldmVyeSBub3JtYWxcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IG9ialBvcy5jb3VudDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHYxLnNldCggb2JqUG9zLmdldFgoIGogKSwgb2JqUG9zLmdldFkoIGogKSwgb2JqUG9zLmdldFooIGogKSApLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR2Mi5zZXQoIG9iak5vcm0uZ2V0WCggaiApLCBvYmpOb3JtLmdldFkoIGogKSwgb2JqTm9ybS5nZXRaKCBqICkgKTtcblxuXHRcdFx0XHR2Mi5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLnNpemUgKS5hZGQoIHYxICk7XG5cblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBpZHgsIHYxLngsIHYxLnksIHYxLnogKTtcblxuXHRcdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2Mi54LCB2Mi55LCB2Mi56ICk7XG5cblx0XHRcdFx0aWR4ID0gaWR4ICsgMTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH07XG5cbn0oKSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gU3BvdExpZ2h0SGVscGVyKCBsaWdodCwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHR2YXIgcG9zaXRpb25zID0gW1xuXHRcdDAsIDAsIDAsIFx0MCwgMCwgMSxcblx0XHQwLCAwLCAwLCBcdDEsIDAsIDEsXG5cdFx0MCwgMCwgMCxcdC0gMSwgMCwgMSxcblx0XHQwLCAwLCAwLCBcdDAsIDEsIDEsXG5cdFx0MCwgMCwgMCwgXHQwLCAtIDEsIDFcblx0XTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGogPSAxLCBsID0gMzI7IGkgPCBsOyBpICsrLCBqICsrICkge1xuXG5cdFx0dmFyIHAxID0gKCBpIC8gbCApICogTWF0aC5QSSAqIDI7XG5cdFx0dmFyIHAyID0gKCBqIC8gbCApICogTWF0aC5QSSAqIDI7XG5cblx0XHRwb3NpdGlvbnMucHVzaChcblx0XHRcdE1hdGguY29zKCBwMSApLCBNYXRoLnNpbiggcDEgKSwgMSxcblx0XHRcdE1hdGguY29zKCBwMiApLCBNYXRoLnNpbiggcDIgKSwgMVxuXHRcdCk7XG5cblx0fVxuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApO1xuXG5cdHRoaXMuY29uZSA9IG5ldyBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BvdExpZ2h0SGVscGVyO1xuXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5jb25lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2ZWN0b3IyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0dmFyIGNvbmVMZW5ndGggPSB0aGlzLmxpZ2h0LmRpc3RhbmNlID8gdGhpcy5saWdodC5kaXN0YW5jZSA6IDEwMDA7XG5cdFx0dmFyIGNvbmVXaWR0aCA9IGNvbmVMZW5ndGggKiBNYXRoLnRhbiggdGhpcy5saWdodC5hbmdsZSApO1xuXG5cdFx0dGhpcy5jb25lLnNjYWxlLnNldCggY29uZVdpZHRoLCBjb25lV2lkdGgsIGNvbmVMZW5ndGggKTtcblxuXHRcdHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcblx0XHR2ZWN0b3IyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMuY29uZS5sb29rQXQoIHZlY3RvcjIuc3ViKCB2ZWN0b3IgKSApO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgU2VhbiBHcmlmZmluIC8gaHR0cDovL3R3aXR0ZXIuY29tL3NncmlmXG4gKiBAYXV0aG9yIE1pY2hhZWwgR3VlcnJlcm8gLyBodHRwOi8vcmVhbGl0eW1lbHRkb3duLmNvbVxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb25lTGlzdCggb2JqZWN0ICkge1xuXG5cdHZhciBib25lTGlzdCA9IFtdO1xuXG5cdGlmICggb2JqZWN0ICYmIG9iamVjdC5pc0JvbmUgKSB7XG5cblx0XHRib25lTGlzdC5wdXNoKCBvYmplY3QgKTtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2guYXBwbHkoIGJvbmVMaXN0LCBnZXRCb25lTGlzdCggb2JqZWN0LmNoaWxkcmVuWyBpIF0gKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYm9uZUxpc3Q7XG5cbn1cblxuZnVuY3Rpb24gU2tlbGV0b25IZWxwZXIoIG9iamVjdCApIHtcblxuXHR2YXIgYm9uZXMgPSBnZXRCb25lTGlzdCggb2JqZWN0ICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgY29sb3IxID0gbmV3IENvbG9yKCAwLCAwLCAxICk7XG5cdHZhciBjb2xvcjIgPSBuZXcgQ29sb3IoIDAsIDEsIDAgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2YXIgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yMS5yLCBjb2xvcjEuZywgY29sb3IxLmIgKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvcjIuciwgY29sb3IyLmcsIGNvbG9yMi5iICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMsIGRlcHRoVGVzdDogZmFsc2UsIGRlcHRoV3JpdGU6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMucm9vdCA9IG9iamVjdDtcblx0dGhpcy5ib25lcyA9IGJvbmVzO1xuXG5cdHRoaXMubWF0cml4ID0gb2JqZWN0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxufVxuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTa2VsZXRvbkhlbHBlcjtcblxuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBib25lTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIG1hdHJpeFdvcmxkSW52ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0dmFyIGJvbmVzID0gdGhpcy5ib25lcztcblxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRtYXRyaXhXb3JsZEludi5nZXRJbnZlcnNlKCB0aGlzLnJvb3QubWF0cml4V29ybGQgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0Ym9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXhXb3JsZEludiwgYm9uZS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBib25lTWF0cml4ICk7XG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdGJvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggbWF0cml4V29ybGRJbnYsIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGJvbmVNYXRyaXggKTtcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqICsgMSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdGogKz0gMjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFBvaW50TGlnaHRIZWxwZXIoIGxpZ2h0LCBzcGhlcmVTaXplLCBjb2xvciApIHtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCBzcGhlcmVTaXplLCA0LCAyICk7XG5cdHZhciBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UgfSApO1xuXG5cdE1lc2guY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy5tYXRyaXggPSB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG5cblx0Lypcblx0dmFyIGRpc3RhbmNlR2VvbWV0cnkgPSBuZXcgVEhSRUUuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSggMSwgMiApO1xuXHR2YXIgZGlzdGFuY2VNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4Q29sb3IsIGZvZzogZmFsc2UsIHdpcmVmcmFtZTogdHJ1ZSwgb3BhY2l0eTogMC4xLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0dGhpcy5saWdodFNwaGVyZSA9IG5ldyBUSFJFRS5NZXNoKCBidWxiR2VvbWV0cnksIGJ1bGJNYXRlcmlhbCApO1xuXHR0aGlzLmxpZ2h0RGlzdGFuY2UgPSBuZXcgVEhSRUUuTWVzaCggZGlzdGFuY2VHZW9tZXRyeSwgZGlzdGFuY2VNYXRlcmlhbCApO1xuXG5cdHZhciBkID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7XG5cblx0fVxuXG5cdHRoaXMuYWRkKCB0aGlzLmxpZ2h0RGlzdGFuY2UgKTtcblx0Ki9cblxufVxuXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICk7XG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50TGlnaHRIZWxwZXI7XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHR9XG5cblx0Lypcblx0dmFyIGQgPSB0aGlzLmxpZ2h0LmRpc3RhbmNlO1xuXG5cdGlmICggZCA9PT0gMC4wICkge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSB0cnVlO1xuXHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHR9XG5cdCovXG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gUmVjdEFyZWFMaWdodEhlbHBlciggbGlnaHQsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggNSAqIDMgKSwgMyApICk7XG5cblx0dGhpcy5saW5lID0gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHR0aGlzLmFkZCggdGhpcy5saW5lICk7XG5cblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY3RBcmVhTGlnaHRIZWxwZXI7XG5cblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuUmVjdEFyZWFMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdC8vIGNhbGN1bGF0ZSBuZXcgZGltZW5zaW9ucyBvZiB0aGUgaGVscGVyXG5cblx0dmFyIGh4ID0gdGhpcy5saWdodC53aWR0aCAqIDAuNTtcblx0dmFyIGh5ID0gdGhpcy5saWdodC5oZWlnaHQgKiAwLjU7XG5cblx0dmFyIHBvc2l0aW9uID0gdGhpcy5saW5lLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdHZhciBhcnJheSA9IHBvc2l0aW9uLmFycmF5O1xuXG5cdC8vIHVwZGF0ZSB2ZXJ0aWNlc1xuXG5cdGFycmF5WyAwIF0gPSBoeDsgYXJyYXlbIDEgXSA9IC0gaHk7IGFycmF5WyAyIF0gPSAwO1xuXHRhcnJheVsgMyBdID0gaHg7IGFycmF5WyA0IF0gPSBoeTsgYXJyYXlbIDUgXSA9IDA7XG5cdGFycmF5WyA2IF0gPSAtIGh4OyBhcnJheVsgNyBdID0gaHk7IGFycmF5WyA4IF0gPSAwO1xuXHRhcnJheVsgOSBdID0gLSBoeDsgYXJyYXlbIDEwIF0gPSAtIGh5OyBhcnJheVsgMTEgXSA9IDA7XG5cdGFycmF5WyAxMiBdID0gaHg7IGFycmF5WyAxMyBdID0gLSBoeTsgYXJyYXlbIDE0IF0gPSAwO1xuXG5cdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodEhlbHBlciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggc2l6ZSApO1xuXHRnZW9tZXRyeS5yb3RhdGVZKCBNYXRoLlBJICogMC41ICk7XG5cblx0dGhpcy5tYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UgfSApO1xuXHRpZiAoIHRoaXMuY29sb3IgPT09IHVuZGVmaW5lZCApIHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzID0gVmVydGV4Q29sb3JzO1xuXG5cdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb24uY291bnQgKiAzICk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhlbWlzcGhlcmVMaWdodEhlbHBlcjtcblxuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdHRoaXMuY2hpbGRyZW5bIDAgXS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cbn07XG5cbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBjb2xvcjEgPSBuZXcgQ29sb3IoKTtcblx0dmFyIGNvbG9yMiA9IG5ldyBDb2xvcigpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR2YXIgbWVzaCA9IHRoaXMuY2hpbGRyZW5bIDAgXTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGNvbG9ycyA9IG1lc2guZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAnY29sb3InICk7XG5cblx0XHRcdGNvbG9yMS5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cdFx0XHRjb2xvcjIuY29weSggdGhpcy5saWdodC5ncm91bmRDb2xvciApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjb2xvcnMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBjb2xvciA9ICggaSA8ICggbCAvIDIgKSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0XHRcdGNvbG9ycy5zZXRYWVooIGksIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0bWVzaC5sb29rQXQoIHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKS5uZWdhdGUoKSApO1xuXG5cdH07XG5cbn0oKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEdyaWRIZWxwZXIoIHNpemUsIGRpdmlzaW9ucywgY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0c2l6ZSA9IHNpemUgfHwgMTA7XG5cdGRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCAxMDtcblx0Y29sb3IxID0gbmV3IENvbG9yKCBjb2xvcjEgIT09IHVuZGVmaW5lZCA/IGNvbG9yMSA6IDB4NDQ0NDQ0ICk7XG5cdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICE9PSB1bmRlZmluZWQgPyBjb2xvcjIgOiAweDg4ODg4OCApO1xuXG5cdHZhciBjZW50ZXIgPSBkaXZpc2lvbnMgLyAyO1xuXHR2YXIgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XG5cdHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdLCBjb2xvcnMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwLCBrID0gLSBoYWxmU2l6ZTsgaSA8PSBkaXZpc2lvbnM7IGkgKyssIGsgKz0gc3RlcCApIHtcblxuXHRcdHZlcnRpY2VzLnB1c2goIC0gaGFsZlNpemUsIDAsIGssIGhhbGZTaXplLCAwLCBrICk7XG5cdFx0dmVydGljZXMucHVzaCggaywgMCwgLSBoYWxmU2l6ZSwgaywgMCwgaGFsZlNpemUgKTtcblxuXHRcdHZhciBjb2xvciA9IGkgPT09IGNlbnRlciA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cblx0fVxuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5HcmlkSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdyaWRIZWxwZXI7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHA6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIEBhdXRob3IgSGVjdGF0ZSAvIGh0dHA6Ly93d3cuZ2l0aHViLmNvbS9IZWN0YXRlXG4gKi9cblxuZnVuY3Rpb24gUG9sYXJHcmlkSGVscGVyKCByYWRpdXMsIHJhZGlhbHMsIGNpcmNsZXMsIGRpdmlzaW9ucywgY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0cmFkaXVzID0gcmFkaXVzIHx8IDEwO1xuXHRyYWRpYWxzID0gcmFkaWFscyB8fCAxNjtcblx0Y2lyY2xlcyA9IGNpcmNsZXMgfHwgODtcblx0ZGl2aXNpb25zID0gZGl2aXNpb25zIHx8IDY0O1xuXHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSAhPT0gdW5kZWZpbmVkID8gY29sb3IxIDogMHg0NDQ0NDQgKTtcblx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgIT09IHVuZGVmaW5lZCA/IGNvbG9yMiA6IDB4ODg4ODg4ICk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgeCwgejtcblx0dmFyIHYsIGksIGosIHIsIGNvbG9yO1xuXG5cdC8vIGNyZWF0ZSB0aGUgcmFkaWFsc1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IHJhZGlhbHM7IGkgKysgKSB7XG5cblx0XHR2ID0gKCBpIC8gcmFkaWFscyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0eCA9IE1hdGguc2luKCB2ICkgKiByYWRpdXM7XG5cdFx0eiA9IE1hdGguY29zKCB2ICkgKiByYWRpdXM7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXG5cdFx0Y29sb3IgPSAoIGkgJiAxICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0fVxuXG5cdC8vIGNyZWF0ZSB0aGUgY2lyY2xlc1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IGNpcmNsZXM7IGkgKysgKSB7XG5cblx0XHRjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdHIgPSByYWRpdXMgLSAoIHJhZGl1cyAvIGNpcmNsZXMgKiBpICk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8IGRpdmlzaW9uczsgaiArKyApIHtcblxuXHRcdFx0Ly8gZmlyc3QgdmVydGV4XG5cblx0XHRcdHYgPSAoIGogLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTtcblxuXHRcdFx0eCA9IE1hdGguc2luKCB2ICkgKiByO1xuXHRcdFx0eiA9IE1hdGguY29zKCB2ICkgKiByO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHQvLyBzZWNvbmQgdmVydGV4XG5cblx0XHRcdHYgPSAoICggaiArIDEgKSAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuUG9sYXJHcmlkSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcblBvbGFyR3JpZEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2xhckdyaWRIZWxwZXI7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEZhY2VOb3JtYWxzSGVscGVyKCBvYmplY3QsIHNpemUsIGhleCwgbGluZXdpZHRoICkge1xuXG5cdC8vIEZhY2VOb3JtYWxzSGVscGVyIG9ubHkgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnlcblxuXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHR0aGlzLnNpemUgPSAoIHNpemUgIT09IHVuZGVmaW5lZCApID8gc2l6ZSA6IDE7XG5cblx0dmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZmZmMDA7XG5cblx0dmFyIHdpZHRoID0gKCBsaW5ld2lkdGggIT09IHVuZGVmaW5lZCApID8gbGluZXdpZHRoIDogMTtcblxuXHQvL1xuXG5cdHZhciBuTm9ybWFscyA9IDA7XG5cblx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XG5cblx0aWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0bk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGg7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZhY2VOb3JtYWxzSGVscGVyOiBvbmx5IFRIUkVFLkdlb21ldHJ5IGlzIHN1cHBvcnRlZC4gVXNlIFRIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIsIGluc3RlYWQuJyApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbk5vcm1hbHMgKiAyICogMywgMyApO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBsaW5ld2lkdGg6IHdpZHRoIH0gKSApO1xuXG5cdC8vXG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmFjZU5vcm1hbHNIZWxwZXI7XG5cbkZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdG5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZDtcblxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdC8vXG5cblx0XHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IG9iakdlb21ldHJ5LnZlcnRpY2VzO1xuXG5cdFx0dmFyIGZhY2VzID0gb2JqR2VvbWV0cnkuZmFjZXM7XG5cblx0XHR2YXIgaWR4ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIG5vcm1hbCA9IGZhY2Uubm9ybWFsO1xuXG5cdFx0XHR2MS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5hIF0gKVxuXHRcdFx0XHQuYWRkKCB2ZXJ0aWNlc1sgZmFjZS5iIF0gKVxuXHRcdFx0XHQuYWRkKCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKVxuXHRcdFx0XHQuZGl2aWRlU2NhbGFyKCAzIClcblx0XHRcdFx0LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0djIuY29weSggbm9ybWFsICkuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggdGhpcy5zaXplICkuYWRkKCB2MSApO1xuXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjIueCwgdjIueSwgdjIueiApO1xuXG5cdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0fVxuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH07XG5cbn0oKSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodEhlbHBlciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0aWYgKCBzaXplID09PSB1bmRlZmluZWQgKSBzaXplID0gMTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggW1xuXHRcdC0gc2l6ZSwgc2l6ZSwgMCxcblx0XHRzaXplLCBzaXplLCAwLFxuXHRcdHNpemUsIC0gc2l6ZSwgMCxcblx0XHQtIHNpemUsIC0gc2l6ZSwgMCxcblx0XHQtIHNpemUsIHNpemUsIDBcblx0XSwgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UgfSApO1xuXG5cdHRoaXMubGlnaHRQbGFuZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApO1xuXG5cdGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMCwgMSBdLCAzICkgKTtcblxuXHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdHRoaXMuYWRkKCB0aGlzLnRhcmdldExpbmUgKTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERpcmVjdGlvbmFsTGlnaHRIZWxwZXI7XG5cbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdHYxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHYyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHR2My5zdWJWZWN0b3JzKCB2MiwgdjEgKTtcblxuXHRcdHRoaXMubGlnaHRQbGFuZS5sb29rQXQoIHYzICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldExpbmUubG9va0F0KCB2MyApO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5zY2FsZS56ID0gdjMubGVuZ3RoKCk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqXHQtIHNob3dzIGZydXN0dW0sIGxpbmUgb2Ygc2lnaHQgYW5kIHVwIG9mIHRoZSBjYW1lcmFcbiAqXHQtIHN1aXRhYmxlIGZvciBmYXN0IHVwZGF0ZXNcbiAqIFx0LSBiYXNlZCBvbiBmcnVzdHVtIHZpc3VhbGl6YXRpb24gaW4gbGlnaHRnbC5qcyBzaGFkb3dtYXAgZXhhbXBsZVxuICpcdFx0aHR0cDovL2V2YW53LmdpdGh1Yi5jb20vbGlnaHRnbC5qcy90ZXN0cy9zaGFkb3dtYXAuaHRtbFxuICovXG5cbmZ1bmN0aW9uIENhbWVyYUhlbHBlciggY2FtZXJhICkge1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCB2ZXJ0ZXhDb2xvcnM6IEZhY2VDb2xvcnMgfSApO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgY29sb3JzID0gW107XG5cblx0dmFyIHBvaW50TWFwID0ge307XG5cblx0Ly8gY29sb3JzXG5cblx0dmFyIGNvbG9yRnJ1c3R1bSA9IG5ldyBDb2xvciggMHhmZmFhMDAgKTtcblx0dmFyIGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTtcblx0dmFyIGNvbG9yVXAgPSBuZXcgQ29sb3IoIDB4MDBhYWZmICk7XG5cdHZhciBjb2xvclRhcmdldCA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblx0dmFyIGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7XG5cblx0Ly8gbmVhclxuXG5cdGFkZExpbmUoICduMScsICduMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjInLCAnbjQnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ240JywgJ24zJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMycsICduMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdC8vIGZhclxuXG5cdGFkZExpbmUoICdmMScsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnZjInLCAnZjQnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ2Y0JywgJ2YzJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICdmMycsICdmMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdC8vIHNpZGVzXG5cblx0YWRkTGluZSggJ24xJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMicsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjMnLCAnZjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ240JywgJ2Y0JywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gY29uZVxuXG5cdGFkZExpbmUoICdwJywgJ24xJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ24yJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ24zJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ240JywgY29sb3JDb25lICk7XG5cblx0Ly8gdXBcblxuXHRhZGRMaW5lKCAndTEnLCAndTInLCBjb2xvclVwICk7XG5cdGFkZExpbmUoICd1MicsICd1MycsIGNvbG9yVXAgKTtcblx0YWRkTGluZSggJ3UzJywgJ3UxJywgY29sb3JVcCApO1xuXG5cdC8vIHRhcmdldFxuXG5cdGFkZExpbmUoICdjJywgJ3QnLCBjb2xvclRhcmdldCApO1xuXHRhZGRMaW5lKCAncCcsICdjJywgY29sb3JDcm9zcyApO1xuXG5cdC8vIGNyb3NzXG5cblx0YWRkTGluZSggJ2NuMScsICdjbjInLCBjb2xvckNyb3NzICk7XG5cdGFkZExpbmUoICdjbjMnLCAnY240JywgY29sb3JDcm9zcyApO1xuXG5cdGFkZExpbmUoICdjZjEnLCAnY2YyJywgY29sb3JDcm9zcyApO1xuXHRhZGRMaW5lKCAnY2YzJywgJ2NmNCcsIGNvbG9yQ3Jvc3MgKTtcblxuXHRmdW5jdGlvbiBhZGRMaW5lKCBhLCBiLCBjb2xvciApIHtcblxuXHRcdGFkZFBvaW50KCBhLCBjb2xvciApO1xuXHRcdGFkZFBvaW50KCBiLCBjb2xvciApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhZGRQb2ludCggaWQsIGNvbG9yICkge1xuXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRpZiAoIHBvaW50TWFwWyBpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvaW50TWFwWyBpZCBdID0gW107XG5cblx0XHR9XG5cblx0XHRwb2ludE1hcFsgaWQgXS5wdXNoKCAoIHZlcnRpY2VzLmxlbmd0aCAvIDMgKSAtIDEgKTtcblxuXHR9XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblx0aWYgKCB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4ICkgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdHRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnBvaW50TWFwID0gcG9pbnRNYXA7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5DYW1lcmFIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhbWVyYUhlbHBlcjtcblxuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGdlb21ldHJ5LCBwb2ludE1hcDtcblxuXHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIGNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcblxuXHRmdW5jdGlvbiBzZXRQb2ludCggcG9pbnQsIHgsIHksIHogKSB7XG5cblx0XHR2ZWN0b3Iuc2V0KCB4LCB5LCB6ICkudW5wcm9qZWN0KCBjYW1lcmEgKTtcblxuXHRcdHZhciBwb2ludHMgPSBwb2ludE1hcFsgcG9pbnQgXTtcblxuXHRcdGlmICggcG9pbnRzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIHBvaW50c1sgaSBdLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRwb2ludE1hcCA9IHRoaXMucG9pbnRNYXA7XG5cblx0XHR2YXIgdyA9IDEsIGggPSAxO1xuXG5cdFx0Ly8gd2UgbmVlZCBqdXN0IGNhbWVyYSBwcm9qZWN0aW9uIG1hdHJpeFxuXHRcdC8vIHdvcmxkIG1hdHJpeCBtdXN0IGJlIGlkZW50aXR5XG5cblx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5jb3B5KCB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHQvLyBjZW50ZXIgLyB0YXJnZXRcblxuXHRcdHNldFBvaW50KCAnYycsIDAsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndCcsIDAsIDAsIDEgKTtcblxuXHRcdC8vIG5lYXJcblxuXHRcdHNldFBvaW50KCAnbjEnLCAtIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMicsIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMycsIC0gdywgaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduNCcsIHcsIGgsIC0gMSApO1xuXG5cdFx0Ly8gZmFyXG5cblx0XHRzZXRQb2ludCggJ2YxJywgLSB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YyJywgdywgLSBoLCAxICk7XG5cdFx0c2V0UG9pbnQoICdmMycsIC0gdywgaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjQnLCB3LCBoLCAxICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0c2V0UG9pbnQoICd1MScsIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTInLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTMnLCAwLCBoICogMiwgLSAxICk7XG5cblx0XHQvLyBjcm9zc1xuXG5cdFx0c2V0UG9pbnQoICdjZjEnLCAtIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMicsIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMycsIDAsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2Y0JywgMCwgaCwgMSApO1xuXG5cdFx0c2V0UG9pbnQoICdjbjEnLCAtIHcsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY24yJywgdywgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjMnLCAwLCAtIGgsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY240JywgMCwgaCwgLSAxICk7XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICkge1xuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCApIGNvbG9yID0gMHhmZmZmMDA7XG5cblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICogMyApO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5zZXRJbmRleCggbmV3IEJ1ZmZlckF0dHJpYnV0ZSggaW5kaWNlcywgMSApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7XG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5Cb3hIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEhlbHBlcjtcblxuQm94SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJveC5zZXRGcm9tT2JqZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdFx0dmFyIG1pbiA9IGJveC5taW47XG5cdFx0dmFyIG1heCA9IGJveC5tYXg7XG5cblx0XHQvKlxuXHRcdCAgNV9fX180XG5cdFx0MS9fX18wL3xcblx0XHR8IDZfX3xfN1xuXHRcdDIvX19fMy9cblxuXHRcdDA6IG1heC54LCBtYXgueSwgbWF4Lnpcblx0XHQxOiBtaW4ueCwgbWF4LnksIG1heC56XG5cdFx0MjogbWluLngsIG1pbi55LCBtYXguelxuXHRcdDM6IG1heC54LCBtaW4ueSwgbWF4Lnpcblx0XHQ0OiBtYXgueCwgbWF4LnksIG1pbi56XG5cdFx0NTogbWluLngsIG1heC55LCBtaW4uelxuXHRcdDY6IG1pbi54LCBtaW4ueSwgbWluLnpcblx0XHQ3OiBtYXgueCwgbWluLnksIG1pbi56XG5cdFx0Ki9cblxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHR2YXIgYXJyYXkgPSBwb3NpdGlvbi5hcnJheTtcblxuXHRcdGFycmF5WyAwIF0gPSBtYXgueDsgYXJyYXlbIDEgXSA9IG1heC55OyBhcnJheVsgMiBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDMgXSA9IG1pbi54OyBhcnJheVsgNCBdID0gbWF4Lnk7IGFycmF5WyA1IF0gPSBtYXguejtcblx0XHRhcnJheVsgNiBdID0gbWluLng7IGFycmF5WyA3IF0gPSBtaW4ueTsgYXJyYXlbIDggXSA9IG1heC56O1xuXHRcdGFycmF5WyA5IF0gPSBtYXgueDsgYXJyYXlbIDEwIF0gPSBtaW4ueTsgYXJyYXlbIDExIF0gPSBtYXguejtcblx0XHRhcnJheVsgMTIgXSA9IG1heC54OyBhcnJheVsgMTMgXSA9IG1heC55OyBhcnJheVsgMTQgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAxNSBdID0gbWluLng7IGFycmF5WyAxNiBdID0gbWF4Lnk7IGFycmF5WyAxNyBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE4IF0gPSBtaW4ueDsgYXJyYXlbIDE5IF0gPSBtaW4ueTsgYXJyYXlbIDIwIF0gPSBtaW4uejtcblx0XHRhcnJheVsgMjEgXSA9IG1heC54OyBhcnJheVsgMjIgXSA9IG1pbi55OyBhcnJheVsgMjMgXSA9IG1pbi56O1xuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR9O1xuXG59ICkoKTtcblxuQm94SGVscGVyLnByb3RvdHlwZS5zZXRGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdHRoaXMudXBkYXRlKCk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLm9iamVjdCA9IHNvdXJjZS5vYmplY3Q7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEJveDNIZWxwZXIoIGJveCwgaGV4ICkge1xuXG5cdHRoaXMudHlwZSA9ICdCb3gzSGVscGVyJztcblxuXHR0aGlzLmJveCA9IGJveDtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDtcblxuXHR2YXIgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblxuXHR2YXIgcG9zaXRpb25zID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIDEsIC0gMSwgLSAxIF07XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGluZGljZXMsIDEgKSApO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApO1xuXG5cdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cbn1cblxuQm94M0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Cb3gzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveDNIZWxwZXI7XG5cbkJveDNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHR2YXIgYm94ID0gdGhpcy5ib3g7XG5cblx0aWYgKCBib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdGJveC5nZXRDZW50ZXIoIHRoaXMucG9zaXRpb24gKTtcblxuXHRib3guZ2V0U2l6ZSggdGhpcy5zY2FsZSApO1xuXG5cdHRoaXMuc2NhbGUubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIFBsYW5lSGVscGVyKCBwbGFuZSwgc2l6ZSwgaGV4ICkge1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUhlbHBlcic7XG5cblx0dGhpcy5wbGFuZSA9IHBsYW5lO1xuXG5cdHRoaXMuc2l6ZSA9ICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgPyAxIDogc2l6ZTtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDtcblxuXHR2YXIgcG9zaXRpb25zID0gWyAxLCAtIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMSwgMSwgMSwgMSwgMCwgMCwgMSwgMCwgMCwgMCBdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApO1xuXG5cdC8vXG5cblx0dmFyIHBvc2l0aW9uczIgPSBbIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEgXTtcblxuXHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5Mi5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMyLCAzICkgKTtcblx0Z2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnkyLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSB9ICkgKSApO1xuXG59XG5cblBsYW5lSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICk7XG5QbGFuZUhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQbGFuZUhlbHBlcjtcblxuUGxhbmVIZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHR2YXIgc2NhbGUgPSAtIHRoaXMucGxhbmUuY29uc3RhbnQ7XG5cblx0aWYgKCBNYXRoLmFicyggc2NhbGUgKSA8IDFlLTggKSBzY2FsZSA9IDFlLTg7IC8vIHNpZ24gZG9lcyBub3QgbWF0dGVyXG5cblx0dGhpcy5zY2FsZS5zZXQoIDAuNSAqIHRoaXMuc2l6ZSwgMC41ICogdGhpcy5zaXplLCBzY2FsZSApO1xuXG5cdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5zaWRlID0gKCBzY2FsZSA8IDAgKSA/IEJhY2tTaWRlIDogRnJvbnRTaWRlOyAvLyByZW5kZXJlciBmbGlwcyBzaWRlIHdoZW4gZGV0ZXJtaW5hbnQgPCAwOyBmbGlwcGluZyBub3Qgd2FudGVkIGhlcmVcblxuXHR0aGlzLmxvb2tBdCggdGhpcy5wbGFuZS5ub3JtYWwgKTtcblxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqXG4gKiBDcmVhdGVzIGFuIGFycm93IGZvciB2aXN1YWxpemluZyBkaXJlY3Rpb25zXG4gKlxuICogUGFyYW1ldGVyczpcbiAqICBkaXIgLSBWZWN0b3IzXG4gKiAgb3JpZ2luIC0gVmVjdG9yM1xuICogIGxlbmd0aCAtIE51bWJlclxuICogIGNvbG9yIC0gY29sb3IgaW4gaGV4IHZhbHVlXG4gKiAgaGVhZExlbmd0aCAtIE51bWJlclxuICogIGhlYWRXaWR0aCAtIE51bWJlclxuICovXG5cbnZhciBsaW5lR2VvbWV0cnksIGNvbmVHZW9tZXRyeTtcblxuZnVuY3Rpb24gQXJyb3dIZWxwZXIoIGRpciwgb3JpZ2luLCBsZW5ndGgsIGNvbG9yLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKSB7XG5cblx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHRpZiAoIGRpciA9PT0gdW5kZWZpbmVkICkgZGlyID0gbmV3IFRIUkVFLlZlY3RvcjMoIDAsIDAsIDEgKTtcblx0aWYgKCBvcmlnaW4gPT09IHVuZGVmaW5lZCApIG9yaWdpbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAwLCAwICk7XG5cdGlmICggbGVuZ3RoID09PSB1bmRlZmluZWQgKSBsZW5ndGggPSAxO1xuXHRpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgKSBjb2xvciA9IDB4ZmZmZjAwO1xuXHRpZiAoIGhlYWRMZW5ndGggPT09IHVuZGVmaW5lZCApIGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7XG5cdGlmICggaGVhZFdpZHRoID09PSB1bmRlZmluZWQgKSBoZWFkV2lkdGggPSAwLjIgKiBoZWFkTGVuZ3RoO1xuXG5cdGlmICggbGluZUdlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRsaW5lR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRsaW5lR2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAwLCAwLCAwLCAxLCAwIF0sIDMgKSApO1xuXG5cdFx0Y29uZUdlb21ldHJ5ID0gbmV3IEN5bGluZGVyQnVmZmVyR2VvbWV0cnkoIDAsIDAuNSwgMSwgNSwgMSApO1xuXHRcdGNvbmVHZW9tZXRyeS50cmFuc2xhdGUoIDAsIC0gMC41LCAwICk7XG5cblx0fVxuXG5cdHRoaXMucG9zaXRpb24uY29weSggb3JpZ2luICk7XG5cblx0dGhpcy5saW5lID0gbmV3IExpbmUoIGxpbmVHZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblx0dGhpcy5saW5lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5hZGQoIHRoaXMubGluZSApO1xuXG5cdHRoaXMuY29uZSA9IG5ldyBNZXNoKCBjb25lR2VvbWV0cnksIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IgfSApICk7XG5cdHRoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuYWRkKCB0aGlzLmNvbmUgKTtcblxuXHR0aGlzLnNldERpcmVjdGlvbiggZGlyICk7XG5cdHRoaXMuc2V0TGVuZ3RoKCBsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApO1xuXG59XG5cbkFycm93SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXJyb3dIZWxwZXI7XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5zZXREaXJlY3Rpb24gPSAoIGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgYXhpcyA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciByYWRpYW5zO1xuXG5cdHJldHVybiBmdW5jdGlvbiBzZXREaXJlY3Rpb24oIGRpciApIHtcblxuXHRcdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdGlmICggZGlyLnkgPiAwLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAwLCAwLCAwLCAxICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkaXIueSA8IC0gMC45OTk5OSApIHtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMSwgMCwgMCwgMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdHJhZGlhbnMgPSBNYXRoLmFjb3MoIGRpci55ICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCByYWRpYW5zICk7XG5cblx0XHR9XG5cblx0fTtcblxufSgpICk7XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5zZXRMZW5ndGggPSBmdW5jdGlvbiAoIGxlbmd0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICkge1xuXG5cdGlmICggaGVhZExlbmd0aCA9PT0gdW5kZWZpbmVkICkgaGVhZExlbmd0aCA9IDAuMiAqIGxlbmd0aDtcblx0aWYgKCBoZWFkV2lkdGggPT09IHVuZGVmaW5lZCApIGhlYWRXaWR0aCA9IDAuMiAqIGhlYWRMZW5ndGg7XG5cblx0dGhpcy5saW5lLnNjYWxlLnNldCggMSwgTWF0aC5tYXgoIDAsIGxlbmd0aCAtIGhlYWRMZW5ndGggKSwgMSApO1xuXHR0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy5jb25lLnNjYWxlLnNldCggaGVhZFdpZHRoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblx0dGhpcy5jb25lLnBvc2l0aW9uLnkgPSBsZW5ndGg7XG5cdHRoaXMuY29uZS51cGRhdGVNYXRyaXgoKTtcblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldENvbG9yID0gZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHR0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3IuY29weSggY29sb3IgKTtcblx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIGNvbG9yICk7XG5cbn07XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCBmYWxzZSApO1xuXG5cdHRoaXMubGluZS5jb3B5KCBzb3VyY2UubGluZSApO1xuXHR0aGlzLmNvbmUuY29weSggc291cmNlLmNvbmUgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG5cdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHNyb3VjaGVyYXkgLyBodHRwOi8vc3JvdWNoZXJheS5vcmcvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF4ZXNIZWxwZXIoIHNpemUgKSB7XG5cblx0c2l6ZSA9IHNpemUgfHwgMTtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MCwgMCwgMCxcdHNpemUsIDAsIDAsXG5cdFx0MCwgMCwgMCxcdDAsIHNpemUsIDAsXG5cdFx0MCwgMCwgMCxcdDAsIDAsIHNpemVcblx0XTtcblxuXHR2YXIgY29sb3JzID0gW1xuXHRcdDEsIDAsIDAsXHQxLCAwLjYsIDAsXG5cdFx0MCwgMSwgMCxcdDAuNiwgMSwgMCxcblx0XHQwLCAwLCAxLFx0MCwgMC42LCAxXG5cdF07XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5BeGVzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcbkF4ZXNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXhlc0hlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZhY2U0KCBhLCBiLCBjLCBkLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZhY2U0IGhhcyBiZWVuIHJlbW92ZWQuIEEgVEhSRUUuRmFjZTMgd2lsbCBiZSBjcmVhdGVkIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEZhY2UzKCBhLCBiLCBjLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICk7XG5cbn1cblxudmFyIExpbmVTdHJpcCA9IDA7XG5cbnZhciBMaW5lUGllY2VzID0gMTtcblxuZnVuY3Rpb24gTWVzaEZhY2VNYXRlcmlhbCggbWF0ZXJpYWxzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hGYWNlTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG59XG5cbmZ1bmN0aW9uIE11bHRpTWF0ZXJpYWwoIG1hdGVyaWFscyApIHtcblxuXHRpZiAoIG1hdGVyaWFscyA9PT0gdW5kZWZpbmVkICkgbWF0ZXJpYWxzID0gW107XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTXVsdGlNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nICk7XG5cdG1hdGVyaWFscy5pc011bHRpTWF0ZXJpYWwgPSB0cnVlO1xuXHRtYXRlcmlhbHMubWF0ZXJpYWxzID0gbWF0ZXJpYWxzO1xuXHRtYXRlcmlhbHMuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWxzLnNsaWNlKCk7XG5cblx0fTtcblx0cmV0dXJuIG1hdGVyaWFscztcblxufVxuXG5mdW5jdGlvbiBQb2ludENsb3VkKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZSggbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGUgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5TcHJpdGUuJyApO1xuXHRyZXR1cm4gbmV3IFNwcml0ZSggbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbSggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBvaW50Q2xvdWRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gUGFydGljbGVTeXN0ZW1NYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gVmVydGV4KCB4LCB5LCB6ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlcnRleCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuVmVjdG9yMyBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBWZWN0b3IzKCB4LCB5LCB6ICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoKS5zZXREeW5hbWljKCB0cnVlICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKS5zZXREeW5hbWljKCB0cnVlICk7XG5cbn1cblxuZnVuY3Rpb24gSW50OEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDhBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5VaW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gSW50MTZBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQxNkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gSW50MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gRmxvYXQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gRmxvYXQ2NEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDY0QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuLy9cblxuQ3VydmUuY3JlYXRlID0gZnVuY3Rpb24gKCBjb25zdHJ1Y3QsIGdldFBvaW50ICkge1xuXG5cdGNvbnNvbGUubG9nKCAnVEhSRUUuQ3VydmUuY3JlYXRlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCcgKTtcblxuXHRjb25zdHJ1Y3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Q7XG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuZ2V0UG9pbnQgPSBnZXRQb2ludDtcblxuXHRyZXR1cm4gY29uc3RydWN0O1xuXG59O1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBDdXJ2ZVBhdGgucHJvdG90eXBlLCB7XG5cblx0Y3JlYXRlUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlUG9pbnRzR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeSBmcm9tIHBhdGggcG9pbnRzIChmb3IgTGluZSBvciBQb2ludHMgb2JqZWN0cylcblxuXHRcdHZhciBwdHMgPSB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoIHB0cyApO1xuXG5cdH0sXG5cblx0Y3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeSBmcm9tIGVxdWlkaXN0YW50IHNhbXBsaW5nIGFsb25nIHRoZSBwYXRoXG5cblx0XHR2YXIgcHRzID0gdGhpcy5nZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyApO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KCBwdHMgKTtcblxuXHR9LFxuXG5cdGNyZWF0ZUdlb21ldHJ5OiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyApO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKCBuZXcgVmVjdG9yMyggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggUGF0aC5wcm90b3R5cGUsIHtcblxuXHRmcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhdGg6IC5mcm9tUG9pbnRzKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVBvaW50cygpLicgKTtcblx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBDbG9zZWRTcGxpbmVDdXJ2ZTMoIHBvaW50cyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5DbG9zZWRTcGxpbmVDdXJ2ZTMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMgaW5zdGVhZC4nICk7XG5cblx0Q2F0bXVsbFJvbUN1cnZlMy5jYWxsKCB0aGlzLCBwb2ludHMgKTtcblx0dGhpcy50eXBlID0gJ2NhdG11bGxyb20nO1xuXHR0aGlzLmNsb3NlZCA9IHRydWU7XG5cbn1cblxuQ2xvc2VkU3BsaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbi8vXG5cbmZ1bmN0aW9uIFNwbGluZUN1cnZlMyggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cbn1cblxuU3BsaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbi8vXG5cbmZ1bmN0aW9uIFNwbGluZSggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cbn1cblxuU3BsaW5lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbk9iamVjdC5hc3NpZ24oIFNwbGluZS5wcm90b3R5cGUsIHtcblxuXHRpbml0RnJvbUFycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3BsaW5lOiAuaW5pdEZyb21BcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGdldENvbnRyb2xQb2ludHNBcnJheTogZnVuY3Rpb24gKCAvKiBvcHRpb25hbFRhcmdldCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcGxpbmU6IC5nZXRDb250cm9sUG9pbnRzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg6IGZ1bmN0aW9uICggLyogc2FtcGxpbmdDb2VmICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwbGluZTogLnJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBBeGlzSGVscGVyKCBzaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF4aXNIZWxwZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5BeGVzSGVscGVyLicgKTtcblx0cmV0dXJuIG5ldyBBeGVzSGVscGVyKCBzaXplICk7XG5cbn1cblxuZnVuY3Rpb24gQm91bmRpbmdCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gQ3JlYXRpbmcgYSBUSFJFRS5Cb3hIZWxwZXIgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICk7XG5cbn1cblxuZnVuY3Rpb24gRWRnZXNIZWxwZXIoIG9iamVjdCwgaGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkVkZ2VzSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5FZGdlc0dlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IExpbmVTZWdtZW50cyggbmV3IEVkZ2VzR2VvbWV0cnkoIG9iamVjdC5nZW9tZXRyeSApLCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleCAhPT0gdW5kZWZpbmVkID8gaGV4IDogMHhmZmZmZmYgfSApICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyApO1xuXG59O1xuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2VsZXRvbkhlbHBlcjogdXBkYXRlKCkgbm8gbG9uZ2VyIG5lZWRzIHRvIGJlIGNhbGxlZC4nICk7XG5cbn07XG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUhlbHBlciggb2JqZWN0LCBoZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBMaW5lU2VnbWVudHMoIG5ldyBXaXJlZnJhbWVHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxufVxuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0ZXh0cmFjdFVybEJhc2U6IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyOiAuZXh0cmFjdFVybEJhc2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBYSFJMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuWEhSTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRmlsZUxvYWRlci4nICk7XG5cdHJldHVybiBuZXcgRmlsZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbmZ1bmN0aW9uIEJpbmFyeVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLicgKTtcblx0cmV0dXJuIG5ldyBEYXRhVGV4dHVyZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEpTT05Mb2FkZXIucHJvdG90eXBlLCB7XG5cblx0c2V0VGV4dHVyZVBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5KU09OTG9hZGVyOiAuc2V0VGV4dHVyZVBhdGgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRSZXNvdXJjZVBhdGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0UmVzb3VyY2VQYXRoKCB2YWx1ZSApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBPYmplY3RMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0c2V0VGV4dHVyZVBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IC5zZXRUZXh0dXJlUGF0aCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldFJlc291cmNlUGF0aCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zZXRSZXNvdXJjZVBhdGgoIHZhbHVlICk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIEJveDIucHJvdG90eXBlLCB7XG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fSxcblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cblx0fSxcblx0c2l6ZTogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRTaXplKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHtcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9LFxuXHRlbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvblNwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG5cdH0sXG5cdHNpemU6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2l6ZSggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG59ICk7XG5cbkxpbmUzLnByb3RvdHlwZS5jZW50ZXIgPSBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbk9iamVjdC5hc3NpZ24oIF9NYXRoLCB7XG5cblx0cmFuZG9tMTY6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGg6IC5yYW5kb20xNigpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBNYXRoLnJhbmRvbSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBNYXRoLnJhbmRvbSgpO1xuXG5cdH0sXG5cblx0bmVhcmVzdFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoOiAubmVhcmVzdFBvd2VyT2ZUd28oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mbG9vclBvd2VyT2ZUd28oKS4nICk7XG5cdFx0cmV0dXJuIF9NYXRoLmZsb29yUG93ZXJPZlR3byggdmFsdWUgKTtcblxuXHR9LFxuXG5cdG5leHRQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLm5leHRQb3dlck9mVHdvKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY2VpbFBvd2VyT2ZUd28oKS4nICk7XG5cdFx0cmV0dXJuIF9NYXRoLmNlaWxQb3dlck9mVHdvKCB2YWx1ZSApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBNYXRyaXgzLnByb3RvdHlwZSwge1xuXG5cdGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuTWF0cml4MzogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC5cIiApO1xuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoIGFycmF5LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXgzKCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4MyggdGhpcyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YXBwbHlUb0J1ZmZlcjogZnVuY3Rpb24gKCBidWZmZXIgLyosIG9mZnNldCwgbGVuZ3RoICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4MzogLmFwcGx5VG9CdWZmZXIoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGJ1ZmZlciApO1xuXG5cdH0sXG5cdGFwcGx5VG9WZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXksIG9mZnNldCwgbGVuZ3RoICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDQucHJvdG90eXBlLCB7XG5cblx0ZXh0cmFjdFBvc2l0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZXh0cmFjdFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY29weVBvc2l0aW9uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmNvcHlQb3NpdGlvbiggbSApO1xuXG5cdH0sXG5cdGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuTWF0cml4NDogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC5cIiApO1xuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoIGFycmF5LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRnZXRQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFBvc2l0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHYxID09PSB1bmRlZmluZWQgKSB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZ2V0UG9zaXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHYxLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDMgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICk7XG5cblx0fSxcblx0bXVsdGlwbHlUb0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlUb0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjQ6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlQXhpczogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHYudHJhbnNmb3JtRGlyZWN0aW9uKCB0aGlzICk7XG5cblx0fSxcblx0Y3Jvc3NWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmNyb3NzVmVjdG9yKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0fSxcblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZVg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZUJ5QXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVCeUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRhcHBseVRvQnVmZmVyOiBmdW5jdGlvbiAoIGJ1ZmZlciAvKiwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb0J1ZmZlcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYnVmZmVyICk7XG5cblx0fSxcblx0YXBwbHlUb1ZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRtYWtlRnJ1c3R1bTogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlRnJ1c3R1bSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKTtcblxuXHR9XG5cbn0gKTtcblxuUGxhbmUucHJvdG90eXBlLmlzSW50ZXJzZWN0aW9uTGluZSA9IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLmlzSW50ZXJzZWN0aW9uTGluZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNMaW5lKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzTGluZSggbGluZSApO1xuXG59O1xuXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5tdWx0aXBseVZlY3RvcjMgPSBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGlzIG5vdyB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzICk7XG5cbn07XG5cbk9iamVjdC5hc3NpZ24oIFJheS5wcm90b3R5cGUsIHtcblxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25QbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uUGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzUGxhbmUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uU3BoZXJlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1NwaGVyZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7XG5cblx0YXJlYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5hcmVhKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QXJlYSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRBcmVhKCk7XG5cblx0fSxcblx0YmFyeWNvb3JkRnJvbVBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmJhcnljb29yZEZyb21Qb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEJhcnljb29yZCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0YXJnZXQgKTtcblxuXHR9LFxuXHRtaWRwb2ludDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm1pZHBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0TWlkcG9pbnQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWlkcG9pbnQoIHRhcmdldCApO1xuXG5cdH0sXG5cdG5vcm1hbDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm5vcm1hbCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE5vcm1hbCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXROb3JtYWwoIHRhcmdldCApO1xuXG5cdH0sXG5cdHBsYW5lOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAucGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRQbGFuZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRQbGFuZSggdGFyZ2V0ICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLCB7XG5cblx0YmFyeWNvb3JkRnJvbVBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmJhcnljb29yZEZyb21Qb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEJhcnljb29yZCgpLicgKTtcblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICk7XG5cblx0fSxcblx0bm9ybWFsOiBmdW5jdGlvbiAoIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoIGEsIGIsIGMsIHRhcmdldCApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBTaGFwZS5wcm90b3R5cGUsIHtcblxuXHRleHRyYWN0QWxsUG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cmFjdEFsbFBvaW50cygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuZXh0cmFjdFBvaW50cygpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dHJhY3RQb2ludHMoIGRpdmlzaW9ucyApO1xuXG5cdH0sXG5cdGV4dHJ1ZGU6IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cnVkZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFeHRydWRlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gbmV3IEV4dHJ1ZGVHZW9tZXRyeSggdGhpcywgb3B0aW9ucyApO1xuXG5cdH0sXG5cdG1ha2VHZW9tZXRyeTogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5tYWtlR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgU2hhcGVHZW9tZXRyeSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBuZXcgU2hhcGVHZW9tZXRyeSggdGhpcywgb3B0aW9ucyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IyLnByb3RvdHlwZSwge1xuXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApO1xuXG5cdH0sXG5cdGRpc3RhbmNlVG9NYW5oYXR0YW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICk7XG5cblx0fSxcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IzLnByb3RvdHlwZSwge1xuXG5cdHNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGluc3RlYWQuJyApO1xuXG5cdH0sXG5cdHNldEV1bGVyRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFdWxlci5zZXRGcm9tUXVhdGVybmlvbigpIGluc3RlYWQuJyApO1xuXG5cdH0sXG5cdGdldFBvc2l0aW9uRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldFBvc2l0aW9uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhQb3NpdGlvbigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG0gKTtcblxuXHR9LFxuXHRnZXRTY2FsZUZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5nZXRTY2FsZUZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4U2NhbGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFNjYWxlKCBtICk7XG5cblx0fSxcblx0Z2V0Q29sdW1uRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBpbmRleCwgbWF0cml4ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldENvbHVtbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4Q29sdW1uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG1hdHJpeCwgaW5kZXggKTtcblxuXHR9LFxuXHRhcHBseVByb2plY3Rpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseVByb2plY3Rpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmFwcGx5TWF0cml4NCggbSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggbSApO1xuXG5cdH0sXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApO1xuXG5cdH0sXG5cdGRpc3RhbmNlVG9NYW5oYXR0YW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICk7XG5cblx0fSxcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3I0LnByb3RvdHlwZSwge1xuXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApO1xuXG5cdH0sXG5cdGxlbmd0aE1hbmhhdHRhbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0Y29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnk6IC5jb21wdXRlVGFuZ2VudHMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRjb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpIGluc3RlYWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRnZXRDaGlsZEJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRDaGlsZEJ5TmFtZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE9iamVjdEJ5TmFtZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeU5hbWUoIG5hbWUgKTtcblxuXHR9LFxuXHRyZW5kZXJEZXB0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5yZW5kZXJEZXB0aCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnJlbmRlck9yZGVyLCBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggZGlzdGFuY2UsIGF4aXMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKTtcblxuXHR9LFxuXHRnZXRXb3JsZFJvdGF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRldWxlck9yZGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dXNlUXVhdGVybmlvbjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTE9ELnByb3RvdHlwZSwge1xuXG5cdG9iamVjdHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTE9EOiAub2JqZWN0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5sZXZlbHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubGV2ZWxzO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBTa2VsZXRvbi5wcm90b3R5cGUsICd1c2VWZXJ0ZXhUZXh0dXJlJywge1xuXG5cdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IHVzZVZlcnRleFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBDdXJ2ZS5wcm90b3R5cGUsICdfX2FyY0xlbmd0aERpdmlzaW9ucycsIHtcblxuXHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuJyApO1xuXHRcdHJldHVybiB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicgKTtcblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHZhbHVlO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuc2V0TGVucyA9IGZ1bmN0aW9uICggZm9jYWxMZW5ndGgsIGZpbG1HYXVnZSApIHtcblxuXHRjb25zb2xlLndhcm4oIFwiVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEuc2V0TGVucyBpcyBkZXByZWNhdGVkLiBcIiArXG5cdFx0XHRcIlVzZSAuc2V0Rm9jYWxMZW5ndGggYW5kIC5maWxtR2F1Z2UgZm9yIGEgcGhvdG9ncmFwaGljIHNldHVwLlwiICk7XG5cblx0aWYgKCBmaWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIHRoaXMuZmlsbUdhdWdlID0gZmlsbUdhdWdlO1xuXHR0aGlzLnNldEZvY2FsTGVuZ3RoKCBmb2NhbExlbmd0aCApO1xuXG59O1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTGlnaHQucHJvdG90eXBlLCB7XG5cdG9ubHlTaGFkb3c6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5vbmx5U2hhZG93IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFGb3Y6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRm92IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mb3YuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZvdiA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFMZWZ0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUxlZnQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmxlZnQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhUmlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhUmlnaHQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnJpZ2h0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5yaWdodCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFUb3A6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVG9wIGlzIG5vdyAuc2hhZG93LmNhbWVyYS50b3AuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnRvcCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFCb3R0b206IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhQm90dG9tIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5ib3R0b20uJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFOZWFyOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYU5lYXIgaXMgbm93IC5zaGFkb3cuY2FtZXJhLm5lYXIuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLm5lYXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhRmFyOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUZhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEuZmFyLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5mYXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhVmlzaWJsZToge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVZpc2libGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoIGxpZ2h0LnNoYWRvdy5jYW1lcmEgKSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Qmlhczoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dCaWFzIGlzIG5vdyAuc2hhZG93LmJpYXMuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuYmlhcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dEYXJrbmVzczoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0RhcmtuZXNzIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBXaWR0aDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBXaWR0aCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLndpZHRoLicgKTtcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUud2lkdGggPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwSGVpZ2h0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd01hcEhlaWdodCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLmhlaWdodC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0bGVuZ3RoOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmNvdW50IGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoO1xuXG5cdFx0fVxuXHR9LFxuXHRjb3B5SW5kaWNlc0FycmF5OiBmdW5jdGlvbiAoIC8qIGluZGljZXMgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuY29weUluZGljZXNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRhZGRJbmRleDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkSW5kZXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRJbmRleCgpLicgKTtcblx0XHR0aGlzLnNldEluZGV4KCBpbmRleCApO1xuXG5cdH0sXG5cdGFkZERyYXdDYWxsOiBmdW5jdGlvbiAoIHN0YXJ0LCBjb3VudCwgaW5kZXhPZmZzZXQgKSB7XG5cblx0XHRpZiAoIGluZGV4T2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBubyBsb25nZXIgc3VwcG9ydHMgaW5kZXhPZmZzZXQuJyApO1xuXG5cdFx0fVxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBpcyBub3cgLmFkZEdyb3VwKCkuJyApO1xuXHRcdHRoaXMuYWRkR3JvdXAoIHN0YXJ0LCBjb3VudCApO1xuXG5cdH0sXG5cdGNsZWFyRHJhd0NhbGxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNsZWFyRHJhd0NhbGxzKCkgaXMgbm93IC5jbGVhckdyb3VwcygpLicgKTtcblx0XHR0aGlzLmNsZWFyR3JvdXBzKCk7XG5cblx0fSxcblx0Y29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGNvbXB1dGVPZmZzZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVPZmZzZXRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRkcmF3Y2FsbHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH0sXG5cdG9mZnNldHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5vZmZzZXRzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0Z2V0QXJyYXlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuZ2V0QXJyYXlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblxuXHRhZGRTaGFwZUxpc3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IC5hZGRTaGFwZUxpc3QoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXG5cdGFkZFNoYXBlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuYWRkU2hhcGUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFVuaWZvcm0ucHJvdG90eXBlLCB7XG5cblx0ZHluYW1pYzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiAuZHluYW1pYyBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdG9uVXBkYXRlOiB7XG5cdFx0dmFsdWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLm9uVXBkYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0d3JhcEFyb3VuZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0b3ZlcmRyYXc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC5vdmVyZHJhdyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0d3JhcFJHQjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBSR0IgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKCk7XG5cblx0XHR9XG5cdH0sXG5cblx0c2hhZGluZzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLmZsYXRTaGFkaW5nID0gKCB2YWx1ZSA9PT0gRmxhdFNoYWRpbmcgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUsIHtcblxuXHRtZXRhbDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbDogLm1ldGFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsOiAubWV0YWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIGluc3RlYWQnICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0ZGVyaXZhdGl2ZXM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLiBTaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicgKTtcblx0XHRcdHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHtcblxuXHRjbGVhclRhcmdldDogZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5jbGVhclRhcmdldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgYW5kIC5jbGVhcigpIGluc3RlYWQuJyApO1xuXHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHR0aGlzLmNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKTtcblxuXHR9LFxuXG5cdGFuaW1hdGU6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYW5pbWF0ZSgpIGlzIG5vdyAuc2V0QW5pbWF0aW9uTG9vcCgpLicgKTtcblx0XHR0aGlzLnNldEFuaW1hdGlvbkxvb3AoIGNhbGxiYWNrICk7XG5cblx0fSxcblxuXHRnZXRDdXJyZW50UmVuZGVyVGFyZ2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0Q3VycmVudFJlbmRlclRhcmdldCgpIGlzIG5vdyAuZ2V0UmVuZGVyVGFyZ2V0KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdH0sXG5cblx0Z2V0TWF4QW5pc290cm9weTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldE1heEFuaXNvdHJvcHkoKSBpcyBub3cgLmNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCk7XG5cblx0fSxcblxuXHRnZXRQcmVjaXNpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRQcmVjaXNpb24oKSBpcyBub3cgLmNhcGFiaWxpdGllcy5wcmVjaXNpb24uJyApO1xuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy5wcmVjaXNpb247XG5cblx0fSxcblxuXHRyZXNldEdMU3RhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5yZXNldEdMU3RhdGUoKSBpcyBub3cgLnN0YXRlLnJlc2V0KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnN0YXRlLnJlc2V0KCk7XG5cblx0fSxcblxuXHRzdXBwb3J0c0Zsb2F0VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0Zsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfdGV4dHVyZV9mbG9hdFxcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfaGFsZl9mbG9hdFxcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cblx0fSxcblx0c3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQzogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblxuXHR9LFxuXHRzdXBwb3J0c0JsZW5kTWluTWF4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNCbGVuZE1pbk1heCgpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ0VYVF9ibGVuZF9taW5tYXhcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdFWFRfYmxlbmRfbWlubWF4JyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c1ZlcnRleFRleHR1cmVzKCkgaXMgbm93IC5jYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXMuJyApO1xuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcztcblxuXHR9LFxuXHRzdXBwb3J0c0luc3RhbmNlZEFycmF5czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnQU5HTEVfaW5zdGFuY2VkX2FycmF5c1xcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cblx0fSxcblx0ZW5hYmxlU2Npc3NvclRlc3Q6IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5lbmFibGVTY2lzc29yVGVzdCgpIGlzIG5vdyAuc2V0U2Npc3NvclRlc3QoKS4nICk7XG5cdFx0dGhpcy5zZXRTY2lzc29yVGVzdCggYm9vbGVhbiApO1xuXG5cdH0sXG5cdGluaXRNYXRlcmlhbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmluaXRNYXRlcmlhbCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFkZFByZVBsdWdpbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFByZVBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFkZFBvc3RQbHVnaW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQb3N0UGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0dXBkYXRlU2hhZG93TWFwOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAudXBkYXRlU2hhZG93TWFwKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0c2V0RmFjZUN1bGxpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRGYWNlQ3VsbGluZygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHtcblxuXHRzaGFkb3dNYXBFbmFibGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC5lbmFibGVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAuZW5hYmxlZCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBUeXBlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBUeXBlIGlzIG5vdyAuc2hhZG93TWFwLnR5cGUuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBDdWxsRmFjZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fVxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xTaGFkb3dNYXAucHJvdG90eXBlLCB7XG5cblx0Y3VsbEZhY2U6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiBjdWxsRmFjZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0cmVuZGVyUmV2ZXJzZVNpZGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyUmV2ZXJzZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyUmV2ZXJzZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRyZW5kZXJTaW5nbGVTaWRlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclNpbmdsZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyU2luZ2xlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlLCB7XG5cblx0d3JhcFM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwUyBpcyBub3cgLnRleHR1cmUud3JhcFMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwUztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUud3JhcFMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0d3JhcFQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwVDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUud3JhcFQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0bWFnRmlsdGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWFnRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5tYWdGaWx0ZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5tYWdGaWx0ZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUubWFnRmlsdGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdG1pbkZpbHRlcjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1pbkZpbHRlciBpcyBub3cgLnRleHR1cmUubWluRmlsdGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUubWluRmlsdGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRhbmlzb3Ryb3B5OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuYW5pc290cm9weSBpcyBub3cgLnRleHR1cmUuYW5pc290cm9weS4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmFuaXNvdHJvcHk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdG9mZnNldDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm9mZnNldCBpcyBub3cgLnRleHR1cmUub2Zmc2V0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUub2Zmc2V0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLm9mZnNldCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRyZXBlYXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5yZXBlYXQgaXMgbm93IC50ZXh0dXJlLnJlcGVhdC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLnJlcGVhdDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5yZXBlYXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0Zm9ybWF0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5mb3JtYXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUuZm9ybWF0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHR5cGU6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC50eXBlIGlzIG5vdyAudGV4dHVyZS50eXBlLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUudHlwZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLnR5cGUgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0Z2VuZXJhdGVNaXBtYXBzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZ2VuZXJhdGVNaXBtYXBzIGlzIG5vdyAudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdmFsdWU7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViVlJNYW5hZ2VyLnByb3RvdHlwZSwge1xuXG5cdHN0YW5kaW5nOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJWUk1hbmFnZXI6IC5zdGFuZGluZyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblx0dXNlckhlaWdodDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViVlJNYW5hZ2VyOiAudXNlckhlaWdodCBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbkF1ZGlvLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC4nICk7XG5cdHZhciBzY29wZSA9IHRoaXM7XG5cdHZhciBhdWRpb0xvYWRlciA9IG5ldyBBdWRpb0xvYWRlcigpO1xuXHRhdWRpb0xvYWRlci5sb2FkKCBmaWxlLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdHNjb3BlLnNldEJ1ZmZlciggYnVmZmVyICk7XG5cblx0fSApO1xuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQXVkaW9BbmFseXNlci5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpb0FuYWx5c2VyOiAuZ2V0RGF0YSgpIGlzIG5vdyAuZ2V0RnJlcXVlbmN5RGF0YSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xuXG59O1xuXG4vL1xuXG5DdWJlQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVDdWJlTWFwID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3ViZUNhbWVyYTogLnVwZGF0ZUN1YmVNYXAoKSBpcyBub3cgLnVwZGF0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTtcblxufTtcblxuLy9cblxudmFyIEdlb21ldHJ5VXRpbHMgPSB7XG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnkxLCBnZW9tZXRyeTIsIG1hdGVyaWFsSW5kZXhPZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5HZW9tZXRyeVV0aWxzOiAubWVyZ2UoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5Lm1lcmdlKCBnZW9tZXRyeTIsIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApIGluc3RlYWQuJyApO1xuXHRcdHZhciBtYXRyaXg7XG5cblx0XHRpZiAoIGdlb21ldHJ5Mi5pc01lc2ggKSB7XG5cblx0XHRcdGdlb21ldHJ5Mi5tYXRyaXhBdXRvVXBkYXRlICYmIGdlb21ldHJ5Mi51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0bWF0cml4ID0gZ2VvbWV0cnkyLm1hdHJpeDtcblx0XHRcdGdlb21ldHJ5MiA9IGdlb21ldHJ5Mi5nZW9tZXRyeTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5MS5tZXJnZSggZ2VvbWV0cnkyLCBtYXRyaXgsIG1hdGVyaWFsSW5kZXhPZmZzZXQgKTtcblxuXHR9LFxuXG5cdGNlbnRlcjogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdlb21ldHJ5VXRpbHM6IC5jZW50ZXIoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5LmNlbnRlcigpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBnZW9tZXRyeS5jZW50ZXIoKTtcblxuXHR9XG5cbn07XG5cbkltYWdlVXRpbHMuY3Jvc3NPcmlnaW4gPSB1bmRlZmluZWQ7XG5cbkltYWdlVXRpbHMubG9hZFRleHR1cmUgPSBmdW5jdGlvbiAoIHVybCwgbWFwcGluZywgb25Mb2FkLCBvbkVycm9yICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLlRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR2YXIgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcblx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0dmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCggdXJsLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdGlmICggbWFwcGluZyApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0cmV0dXJuIHRleHR1cmU7XG5cbn07XG5cbkltYWdlVXRpbHMubG9hZFRleHR1cmVDdWJlID0gZnVuY3Rpb24gKCB1cmxzLCBtYXBwaW5nLCBvbkxvYWQsIG9uRXJyb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0dmFyIGxvYWRlciA9IG5ldyBDdWJlVGV4dHVyZUxvYWRlcigpO1xuXHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblxuXHR2YXIgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmxzLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdGlmICggbWFwcGluZyApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0cmV0dXJuIHRleHR1cmU7XG5cbn07XG5cbkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyApO1xuXG59O1xuXG5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyApO1xuXG59O1xuXG4vL1xuXG5mdW5jdGlvbiBQcm9qZWN0b3IoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb2plY3RvciBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvcmVuZGVyZXJzL1Byb2plY3Rvci5qcy4nICk7XG5cblx0dGhpcy5wcm9qZWN0VmVjdG9yID0gZnVuY3Rpb24gKCB2ZWN0b3IsIGNhbWVyYSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb2plY3RvcjogLnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnByb2plY3QoKS4nICk7XG5cdFx0dmVjdG9yLnByb2plY3QoIGNhbWVyYSApO1xuXG5cdH07XG5cblx0dGhpcy51bnByb2plY3RWZWN0b3IgPSBmdW5jdGlvbiAoIHZlY3RvciwgY2FtZXJhICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUHJvamVjdG9yOiAudW5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci51bnByb2plY3QoKS4nICk7XG5cdFx0dmVjdG9yLnVucHJvamVjdCggY2FtZXJhICk7XG5cblx0fTtcblxuXHR0aGlzLnBpY2tpbmdSYXkgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvamVjdG9yOiAucGlja2luZ1JheSgpIGlzIG5vdyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSgpLicgKTtcblxuXHR9O1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiByZW1vdmVkJyApO1xuXG59XG5cbi8vXG5cbnZhciBTY2VuZVV0aWxzID0ge1xuXG5cdGNyZWF0ZU11bHRpTWF0ZXJpYWxPYmplY3Q6IGZ1bmN0aW9uICggLyogZ2VvbWV0cnksIG1hdGVyaWFscyAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZVV0aWxzIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBwYXJlbnQsIHNjZW5lICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3V0aWxzL1NjZW5lVXRpbHMuanMnICk7XG5cblx0fSxcblxuXHRhdHRhY2g6IGZ1bmN0aW9uICggLyogY2hpbGQsIHNjZW5lLCBwYXJlbnQgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2NlbmVVdGlscyBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvdXRpbHMvU2NlbmVVdGlscy5qcycgKTtcblxuXHR9XG5cbn07XG5cbi8vXG5cbmZ1bmN0aW9uIExlbnNGbGFyZSgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTGVuc0ZsYXJlIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy9vYmplY3RzL0xlbnNmbGFyZS5qcycgKTtcblxufVxuXG5leHBvcnQgeyBXZWJHTFJlbmRlclRhcmdldEN1YmUsIFdlYkdMUmVuZGVyVGFyZ2V0LCBXZWJHTFJlbmRlcmVyLCBTaGFkZXJMaWIsIFVuaWZvcm1zTGliLCBVbmlmb3Jtc1V0aWxzLCBTaGFkZXJDaHVuaywgRm9nRXhwMiwgRm9nLCBTY2VuZSwgU3ByaXRlLCBMT0QsIFNraW5uZWRNZXNoLCBTa2VsZXRvbiwgQm9uZSwgTWVzaCwgTGluZVNlZ21lbnRzLCBMaW5lTG9vcCwgTGluZSwgUG9pbnRzLCBHcm91cCwgVmlkZW9UZXh0dXJlLCBEYXRhVGV4dHVyZSwgRGF0YVRleHR1cmUzRCwgQ29tcHJlc3NlZFRleHR1cmUsIEN1YmVUZXh0dXJlLCBDYW52YXNUZXh0dXJlLCBEZXB0aFRleHR1cmUsIFRleHR1cmUsIEFuaW1hdGlvbkxvYWRlciwgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIsIERhdGFUZXh0dXJlTG9hZGVyLCBDdWJlVGV4dHVyZUxvYWRlciwgVGV4dHVyZUxvYWRlciwgT2JqZWN0TG9hZGVyLCBNYXRlcmlhbExvYWRlciwgQnVmZmVyR2VvbWV0cnlMb2FkZXIsIERlZmF1bHRMb2FkaW5nTWFuYWdlciwgTG9hZGluZ01hbmFnZXIsIEpTT05Mb2FkZXIsIEltYWdlTG9hZGVyLCBJbWFnZUJpdG1hcExvYWRlciwgRm9udExvYWRlciwgRmlsZUxvYWRlciwgTG9hZGVyLCBMb2FkZXJVdGlscywgQ2FjaGUsIEF1ZGlvTG9hZGVyLCBTcG90TGlnaHRTaGFkb3csIFNwb3RMaWdodCwgUG9pbnRMaWdodCwgUmVjdEFyZWFMaWdodCwgSGVtaXNwaGVyZUxpZ2h0LCBEaXJlY3Rpb25hbExpZ2h0U2hhZG93LCBEaXJlY3Rpb25hbExpZ2h0LCBBbWJpZW50TGlnaHQsIExpZ2h0U2hhZG93LCBMaWdodCwgU3RlcmVvQ2FtZXJhLCBQZXJzcGVjdGl2ZUNhbWVyYSwgT3J0aG9ncmFwaGljQ2FtZXJhLCBDdWJlQ2FtZXJhLCBBcnJheUNhbWVyYSwgQ2FtZXJhLCBBdWRpb0xpc3RlbmVyLCBQb3NpdGlvbmFsQXVkaW8sIEF1ZGlvQ29udGV4dCwgQXVkaW9BbmFseXNlciwgQXVkaW8sIFZlY3RvcktleWZyYW1lVHJhY2ssIFN0cmluZ0tleWZyYW1lVHJhY2ssIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBOdW1iZXJLZXlmcmFtZVRyYWNrLCBDb2xvcktleWZyYW1lVHJhY2ssIEJvb2xlYW5LZXlmcmFtZVRyYWNrLCBQcm9wZXJ0eU1peGVyLCBQcm9wZXJ0eUJpbmRpbmcsIEtleWZyYW1lVHJhY2ssIEFuaW1hdGlvblV0aWxzLCBBbmltYXRpb25PYmplY3RHcm91cCwgQW5pbWF0aW9uTWl4ZXIsIEFuaW1hdGlvbkNsaXAsIFVuaWZvcm0sIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LCBCdWZmZXJHZW9tZXRyeSwgR2VvbWV0cnksIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLCBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciwgSW50ZXJsZWF2ZWRCdWZmZXIsIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSwgRmFjZTMsIE9iamVjdDNELCBSYXljYXN0ZXIsIExheWVycywgRXZlbnREaXNwYXRjaGVyLCBDbG9jaywgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LCBMaW5lYXJJbnRlcnBvbGFudCwgRGlzY3JldGVJbnRlcnBvbGFudCwgQ3ViaWNJbnRlcnBvbGFudCwgSW50ZXJwb2xhbnQsIFRyaWFuZ2xlLCBfTWF0aCBhcyBNYXRoLCBTcGhlcmljYWwsIEN5bGluZHJpY2FsLCBQbGFuZSwgRnJ1c3R1bSwgU3BoZXJlLCBSYXksIE1hdHJpeDQsIE1hdHJpeDMsIEJveDMsIEJveDIsIExpbmUzLCBFdWxlciwgVmVjdG9yNCwgVmVjdG9yMywgVmVjdG9yMiwgUXVhdGVybmlvbiwgQ29sb3IsIEltbWVkaWF0ZVJlbmRlck9iamVjdCwgVmVydGV4Tm9ybWFsc0hlbHBlciwgU3BvdExpZ2h0SGVscGVyLCBTa2VsZXRvbkhlbHBlciwgUG9pbnRMaWdodEhlbHBlciwgUmVjdEFyZWFMaWdodEhlbHBlciwgSGVtaXNwaGVyZUxpZ2h0SGVscGVyLCBHcmlkSGVscGVyLCBQb2xhckdyaWRIZWxwZXIsIEZhY2VOb3JtYWxzSGVscGVyLCBEaXJlY3Rpb25hbExpZ2h0SGVscGVyLCBDYW1lcmFIZWxwZXIsIEJveEhlbHBlciwgQm94M0hlbHBlciwgUGxhbmVIZWxwZXIsIEFycm93SGVscGVyLCBBeGVzSGVscGVyLCBTaGFwZSwgUGF0aCwgU2hhcGVQYXRoLCBGb250LCBDdXJ2ZVBhdGgsIEN1cnZlLCBJbWFnZVV0aWxzLCBTaGFwZVV0aWxzLCBXZWJHTFV0aWxzLCBXaXJlZnJhbWVHZW9tZXRyeSwgUGFyYW1ldHJpY0dlb21ldHJ5LCBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnksIFRldHJhaGVkcm9uR2VvbWV0cnksIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnksIE9jdGFoZWRyb25HZW9tZXRyeSwgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBJY29zYWhlZHJvbkdlb21ldHJ5LCBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBEb2RlY2FoZWRyb25HZW9tZXRyeSwgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnksIFBvbHloZWRyb25HZW9tZXRyeSwgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBUdWJlR2VvbWV0cnksIFR1YmVCdWZmZXJHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnksIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LCBUb3J1c0dlb21ldHJ5LCBUb3J1c0J1ZmZlckdlb21ldHJ5LCBUZXh0R2VvbWV0cnksIFRleHRCdWZmZXJHZW9tZXRyeSwgU3BoZXJlR2VvbWV0cnksIFNwaGVyZUJ1ZmZlckdlb21ldHJ5LCBSaW5nR2VvbWV0cnksIFJpbmdCdWZmZXJHZW9tZXRyeSwgUGxhbmVHZW9tZXRyeSwgUGxhbmVCdWZmZXJHZW9tZXRyeSwgTGF0aGVHZW9tZXRyeSwgTGF0aGVCdWZmZXJHZW9tZXRyeSwgU2hhcGVHZW9tZXRyeSwgU2hhcGVCdWZmZXJHZW9tZXRyeSwgRXh0cnVkZUdlb21ldHJ5LCBFeHRydWRlQnVmZmVyR2VvbWV0cnksIEVkZ2VzR2VvbWV0cnksIENvbmVHZW9tZXRyeSwgQ29uZUJ1ZmZlckdlb21ldHJ5LCBDeWxpbmRlckdlb21ldHJ5LCBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LCBDaXJjbGVHZW9tZXRyeSwgQ2lyY2xlQnVmZmVyR2VvbWV0cnksIEJveEdlb21ldHJ5LCBCb3hCdWZmZXJHZW9tZXRyeSwgU2hhZG93TWF0ZXJpYWwsIFNwcml0ZU1hdGVyaWFsLCBSYXdTaGFkZXJNYXRlcmlhbCwgU2hhZGVyTWF0ZXJpYWwsIFBvaW50c01hdGVyaWFsLCBNZXNoUGh5c2ljYWxNYXRlcmlhbCwgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsIE1lc2hQaG9uZ01hdGVyaWFsLCBNZXNoVG9vbk1hdGVyaWFsLCBNZXNoTm9ybWFsTWF0ZXJpYWwsIE1lc2hMYW1iZXJ0TWF0ZXJpYWwsIE1lc2hEZXB0aE1hdGVyaWFsLCBNZXNoRGlzdGFuY2VNYXRlcmlhbCwgTWVzaEJhc2ljTWF0ZXJpYWwsIE1lc2hNYXRjYXBNYXRlcmlhbCwgTGluZURhc2hlZE1hdGVyaWFsLCBMaW5lQmFzaWNNYXRlcmlhbCwgTWF0ZXJpYWwsIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgSW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSwgVWludDhCdWZmZXJBdHRyaWJ1dGUsIEludDhCdWZmZXJBdHRyaWJ1dGUsIEJ1ZmZlckF0dHJpYnV0ZSwgQXJjQ3VydmUsIENhdG11bGxSb21DdXJ2ZTMsIEN1YmljQmV6aWVyQ3VydmUsIEN1YmljQmV6aWVyQ3VydmUzLCBFbGxpcHNlQ3VydmUsIExpbmVDdXJ2ZSwgTGluZUN1cnZlMywgUXVhZHJhdGljQmV6aWVyQ3VydmUsIFF1YWRyYXRpY0JlemllckN1cnZlMywgU3BsaW5lQ3VydmUsIFJFVklTSU9OLCBNT1VTRSwgQ3VsbEZhY2VOb25lLCBDdWxsRmFjZUJhY2ssIEN1bGxGYWNlRnJvbnQsIEN1bGxGYWNlRnJvbnRCYWNrLCBGcm9udEZhY2VEaXJlY3Rpb25DVywgRnJvbnRGYWNlRGlyZWN0aW9uQ0NXLCBCYXNpY1NoYWRvd01hcCwgUENGU2hhZG93TWFwLCBQQ0ZTb2Z0U2hhZG93TWFwLCBGcm9udFNpZGUsIEJhY2tTaWRlLCBEb3VibGVTaWRlLCBGbGF0U2hhZGluZywgU21vb3RoU2hhZGluZywgTm9Db2xvcnMsIEZhY2VDb2xvcnMsIFZlcnRleENvbG9ycywgTm9CbGVuZGluZywgTm9ybWFsQmxlbmRpbmcsIEFkZGl0aXZlQmxlbmRpbmcsIFN1YnRyYWN0aXZlQmxlbmRpbmcsIE11bHRpcGx5QmxlbmRpbmcsIEN1c3RvbUJsZW5kaW5nLCBBZGRFcXVhdGlvbiwgU3VidHJhY3RFcXVhdGlvbiwgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24sIE1pbkVxdWF0aW9uLCBNYXhFcXVhdGlvbiwgWmVyb0ZhY3RvciwgT25lRmFjdG9yLCBTcmNDb2xvckZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIERzdEFscGhhRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgT25lTWludXNEc3RDb2xvckZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgTmV2ZXJEZXB0aCwgQWx3YXlzRGVwdGgsIExlc3NEZXB0aCwgTGVzc0VxdWFsRGVwdGgsIEVxdWFsRGVwdGgsIEdyZWF0ZXJFcXVhbERlcHRoLCBHcmVhdGVyRGVwdGgsIE5vdEVxdWFsRGVwdGgsIE11bHRpcGx5T3BlcmF0aW9uLCBNaXhPcGVyYXRpb24sIEFkZE9wZXJhdGlvbiwgTm9Ub25lTWFwcGluZywgTGluZWFyVG9uZU1hcHBpbmcsIFJlaW5oYXJkVG9uZU1hcHBpbmcsIFVuY2hhcnRlZDJUb25lTWFwcGluZywgQ2luZW9uVG9uZU1hcHBpbmcsIFVWTWFwcGluZywgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZywgUmVwZWF0V3JhcHBpbmcsIENsYW1wVG9FZGdlV3JhcHBpbmcsIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyLCBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIsIExpbmVhck1pcE1hcExpbmVhckZpbHRlciwgVW5zaWduZWRCeXRlVHlwZSwgQnl0ZVR5cGUsIFNob3J0VHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIEludFR5cGUsIFVuc2lnbmVkSW50VHlwZSwgRmxvYXRUeXBlLCBIYWxmRmxvYXRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydDU2NVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgQWxwaGFGb3JtYXQsIFJHQkZvcm1hdCwgUkdCQUZvcm1hdCwgTHVtaW5hbmNlRm9ybWF0LCBMdW1pbmFuY2VBbHBoYUZvcm1hdCwgUkdCRUZvcm1hdCwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgUmVkRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDFfRm9ybWF0LCBSR0JBX1MzVENfRFhUM19Gb3JtYXQsIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCwgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCX0VUQzFfRm9ybWF0LCBSR0JBX0FTVENfNHg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDVfRm9ybWF0LCBSR0JBX0FTVENfNng1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDVfRm9ybWF0LCBSR0JBX0FTVENfOHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDZfRm9ybWF0LCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQsIExvb3BPbmNlLCBMb29wUmVwZWF0LCBMb29wUGluZ1BvbmcsIEludGVycG9sYXRlRGlzY3JldGUsIEludGVycG9sYXRlTGluZWFyLCBJbnRlcnBvbGF0ZVNtb290aCwgWmVyb0N1cnZhdHVyZUVuZGluZywgWmVyb1Nsb3BlRW5kaW5nLCBXcmFwQXJvdW5kRW5kaW5nLCBUcmlhbmdsZXNEcmF3TW9kZSwgVHJpYW5nbGVTdHJpcERyYXdNb2RlLCBUcmlhbmdsZUZhbkRyYXdNb2RlLCBMaW5lYXJFbmNvZGluZywgc1JHQkVuY29kaW5nLCBHYW1tYUVuY29kaW5nLCBSR0JFRW5jb2RpbmcsIExvZ0x1dkVuY29kaW5nLCBSR0JNN0VuY29kaW5nLCBSR0JNMTZFbmNvZGluZywgUkdCREVuY29kaW5nLCBCYXNpY0RlcHRoUGFja2luZywgUkdCQURlcHRoUGFja2luZywgVGFuZ2VudFNwYWNlTm9ybWFsTWFwLCBPYmplY3RTcGFjZU5vcm1hbE1hcCwgQm94R2VvbWV0cnkgYXMgQ3ViZUdlb21ldHJ5LCBGYWNlNCwgTGluZVN0cmlwLCBMaW5lUGllY2VzLCBNZXNoRmFjZU1hdGVyaWFsLCBNdWx0aU1hdGVyaWFsLCBQb2ludENsb3VkLCBQYXJ0aWNsZSwgUGFydGljbGVTeXN0ZW0sIFBvaW50Q2xvdWRNYXRlcmlhbCwgUGFydGljbGVCYXNpY01hdGVyaWFsLCBQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsLCBWZXJ0ZXgsIER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUsIEludDhBdHRyaWJ1dGUsIFVpbnQ4QXR0cmlidXRlLCBVaW50OENsYW1wZWRBdHRyaWJ1dGUsIEludDE2QXR0cmlidXRlLCBVaW50MTZBdHRyaWJ1dGUsIEludDMyQXR0cmlidXRlLCBVaW50MzJBdHRyaWJ1dGUsIEZsb2F0MzJBdHRyaWJ1dGUsIEZsb2F0NjRBdHRyaWJ1dGUsIENsb3NlZFNwbGluZUN1cnZlMywgU3BsaW5lQ3VydmUzLCBTcGxpbmUsIEF4aXNIZWxwZXIsIEJvdW5kaW5nQm94SGVscGVyLCBFZGdlc0hlbHBlciwgV2lyZWZyYW1lSGVscGVyLCBYSFJMb2FkZXIsIEJpbmFyeVRleHR1cmVMb2FkZXIsIEdlb21ldHJ5VXRpbHMsIFByb2plY3RvciwgQ2FudmFzUmVuZGVyZXIsIFNjZW5lVXRpbHMsIExlbnNGbGFyZSB9O1xuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxud2luZG93LlRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xyXG5yZXF1aXJlKFwidGhyZWUvZXhhbXBsZXMvanMvTWFyY2hpbmdDdWJlcy5qc1wiKTtcclxuXHJcbmNvbnN0IFRXRUVOID0gcmVxdWlyZSgnQHR3ZWVuanMvdHdlZW4uanMnKTtcclxuY29uc3Qgc291bmQgPSByZXF1aXJlKFwiLi9zb3VuZC5qc1wiKTtcclxuY29uc3QgaWNvc2FoZWRyb24gPSByZXF1aXJlKFwiLi9pY29zYWhlZHJvbi5qc1wiKTtcclxuXHJcbmNvbnN0IHZlcnRleFNoYWRlciA9IHJlcXVpcmUoJ3dlYnBhY2stZ2xzbC1sb2FkZXIhLi9nbHNsL3ZlcnRleFNoYWRlci52ZXJ0Jyk7XHJcbmNvbnN0IGZyYWdtZW50U2hhZGVyID0gcmVxdWlyZSgnd2VicGFjay1nbHNsLWxvYWRlciEuL2dsc2wvZnJhZ21lbnRTaGFkZXIuZnJhZycpO1xyXG5jb25zdCBvYmxpcXVlTGluZUZyYWdtZW50U2hhZGVyID0gcmVxdWlyZSgnd2VicGFjay1nbHNsLWxvYWRlciEuL2dsc2wvb2JsaXF1ZUxpbmVGcmFnbWVudFNoYWRlci5mcmFnJyk7XHJcbmNvbnN0IHN1bW1lZFdhdmVGcmFnbWVudFNoYWRlciA9IHJlcXVpcmUoJ3dlYnBhY2stZ2xzbC1sb2FkZXIhLi9nbHNsL3N1bW1lZFdhdmVGcmFnbWVudFNoYWRlci5mcmFnJyk7XHJcblxyXG5jb25zdCBwYXJ0aWNsZVZlcnRleFNoYWRlciA9IHJlcXVpcmUoJ3dlYnBhY2stZ2xzbC1sb2FkZXIhLi9nbHNsL3BhcnRpY2xlVmVydGV4U2hhZGVyLnZlcnQnKTtcclxuY29uc3QgcGFydGljbGVGcmFnbWVudFNoYWRlciA9IHJlcXVpcmUoJ3dlYnBhY2stZ2xzbC1sb2FkZXIhLi9nbHNsL3BhcnRpY2xlRnJhZ21lbnRTaGFkZXIuZnJhZycpO1xyXG5cclxubGV0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbmxldCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG5sZXQgc2NlbmUsIGNhbWVyYSwgY2xvY2ssIG1hcmNoaW5nQ3ViZXMsIHJlbmRlcmVyLCBsaWdodCwgcG9pbnRMaWdodCwgYW1iaWVudExpZ2h0O1xyXG5sZXQgZ3JvdW5kR2VvbWV0cnksIGdyb3VuZE1lc2g7XHJcblxyXG5sZXQgYmxvYnNDb3VudCA9IDMwO1xyXG5sZXQgdXBkYXRpbmdDdWJlU3BlZWRPZmZzZXQgPSAxLjY7XHJcbmxldCBncm91bmRWZXJ0ZXhPZmZzZXQgPSAzO1xyXG5sZXQgc2hvdWxkQ2hhbmdlU2NlbmVUbzIgPSB0cnVlO1xyXG5sZXQgc2hvdWxkQ2hhbmdlU2NlbmVUbzMgPSB0cnVlO1xyXG5sZXQgc2hvdWxkQ2hhbmdlU2NlbmVUbzQgPSB0cnVlO1xyXG5sZXQgc2hvdWxkQ2hhbmdlU2NlbmVUbzUgPSB0cnVlO1xyXG5sZXQgc2hvdWxkQ2hhbmdlU2NlbmVUbzYgPSB0cnVlO1xyXG5cclxubGV0IHBhcnRpY2xlUG9pbnRzO1xyXG5cclxubGV0IGljb3NhaGVkcm9uR3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcclxuXHJcbmNvbnN0IHVuaWZvcm0gPSB7XHJcbiAgICB0aW1lOiB7XHJcbiAgICAgICAgdHlwZTogJ2YnLFxyXG4gICAgICAgIHZhbHVlOiAxLjBcclxuICAgIH0sXHJcbiAgICByZXNvbHV0aW9uOiB7XHJcbiAgICAgICAgdHlwZTogXCJ2MlwiLFxyXG4gICAgICAgIHZhbHVlOiBuZXcgVEhSRUUuVmVjdG9yMigpXHJcbiAgICB9LFxyXG4gICAgZGlyTGlnaHRQb3M6IHtcclxuICAgICAgICB0eXBlOiBcInYzXCIsXHJcbiAgICAgICAgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IzKClcclxuICAgIH0sXHJcbiAgICBkaXJMaWdodENvbG9yOiB7XHJcbiAgICAgICAgdHlwZTogXCJ2M1wiLFxyXG4gICAgICAgIHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoMHhlZWVlZWUpXHJcbiAgICB9LFxyXG4gICAgYW1iaWVudExpZ2h0Q29sb3I6IHtcclxuICAgICAgICB0eXBlOiBcInYzXCIsXHJcbiAgICAgICAgdmFsdWU6IG5ldyBUSFJFRS5Db2xvcigweDA1MDUwNSlcclxuICAgIH0sXHJcbiAgICBzaXplOiB7XHJcbiAgICAgICAgdHlwZTogJ2YnLFxyXG4gICAgICAgIHZhbHVlOiAzMi4wXHJcbiAgICB9LFxyXG59O1xyXG5cclxuY29uc3QgaW5pdCA9ICgpID0+IHtcclxuICAgIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcbiAgICBzY2VuZS5iYWNrZ3JvdW5kID0gbmV3IFRIUkVFLkNvbG9yKDB4ZmYwMDk5KTtcclxuICAgIHNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2dFeHAyKDB4ZmYwMDk5LCAwLjAwMDMpO1xyXG5cclxuICAgIGNsb2NrID0gbmV3IFRIUkVFLkNsb2NrKCk7XHJcblxyXG4gICAgLy8gQ2FtZXJhXHJcbiAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNDUsIHdpbmRvd1dpZHRoIC8gd2luZG93SGVpZ2h0LCAxLCAxMDAwMCk7XHJcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDEwMCwgMzAwKTtcclxuXHJcbiAgICAvLyBMaWdodFxyXG4gICAgbGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZik7XHJcbiAgICBsaWdodC5wb3NpdGlvbi5zZXQoMC4wLCAwLjAsIDAuMCk7XHJcbiAgICBzY2VuZS5hZGQobGlnaHQpO1xyXG5cclxuICAgIHBvaW50TGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweDAwRTRCQiwgMzAsIDE1MCk7XHJcbiAgICBwb2ludExpZ2h0LnBvc2l0aW9uLnNldCgwLCAtMTUwLCAwKTtcclxuICAgIHNjZW5lLmFkZChwb2ludExpZ2h0KTtcclxuXHJcbiAgICBhbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4MDBFNEJCKTtcclxuICAgIGFtYmllbnRMaWdodC5wb3NpdGlvbi5zZXQoMCwgLTEuMCwgMCk7XHJcbiAgICBzY2VuZS5hZGQoYW1iaWVudExpZ2h0KTtcclxuXHJcbiAgICAvLyBHcm91bmRcclxuICAgIGdyb3VuZEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkoMjAwMDAsIDIwMDAwLCAxMjgsIDEyOCk7XHJcbiAgICBncm91bmRHZW9tZXRyeS5yb3RhdGVYKC1NYXRoLlBJIC8gMik7XHJcblxyXG4gICAgY29uc3QgdGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCk7XHJcbiAgICBjb25zdCB0ZXh0dXJlID0gdGV4dHVyZUxvYWRlci5sb2FkKCdodHRwczovL2kuaW1ndXIuY29tL3VYTExIOUcuanBnJyk7ICAvLyBSZWZlciB0byByZW1vdGUgVVJMIHRvIGFjY2VzcyBsb2NhbGx5LlxyXG4gICAgdGV4dHVyZS53cmFwUyA9IHRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcclxuICAgIHRleHR1cmUucmVwZWF0LnNldCg1LCA1KTtcclxuXHJcbiAgICBjb25zdCBncm91bmRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgY29sb3I6IDB4MDBFNEJCLFxyXG4gICAgICAgIG1hcDogdGV4dHVyZSxcclxuICAgIH0pO1xyXG5cclxuICAgIGdyb3VuZE1lc2ggPSBuZXcgVEhSRUUuTWVzaChncm91bmRHZW9tZXRyeSwgZ3JvdW5kTWF0ZXJpYWwpO1xyXG4gICAgZ3JvdW5kTWVzaC5wb3NpdGlvbi5zZXQoMCwgLTMwMDAsIDApO1xyXG4gICAgc2NlbmUuYWRkKGdyb3VuZE1lc2gpO1xyXG5cclxuICAgIC8vIEJsb2JzXHJcbiAgICB1bmlmb3JtLnJlc29sdXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMih3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0KTtcclxuICAgIHVuaWZvcm0uZGlyTGlnaHRQb3MudmFsdWUgPSBsaWdodC5wb3NpdGlvbjtcclxuICAgIHVuaWZvcm0uZGlyTGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0LmNvbG9yO1xyXG4gICAgdW5pZm9ybS5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGFtYmllbnRMaWdodC5jb2xvcjtcclxuXHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XHJcbiAgICAgICAgdW5pZm9ybXM6IHVuaWZvcm0sXHJcbiAgICAgICAgdmVydGV4U2hhZGVyOiB2ZXJ0ZXhTaGFkZXIsXHJcbiAgICAgICAgZnJhZ21lbnRTaGFkZXI6IGZyYWdtZW50U2hhZGVyLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzb2x1dGlvbiA9IDQ4O1xyXG4gICAgbWFyY2hpbmdDdWJlcyA9IG5ldyBUSFJFRS5NYXJjaGluZ0N1YmVzKHJlc29sdXRpb24sIG1hdGVyaWFsLCB0cnVlLCB0cnVlKTtcclxuICAgIG1hcmNoaW5nQ3ViZXMucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgbWFyY2hpbmdDdWJlcy5zY2FsZS5zZXQoMTAwLCAxMDAsIDEwMCk7XHJcblxyXG4gICAgc2NlbmUuYWRkKG1hcmNoaW5nQ3ViZXMpO1xyXG5cclxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0KTtcclxuXHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIHJlbmRlcmVyLmdhbW1hSW5wdXQgPSB0cnVlO1xyXG4gICAgcmVuZGVyZXIuZ2FtbWFPdXRwdXQgPSB0cnVlO1xyXG4gICAgcmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XHJcblxyXG4gICAgc291bmQuaW5pdCgpO1xyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlQ3ViZXMgPSAob2JqZWN0LCB0aW1lKSA9PiB7XHJcbiAgICBvYmplY3QucmVzZXQoKTtcclxuXHJcbiAgICBsZXQgaSwgYmFsbHgsIGJhbGx5LCBiYWxseiwgc3VidHJhY3QsIHN0cmVuZ3RoO1xyXG4gICAgc3VidHJhY3QgPSAxODtcclxuICAgIHN0cmVuZ3RoID0gMS4yIC8gKChNYXRoLnNxcnQoYmxvYnNDb3VudCkgLSAxKSAvIDQgKyAxKTtcclxuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgYmxvYnNDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgYmFsbHggPSBNYXRoLnNpbihpICsgMS4yNiAqIHRpbWUgKiAoMS4wMyArIDAuNSAqIE1hdGguY29zKDAuMjEgKiBpKSkpICogMC4yNyArIDAuNTtcclxuICAgICAgICBiYWxseSA9IE1hdGguY29zKGkgKyAxLjEyICogdGltZSAqIE1hdGguY29zKDEuMjIgKyAwLjE0MjQgKiBpKSkgKiAwLjI3ICsgMC41O1xyXG4gICAgICAgIGJhbGx6ID0gTWF0aC5jb3MoaSArIDEuMzIgKiB0aW1lICogMC4xICogTWF0aC5zaW4oKDAuOTIgKyAwLjUzICogaSkpKSAqIDAuMjcgKyAwLjU7XHJcbiAgICAgICAgb2JqZWN0LmFkZEJhbGwoYmFsbHgsIGJhbGx5LCBiYWxseiwgc3RyZW5ndGgsIHN1YnRyYWN0KTtcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IHVwZGF0ZUdyb3VuZCA9ICh0aW1lKSA9PiB7XHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGdyb3VuZEdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvc2l0aW9uLmNvdW50OyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBsZXQgeSA9IDMwICogTWF0aC5zaW4oaSAvIDIgKyAodGltZSAqIDUgKyBpKSk7XHJcblxyXG4gICAgICAgIGlmIChpICUgMTQgPT09IDApIHtcclxuICAgICAgICAgICAgeSAqPSBncm91bmRWZXJ0ZXhPZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBvc2l0aW9uLnNldFkoaSwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG59O1xyXG5cclxuY29uc3QgcmVuZGVyID0gKHQpID0+IHtcclxuICAgIFRXRUVOLnVwZGF0ZSh0KTtcclxuXHJcbiAgICBjbG9jay5nZXREZWx0YSgpO1xyXG4gICAgY29uc3QgdGltZSA9IGNsb2NrLmVsYXBzZWRUaW1lO1xyXG5cclxuICAgIHVwZGF0ZUdyb3VuZCh0aW1lKTtcclxuXHJcbiAgICB1cGRhdGVDdWJlcyhtYXJjaGluZ0N1YmVzLCB0aW1lICogdXBkYXRpbmdDdWJlU3BlZWRPZmZzZXQpO1xyXG5cclxuICAgIGlmICghc2hvdWxkQ2hhbmdlU2NlbmVUbzMpIHtcclxuICAgICAgICBtYXJjaGluZ0N1YmVzLnJvdGF0aW9uLnggPSB0aW1lO1xyXG4gICAgICAgIG1hcmNoaW5nQ3ViZXMucm90YXRpb24ueSA9IHRpbWU7XHJcbiAgICAgICAgbWFyY2hpbmdDdWJlcy5yb3RhdGlvbi56ID0gdGltZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzcGVlZCA9IHRpbWUgKiAzMCAqIChNYXRoLlBJIC8gMTgwKTtcclxuICAgIGNvbnN0IGNhbWVyYVggPSAzMDAgKiBNYXRoLnNpbihzcGVlZCk7XHJcbiAgICBjb25zdCBjYW1lcmFaID0gMzAwICogTWF0aC5jb3Moc3BlZWQpO1xyXG5cclxuICAgIGNhbWVyYS5wb3NpdGlvbi54ID0gY2FtZXJhWDtcclxuICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gY2FtZXJhWjtcclxuXHJcbiAgICBpZiAoc2hvdWxkQ2hhbmdlU2NlbmVUbzYpIHtcclxuICAgICAgICBjYW1lcmEucG9zaXRpb24ueSA9IGNhbWVyYVggKiAwLjM7XHJcbiAgICAgICAgY2FtZXJhLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5pZm9ybS50aW1lLnZhbHVlID0gdGltZTtcclxuXHJcbiAgICBsZXQgbGVuID0gaWNvc2FoZWRyb25Hcm91cC5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICBpZiAobGVuID4gMCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG9iamVjdCA9IGljb3NhaGVkcm9uR3JvdXAuY2hpbGRyZW5baV07XHJcblxyXG4gICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcbiAgICAgICAgICAgIGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxWZXJ0aWNlcyA9IGljb3NhaGVkcm9uLm9yaWdpbmFsVmVydGljZXNBcnJheVtpXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0aW1lICogOCArIGkgKiAzMDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gNTtcclxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnZlcnRpY2VzW2ldLnggPSBvcmlnaW5hbFZlcnRpY2VzW2ldLnggKyBNYXRoLnNpbih0KSAqIG9mZnNldDtcclxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnZlcnRpY2VzW2ldLnkgPSBvcmlnaW5hbFZlcnRpY2VzW2ldLnkgKyBNYXRoLnNpbih0ICogMC44KSAqIG9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0ID0gdGltZSAqIDUgKyAoaSAlIDQpICogODA7XHJcbiAgICAgICAgICAgIG9iamVjdC5zY2FsZS54ID0gMS4wICsgTWF0aC5hYnMoTWF0aC5zaW4odCkpO1xyXG4gICAgICAgICAgICBvYmplY3Quc2NhbGUueSA9IDEuMCArIE1hdGguYWJzKE1hdGguc2luKHQpKTtcclxuICAgICAgICAgICAgb2JqZWN0LnNjYWxlLnogPSAxLjAgKyBNYXRoLmFicyhNYXRoLnNpbih0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aW1lID4gNSAmJiBzaG91bGRDaGFuZ2VTY2VuZVRvMikge1xyXG4gICAgICAgIHRvU2NlbmUyKCk7XHJcbiAgICB9IGVsc2UgaWYgKHRpbWUgPiAxNSAmJiBzaG91bGRDaGFuZ2VTY2VuZVRvMykge1xyXG4gICAgICAgIHRvU2NlbmUzKCk7XHJcbiAgICB9IGVsc2UgaWYgKHRpbWUgPiAyNSAmJiBzaG91bGRDaGFuZ2VTY2VuZVRvNCkge1xyXG4gICAgICAgIHRvU2NlbmU0KCk7XHJcbiAgICB9IGVsc2UgaWYgKHRpbWUgPiAzMCAmJiBzaG91bGRDaGFuZ2VTY2VuZVRvNSkge1xyXG4gICAgICAgIHRvU2NlbmU1KCk7XHJcbiAgICB9IGVsc2UgaWYgKHRpbWUgPiA0MCAmJiBzaG91bGRDaGFuZ2VTY2VuZVRvNikge1xyXG4gICAgICAgIHRvU2NlbmU2KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xyXG5cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNob3cgZ3JvdW5kLlxyXG4gKi9cclxuY29uc3QgdG9TY2VuZTIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpbml0aWFsWSA9IGdyb3VuZE1lc2gucG9zaXRpb24ueTtcclxuICAgIGNvbnN0IHRhcmdldFkgPSAtNTAwO1xyXG4gICAgY29uc3QgY29vcmRzID0ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogaW5pdGlhbFksXHJcbiAgICAgICAgejogMFxyXG4gICAgfTtcclxuICAgIG5ldyBUV0VFTi5Ud2Vlbihjb29yZHMpXHJcbiAgICAgICAgLnRvKHt4OiAwLCB5OiB0YXJnZXRZLCB6OiAwfSwgMzAwMClcclxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5FeHBvbmVudGlhbC5PdXQpXHJcbiAgICAgICAgLm9uVXBkYXRlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ3JvdW5kTWVzaC5wb3NpdGlvbi55ID0gY29vcmRzLnk7XHJcbiAgICAgICAgICAgIGxpZ2h0LnBvc2l0aW9uLnkgPSAoaW5pdGlhbFkgLSBjb29yZHMueSkgLyAodGFyZ2V0WSAtIGluaXRpYWxZKTsgIC8vIEZpbmFsbHkgeSBiZWNvbWUgLTEuMC5cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG5cclxuICAgIHNob3VsZENoYW5nZVNjZW5lVG8yID0gZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hhbmdlIHNoYWRlci5cclxuICovXHJcbmNvbnN0IHRvU2NlbmUzID0gKCkgPT4ge1xyXG4gICAgc2NlbmUucmVtb3ZlKG1hcmNoaW5nQ3ViZXMpO1xyXG5cclxuICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcclxuICAgICAgICB1bmlmb3JtczogdW5pZm9ybSxcclxuICAgICAgICB2ZXJ0ZXhTaGFkZXI6IHZlcnRleFNoYWRlcixcclxuICAgICAgICBmcmFnbWVudFNoYWRlcjogc3VtbWVkV2F2ZUZyYWdtZW50U2hhZGVyLFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzb2x1dGlvbiA9IDQ4O1xyXG4gICAgbWFyY2hpbmdDdWJlcyA9IG5ldyBUSFJFRS5NYXJjaGluZ0N1YmVzKHJlc29sdXRpb24sIG1hdGVyaWFsLCB0cnVlLCB0cnVlKTtcclxuICAgIG1hcmNoaW5nQ3ViZXMucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG4gICAgbWFyY2hpbmdDdWJlcy5zY2FsZS5zZXQoMTAwLCAxMDAsIDEwMCk7XHJcblxyXG4gICAgc2NlbmUuYWRkKG1hcmNoaW5nQ3ViZXMpO1xyXG5cclxuICAgIHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoMHgyMzFCOTUpO1xyXG4gICAgc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZ0V4cDIoMHgyMzFCOTUsIDAuMDAwMyk7XHJcblxyXG4gICAgZ3JvdW5kVmVydGV4T2Zmc2V0ID0gMTI7XHJcbiAgICBzaG91bGRDaGFuZ2VTY2VuZVRvMyA9IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNob3cgcGFydGljbGVzIGFuZCBjaGFuZ2Ugc2hhZGVyLlxyXG4gKi9cclxuY29uc3QgdG9TY2VuZTQgPSAoKSA9PiB7XHJcbiAgICBzY2VuZS5yZW1vdmUobWFyY2hpbmdDdWJlcyk7XHJcblxyXG4gICAgY29uc3QgbWF0ZXJpYWwxID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcclxuICAgICAgICB1bmlmb3JtczogdW5pZm9ybSxcclxuICAgICAgICB2ZXJ0ZXhTaGFkZXI6IHZlcnRleFNoYWRlcixcclxuICAgICAgICBmcmFnbWVudFNoYWRlcjogb2JsaXF1ZUxpbmVGcmFnbWVudFNoYWRlcixcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc29sdXRpb24gPSA0ODtcclxuICAgIG1hcmNoaW5nQ3ViZXMgPSBuZXcgVEhSRUUuTWFyY2hpbmdDdWJlcyhyZXNvbHV0aW9uLCBtYXRlcmlhbDEsIHRydWUsIHRydWUpO1xyXG4gICAgbWFyY2hpbmdDdWJlcy5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XHJcbiAgICBtYXJjaGluZ0N1YmVzLnNjYWxlLnNldCgxMDAsIDEwMCwgMTAwKTtcclxuXHJcbiAgICBzY2VuZS5hZGQobWFyY2hpbmdDdWJlcyk7XHJcblxyXG4gICAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweDQ2MjNERSk7XHJcbiAgICBzY2VuZS5mb2cgPSBuZXcgVEhSRUUuRm9nRXhwMigweDQ2MjNERSwgMC4wMDAzKTtcclxuXHJcbiAgICBsZXQgY29sb3JzUGVyRmFjZSA9IFtcclxuICAgICAgICBcIiM3QkZGRUZcIiwgXCIjNkZFOEI4XCIsIFwiIzdGRkZBQ1wiLCBcIiM2RkU4NzNcIiwgXCIjRkZERUFBXCJcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgaGV4VG9SZ2IgPSAoaGV4KSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHI6IHBhcnNlSW50KHJlc3VsdFsxXSwgMTYpIC8gMjU1LFxyXG4gICAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSAvIDI1NSxcclxuICAgICAgICAgICAgYjogcGFyc2VJbnQocmVzdWx0WzNdLCAxNikgLyAyNTVcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdO1xyXG4gICAgY29uc3QgY29sb3JzID0gW107XHJcbiAgICBjb25zdCBwYXJ0aWNsZUNvdW50ID0gMjAwMDA7XHJcblxyXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcclxuICAgIGNvbnN0IGRpc3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAqIDAuODtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRpY2xlQ291bnQ7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkaXN0IC0gZGlzdCAvIDIpO1xyXG4gICAgICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkaXN0IC0gZGlzdCAvIDIpO1xyXG4gICAgICAgIGNvbnN0IHogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBkaXN0IC0gZGlzdCAvIDIpO1xyXG4gICAgICAgIHZlcnRpY2VzLnB1c2goeCwgeSwgeik7XHJcblxyXG4gICAgICAgIGNvbnN0IHJnYkNvbG9yID0gaGV4VG9SZ2IoY29sb3JzUGVyRmFjZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xvcnNQZXJGYWNlLmxlbmd0aCldKTtcclxuICAgICAgICBjb2xvcnMucHVzaChyZ2JDb2xvci5yLCByZ2JDb2xvci5nLCByZ2JDb2xvci5iKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2ZXJ0aWNlc0FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyk7XHJcbiAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlc0FycmF5LCAzKSk7XHJcblxyXG4gICAgY29uc3QgY29sb3JzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KGNvbG9ycyk7XHJcbiAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnNBcnJheSwgMykpO1xyXG5cclxuICAgIGNvbnN0IG1hdGVyaWFsMiA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XHJcbiAgICAgICAgdW5pZm9ybXM6IHVuaWZvcm0sXHJcbiAgICAgICAgdmVydGV4U2hhZGVyOiBwYXJ0aWNsZVZlcnRleFNoYWRlcixcclxuICAgICAgICBmcmFnbWVudFNoYWRlcjogcGFydGljbGVGcmFnbWVudFNoYWRlcixcclxuICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcclxuICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcclxuICAgICAgICBibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZ1xyXG4gICAgfSk7XHJcblxyXG4gICAgcGFydGljbGVQb2ludHMgPSBuZXcgVEhSRUUuUG9pbnRzKGdlb21ldHJ5LCBtYXRlcmlhbDIpO1xyXG4gICAgc2NlbmUuYWRkKHBhcnRpY2xlUG9pbnRzKTtcclxuXHJcbiAgICB1cGRhdGVCbG9ic0NvdW50KDUwLCA1MDAwKTtcclxuXHJcbiAgICBzaG91bGRDaGFuZ2VTY2VuZVRvNCA9IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNob3cgaWNvc2FoZWRyb24uXHJcbiAqL1xyXG5jb25zdCB0b1NjZW5lNSA9ICgpID0+IHtcclxuICAgIGNvbnN0IG9iamVjdFJhZGl1cyA9IDMwO1xyXG4gICAgY29uc3QgY291bnQgPSAxODtcclxuICAgIGNvbnN0IGRpc3QgPSA2MDA7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYW5nbGUgPSAzNjAgLyBjb3VudCAqIE1hdGguUEkgLyAxODAgKiBpO1xyXG5cclxuICAgICAgICBpY29zYWhlZHJvbkdyb3VwLmFkZChpY29zYWhlZHJvbi5jcmVhdGVPYmplY3Qob2JqZWN0UmFkaXVzLCB7XHJcbiAgICAgICAgICAgIHg6IE1hdGguY29zKGFuZ2xlKSAqIGRpc3QsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgIHo6IE1hdGguc2luKGFuZ2xlKSAqIGRpc3RcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICBzY2VuZS5hZGQoaWNvc2FoZWRyb25Hcm91cCk7XHJcblxyXG4gICAgc2hvdWxkQ2hhbmdlU2NlbmVUbzUgPSBmYWxzZTtcclxufTtcclxuXHJcbmNvbnN0IHRvU2NlbmU2ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY29vcmRzID0ge1xyXG4gICAgICAgIHk6IG1hcmNoaW5nQ3ViZXMucG9zaXRpb24ueVxyXG4gICAgfTtcclxuICAgIG5ldyBUV0VFTi5Ud2Vlbihjb29yZHMpXHJcbiAgICAgICAgLnRvKHt5OiAyMDAwfSwgODAwMClcclxuICAgICAgICAuZWFzaW5nKFRXRUVOLkVhc2luZy5MaW5lYXIuTm9uZSlcclxuICAgICAgICAub25VcGRhdGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXJjaGluZ0N1YmVzLnBvc2l0aW9uLnkgPSBjb29yZHMueTtcclxuICAgICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnkgPSBjb29yZHMueTtcclxuICAgICAgICAgICAgcGFydGljbGVQb2ludHMucG9zaXRpb24ueSA9IGNvb3Jkcy55O1xyXG4gICAgICAgICAgICBjYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIGNvb3Jkcy55LCAwKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub25Db21wbGV0ZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNjZW5lLnJlbW92ZShwYXJ0aWNsZVBvaW50cyk7XHJcbiAgICAgICAgICAgIHNvdW5kLnN0b3AoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGFydCgpO1xyXG5cclxuICAgIHVwZGF0ZUJsb2JzQ291bnQoMCwgOTAwMCk7XHJcblxyXG4gICAgc2hvdWxkQ2hhbmdlU2NlbmVUbzYgPSBmYWxzZTtcclxufTtcclxuXHJcbmNvbnN0IHVwZGF0ZUJsb2JzQ291bnQgPSAoY291bnQsIHRpbWUpID0+IHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgICBjb3VudDogYmxvYnNDb3VudFxyXG4gICAgfTtcclxuICAgIG5ldyBUV0VFTi5Ud2VlbihwYXJhbXMpXHJcbiAgICAgICAgLnRvKHtjb3VudDogY291bnR9LCB0aW1lKVxyXG4gICAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLkV4cG9uZW50aWFsLk91dClcclxuICAgICAgICAub25VcGRhdGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBibG9ic0NvdW50ID0gTWF0aC5mbG9vcihwYXJhbXMuY291bnQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXJ0KCk7XHJcbn07XHJcblxyXG5jb25zdCBvblJlc2l6ZSA9ICgpID0+IHtcclxuICAgIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG4gICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvd1dpZHRoIC8gd2luZG93SGVpZ2h0O1xyXG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93V2lkdGgsIHdpbmRvd0hlaWdodCk7XHJcbn07XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XHJcblxyXG5pbml0KCk7XHJcbm9uUmVzaXplKCk7XHJcbnJlbmRlcigpOyIsIi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cbiAqIFBvcnQgb2YgaHR0cDovL3dlYmdsc2FtcGxlcy5vcmcvYmxvYi9ibG9iLmh0bWxcbiAqL1xuXG5USFJFRS5NYXJjaGluZ0N1YmVzID0gZnVuY3Rpb24gKCByZXNvbHV0aW9uLCBtYXRlcmlhbCwgZW5hYmxlVXZzLCBlbmFibGVDb2xvcnMgKSB7XG5cblx0VEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0LmNhbGwoIHRoaXMsIG1hdGVyaWFsICk7XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHQvLyB0ZW1wIGJ1ZmZlcnMgdXNlZCBpbiBwb2x5Z29uaXplXG5cblx0dmFyIHZsaXN0ID0gbmV3IEZsb2F0MzJBcnJheSggMTIgKiAzICk7XG5cdHZhciBubGlzdCA9IG5ldyBGbG9hdDMyQXJyYXkoIDEyICogMyApO1xuXG5cdHRoaXMuZW5hYmxlVXZzID0gZW5hYmxlVXZzICE9PSB1bmRlZmluZWQgPyBlbmFibGVVdnMgOiBmYWxzZTtcblx0dGhpcy5lbmFibGVDb2xvcnMgPSBlbmFibGVDb2xvcnMgIT09IHVuZGVmaW5lZCA/IGVuYWJsZUNvbG9ycyA6IGZhbHNlO1xuXG5cdC8vIGZ1bmN0aW9ucyBoYXZlIHRvIGJlIG9iamVjdCBwcm9wZXJ0aWVzXG5cdC8vIHByb3RvdHlwZSBmdW5jdGlvbnMga2lsbCBwZXJmb3JtYW5jZVxuXHQvLyAodGVzdGVkIGFuZCBpdCB3YXMgNHggc2xvd2VyICEhISlcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoIHJlc29sdXRpb24gKSB7XG5cblx0XHR0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuXG5cdFx0Ly8gcGFyYW1ldGVyc1xuXG5cdFx0dGhpcy5pc29sYXRpb24gPSA4MC4wO1xuXG5cdFx0Ly8gc2l6ZSBvZiBmaWVsZCwgMzIgaXMgcHVzaGluZyBpdCBpbiBKYXZhc2NyaXB0IDopXG5cblx0XHR0aGlzLnNpemUgPSByZXNvbHV0aW9uO1xuXHRcdHRoaXMuc2l6ZTIgPSB0aGlzLnNpemUgKiB0aGlzLnNpemU7XG5cdFx0dGhpcy5zaXplMyA9IHRoaXMuc2l6ZTIgKiB0aGlzLnNpemU7XG5cdFx0dGhpcy5oYWxmc2l6ZSA9IHRoaXMuc2l6ZSAvIDIuMDtcblxuXHRcdC8vIGRlbHRhc1xuXG5cdFx0dGhpcy5kZWx0YSA9IDIuMCAvIHRoaXMuc2l6ZTtcblx0XHR0aGlzLnlkID0gdGhpcy5zaXplO1xuXHRcdHRoaXMuemQgPSB0aGlzLnNpemUyO1xuXG5cdFx0dGhpcy5maWVsZCA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuc2l6ZTMgKTtcblx0XHR0aGlzLm5vcm1hbF9jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuc2l6ZTMgKiAzICk7XG5cblx0XHQvLyBpbW1lZGlhdGUgcmVuZGVyIG1vZGUgc2ltdWxhdG9yXG5cblx0XHR0aGlzLm1heENvdW50ID0gNDA5NjsgLy8gVE9ETzogZmluZCB0aGUgZmFzdGVzdCBzaXplIGZvciB0aGlzIGJ1ZmZlclxuXHRcdHRoaXMuY291bnQgPSAwO1xuXG5cdFx0dGhpcy5oYXNQb3NpdGlvbnMgPSBmYWxzZTtcblx0XHR0aGlzLmhhc05vcm1hbHMgPSBmYWxzZTtcblx0XHR0aGlzLmhhc0NvbG9ycyA9IGZhbHNlO1xuXHRcdHRoaXMuaGFzVXZzID0gZmFsc2U7XG5cblx0XHR0aGlzLnBvc2l0aW9uQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLm1heENvdW50ICogMyApO1xuXHRcdHRoaXMubm9ybWFsQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLm1heENvdW50ICogMyApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVV2cyApIHtcblxuXHRcdFx0dGhpcy51dkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggdGhpcy5tYXhDb3VudCAqIDIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5lbmFibGVDb2xvcnMgKSB7XG5cblx0XHRcdHRoaXMuY29sb3JBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMubWF4Q291bnQgKiAzICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBQb2x5Z29uaXphdGlvblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGZ1bmN0aW9uIGxlcnAoIGEsIGIsIHQgKSB7XG5cblx0XHRyZXR1cm4gYSArICggYiAtIGEgKSAqIHQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIFZJbnRYKCBxLCBvZmZzZXQsIGlzb2wsIHgsIHksIHosIHZhbHAxLCB2YWxwMiApIHtcblxuXHRcdHZhciBtdSA9ICggaXNvbCAtIHZhbHAxICkgLyAoIHZhbHAyIC0gdmFscDEgKSxcblx0XHRcdG5jID0gc2NvcGUubm9ybWFsX2NhY2hlO1xuXG5cdFx0dmxpc3RbIG9mZnNldCArIDAgXSA9IHggKyBtdSAqIHNjb3BlLmRlbHRhO1xuXHRcdHZsaXN0WyBvZmZzZXQgKyAxIF0gPSB5O1xuXHRcdHZsaXN0WyBvZmZzZXQgKyAyIF0gPSB6O1xuXG5cdFx0bmxpc3RbIG9mZnNldCArIDAgXSA9IGxlcnAoIG5jWyBxICsgMCBdLCBuY1sgcSArIDMgXSwgbXUgKTtcblx0XHRubGlzdFsgb2Zmc2V0ICsgMSBdID0gbGVycCggbmNbIHEgKyAxIF0sIG5jWyBxICsgNCBdLCBtdSApO1xuXHRcdG5saXN0WyBvZmZzZXQgKyAyIF0gPSBsZXJwKCBuY1sgcSArIDIgXSwgbmNbIHEgKyA1IF0sIG11ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIFZJbnRZKCBxLCBvZmZzZXQsIGlzb2wsIHgsIHksIHosIHZhbHAxLCB2YWxwMiApIHtcblxuXHRcdHZhciBtdSA9ICggaXNvbCAtIHZhbHAxICkgLyAoIHZhbHAyIC0gdmFscDEgKSxcblx0XHRcdG5jID0gc2NvcGUubm9ybWFsX2NhY2hlO1xuXG5cdFx0dmxpc3RbIG9mZnNldCArIDAgXSA9IHg7XG5cdFx0dmxpc3RbIG9mZnNldCArIDEgXSA9IHkgKyBtdSAqIHNjb3BlLmRlbHRhO1xuXHRcdHZsaXN0WyBvZmZzZXQgKyAyIF0gPSB6O1xuXG5cdFx0dmFyIHEyID0gcSArIHNjb3BlLnlkICogMztcblxuXHRcdG5saXN0WyBvZmZzZXQgKyAwIF0gPSBsZXJwKCBuY1sgcSArIDAgXSwgbmNbIHEyICsgMCBdLCBtdSApO1xuXHRcdG5saXN0WyBvZmZzZXQgKyAxIF0gPSBsZXJwKCBuY1sgcSArIDEgXSwgbmNbIHEyICsgMSBdLCBtdSApO1xuXHRcdG5saXN0WyBvZmZzZXQgKyAyIF0gPSBsZXJwKCBuY1sgcSArIDIgXSwgbmNbIHEyICsgMiBdLCBtdSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBWSW50WiggcSwgb2Zmc2V0LCBpc29sLCB4LCB5LCB6LCB2YWxwMSwgdmFscDIgKSB7XG5cblx0XHR2YXIgbXUgPSAoIGlzb2wgLSB2YWxwMSApIC8gKCB2YWxwMiAtIHZhbHAxICksXG5cdFx0XHRuYyA9IHNjb3BlLm5vcm1hbF9jYWNoZTtcblxuXHRcdHZsaXN0WyBvZmZzZXQgKyAwIF0gPSB4O1xuXHRcdHZsaXN0WyBvZmZzZXQgKyAxIF0gPSB5O1xuXHRcdHZsaXN0WyBvZmZzZXQgKyAyIF0gPSB6ICsgbXUgKiBzY29wZS5kZWx0YTtcblxuXHRcdHZhciBxMiA9IHEgKyBzY29wZS56ZCAqIDM7XG5cblx0XHRubGlzdFsgb2Zmc2V0ICsgMCBdID0gbGVycCggbmNbIHEgKyAwIF0sIG5jWyBxMiArIDAgXSwgbXUgKTtcblx0XHRubGlzdFsgb2Zmc2V0ICsgMSBdID0gbGVycCggbmNbIHEgKyAxIF0sIG5jWyBxMiArIDEgXSwgbXUgKTtcblx0XHRubGlzdFsgb2Zmc2V0ICsgMiBdID0gbGVycCggbmNbIHEgKyAyIF0sIG5jWyBxMiArIDIgXSwgbXUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcE5vcm0oIHEgKSB7XG5cblx0XHR2YXIgcTMgPSBxICogMztcblxuXHRcdGlmICggc2NvcGUubm9ybWFsX2NhY2hlWyBxMyBdID09PSAwLjAgKSB7XG5cblx0XHRcdHNjb3BlLm5vcm1hbF9jYWNoZVsgcTMgKyAwIF0gPSBzY29wZS5maWVsZFsgcSAtIDEgXSAtIHNjb3BlLmZpZWxkWyBxICsgMSBdO1xuXHRcdFx0c2NvcGUubm9ybWFsX2NhY2hlWyBxMyArIDEgXSA9IHNjb3BlLmZpZWxkWyBxIC0gc2NvcGUueWQgXSAtIHNjb3BlLmZpZWxkWyBxICsgc2NvcGUueWQgXTtcblx0XHRcdHNjb3BlLm5vcm1hbF9jYWNoZVsgcTMgKyAyIF0gPSBzY29wZS5maWVsZFsgcSAtIHNjb3BlLnpkIF0gLSBzY29wZS5maWVsZFsgcSArIHNjb3BlLnpkIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIHRyaWFuZ2xlcy4gRmlsbHMgdHJpYW5nbGVzLlxuXHQvLyAodGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRpbWUgaXMgc3BlbnQgLSBpdCdzIGlubmVyIHdvcmsgb2YgTyhuMykgbG9vcCApXG5cblx0ZnVuY3Rpb24gcG9seWdvbml6ZSggZngsIGZ5LCBmeiwgcSwgaXNvbCwgcmVuZGVyQ2FsbGJhY2sgKSB7XG5cblx0XHQvLyBjYWNoZSBpbmRpY2VzXG5cdFx0dmFyIHExID0gcSArIDEsXG5cdFx0XHRxeSA9IHEgKyBzY29wZS55ZCxcblx0XHRcdHF6ID0gcSArIHNjb3BlLnpkLFxuXHRcdFx0cTF5ID0gcTEgKyBzY29wZS55ZCxcblx0XHRcdHExeiA9IHExICsgc2NvcGUuemQsXG5cdFx0XHRxeXogPSBxICsgc2NvcGUueWQgKyBzY29wZS56ZCxcblx0XHRcdHExeXogPSBxMSArIHNjb3BlLnlkICsgc2NvcGUuemQ7XG5cblx0XHR2YXIgY3ViZWluZGV4ID0gMCxcblx0XHRcdGZpZWxkMCA9IHNjb3BlLmZpZWxkWyBxIF0sXG5cdFx0XHRmaWVsZDEgPSBzY29wZS5maWVsZFsgcTEgXSxcblx0XHRcdGZpZWxkMiA9IHNjb3BlLmZpZWxkWyBxeSBdLFxuXHRcdFx0ZmllbGQzID0gc2NvcGUuZmllbGRbIHExeSBdLFxuXHRcdFx0ZmllbGQ0ID0gc2NvcGUuZmllbGRbIHF6IF0sXG5cdFx0XHRmaWVsZDUgPSBzY29wZS5maWVsZFsgcTF6IF0sXG5cdFx0XHRmaWVsZDYgPSBzY29wZS5maWVsZFsgcXl6IF0sXG5cdFx0XHRmaWVsZDcgPSBzY29wZS5maWVsZFsgcTF5eiBdO1xuXG5cdFx0aWYgKCBmaWVsZDAgPCBpc29sICkgY3ViZWluZGV4IHw9IDE7XG5cdFx0aWYgKCBmaWVsZDEgPCBpc29sICkgY3ViZWluZGV4IHw9IDI7XG5cdFx0aWYgKCBmaWVsZDIgPCBpc29sICkgY3ViZWluZGV4IHw9IDg7XG5cdFx0aWYgKCBmaWVsZDMgPCBpc29sICkgY3ViZWluZGV4IHw9IDQ7XG5cdFx0aWYgKCBmaWVsZDQgPCBpc29sICkgY3ViZWluZGV4IHw9IDE2O1xuXHRcdGlmICggZmllbGQ1IDwgaXNvbCApIGN1YmVpbmRleCB8PSAzMjtcblx0XHRpZiAoIGZpZWxkNiA8IGlzb2wgKSBjdWJlaW5kZXggfD0gMTI4O1xuXHRcdGlmICggZmllbGQ3IDwgaXNvbCApIGN1YmVpbmRleCB8PSA2NDtcblxuXHRcdC8vIGlmIGN1YmUgaXMgZW50aXJlbHkgaW4vb3V0IG9mIHRoZSBzdXJmYWNlIC0gYmFpbCwgbm90aGluZyB0byBkcmF3XG5cblx0XHR2YXIgYml0cyA9IFRIUkVFLmVkZ2VUYWJsZVsgY3ViZWluZGV4IF07XG5cdFx0aWYgKCBiaXRzID09PSAwICkgcmV0dXJuIDA7XG5cblx0XHR2YXIgZCA9IHNjb3BlLmRlbHRhLFxuXHRcdFx0ZngyID0gZnggKyBkLFxuXHRcdFx0ZnkyID0gZnkgKyBkLFxuXHRcdFx0ZnoyID0gZnogKyBkO1xuXG5cdFx0Ly8gdG9wIG9mIHRoZSBjdWJlXG5cblx0XHRpZiAoIGJpdHMgJiAxICkge1xuXG5cdFx0XHRjb21wTm9ybSggcSApO1xuXHRcdFx0Y29tcE5vcm0oIHExICk7XG5cdFx0XHRWSW50WCggcSAqIDMsIDAsIGlzb2wsIGZ4LCBmeSwgZnosIGZpZWxkMCwgZmllbGQxICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJpdHMgJiAyICkge1xuXG5cdFx0XHRjb21wTm9ybSggcTEgKTtcblx0XHRcdGNvbXBOb3JtKCBxMXkgKTtcblx0XHRcdFZJbnRZKCBxMSAqIDMsIDMsIGlzb2wsIGZ4MiwgZnksIGZ6LCBmaWVsZDEsIGZpZWxkMyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBiaXRzICYgNCApIHtcblxuXHRcdFx0Y29tcE5vcm0oIHF5ICk7XG5cdFx0XHRjb21wTm9ybSggcTF5ICk7XG5cdFx0XHRWSW50WCggcXkgKiAzLCA2LCBpc29sLCBmeCwgZnkyLCBmeiwgZmllbGQyLCBmaWVsZDMgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYml0cyAmIDggKSB7XG5cblx0XHRcdGNvbXBOb3JtKCBxICk7XG5cdFx0XHRjb21wTm9ybSggcXkgKTtcblx0XHRcdFZJbnRZKCBxICogMywgOSwgaXNvbCwgZngsIGZ5LCBmeiwgZmllbGQwLCBmaWVsZDIgKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdHRvbSBvZiB0aGUgY3ViZVxuXG5cdFx0aWYgKCBiaXRzICYgMTYgKSB7XG5cblx0XHRcdGNvbXBOb3JtKCBxeiApO1xuXHRcdFx0Y29tcE5vcm0oIHExeiApO1xuXHRcdFx0VkludFgoIHF6ICogMywgMTIsIGlzb2wsIGZ4LCBmeSwgZnoyLCBmaWVsZDQsIGZpZWxkNSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBiaXRzICYgMzIgKSB7XG5cblx0XHRcdGNvbXBOb3JtKCBxMXogKTtcblx0XHRcdGNvbXBOb3JtKCBxMXl6ICk7XG5cdFx0XHRWSW50WSggcTF6ICogMywgMTUsIGlzb2wsIGZ4MiwgZnksIGZ6MiwgZmllbGQ1LCBmaWVsZDcgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYml0cyAmIDY0ICkge1xuXG5cdFx0XHRjb21wTm9ybSggcXl6ICk7XG5cdFx0XHRjb21wTm9ybSggcTF5eiApO1xuXHRcdFx0VkludFgoIHF5eiAqIDMsIDE4LCBpc29sLCBmeCwgZnkyLCBmejIsIGZpZWxkNiwgZmllbGQ3ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJpdHMgJiAxMjggKSB7XG5cblx0XHRcdGNvbXBOb3JtKCBxeiApO1xuXHRcdFx0Y29tcE5vcm0oIHF5eiApO1xuXHRcdFx0VkludFkoIHF6ICogMywgMjEsIGlzb2wsIGZ4LCBmeSwgZnoyLCBmaWVsZDQsIGZpZWxkNiApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdmVydGljYWwgbGluZXMgb2YgdGhlIGN1YmVcblxuXHRcdGlmICggYml0cyAmIDI1NiApIHtcblxuXHRcdFx0Y29tcE5vcm0oIHEgKTtcblx0XHRcdGNvbXBOb3JtKCBxeiApO1xuXHRcdFx0VkludFooIHEgKiAzLCAyNCwgaXNvbCwgZngsIGZ5LCBmeiwgZmllbGQwLCBmaWVsZDQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYml0cyAmIDUxMiApIHtcblxuXHRcdFx0Y29tcE5vcm0oIHExICk7XG5cdFx0XHRjb21wTm9ybSggcTF6ICk7XG5cdFx0XHRWSW50WiggcTEgKiAzLCAyNywgaXNvbCwgZngyLCBmeSwgZnosIGZpZWxkMSwgZmllbGQ1ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJpdHMgJiAxMDI0ICkge1xuXG5cdFx0XHRjb21wTm9ybSggcTF5ICk7XG5cdFx0XHRjb21wTm9ybSggcTF5eiApO1xuXHRcdFx0VkludFooIHExeSAqIDMsIDMwLCBpc29sLCBmeDIsIGZ5MiwgZnosIGZpZWxkMywgZmllbGQ3ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJpdHMgJiAyMDQ4ICkge1xuXG5cdFx0XHRjb21wTm9ybSggcXkgKTtcblx0XHRcdGNvbXBOb3JtKCBxeXogKTtcblx0XHRcdFZJbnRaKCBxeSAqIDMsIDMzLCBpc29sLCBmeCwgZnkyLCBmeiwgZmllbGQyLCBmaWVsZDYgKTtcblxuXHRcdH1cblxuXHRcdGN1YmVpbmRleCA8PD0gNDsgLy8gcmUtcHVycG9zZSBjdWJlaW5kZXggaW50byBhbiBvZmZzZXQgaW50byB0cmlUYWJsZVxuXG5cdFx0dmFyIG8xLCBvMiwgbzMsIG51bXRyaXMgPSAwLCBpID0gMDtcblxuXHRcdC8vIGhlcmUgaXMgd2hlcmUgdHJpYW5nbGVzIGFyZSBjcmVhdGVkXG5cblx0XHR3aGlsZSAoIFRIUkVFLnRyaVRhYmxlWyBjdWJlaW5kZXggKyBpIF0gIT0gLSAxICkge1xuXG5cdFx0XHRvMSA9IGN1YmVpbmRleCArIGk7XG5cdFx0XHRvMiA9IG8xICsgMTtcblx0XHRcdG8zID0gbzEgKyAyO1xuXG5cdFx0XHRwb3Nub3JtdHJpdiggdmxpc3QsIG5saXN0LFxuXHRcdFx0XHQzICogVEhSRUUudHJpVGFibGVbIG8xIF0sXG5cdFx0XHRcdDMgKiBUSFJFRS50cmlUYWJsZVsgbzIgXSxcblx0XHRcdFx0MyAqIFRIUkVFLnRyaVRhYmxlWyBvMyBdLFxuXHRcdFx0XHRyZW5kZXJDYWxsYmFjayApO1xuXG5cdFx0XHRpICs9IDM7XG5cdFx0XHRudW10cmlzICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bXRyaXM7XG5cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gSW1tZWRpYXRlIHJlbmRlciBtb2RlIHNpbXVsYXRvclxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0ZnVuY3Rpb24gcG9zbm9ybXRyaXYoIHBvcywgbm9ybSwgbzEsIG8yLCBvMywgcmVuZGVyQ2FsbGJhY2sgKSB7XG5cblx0XHR2YXIgYyA9IHNjb3BlLmNvdW50ICogMztcblxuXHRcdC8vIHBvc2l0aW9uc1xuXG5cdFx0c2NvcGUucG9zaXRpb25BcnJheVsgYyArIDAgXSA9IHBvc1sgbzEgXTtcblx0XHRzY29wZS5wb3NpdGlvbkFycmF5WyBjICsgMSBdID0gcG9zWyBvMSArIDEgXTtcblx0XHRzY29wZS5wb3NpdGlvbkFycmF5WyBjICsgMiBdID0gcG9zWyBvMSArIDIgXTtcblxuXHRcdHNjb3BlLnBvc2l0aW9uQXJyYXlbIGMgKyAzIF0gPSBwb3NbIG8yIF07XG5cdFx0c2NvcGUucG9zaXRpb25BcnJheVsgYyArIDQgXSA9IHBvc1sgbzIgKyAxIF07XG5cdFx0c2NvcGUucG9zaXRpb25BcnJheVsgYyArIDUgXSA9IHBvc1sgbzIgKyAyIF07XG5cblx0XHRzY29wZS5wb3NpdGlvbkFycmF5WyBjICsgNiBdID0gcG9zWyBvMyBdO1xuXHRcdHNjb3BlLnBvc2l0aW9uQXJyYXlbIGMgKyA3IF0gPSBwb3NbIG8zICsgMSBdO1xuXHRcdHNjb3BlLnBvc2l0aW9uQXJyYXlbIGMgKyA4IF0gPSBwb3NbIG8zICsgMiBdO1xuXG5cdFx0Ly8gbm9ybWFsc1xuXG5cdFx0aWYgKCBzY29wZS5tYXRlcmlhbC5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dmFyIG54ID0gKCBub3JtWyBvMSArIDAgXSArIG5vcm1bIG8yICsgMCBdICsgbm9ybVsgbzMgKyAwIF0gKSAvIDM7XG5cdFx0XHR2YXIgbnkgPSAoIG5vcm1bIG8xICsgMSBdICsgbm9ybVsgbzIgKyAxIF0gKyBub3JtWyBvMyArIDEgXSApIC8gMztcblx0XHRcdHZhciBueiA9ICggbm9ybVsgbzEgKyAyIF0gKyBub3JtWyBvMiArIDIgXSArIG5vcm1bIG8zICsgMiBdICkgLyAzO1xuXG5cdFx0XHRzY29wZS5ub3JtYWxBcnJheVsgYyArIDAgXSA9IG54O1xuXHRcdFx0c2NvcGUubm9ybWFsQXJyYXlbIGMgKyAxIF0gPSBueTtcblx0XHRcdHNjb3BlLm5vcm1hbEFycmF5WyBjICsgMiBdID0gbno7XG5cblx0XHRcdHNjb3BlLm5vcm1hbEFycmF5WyBjICsgMyBdID0gbng7XG5cdFx0XHRzY29wZS5ub3JtYWxBcnJheVsgYyArIDQgXSA9IG55O1xuXHRcdFx0c2NvcGUubm9ybWFsQXJyYXlbIGMgKyA1IF0gPSBuejtcblxuXHRcdFx0c2NvcGUubm9ybWFsQXJyYXlbIGMgKyA2IF0gPSBueDtcblx0XHRcdHNjb3BlLm5vcm1hbEFycmF5WyBjICsgNyBdID0gbnk7XG5cdFx0XHRzY29wZS5ub3JtYWxBcnJheVsgYyArIDggXSA9IG56O1xuXG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzY29wZS5ub3JtYWxBcnJheVsgYyArIDAgXSA9IG5vcm1bIG8xICsgMCBdO1xuXHRcdFx0c2NvcGUubm9ybWFsQXJyYXlbIGMgKyAxIF0gPSBub3JtWyBvMSArIDEgXTtcblx0XHRcdHNjb3BlLm5vcm1hbEFycmF5WyBjICsgMiBdID0gbm9ybVsgbzEgKyAyIF07XG5cblx0XHRcdHNjb3BlLm5vcm1hbEFycmF5WyBjICsgMyBdID0gbm9ybVsgbzIgKyAwIF07XG5cdFx0XHRzY29wZS5ub3JtYWxBcnJheVsgYyArIDQgXSA9IG5vcm1bIG8yICsgMSBdO1xuXHRcdFx0c2NvcGUubm9ybWFsQXJyYXlbIGMgKyA1IF0gPSBub3JtWyBvMiArIDIgXTtcblxuXHRcdFx0c2NvcGUubm9ybWFsQXJyYXlbIGMgKyA2IF0gPSBub3JtWyBvMyArIDAgXTtcblx0XHRcdHNjb3BlLm5vcm1hbEFycmF5WyBjICsgNyBdID0gbm9ybVsgbzMgKyAxIF07XG5cdFx0XHRzY29wZS5ub3JtYWxBcnJheVsgYyArIDggXSA9IG5vcm1bIG8zICsgMiBdO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXZzXG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZVV2cyApIHtcblxuXHRcdFx0dmFyIGQgPSBzY29wZS5jb3VudCAqIDI7XG5cblx0XHRcdHNjb3BlLnV2QXJyYXlbIGQgKyAwIF0gPSBwb3NbIG8xICsgMCBdO1xuXHRcdFx0c2NvcGUudXZBcnJheVsgZCArIDEgXSA9IHBvc1sgbzEgKyAyIF07XG5cblx0XHRcdHNjb3BlLnV2QXJyYXlbIGQgKyAyIF0gPSBwb3NbIG8yICsgMCBdO1xuXHRcdFx0c2NvcGUudXZBcnJheVsgZCArIDMgXSA9IHBvc1sgbzIgKyAyIF07XG5cblx0XHRcdHNjb3BlLnV2QXJyYXlbIGQgKyA0IF0gPSBwb3NbIG8zICsgMCBdO1xuXHRcdFx0c2NvcGUudXZBcnJheVsgZCArIDUgXSA9IHBvc1sgbzMgKyAyIF07XG5cblx0XHR9XG5cblx0XHQvLyBjb2xvcnNcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlQ29sb3JzICkge1xuXG5cdFx0XHRzY29wZS5jb2xvckFycmF5WyBjICsgMCBdID0gcG9zWyBvMSArIDAgXTtcblx0XHRcdHNjb3BlLmNvbG9yQXJyYXlbIGMgKyAxIF0gPSBwb3NbIG8xICsgMSBdO1xuXHRcdFx0c2NvcGUuY29sb3JBcnJheVsgYyArIDIgXSA9IHBvc1sgbzEgKyAyIF07XG5cblx0XHRcdHNjb3BlLmNvbG9yQXJyYXlbIGMgKyAzIF0gPSBwb3NbIG8yICsgMCBdO1xuXHRcdFx0c2NvcGUuY29sb3JBcnJheVsgYyArIDQgXSA9IHBvc1sgbzIgKyAxIF07XG5cdFx0XHRzY29wZS5jb2xvckFycmF5WyBjICsgNSBdID0gcG9zWyBvMiArIDIgXTtcblxuXHRcdFx0c2NvcGUuY29sb3JBcnJheVsgYyArIDYgXSA9IHBvc1sgbzMgKyAwIF07XG5cdFx0XHRzY29wZS5jb2xvckFycmF5WyBjICsgNyBdID0gcG9zWyBvMyArIDEgXTtcblx0XHRcdHNjb3BlLmNvbG9yQXJyYXlbIGMgKyA4IF0gPSBwb3NbIG8zICsgMiBdO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUuY291bnQgKz0gMztcblxuXHRcdGlmICggc2NvcGUuY291bnQgPj0gc2NvcGUubWF4Q291bnQgLSAzICkge1xuXG5cdFx0XHRzY29wZS5oYXNQb3NpdGlvbnMgPSB0cnVlO1xuXHRcdFx0c2NvcGUuaGFzTm9ybWFscyA9IHRydWU7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlVXZzICkge1xuXG5cdFx0XHRcdHNjb3BlLmhhc1V2cyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVDb2xvcnMgKSB7XG5cblx0XHRcdFx0c2NvcGUuaGFzQ29sb3JzID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJDYWxsYmFjayggc2NvcGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dGhpcy5iZWdpbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY291bnQgPSAwO1xuXG5cdFx0dGhpcy5oYXNQb3NpdGlvbnMgPSBmYWxzZTtcblx0XHR0aGlzLmhhc05vcm1hbHMgPSBmYWxzZTtcblx0XHR0aGlzLmhhc1V2cyA9IGZhbHNlO1xuXHRcdHRoaXMuaGFzQ29sb3JzID0gZmFsc2U7XG5cblx0fTtcblxuXHR0aGlzLmVuZCA9IGZ1bmN0aW9uICggcmVuZGVyQ2FsbGJhY2sgKSB7XG5cblx0XHRpZiAoIHRoaXMuY291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRmb3IgKCB2YXIgaSA9IHRoaXMuY291bnQgKiAzOyBpIDwgdGhpcy5wb3NpdGlvbkFycmF5Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5wb3NpdGlvbkFycmF5WyBpIF0gPSAwLjA7XG5cblx0XHR9XG5cblx0XHR0aGlzLmhhc1Bvc2l0aW9ucyA9IHRydWU7XG5cdFx0dGhpcy5oYXNOb3JtYWxzID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5lbmFibGVVdnMgJiYgdGhpcy5tYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHRoaXMuaGFzVXZzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5lbmFibGVDb2xvcnMgJiYgdGhpcy5tYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgIT09IFRIUkVFLk5vQ29sb3JzICkge1xuXG5cdFx0XHR0aGlzLmhhc0NvbG9ycyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJDYWxsYmFjayggdGhpcyApO1xuXG5cdH07XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBNZXRhYmFsbHNcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vIEFkZHMgYSByZWNpcHJvY2FsIGJhbGwgKG5pY2UgYW5kIGJsb2JieSkgdGhhdCwgdG8gYmUgZmFzdCwgZmFkZXMgdG8gemVybyBhZnRlclxuXHQvLyBhIGZpeGVkIGRpc3RhbmNlLCBkZXRlcm1pbmVkIGJ5IHN0cmVuZ3RoIGFuZCBzdWJ0cmFjdC5cblxuXHR0aGlzLmFkZEJhbGwgPSBmdW5jdGlvbiAoIGJhbGx4LCBiYWxseSwgYmFsbHosIHN0cmVuZ3RoLCBzdWJ0cmFjdCApIHtcblxuXHRcdHZhciBzaWduID0gTWF0aC5zaWduKCBzdHJlbmd0aCApO1xuXHRcdHN0cmVuZ3RoID0gTWF0aC5hYnMoIHN0cmVuZ3RoICk7XG5cblx0XHQvLyBMZXQncyBzb2x2ZSB0aGUgZXF1YXRpb24gdG8gZmluZCB0aGUgcmFkaXVzOlxuXHRcdC8vIDEuMCAvICgwLjAwMDAwMSArIHJhZGl1c14yKSAqIHN0cmVuZ3RoIC0gc3VidHJhY3QgPSAwXG5cdFx0Ly8gc3RyZW5ndGggLyAocmFkaXVzXjIpID0gc3VidHJhY3Rcblx0XHQvLyBzdHJlbmd0aCA9IHN1YnRyYWN0ICogcmFkaXVzXjJcblx0XHQvLyByYWRpdXNeMiA9IHN0cmVuZ3RoIC8gc3VidHJhY3Rcblx0XHQvLyByYWRpdXMgPSBzcXJ0KHN0cmVuZ3RoIC8gc3VidHJhY3QpXG5cblx0XHR2YXIgcmFkaXVzID0gdGhpcy5zaXplICogTWF0aC5zcXJ0KCBzdHJlbmd0aCAvIHN1YnRyYWN0ICksXG5cdFx0XHR6cyA9IGJhbGx6ICogdGhpcy5zaXplLFxuXHRcdFx0eXMgPSBiYWxseSAqIHRoaXMuc2l6ZSxcblx0XHRcdHhzID0gYmFsbHggKiB0aGlzLnNpemU7XG5cblx0XHR2YXIgbWluX3ogPSBNYXRoLmZsb29yKCB6cyAtIHJhZGl1cyApOyBpZiAoIG1pbl96IDwgMSApIG1pbl96ID0gMTtcblx0XHR2YXIgbWF4X3ogPSBNYXRoLmZsb29yKCB6cyArIHJhZGl1cyApOyBpZiAoIG1heF96ID4gdGhpcy5zaXplIC0gMSApIG1heF96ID0gdGhpcy5zaXplIC0gMTtcblx0XHR2YXIgbWluX3kgPSBNYXRoLmZsb29yKCB5cyAtIHJhZGl1cyApOyBpZiAoIG1pbl95IDwgMSApIG1pbl95ID0gMTtcblx0XHR2YXIgbWF4X3kgPSBNYXRoLmZsb29yKCB5cyArIHJhZGl1cyApOyBpZiAoIG1heF95ID4gdGhpcy5zaXplIC0gMSApIG1heF95ID0gdGhpcy5zaXplIC0gMTtcblx0XHR2YXIgbWluX3ggPSBNYXRoLmZsb29yKCB4cyAtIHJhZGl1cyApOyBpZiAoIG1pbl94IDwgMSApIG1pbl94ID0gMTtcblx0XHR2YXIgbWF4X3ggPSBNYXRoLmZsb29yKCB4cyArIHJhZGl1cyApOyBpZiAoIG1heF94ID4gdGhpcy5zaXplIC0gMSApIG1heF94ID0gdGhpcy5zaXplIC0gMTtcblxuXG5cdFx0Ly8gRG9uJ3QgcG9seWdvbml6ZSBpbiB0aGUgb3V0ZXIgbGF5ZXIgYmVjYXVzZSBub3JtYWxzIGFyZW4ndFxuXHRcdC8vIHdlbGwtZGVmaW5lZCB0aGVyZS5cblxuXHRcdHZhciB4LCB5LCB6LCB5X29mZnNldCwgel9vZmZzZXQsIGZ4LCBmeSwgZnosIGZ6MiwgZnkyLCB2YWw7XG5cblx0XHRmb3IgKCB6ID0gbWluX3o7IHogPCBtYXhfejsgeiArKyApIHtcblxuXHRcdFx0el9vZmZzZXQgPSB0aGlzLnNpemUyICogejtcblx0XHRcdGZ6ID0geiAvIHRoaXMuc2l6ZSAtIGJhbGx6O1xuXHRcdFx0ZnoyID0gZnogKiBmejtcblxuXHRcdFx0Zm9yICggeSA9IG1pbl95OyB5IDwgbWF4X3k7IHkgKysgKSB7XG5cblx0XHRcdFx0eV9vZmZzZXQgPSB6X29mZnNldCArIHRoaXMuc2l6ZSAqIHk7XG5cdFx0XHRcdGZ5ID0geSAvIHRoaXMuc2l6ZSAtIGJhbGx5O1xuXHRcdFx0XHRmeTIgPSBmeSAqIGZ5O1xuXG5cdFx0XHRcdGZvciAoIHggPSBtaW5feDsgeCA8IG1heF94OyB4ICsrICkge1xuXG5cdFx0XHRcdFx0ZnggPSB4IC8gdGhpcy5zaXplIC0gYmFsbHg7XG5cdFx0XHRcdFx0dmFsID0gc3RyZW5ndGggLyAoIDAuMDAwMDAxICsgZnggKiBmeCArIGZ5MiArIGZ6MiApIC0gc3VidHJhY3Q7XG5cdFx0XHRcdFx0aWYgKCB2YWwgPiAwLjAgKSB0aGlzLmZpZWxkWyB5X29mZnNldCArIHggXSArPSB2YWwgKiBzaWduO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5hZGRQbGFuZVggPSBmdW5jdGlvbiAoIHN0cmVuZ3RoLCBzdWJ0cmFjdCApIHtcblxuXHRcdHZhciB4LCB5LCB6LCB4eCwgdmFsLCB4ZGl2LCBjeHksXG5cblx0XHRcdC8vIGNhY2hlIGF0dHJpYnV0ZSBsb29rdXBzXG5cdFx0XHRzaXplID0gdGhpcy5zaXplLFxuXHRcdFx0eWQgPSB0aGlzLnlkLFxuXHRcdFx0emQgPSB0aGlzLnpkLFxuXHRcdFx0ZmllbGQgPSB0aGlzLmZpZWxkLFxuXG5cdFx0XHRkaXN0ID0gc2l6ZSAqIE1hdGguc3FydCggc3RyZW5ndGggLyBzdWJ0cmFjdCApO1xuXG5cdFx0aWYgKCBkaXN0ID4gc2l6ZSApIGRpc3QgPSBzaXplO1xuXG5cdFx0Zm9yICggeCA9IDA7IHggPCBkaXN0OyB4ICsrICkge1xuXG5cdFx0XHR4ZGl2ID0geCAvIHNpemU7XG5cdFx0XHR4eCA9IHhkaXYgKiB4ZGl2O1xuXHRcdFx0dmFsID0gc3RyZW5ndGggLyAoIDAuMDAwMSArIHh4ICkgLSBzdWJ0cmFjdDtcblxuXHRcdFx0aWYgKCB2YWwgPiAwLjAgKSB7XG5cblx0XHRcdFx0Zm9yICggeSA9IDA7IHkgPCBzaXplOyB5ICsrICkge1xuXG5cdFx0XHRcdFx0Y3h5ID0geCArIHkgKiB5ZDtcblxuXHRcdFx0XHRcdGZvciAoIHogPSAwOyB6IDwgc2l6ZTsgeiArKyApIHtcblxuXHRcdFx0XHRcdFx0ZmllbGRbIHpkICogeiArIGN4eSBdICs9IHZhbDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuYWRkUGxhbmVZID0gZnVuY3Rpb24gKCBzdHJlbmd0aCwgc3VidHJhY3QgKSB7XG5cblx0XHR2YXIgeCwgeSwgeiwgeXksIHZhbCwgeWRpdiwgY3ksIGN4eSxcblxuXHRcdFx0Ly8gY2FjaGUgYXR0cmlidXRlIGxvb2t1cHNcblx0XHRcdHNpemUgPSB0aGlzLnNpemUsXG5cdFx0XHR5ZCA9IHRoaXMueWQsXG5cdFx0XHR6ZCA9IHRoaXMuemQsXG5cdFx0XHRmaWVsZCA9IHRoaXMuZmllbGQsXG5cblx0XHRcdGRpc3QgPSBzaXplICogTWF0aC5zcXJ0KCBzdHJlbmd0aCAvIHN1YnRyYWN0ICk7XG5cblx0XHRpZiAoIGRpc3QgPiBzaXplICkgZGlzdCA9IHNpemU7XG5cblx0XHRmb3IgKCB5ID0gMDsgeSA8IGRpc3Q7IHkgKysgKSB7XG5cblx0XHRcdHlkaXYgPSB5IC8gc2l6ZTtcblx0XHRcdHl5ID0geWRpdiAqIHlkaXY7XG5cdFx0XHR2YWwgPSBzdHJlbmd0aCAvICggMC4wMDAxICsgeXkgKSAtIHN1YnRyYWN0O1xuXG5cdFx0XHRpZiAoIHZhbCA+IDAuMCApIHtcblxuXHRcdFx0XHRjeSA9IHkgKiB5ZDtcblxuXHRcdFx0XHRmb3IgKCB4ID0gMDsgeCA8IHNpemU7IHggKysgKSB7XG5cblx0XHRcdFx0XHRjeHkgPSBjeSArIHg7XG5cblx0XHRcdFx0XHRmb3IgKCB6ID0gMDsgeiA8IHNpemU7IHogKysgKVxuXHRcdFx0XHRcdFx0ZmllbGRbIHpkICogeiArIGN4eSBdICs9IHZhbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuYWRkUGxhbmVaID0gZnVuY3Rpb24gKCBzdHJlbmd0aCwgc3VidHJhY3QgKSB7XG5cblx0XHR2YXIgeCwgeSwgeiwgenosIHZhbCwgemRpdiwgY3osIGN5eixcblxuXHRcdFx0Ly8gY2FjaGUgYXR0cmlidXRlIGxvb2t1cHNcblx0XHRcdHNpemUgPSB0aGlzLnNpemUsXG5cdFx0XHR5ZCA9IHRoaXMueWQsXG5cdFx0XHR6ZCA9IHRoaXMuemQsXG5cdFx0XHRmaWVsZCA9IHRoaXMuZmllbGQsXG5cblx0XHRcdGRpc3QgPSBzaXplICogTWF0aC5zcXJ0KCBzdHJlbmd0aCAvIHN1YnRyYWN0ICk7XG5cblx0XHRpZiAoIGRpc3QgPiBzaXplICkgZGlzdCA9IHNpemU7XG5cblx0XHRmb3IgKCB6ID0gMDsgeiA8IGRpc3Q7IHogKysgKSB7XG5cblx0XHRcdHpkaXYgPSB6IC8gc2l6ZTtcblx0XHRcdHp6ID0gemRpdiAqIHpkaXY7XG5cdFx0XHR2YWwgPSBzdHJlbmd0aCAvICggMC4wMDAxICsgenogKSAtIHN1YnRyYWN0O1xuXHRcdFx0aWYgKCB2YWwgPiAwLjAgKSB7XG5cblx0XHRcdFx0Y3ogPSB6ZCAqIHo7XG5cblx0XHRcdFx0Zm9yICggeSA9IDA7IHkgPCBzaXplOyB5ICsrICkge1xuXG5cdFx0XHRcdFx0Y3l6ID0gY3ogKyB5ICogeWQ7XG5cblx0XHRcdFx0XHRmb3IgKCB4ID0gMDsgeCA8IHNpemU7IHggKysgKVxuXHRcdFx0XHRcdFx0ZmllbGRbIGN5eiArIHggXSArPSB2YWw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIFVwZGF0ZXNcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdC8vIHdpcGUgdGhlIG5vcm1hbCBjYWNoZVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCB0aGlzLnNpemUzOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLm5vcm1hbF9jYWNoZVsgaSAqIDMgXSA9IDAuMDtcblx0XHRcdHRoaXMuZmllbGRbIGkgXSA9IDAuMDtcblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCByZW5kZXJDYWxsYmFjayApIHtcblxuXHRcdHRoaXMuYmVnaW4oKTtcblxuXHRcdC8vIFRyaWFuZ3VsYXRlLiBZZWFoLCB0aGlzIGlzIHNsb3cuXG5cblx0XHR2YXIgc21pbjIgPSB0aGlzLnNpemUgLSAyO1xuXG5cdFx0Zm9yICggdmFyIHogPSAxOyB6IDwgc21pbjI7IHogKysgKSB7XG5cblx0XHRcdHZhciB6X29mZnNldCA9IHRoaXMuc2l6ZTIgKiB6O1xuXHRcdFx0dmFyIGZ6ID0gKCB6IC0gdGhpcy5oYWxmc2l6ZSApIC8gdGhpcy5oYWxmc2l6ZTsgLy8rIDFcblxuXHRcdFx0Zm9yICggdmFyIHkgPSAxOyB5IDwgc21pbjI7IHkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHlfb2Zmc2V0ID0gel9vZmZzZXQgKyB0aGlzLnNpemUgKiB5O1xuXHRcdFx0XHR2YXIgZnkgPSAoIHkgLSB0aGlzLmhhbGZzaXplICkgLyB0aGlzLmhhbGZzaXplOyAvLysgMVxuXG5cdFx0XHRcdGZvciAoIHZhciB4ID0gMTsgeCA8IHNtaW4yOyB4ICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGZ4ID0gKCB4IC0gdGhpcy5oYWxmc2l6ZSApIC8gdGhpcy5oYWxmc2l6ZTsgLy8rIDFcblx0XHRcdFx0XHR2YXIgcSA9IHlfb2Zmc2V0ICsgeDtcblxuXHRcdFx0XHRcdHBvbHlnb25pemUoIGZ4LCBmeSwgZnosIHEsIHRoaXMuaXNvbGF0aW9uLCByZW5kZXJDYWxsYmFjayApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5lbmQoIHJlbmRlckNhbGxiYWNrICk7XG5cblx0fTtcblxuXHR0aGlzLmdlbmVyYXRlR2VvbWV0cnkgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXJjaGluZ0N1YmVzOiBnZW5lcmF0ZUdlb21ldHJ5KCkgbm93IHJldHVybnMgVEhSRUUuQnVmZmVyR2VvbWV0cnknICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2VuZXJhdGVCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdH07XG5cblx0ZnVuY3Rpb24gY29uY2F0ZW5hdGUoIGEsIGIsIGxlbmd0aCApIHtcblxuXHRcdHZhciByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KCBhLmxlbmd0aCArIGxlbmd0aCApO1xuXHRcdHJlc3VsdC5zZXQoIGEsIDAgKTtcblx0XHRyZXN1bHQuc2V0KCBiLnNsaWNlKCAwLCBsZW5ndGggKSwgYS5sZW5ndGggKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHR0aGlzLmdlbmVyYXRlQnVmZmVyR2VvbWV0cnkgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZ2VvID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0dmFyIHBvc0FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSgpO1xuXHRcdHZhciBub3JtQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCk7XG5cdFx0dmFyIGNvbG9yQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCk7XG5cdFx0dmFyIHV2QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCk7XG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBnZW9fY2FsbGJhY2sgPSBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5oYXNQb3NpdGlvbnMgKSBwb3NBcnJheSA9IGNvbmNhdGVuYXRlKCBwb3NBcnJheSwgb2JqZWN0LnBvc2l0aW9uQXJyYXksIG9iamVjdC5jb3VudCAqIDMgKTtcblx0XHRcdGlmICggc2NvcGUuaGFzTm9ybWFscyApIG5vcm1BcnJheSA9IGNvbmNhdGVuYXRlKCBub3JtQXJyYXksIG9iamVjdC5ub3JtYWxBcnJheSwgb2JqZWN0LmNvdW50ICogMyApO1xuXHRcdFx0aWYgKCBzY29wZS5oYXNDb2xvcnMgKSBjb2xvckFycmF5ID0gY29uY2F0ZW5hdGUoIGNvbG9yQXJyYXksIG9iamVjdC5jb2xvckFycmF5LCBvYmplY3QuY291bnQgKiAzICk7XG5cdFx0XHRpZiAoIHNjb3BlLmhhc1V2cyApIHV2QXJyYXkgPSBjb25jYXRlbmF0ZSggdXZBcnJheSwgb2JqZWN0LnV2QXJyYXksIG9iamVjdC5jb3VudCAqIDIgKTtcblxuXHRcdFx0b2JqZWN0LmNvdW50ID0gMDtcblxuXHRcdH07XG5cblx0XHR0aGlzLnJlbmRlciggZ2VvX2NhbGxiYWNrICk7XG5cblx0XHRpZiAoIHRoaXMuaGFzUG9zaXRpb25zICkgZ2VvLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggcG9zQXJyYXksIDMgKSApO1xuXHRcdGlmICggdGhpcy5oYXNOb3JtYWxzICkgZ2VvLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIG5vcm1BcnJheSwgMyApICk7XG5cdFx0aWYgKCB0aGlzLmhhc0NvbG9ycyApIGdlby5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGNvbG9yQXJyYXksIDMgKSApO1xuXHRcdGlmICggdGhpcy5oYXNVdnMgKSBnZW8uYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCB1dkFycmF5LCAyICkgKTtcblxuXHRcdHJldHVybiBnZW87XG5cblx0fTtcblxuXHR0aGlzLmluaXQoIHJlc29sdXRpb24gKTtcblxufTtcblxuVEhSRUUuTWFyY2hpbmdDdWJlcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUSFJFRS5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlICk7XG5USFJFRS5NYXJjaGluZ0N1YmVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRIUkVFLk1hcmNoaW5nQ3ViZXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTWFyY2hpbmcgY3ViZXMgbG9va3VwIHRhYmxlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vLyBUaGVzZSB0YWJsZXMgYXJlIHN0cmFpZ2h0IGZyb20gUGF1bCBCb3Vya2UncyBwYWdlOlxuLy8gaHR0cDovL2xvY2FsLndhc3AudXdhLmVkdS5hdS9+cGJvdXJrZS9nZW9tZXRyeS9wb2x5Z29uaXNlL1xuLy8gd2hvIGluIHR1cm4gZ290IHRoZW0gZnJvbSBDb3J5IEdlbmUgQmxveWQuXG5cblRIUkVFLmVkZ2VUYWJsZSA9IG5ldyBJbnQzMkFycmF5KCBbXG5cdDB4MCwgMHgxMDksIDB4MjAzLCAweDMwYSwgMHg0MDYsIDB4NTBmLCAweDYwNSwgMHg3MGMsXG5cdDB4ODBjLCAweDkwNSwgMHhhMGYsIDB4YjA2LCAweGMwYSwgMHhkMDMsIDB4ZTA5LCAweGYwMCxcblx0MHgxOTAsIDB4OTksIDB4MzkzLCAweDI5YSwgMHg1OTYsIDB4NDlmLCAweDc5NSwgMHg2OWMsXG5cdDB4OTljLCAweDg5NSwgMHhiOWYsIDB4YTk2LCAweGQ5YSwgMHhjOTMsIDB4Zjk5LCAweGU5MCxcblx0MHgyMzAsIDB4MzM5LCAweDMzLCAweDEzYSwgMHg2MzYsIDB4NzNmLCAweDQzNSwgMHg1M2MsXG5cdDB4YTNjLCAweGIzNSwgMHg4M2YsIDB4OTM2LCAweGUzYSwgMHhmMzMsIDB4YzM5LCAweGQzMCxcblx0MHgzYTAsIDB4MmE5LCAweDFhMywgMHhhYSwgMHg3YTYsIDB4NmFmLCAweDVhNSwgMHg0YWMsXG5cdDB4YmFjLCAweGFhNSwgMHg5YWYsIDB4OGE2LCAweGZhYSwgMHhlYTMsIDB4ZGE5LCAweGNhMCxcblx0MHg0NjAsIDB4NTY5LCAweDY2MywgMHg3NmEsIDB4NjYsIDB4MTZmLCAweDI2NSwgMHgzNmMsXG5cdDB4YzZjLCAweGQ2NSwgMHhlNmYsIDB4ZjY2LCAweDg2YSwgMHg5NjMsIDB4YTY5LCAweGI2MCxcblx0MHg1ZjAsIDB4NGY5LCAweDdmMywgMHg2ZmEsIDB4MWY2LCAweGZmLCAweDNmNSwgMHgyZmMsXG5cdDB4ZGZjLCAweGNmNSwgMHhmZmYsIDB4ZWY2LCAweDlmYSwgMHg4ZjMsIDB4YmY5LCAweGFmMCxcblx0MHg2NTAsIDB4NzU5LCAweDQ1MywgMHg1NWEsIDB4MjU2LCAweDM1ZiwgMHg1NSwgMHgxNWMsXG5cdDB4ZTVjLCAweGY1NSwgMHhjNWYsIDB4ZDU2LCAweGE1YSwgMHhiNTMsIDB4ODU5LCAweDk1MCxcblx0MHg3YzAsIDB4NmM5LCAweDVjMywgMHg0Y2EsIDB4M2M2LCAweDJjZiwgMHgxYzUsIDB4Y2MsXG5cdDB4ZmNjLCAweGVjNSwgMHhkY2YsIDB4Y2M2LCAweGJjYSwgMHhhYzMsIDB4OWM5LCAweDhjMCxcblx0MHg4YzAsIDB4OWM5LCAweGFjMywgMHhiY2EsIDB4Y2M2LCAweGRjZiwgMHhlYzUsIDB4ZmNjLFxuXHQweGNjLCAweDFjNSwgMHgyY2YsIDB4M2M2LCAweDRjYSwgMHg1YzMsIDB4NmM5LCAweDdjMCxcblx0MHg5NTAsIDB4ODU5LCAweGI1MywgMHhhNWEsIDB4ZDU2LCAweGM1ZiwgMHhmNTUsIDB4ZTVjLFxuXHQweDE1YywgMHg1NSwgMHgzNWYsIDB4MjU2LCAweDU1YSwgMHg0NTMsIDB4NzU5LCAweDY1MCxcblx0MHhhZjAsIDB4YmY5LCAweDhmMywgMHg5ZmEsIDB4ZWY2LCAweGZmZiwgMHhjZjUsIDB4ZGZjLFxuXHQweDJmYywgMHgzZjUsIDB4ZmYsIDB4MWY2LCAweDZmYSwgMHg3ZjMsIDB4NGY5LCAweDVmMCxcblx0MHhiNjAsIDB4YTY5LCAweDk2MywgMHg4NmEsIDB4ZjY2LCAweGU2ZiwgMHhkNjUsIDB4YzZjLFxuXHQweDM2YywgMHgyNjUsIDB4MTZmLCAweDY2LCAweDc2YSwgMHg2NjMsIDB4NTY5LCAweDQ2MCxcblx0MHhjYTAsIDB4ZGE5LCAweGVhMywgMHhmYWEsIDB4OGE2LCAweDlhZiwgMHhhYTUsIDB4YmFjLFxuXHQweDRhYywgMHg1YTUsIDB4NmFmLCAweDdhNiwgMHhhYSwgMHgxYTMsIDB4MmE5LCAweDNhMCxcblx0MHhkMzAsIDB4YzM5LCAweGYzMywgMHhlM2EsIDB4OTM2LCAweDgzZiwgMHhiMzUsIDB4YTNjLFxuXHQweDUzYywgMHg0MzUsIDB4NzNmLCAweDYzNiwgMHgxM2EsIDB4MzMsIDB4MzM5LCAweDIzMCxcblx0MHhlOTAsIDB4Zjk5LCAweGM5MywgMHhkOWEsIDB4YTk2LCAweGI5ZiwgMHg4OTUsIDB4OTljLFxuXHQweDY5YywgMHg3OTUsIDB4NDlmLCAweDU5NiwgMHgyOWEsIDB4MzkzLCAweDk5LCAweDE5MCxcblx0MHhmMDAsIDB4ZTA5LCAweGQwMywgMHhjMGEsIDB4YjA2LCAweGEwZiwgMHg5MDUsIDB4ODBjLFxuXHQweDcwYywgMHg2MDUsIDB4NTBmLCAweDQwNiwgMHgzMGEsIDB4MjAzLCAweDEwOSwgMHgwIF0gKTtcblxuVEhSRUUudHJpVGFibGUgPSBuZXcgSW50MzJBcnJheSggW1xuXHQtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDgsIDMsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMSwgOSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCA4LCAzLCA5LCA4LCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDIsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDgsIDMsIDEsIDIsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDIsIDEwLCAwLCAyLCA5LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDIsIDgsIDMsIDIsIDEwLCA4LCAxMCwgOSwgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAxMSwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCAxMSwgMiwgOCwgMTEsIDAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgOSwgMCwgMiwgMywgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgMTEsIDIsIDEsIDksIDExLCA5LCA4LCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAxMCwgMSwgMTEsIDEwLCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDEwLCAxLCAwLCA4LCAxMCwgOCwgMTEsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDksIDAsIDMsIDExLCA5LCAxMSwgMTAsIDksIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgOCwgMTAsIDEwLCA4LCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCA3LCA4LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDQsIDMsIDAsIDcsIDMsIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMSwgOSwgOCwgNCwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCAxLCA5LCA0LCA3LCAxLCA3LCAzLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDIsIDEwLCA4LCA0LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDQsIDcsIDMsIDAsIDQsIDEsIDIsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDIsIDEwLCA5LCAwLCAyLCA4LCA0LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDIsIDEwLCA5LCAyLCA5LCA3LCAyLCA3LCAzLCA3LCA5LCA0LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDgsIDQsIDcsIDMsIDExLCAyLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDExLCA0LCA3LCAxMSwgMiwgNCwgMiwgMCwgNCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCAwLCAxLCA4LCA0LCA3LCAyLCAzLCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCA3LCAxMSwgOSwgNCwgMTEsIDksIDExLCAyLCA5LCAyLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDEwLCAxLCAzLCAxMSwgMTAsIDcsIDgsIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgMTEsIDEwLCAxLCA0LCAxMSwgMSwgMCwgNCwgNywgMTEsIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NCwgNywgOCwgOSwgMCwgMTEsIDksIDExLCAxMCwgMTEsIDAsIDMsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NCwgNywgMTEsIDQsIDExLCA5LCA5LCAxMSwgMTAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgNSwgNCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA1LCA0LCAwLCA4LCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDUsIDQsIDEsIDUsIDAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OCwgNSwgNCwgOCwgMywgNSwgMywgMSwgNSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCAyLCAxMCwgOSwgNSwgNCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAwLCA4LCAxLCAyLCAxMCwgNCwgOSwgNSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ1LCAyLCAxMCwgNSwgNCwgMiwgNCwgMCwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQyLCAxMCwgNSwgMywgMiwgNSwgMywgNSwgNCwgMywgNCwgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA1LCA0LCAyLCAzLCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCAxMSwgMiwgMCwgOCwgMTEsIDQsIDksIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgNSwgNCwgMCwgMSwgNSwgMiwgMywgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MiwgMSwgNSwgMiwgNSwgOCwgMiwgOCwgMTEsIDQsIDgsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MTAsIDMsIDExLCAxMCwgMSwgMywgOSwgNSwgNCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCA5LCA1LCAwLCA4LCAxLCA4LCAxMCwgMSwgOCwgMTEsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDQsIDAsIDUsIDAsIDExLCA1LCAxMSwgMTAsIDExLCAwLCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDQsIDgsIDUsIDgsIDEwLCAxMCwgOCwgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgNywgOCwgNSwgNywgOSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCAzLCAwLCA5LCA1LCAzLCA1LCA3LCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDcsIDgsIDAsIDEsIDcsIDEsIDUsIDcsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgNSwgMywgMywgNSwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA3LCA4LCA5LCA1LCA3LCAxMCwgMSwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMCwgMSwgMiwgOSwgNSwgMCwgNSwgMywgMCwgNSwgNywgMywgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ4LCAwLCAyLCA4LCAyLCA1LCA4LCA1LCA3LCAxMCwgNSwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQyLCAxMCwgNSwgMiwgNSwgMywgMywgNSwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ3LCA5LCA1LCA3LCA4LCA5LCAzLCAxMSwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA1LCA3LCA5LCA3LCAyLCA5LCAyLCAwLCAyLCA3LCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQyLCAzLCAxMSwgMCwgMSwgOCwgMSwgNywgOCwgMSwgNSwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMSwgMiwgMSwgMTEsIDEsIDcsIDcsIDEsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgNSwgOCwgOCwgNSwgNywgMTAsIDEsIDMsIDEwLCAzLCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ1LCA3LCAwLCA1LCAwLCA5LCA3LCAxMSwgMCwgMSwgMCwgMTAsIDExLCAxMCwgMCwgLSAxLFxuXHQxMSwgMTAsIDAsIDExLCAwLCAzLCAxMCwgNSwgMCwgOCwgMCwgNywgNSwgNywgMCwgLSAxLFxuXHQxMSwgMTAsIDUsIDcsIDExLCA1LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEwLCA2LCA1LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDgsIDMsIDUsIDEwLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDAsIDEsIDUsIDEwLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDgsIDMsIDEsIDksIDgsIDUsIDEwLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDYsIDUsIDIsIDYsIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgNiwgNSwgMSwgMiwgNiwgMywgMCwgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA2LCA1LCA5LCAwLCA2LCAwLCAyLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDksIDgsIDUsIDgsIDIsIDUsIDIsIDYsIDMsIDIsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MiwgMywgMTEsIDEwLCA2LCA1LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDExLCAwLCA4LCAxMSwgMiwgMCwgMTAsIDYsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMSwgOSwgMiwgMywgMTEsIDUsIDEwLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDEwLCA2LCAxLCA5LCAyLCA5LCAxMSwgMiwgOSwgOCwgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgMywgMTEsIDYsIDUsIDMsIDUsIDEsIDMsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgOCwgMTEsIDAsIDExLCA1LCAwLCA1LCAxLCA1LCAxMSwgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAxMSwgNiwgMCwgMywgNiwgMCwgNiwgNSwgMCwgNSwgOSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ2LCA1LCA5LCA2LCA5LCAxMSwgMTEsIDksIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NSwgMTAsIDYsIDQsIDcsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NCwgMywgMCwgNCwgNywgMywgNiwgNSwgMTAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgOSwgMCwgNSwgMTAsIDYsIDgsIDQsIDcsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MTAsIDYsIDUsIDEsIDksIDcsIDEsIDcsIDMsIDcsIDksIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgMSwgMiwgNiwgNSwgMSwgNCwgNywgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCAyLCA1LCA1LCAyLCA2LCAzLCAwLCA0LCAzLCA0LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDgsIDQsIDcsIDksIDAsIDUsIDAsIDYsIDUsIDAsIDIsIDYsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NywgMywgOSwgNywgOSwgNCwgMywgMiwgOSwgNSwgOSwgNiwgMiwgNiwgOSwgLSAxLFxuXHQzLCAxMSwgMiwgNywgOCwgNCwgMTAsIDYsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NSwgMTAsIDYsIDQsIDcsIDIsIDQsIDIsIDAsIDIsIDcsIDExLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDEsIDksIDQsIDcsIDgsIDIsIDMsIDExLCA1LCAxMCwgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCAyLCAxLCA5LCAxMSwgMiwgOSwgNCwgMTEsIDcsIDExLCA0LCA1LCAxMCwgNiwgLSAxLFxuXHQ4LCA0LCA3LCAzLCAxMSwgNSwgMywgNSwgMSwgNSwgMTEsIDYsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NSwgMSwgMTEsIDUsIDExLCA2LCAxLCAwLCAxMSwgNywgMTEsIDQsIDAsIDQsIDExLCAtIDEsXG5cdDAsIDUsIDksIDAsIDYsIDUsIDAsIDMsIDYsIDExLCA2LCAzLCA4LCA0LCA3LCAtIDEsXG5cdDYsIDUsIDksIDYsIDksIDExLCA0LCA3LCA5LCA3LCAxMSwgOSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMCwgNCwgOSwgNiwgNCwgMTAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NCwgMTAsIDYsIDQsIDksIDEwLCAwLCA4LCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEwLCAwLCAxLCAxMCwgNiwgMCwgNiwgNCwgMCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ4LCAzLCAxLCA4LCAxLCA2LCA4LCA2LCA0LCA2LCAxLCAxMCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCA0LCA5LCAxLCAyLCA0LCAyLCA2LCA0LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDAsIDgsIDEsIDIsIDksIDIsIDQsIDksIDIsIDYsIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMiwgNCwgNCwgMiwgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ4LCAzLCAyLCA4LCAyLCA0LCA0LCAyLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEwLCA0LCA5LCAxMCwgNiwgNCwgMTEsIDIsIDMsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgOCwgMiwgMiwgOCwgMTEsIDQsIDksIDEwLCA0LCAxMCwgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAxMSwgMiwgMCwgMSwgNiwgMCwgNiwgNCwgNiwgMSwgMTAsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgNCwgMSwgNiwgMSwgMTAsIDQsIDgsIDEsIDIsIDEsIDExLCA4LCAxMSwgMSwgLSAxLFxuXHQ5LCA2LCA0LCA5LCAzLCA2LCA5LCAxLCAzLCAxMSwgNiwgMywgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ4LCAxMSwgMSwgOCwgMSwgMCwgMTEsIDYsIDEsIDksIDEsIDQsIDYsIDQsIDEsIC0gMSxcblx0MywgMTEsIDYsIDMsIDYsIDAsIDAsIDYsIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgNCwgOCwgMTEsIDYsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NywgMTAsIDYsIDcsIDgsIDEwLCA4LCA5LCAxMCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCA3LCAzLCAwLCAxMCwgNywgMCwgOSwgMTAsIDYsIDcsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEwLCA2LCA3LCAxLCAxMCwgNywgMSwgNywgOCwgMSwgOCwgMCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMCwgNiwgNywgMTAsIDcsIDEsIDEsIDcsIDMsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgMiwgNiwgMSwgNiwgOCwgMSwgOCwgOSwgOCwgNiwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQyLCA2LCA5LCAyLCA5LCAxLCA2LCA3LCA5LCAwLCA5LCAzLCA3LCAzLCA5LCAtIDEsXG5cdDcsIDgsIDAsIDcsIDAsIDYsIDYsIDAsIDIsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NywgMywgMiwgNiwgNywgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQyLCAzLCAxMSwgMTAsIDYsIDgsIDEwLCA4LCA5LCA4LCA2LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDIsIDAsIDcsIDIsIDcsIDExLCAwLCA5LCA3LCA2LCA3LCAxMCwgOSwgMTAsIDcsIC0gMSxcblx0MSwgOCwgMCwgMSwgNywgOCwgMSwgMTAsIDcsIDYsIDcsIDEwLCAyLCAzLCAxMSwgLSAxLFxuXHQxMSwgMiwgMSwgMTEsIDEsIDcsIDEwLCA2LCAxLCA2LCA3LCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDgsIDksIDYsIDgsIDYsIDcsIDksIDEsIDYsIDExLCA2LCAzLCAxLCAzLCA2LCAtIDEsXG5cdDAsIDksIDEsIDExLCA2LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDcsIDgsIDAsIDcsIDAsIDYsIDMsIDExLCAwLCAxMSwgNiwgMCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ3LCAxMSwgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ3LCA2LCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAwLCA4LCAxMSwgNywgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCAxLCA5LCAxMSwgNywgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ4LCAxLCA5LCA4LCAzLCAxLCAxMSwgNywgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMCwgMSwgMiwgNiwgMTEsIDcsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgMiwgMTAsIDMsIDAsIDgsIDYsIDExLCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDIsIDksIDAsIDIsIDEwLCA5LCA2LCAxMSwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ2LCAxMSwgNywgMiwgMTAsIDMsIDEwLCA4LCAzLCAxMCwgOSwgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ3LCAyLCAzLCA2LCAyLCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDcsIDAsIDgsIDcsIDYsIDAsIDYsIDIsIDAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MiwgNywgNiwgMiwgMywgNywgMCwgMSwgOSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCA2LCAyLCAxLCA4LCA2LCAxLCA5LCA4LCA4LCA3LCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEwLCA3LCA2LCAxMCwgMSwgNywgMSwgMywgNywgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMCwgNywgNiwgMSwgNywgMTAsIDEsIDgsIDcsIDEsIDAsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMywgNywgMCwgNywgMTAsIDAsIDEwLCA5LCA2LCAxMCwgNywgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ3LCA2LCAxMCwgNywgMTAsIDgsIDgsIDEwLCA5LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDYsIDgsIDQsIDExLCA4LCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDYsIDExLCAzLCAwLCA2LCAwLCA0LCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDgsIDYsIDExLCA4LCA0LCA2LCA5LCAwLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDQsIDYsIDksIDYsIDMsIDksIDMsIDEsIDExLCAzLCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDYsIDgsIDQsIDYsIDExLCA4LCAyLCAxMCwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCAyLCAxMCwgMywgMCwgMTEsIDAsIDYsIDExLCAwLCA0LCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDQsIDExLCA4LCA0LCA2LCAxMSwgMCwgMiwgOSwgMiwgMTAsIDksIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MTAsIDksIDMsIDEwLCAzLCAyLCA5LCA0LCAzLCAxMSwgMywgNiwgNCwgNiwgMywgLSAxLFxuXHQ4LCAyLCAzLCA4LCA0LCAyLCA0LCA2LCAyLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDQsIDIsIDQsIDYsIDIsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgOSwgMCwgMiwgMywgNCwgMiwgNCwgNiwgNCwgMywgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCA5LCA0LCAxLCA0LCAyLCAyLCA0LCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDgsIDEsIDMsIDgsIDYsIDEsIDgsIDQsIDYsIDYsIDEwLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEwLCAxLCAwLCAxMCwgMCwgNiwgNiwgMCwgNCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCA2LCAzLCA0LCAzLCA4LCA2LCAxMCwgMywgMCwgMywgOSwgMTAsIDksIDMsIC0gMSxcblx0MTAsIDksIDQsIDYsIDEwLCA0LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDQsIDksIDUsIDcsIDYsIDExLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDgsIDMsIDQsIDksIDUsIDExLCA3LCA2LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDAsIDEsIDUsIDQsIDAsIDcsIDYsIDExLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDExLCA3LCA2LCA4LCAzLCA0LCAzLCA1LCA0LCAzLCAxLCA1LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDUsIDQsIDEwLCAxLCAyLCA3LCA2LCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ2LCAxMSwgNywgMSwgMiwgMTAsIDAsIDgsIDMsIDQsIDksIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NywgNiwgMTEsIDUsIDQsIDEwLCA0LCAyLCAxMCwgNCwgMCwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCA0LCA4LCAzLCA1LCA0LCAzLCAyLCA1LCAxMCwgNSwgMiwgMTEsIDcsIDYsIC0gMSxcblx0NywgMiwgMywgNywgNiwgMiwgNSwgNCwgOSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA1LCA0LCAwLCA4LCA2LCAwLCA2LCAyLCA2LCA4LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDYsIDIsIDMsIDcsIDYsIDEsIDUsIDAsIDUsIDQsIDAsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgMiwgOCwgNiwgOCwgNywgMiwgMSwgOCwgNCwgOCwgNSwgMSwgNSwgOCwgLSAxLFxuXHQ5LCA1LCA0LCAxMCwgMSwgNiwgMSwgNywgNiwgMSwgMywgNywgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCA2LCAxMCwgMSwgNywgNiwgMSwgMCwgNywgOCwgNywgMCwgOSwgNSwgNCwgLSAxLFxuXHQ0LCAwLCAxMCwgNCwgMTAsIDUsIDAsIDMsIDEwLCA2LCAxMCwgNywgMywgNywgMTAsIC0gMSxcblx0NywgNiwgMTAsIDcsIDEwLCA4LCA1LCA0LCAxMCwgNCwgOCwgMTAsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgOSwgNSwgNiwgMTEsIDksIDExLCA4LCA5LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDYsIDExLCAwLCA2LCAzLCAwLCA1LCA2LCAwLCA5LCA1LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDExLCA4LCAwLCA1LCAxMSwgMCwgMSwgNSwgNSwgNiwgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NiwgMTEsIDMsIDYsIDMsIDUsIDUsIDMsIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgMiwgMTAsIDksIDUsIDExLCA5LCAxMSwgOCwgMTEsIDUsIDYsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMTEsIDMsIDAsIDYsIDExLCAwLCA5LCA2LCA1LCA2LCA5LCAxLCAyLCAxMCwgLSAxLFxuXHQxMSwgOCwgNSwgMTEsIDUsIDYsIDgsIDAsIDUsIDEwLCA1LCAyLCAwLCAyLCA1LCAtIDEsXG5cdDYsIDExLCAzLCA2LCAzLCA1LCAyLCAxMCwgMywgMTAsIDUsIDMsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NSwgOCwgOSwgNSwgMiwgOCwgNSwgNiwgMiwgMywgOCwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA1LCA2LCA5LCA2LCAwLCAwLCA2LCAyLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDUsIDgsIDEsIDgsIDAsIDUsIDYsIDgsIDMsIDgsIDIsIDYsIDIsIDgsIC0gMSxcblx0MSwgNSwgNiwgMiwgMSwgNiwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxLCAzLCA2LCAxLCA2LCAxMCwgMywgOCwgNiwgNSwgNiwgOSwgOCwgOSwgNiwgLSAxLFxuXHQxMCwgMSwgMCwgMTAsIDAsIDYsIDksIDUsIDAsIDUsIDYsIDAsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgMywgOCwgNSwgNiwgMTAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MTAsIDUsIDYsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MTEsIDUsIDEwLCA3LCA1LCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMSwgNSwgMTAsIDExLCA3LCA1LCA4LCAzLCAwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDExLCA3LCA1LCAxMCwgMTEsIDEsIDksIDAsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MTAsIDcsIDUsIDEwLCAxMSwgNywgOSwgOCwgMSwgOCwgMywgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMSwgMSwgMiwgMTEsIDcsIDEsIDcsIDUsIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgOCwgMywgMSwgMiwgNywgMSwgNywgNSwgNywgMiwgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgNywgNSwgOSwgMiwgNywgOSwgMCwgMiwgMiwgMTEsIDcsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NywgNSwgMiwgNywgMiwgMTEsIDUsIDksIDIsIDMsIDIsIDgsIDksIDgsIDIsIC0gMSxcblx0MiwgNSwgMTAsIDIsIDMsIDUsIDMsIDcsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OCwgMiwgMCwgOCwgNSwgMiwgOCwgNywgNSwgMTAsIDIsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgMCwgMSwgNSwgMTAsIDMsIDUsIDMsIDcsIDMsIDEwLCAyLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDgsIDIsIDksIDIsIDEsIDgsIDcsIDIsIDEwLCAyLCA1LCA3LCA1LCAyLCAtIDEsXG5cdDEsIDMsIDUsIDMsIDcsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgOCwgNywgMCwgNywgMSwgMSwgNywgNSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCAwLCAzLCA5LCAzLCA1LCA1LCAzLCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDgsIDcsIDUsIDksIDcsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NSwgOCwgNCwgNSwgMTAsIDgsIDEwLCAxMSwgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ1LCAwLCA0LCA1LCAxMSwgMCwgNSwgMTAsIDExLCAxMSwgMywgMCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCAxLCA5LCA4LCA0LCAxMCwgOCwgMTAsIDExLCAxMCwgNCwgNSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMCwgMTEsIDQsIDEwLCA0LCA1LCAxMSwgMywgNCwgOSwgNCwgMSwgMywgMSwgNCwgLSAxLFxuXHQyLCA1LCAxLCAyLCA4LCA1LCAyLCAxMSwgOCwgNCwgNSwgOCwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCA0LCAxMSwgMCwgMTEsIDMsIDQsIDUsIDExLCAyLCAxMSwgMSwgNSwgMSwgMTEsIC0gMSxcblx0MCwgMiwgNSwgMCwgNSwgOSwgMiwgMTEsIDUsIDQsIDUsIDgsIDExLCA4LCA1LCAtIDEsXG5cdDksIDQsIDUsIDIsIDExLCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDIsIDUsIDEwLCAzLCA1LCAyLCAzLCA0LCA1LCAzLCA4LCA0LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDUsIDEwLCAyLCA1LCAyLCA0LCA0LCAyLCAwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDMsIDEwLCAyLCAzLCA1LCAxMCwgMywgOCwgNSwgNCwgNSwgOCwgMCwgMSwgOSwgLSAxLFxuXHQ1LCAxMCwgMiwgNSwgMiwgNCwgMSwgOSwgMiwgOSwgNCwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ4LCA0LCA1LCA4LCA1LCAzLCAzLCA1LCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDQsIDUsIDEsIDAsIDUsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OCwgNCwgNSwgOCwgNSwgMywgOSwgMCwgNSwgMCwgMywgNSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA0LCA1LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDQsIDExLCA3LCA0LCA5LCAxMSwgOSwgMTAsIDExLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDgsIDMsIDQsIDksIDcsIDksIDExLCA3LCA5LCAxMCwgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MSwgMTAsIDExLCAxLCAxMSwgNCwgMSwgNCwgMCwgNywgNCwgMTEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MywgMSwgNCwgMywgNCwgOCwgMSwgMTAsIDQsIDcsIDQsIDExLCAxMCwgMTEsIDQsIC0gMSxcblx0NCwgMTEsIDcsIDksIDExLCA0LCA5LCAyLCAxMSwgOSwgMSwgMiwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ5LCA3LCA0LCA5LCAxMSwgNywgOSwgMSwgMTEsIDIsIDExLCAxLCAwLCA4LCAzLCAtIDEsXG5cdDExLCA3LCA0LCAxMSwgNCwgMiwgMiwgNCwgMCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQxMSwgNywgNCwgMTEsIDQsIDIsIDgsIDMsIDQsIDMsIDIsIDQsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MiwgOSwgMTAsIDIsIDcsIDksIDIsIDMsIDcsIDcsIDQsIDksIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgMTAsIDcsIDksIDcsIDQsIDEwLCAyLCA3LCA4LCA3LCAwLCAyLCAwLCA3LCAtIDEsXG5cdDMsIDcsIDEwLCAzLCAxMCwgMiwgNywgNCwgMTAsIDEsIDEwLCAwLCA0LCAwLCAxMCwgLSAxLFxuXHQxLCAxMCwgMiwgOCwgNywgNCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCA5LCAxLCA0LCAxLCA3LCA3LCAxLCAzLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDQsIDksIDEsIDQsIDEsIDcsIDAsIDgsIDEsIDgsIDcsIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0NCwgMCwgMywgNywgNCwgMywgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQ0LCA4LCA3LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDksIDEwLCA4LCAxMCwgMTEsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MywgMCwgOSwgMywgOSwgMTEsIDExLCA5LCAxMCwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCAxLCAxMCwgMCwgMTAsIDgsIDgsIDEwLCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAxLCAxMCwgMTEsIDMsIDEwLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDIsIDExLCAxLCAxMSwgOSwgOSwgMTEsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MywgMCwgOSwgMywgOSwgMTEsIDEsIDIsIDksIDIsIDExLCA5LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDAsIDIsIDExLCA4LCAwLCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQzLCAyLCAxMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQyLCAzLCA4LCAyLCA4LCAxMCwgMTAsIDgsIDksIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0OSwgMTAsIDIsIDAsIDksIDIsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MiwgMywgOCwgMiwgOCwgMTAsIDAsIDEsIDgsIDEsIDEwLCA4LCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDEwLCAyLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdDEsIDMsIDgsIDksIDEsIDgsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSxcblx0MCwgOSwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLFxuXHQwLCAzLCA4LCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsXG5cdC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSBdICk7XG4iLCIvKipcbiAqIFR3ZWVuLmpzIC0gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdlZW5qcy90d2Vlbi5qcy9ncmFwaHMvY29udHJpYnV0b3JzIGZvciB0aGUgZnVsbCBsaXN0IG9mIGNvbnRyaWJ1dG9ycy5cbiAqIFRoYW5rIHlvdSBhbGwsIHlvdSdyZSBhd2Vzb21lIVxuICovXG5cblxudmFyIF9Hcm91cCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5fdHdlZW5zID0ge307XG5cdHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlID0ge307XG59O1xuXG5fR3JvdXAucHJvdG90eXBlID0ge1xuXHRnZXRBbGw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90d2VlbnMpLm1hcChmdW5jdGlvbiAodHdlZW5JZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3R3ZWVuc1t0d2VlbklkXTtcblx0XHR9LmJpbmQodGhpcykpO1xuXG5cdH0sXG5cblx0cmVtb3ZlQWxsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl90d2VlbnMgPSB7fTtcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKHR3ZWVuKSB7XG5cblx0XHR0aGlzLl90d2VlbnNbdHdlZW4uZ2V0SWQoKV0gPSB0d2Vlbjtcblx0XHR0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZVt0d2Vlbi5nZXRJZCgpXSA9IHR3ZWVuO1xuXG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiAodHdlZW4pIHtcblxuXHRcdGRlbGV0ZSB0aGlzLl90d2VlbnNbdHdlZW4uZ2V0SWQoKV07XG5cdFx0ZGVsZXRlIHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlW3R3ZWVuLmdldElkKCldO1xuXG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAodGltZSwgcHJlc2VydmUpIHtcblxuXHRcdHZhciB0d2VlbklkcyA9IE9iamVjdC5rZXlzKHRoaXMuX3R3ZWVucyk7XG5cblx0XHRpZiAodHdlZW5JZHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGltZSA9IHRpbWUgIT09IHVuZGVmaW5lZCA/IHRpbWUgOiBUV0VFTi5ub3coKTtcblxuXHRcdC8vIFR3ZWVucyBhcmUgdXBkYXRlZCBpbiBcImJhdGNoZXNcIi4gSWYgeW91IGFkZCBhIG5ldyB0d2VlbiBkdXJpbmcgYW4gdXBkYXRlLCB0aGVuIHRoZVxuXHRcdC8vIG5ldyB0d2VlbiB3aWxsIGJlIHVwZGF0ZWQgaW4gdGhlIG5leHQgYmF0Y2guXG5cdFx0Ly8gSWYgeW91IHJlbW92ZSBhIHR3ZWVuIGR1cmluZyBhbiB1cGRhdGUsIGl0IG1heSBvciBtYXkgbm90IGJlIHVwZGF0ZWQuIEhvd2V2ZXIsXG5cdFx0Ly8gaWYgdGhlIHJlbW92ZWQgdHdlZW4gd2FzIGFkZGVkIGR1cmluZyB0aGUgY3VycmVudCBiYXRjaCwgdGhlbiBpdCB3aWxsIG5vdCBiZSB1cGRhdGVkLlxuXHRcdHdoaWxlICh0d2Vlbklkcy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0aGlzLl90d2VlbnNBZGRlZER1cmluZ1VwZGF0ZSA9IHt9O1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHR3ZWVuSWRzLmxlbmd0aDsgaSsrKSB7XG5cblx0XHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fdHdlZW5zW3R3ZWVuSWRzW2ldXTtcblxuXHRcdFx0XHRpZiAodHdlZW4gJiYgdHdlZW4udXBkYXRlKHRpbWUpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdHR3ZWVuLl9pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICghcHJlc2VydmUpIHtcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl90d2VlbnNbdHdlZW5JZHNbaV1dO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0d2VlbklkcyA9IE9iamVjdC5rZXlzKHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG59O1xuXG52YXIgVFdFRU4gPSBuZXcgX0dyb3VwKCk7XG5cblRXRUVOLkdyb3VwID0gX0dyb3VwO1xuVFdFRU4uX25leHRJZCA9IDA7XG5UV0VFTi5uZXh0SWQgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBUV0VFTi5fbmV4dElkKys7XG59O1xuXG5cbi8vIEluY2x1ZGUgYSBwZXJmb3JtYW5jZS5ub3cgcG9seWZpbGwuXG4vLyBJbiBub2RlLmpzLCB1c2UgcHJvY2Vzcy5ocnRpbWUuXG5pZiAodHlwZW9mIChzZWxmKSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIChwcm9jZXNzKSAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ocnRpbWUpIHtcblx0VFdFRU4ubm93ID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcblxuXHRcdC8vIENvbnZlcnQgW3NlY29uZHMsIG5hbm9zZWNvbmRzXSB0byBtaWxsaXNlY29uZHMuXG5cdFx0cmV0dXJuIHRpbWVbMF0gKiAxMDAwICsgdGltZVsxXSAvIDEwMDAwMDA7XG5cdH07XG59XG4vLyBJbiBhIGJyb3dzZXIsIHVzZSBzZWxmLnBlcmZvcm1hbmNlLm5vdyBpZiBpdCBpcyBhdmFpbGFibGUuXG5lbHNlIGlmICh0eXBlb2YgKHNlbGYpICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgc2VsZi5wZXJmb3JtYW5jZSAhPT0gdW5kZWZpbmVkICYmXG5cdFx0IHNlbGYucGVyZm9ybWFuY2Uubm93ICE9PSB1bmRlZmluZWQpIHtcblx0Ly8gVGhpcyBtdXN0IGJlIGJvdW5kLCBiZWNhdXNlIGRpcmVjdGx5IGFzc2lnbmluZyB0aGlzIGZ1bmN0aW9uXG5cdC8vIGxlYWRzIHRvIGFuIGludm9jYXRpb24gZXhjZXB0aW9uIGluIENocm9tZS5cblx0VFdFRU4ubm93ID0gc2VsZi5wZXJmb3JtYW5jZS5ub3cuYmluZChzZWxmLnBlcmZvcm1hbmNlKTtcbn1cbi8vIFVzZSBEYXRlLm5vdyBpZiBpdCBpcyBhdmFpbGFibGUuXG5lbHNlIGlmIChEYXRlLm5vdyAhPT0gdW5kZWZpbmVkKSB7XG5cdFRXRUVOLm5vdyA9IERhdGUubm93O1xufVxuLy8gT3RoZXJ3aXNlLCB1c2UgJ25ldyBEYXRlKCkuZ2V0VGltZSgpJy5cbmVsc2Uge1xuXHRUV0VFTi5ub3cgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR9O1xufVxuXG5cblRXRUVOLlR3ZWVuID0gZnVuY3Rpb24gKG9iamVjdCwgZ3JvdXApIHtcblx0dGhpcy5fb2JqZWN0ID0gb2JqZWN0O1xuXHR0aGlzLl92YWx1ZXNTdGFydCA9IHt9O1xuXHR0aGlzLl92YWx1ZXNFbmQgPSB7fTtcblx0dGhpcy5fdmFsdWVzU3RhcnRSZXBlYXQgPSB7fTtcblx0dGhpcy5fZHVyYXRpb24gPSAxMDAwO1xuXHR0aGlzLl9yZXBlYXQgPSAwO1xuXHR0aGlzLl9yZXBlYXREZWxheVRpbWUgPSB1bmRlZmluZWQ7XG5cdHRoaXMuX3lveW8gPSBmYWxzZTtcblx0dGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG5cdHRoaXMuX3JldmVyc2VkID0gZmFsc2U7XG5cdHRoaXMuX2RlbGF5VGltZSA9IDA7XG5cdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7XG5cdHRoaXMuX2Vhc2luZ0Z1bmN0aW9uID0gVFdFRU4uRWFzaW5nLkxpbmVhci5Ob25lO1xuXHR0aGlzLl9pbnRlcnBvbGF0aW9uRnVuY3Rpb24gPSBUV0VFTi5JbnRlcnBvbGF0aW9uLkxpbmVhcjtcblx0dGhpcy5fY2hhaW5lZFR3ZWVucyA9IFtdO1xuXHR0aGlzLl9vblN0YXJ0Q2FsbGJhY2sgPSBudWxsO1xuXHR0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuXHR0aGlzLl9vblVwZGF0ZUNhbGxiYWNrID0gbnVsbDtcblx0dGhpcy5fb25SZXBlYXRDYWxsYmFjayA9IG51bGw7XG5cdHRoaXMuX29uQ29tcGxldGVDYWxsYmFjayA9IG51bGw7XG5cdHRoaXMuX29uU3RvcENhbGxiYWNrID0gbnVsbDtcblx0dGhpcy5fZ3JvdXAgPSBncm91cCB8fCBUV0VFTjtcblx0dGhpcy5faWQgPSBUV0VFTi5uZXh0SWQoKTtcblxufTtcblxuVFdFRU4uVHdlZW4ucHJvdG90eXBlID0ge1xuXHRnZXRJZDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLl9pZDtcblx0fSxcblxuXHRpc1BsYXlpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5faXNQbGF5aW5nO1xuXHR9LFxuXG5cdHRvOiBmdW5jdGlvbiAocHJvcGVydGllcywgZHVyYXRpb24pIHtcblxuXHRcdHRoaXMuX3ZhbHVlc0VuZCA9IHByb3BlcnRpZXM7XG5cblx0XHRpZiAoZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbjtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGR1cmF0aW9uOiBmdW5jdGlvbiBkdXJhdGlvbihkKSB7XG5cdFx0dGhpcy5fZHVyYXRpb24gPSBkO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHN0YXJ0OiBmdW5jdGlvbiAodGltZSkge1xuXG5cdFx0dGhpcy5fZ3JvdXAuYWRkKHRoaXMpO1xuXG5cdFx0dGhpcy5faXNQbGF5aW5nID0gdHJ1ZTtcblxuXHRcdHRoaXMuX29uU3RhcnRDYWxsYmFja0ZpcmVkID0gZmFsc2U7XG5cblx0XHR0aGlzLl9zdGFydFRpbWUgPSB0aW1lICE9PSB1bmRlZmluZWQgPyB0eXBlb2YgdGltZSA9PT0gJ3N0cmluZycgPyBUV0VFTi5ub3coKSArIHBhcnNlRmxvYXQodGltZSkgOiB0aW1lIDogVFdFRU4ubm93KCk7XG5cdFx0dGhpcy5fc3RhcnRUaW1lICs9IHRoaXMuX2RlbGF5VGltZTtcblxuXHRcdGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMuX3ZhbHVlc0VuZCkge1xuXG5cdFx0XHQvLyBDaGVjayBpZiBhbiBBcnJheSB3YXMgcHJvdmlkZWQgYXMgcHJvcGVydHkgdmFsdWVcblx0XHRcdGlmICh0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldIGluc3RhbmNlb2YgQXJyYXkpIHtcblxuXHRcdFx0XHRpZiAodGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSBhIGxvY2FsIGNvcHkgb2YgdGhlIEFycmF5IHdpdGggdGhlIHN0YXJ0IHZhbHVlIGF0IHRoZSBmcm9udFxuXHRcdFx0XHR0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldID0gW3RoaXMuX29iamVjdFtwcm9wZXJ0eV1dLmNvbmNhdCh0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBgdG8oKWAgc3BlY2lmaWVzIGEgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0LFxuXHRcdFx0Ly8gd2Ugc2hvdWxkIG5vdCBzZXQgdGhhdCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0XG5cdFx0XHRpZiAodGhpcy5fb2JqZWN0W3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIHRoZSBzdGFydGluZyB2YWx1ZS5cblx0XHRcdHRoaXMuX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IHRoaXMuX29iamVjdFtwcm9wZXJ0eV07XG5cblx0XHRcdGlmICgodGhpcy5fdmFsdWVzU3RhcnRbcHJvcGVydHldIGluc3RhbmNlb2YgQXJyYXkpID09PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLl92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gKj0gMS4wOyAvLyBFbnN1cmVzIHdlJ3JlIHVzaW5nIG51bWJlcnMsIG5vdCBzdHJpbmdzXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSB8fCAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIXRoaXMuX2lzUGxheWluZykge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0dGhpcy5fZ3JvdXAucmVtb3ZlKHRoaXMpO1xuXHRcdHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0aWYgKHRoaXMuX29uU3RvcENhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHR0aGlzLl9vblN0b3BDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcENoYWluZWRUd2VlbnMoKTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy51cGRhdGUoSW5maW5pdHkpO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcENoYWluZWRUd2VlbnM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBudW1DaGFpbmVkVHdlZW5zID0gdGhpcy5fY2hhaW5lZFR3ZWVucy5sZW5ndGg7IGkgPCBudW1DaGFpbmVkVHdlZW5zOyBpKyspIHtcblx0XHRcdHRoaXMuX2NoYWluZWRUd2VlbnNbaV0uc3RvcCgpO1xuXHRcdH1cblxuXHR9LFxuXG5cdGdyb3VwOiBmdW5jdGlvbiAoZ3JvdXApIHtcblx0XHR0aGlzLl9ncm91cCA9IGdyb3VwO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGRlbGF5OiBmdW5jdGlvbiAoYW1vdW50KSB7XG5cblx0XHR0aGlzLl9kZWxheVRpbWUgPSBhbW91bnQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyZXBlYXQ6IGZ1bmN0aW9uICh0aW1lcykge1xuXG5cdFx0dGhpcy5fcmVwZWF0ID0gdGltZXM7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyZXBlYXREZWxheTogZnVuY3Rpb24gKGFtb3VudCkge1xuXG5cdFx0dGhpcy5fcmVwZWF0RGVsYXlUaW1lID0gYW1vdW50O1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0eW95bzogZnVuY3Rpb24gKHlveW8pIHtcblxuXHRcdHRoaXMuX3lveW8gPSB5b3lvO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZWFzaW5nOiBmdW5jdGlvbiAoZWFzaW5nRnVuY3Rpb24pIHtcblxuXHRcdHRoaXMuX2Vhc2luZ0Z1bmN0aW9uID0gZWFzaW5nRnVuY3Rpb247XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbkZ1bmN0aW9uKSB7XG5cblx0XHR0aGlzLl9pbnRlcnBvbGF0aW9uRnVuY3Rpb24gPSBpbnRlcnBvbGF0aW9uRnVuY3Rpb247XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjaGFpbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fY2hhaW5lZFR3ZWVucyA9IGFyZ3VtZW50cztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG9uU3RhcnQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0dGhpcy5fb25TdGFydENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvblVwZGF0ZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cblx0XHR0aGlzLl9vblVwZGF0ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvblJlcGVhdDogZnVuY3Rpb24gb25SZXBlYXQoY2FsbGJhY2spIHtcblxuXHRcdHRoaXMuX29uUmVwZWF0Q2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG9uQ29tcGxldGU6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0dGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvblN0b3A6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0dGhpcy5fb25TdG9wQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKHRpbWUpIHtcblxuXHRcdHZhciBwcm9wZXJ0eTtcblx0XHR2YXIgZWxhcHNlZDtcblx0XHR2YXIgdmFsdWU7XG5cblx0XHRpZiAodGltZSA8IHRoaXMuX3N0YXJ0VGltZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX29uU3RhcnRDYWxsYmFja0ZpcmVkID09PSBmYWxzZSkge1xuXG5cdFx0XHRpZiAodGhpcy5fb25TdGFydENhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuX29uU3RhcnRDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0ZWxhcHNlZCA9ICh0aW1lIC0gdGhpcy5fc3RhcnRUaW1lKSAvIHRoaXMuX2R1cmF0aW9uO1xuXHRcdGVsYXBzZWQgPSAodGhpcy5fZHVyYXRpb24gPT09IDAgfHwgZWxhcHNlZCA+IDEpID8gMSA6IGVsYXBzZWQ7XG5cblx0XHR2YWx1ZSA9IHRoaXMuX2Vhc2luZ0Z1bmN0aW9uKGVsYXBzZWQpO1xuXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiB0aGlzLl92YWx1ZXNFbmQpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgdXBkYXRlIHByb3BlcnRpZXMgdGhhdCBkbyBub3QgZXhpc3QgaW4gdGhlIHNvdXJjZSBvYmplY3Rcblx0XHRcdGlmICh0aGlzLl92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHN0YXJ0ID0gdGhpcy5fdmFsdWVzU3RhcnRbcHJvcGVydHldIHx8IDA7XG5cdFx0XHR2YXIgZW5kID0gdGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XTtcblxuXHRcdFx0aWYgKGVuZCBpbnN0YW5jZW9mIEFycmF5KSB7XG5cblx0XHRcdFx0dGhpcy5fb2JqZWN0W3Byb3BlcnR5XSA9IHRoaXMuX2ludGVycG9sYXRpb25GdW5jdGlvbihlbmQsIHZhbHVlKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBQYXJzZXMgcmVsYXRpdmUgZW5kIHZhbHVlcyB3aXRoIHN0YXJ0IGFzIGJhc2UgKGUuZy46ICsxMCwgLTMpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGVuZCkgPT09ICdzdHJpbmcnKSB7XG5cblx0XHRcdFx0XHRpZiAoZW5kLmNoYXJBdCgwKSA9PT0gJysnIHx8IGVuZC5jaGFyQXQoMCkgPT09ICctJykge1xuXHRcdFx0XHRcdFx0ZW5kID0gc3RhcnQgKyBwYXJzZUZsb2F0KGVuZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVuZCA9IHBhcnNlRmxvYXQoZW5kKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm90ZWN0IGFnYWluc3Qgbm9uIG51bWVyaWMgcHJvcGVydGllcy5cblx0XHRcdFx0aWYgKHR5cGVvZiAoZW5kKSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0XHR0aGlzLl9vYmplY3RbcHJvcGVydHldID0gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX29uVXBkYXRlQ2FsbGJhY2sgIT09IG51bGwpIHtcblx0XHRcdHRoaXMuX29uVXBkYXRlQ2FsbGJhY2sodGhpcy5fb2JqZWN0LCBlbGFwc2VkKTtcblx0XHR9XG5cblx0XHRpZiAoZWxhcHNlZCA9PT0gMSkge1xuXG5cdFx0XHRpZiAodGhpcy5fcmVwZWF0ID4gMCkge1xuXG5cdFx0XHRcdGlmIChpc0Zpbml0ZSh0aGlzLl9yZXBlYXQpKSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVwZWF0LS07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWFzc2lnbiBzdGFydGluZyB2YWx1ZXMsIHJlc3RhcnQgYnkgbWFraW5nIHN0YXJ0VGltZSA9IG5vd1xuXHRcdFx0XHRmb3IgKHByb3BlcnR5IGluIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0KSB7XG5cblx0XHRcdFx0XHRpZiAodHlwZW9mICh0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSArIHBhcnNlRmxvYXQodGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHRoaXMuX3lveW8pIHtcblx0XHRcdFx0XHRcdHZhciB0bXAgPSB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV07XG5cblx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG5cdFx0XHRcdFx0XHR0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldID0gdG1wO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX3lveW8pIHtcblx0XHRcdFx0XHR0aGlzLl9yZXZlcnNlZCA9ICF0aGlzLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLl9yZXBlYXREZWxheVRpbWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWUgKyB0aGlzLl9yZXBlYXREZWxheVRpbWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gdGltZSArIHRoaXMuX2RlbGF5VGltZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLl9vblJlcGVhdENhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5fb25SZXBlYXRDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKHRoaXMuX29uQ29tcGxldGVDYWxsYmFjayAhPT0gbnVsbCkge1xuXG5cdFx0XHRcdFx0dGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrKHRoaXMuX29iamVjdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IHRoaXMuX2NoYWluZWRUd2VlbnMubGVuZ3RoOyBpIDwgbnVtQ2hhaW5lZFR3ZWVuczsgaSsrKSB7XG5cdFx0XHRcdFx0Ly8gTWFrZSB0aGUgY2hhaW5lZCB0d2VlbnMgc3RhcnQgZXhhY3RseSBhdCB0aGUgdGltZSB0aGV5IHNob3VsZCxcblx0XHRcdFx0XHQvLyBldmVuIGlmIHRoZSBgdXBkYXRlKClgIG1ldGhvZCB3YXMgY2FsbGVkIHdheSBwYXN0IHRoZSBkdXJhdGlvbiBvZiB0aGUgdHdlZW5cblx0XHRcdFx0XHR0aGlzLl9jaGFpbmVkVHdlZW5zW2ldLnN0YXJ0KHRoaXMuX3N0YXJ0VGltZSArIHRoaXMuX2R1cmF0aW9uKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxufTtcblxuXG5UV0VFTi5FYXNpbmcgPSB7XG5cblx0TGluZWFyOiB7XG5cblx0XHROb25lOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gaztcblxuXHRcdH1cblxuXHR9LFxuXG5cdFF1YWRyYXRpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogaztcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogKDIgLSBrKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAtIDAuNSAqICgtLWsgKiAoayAtIDIpIC0gMSk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRDdWJpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogayAqIGs7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gLS1rICogayAqIGsgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAwLjUgKiBrICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoKGsgLT0gMikgKiBrICogayArIDIpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0UXVhcnRpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogayAqIGsgKiBrO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSAoLS1rICogayAqIGsgKiBrKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGsgKiBrICogaztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIC0gMC41ICogKChrIC09IDIpICogayAqIGsgKiBrIC0gMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRRdWludGljOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGsgKiBrICogayAqIGsgKiBrO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIC0tayAqIGsgKiBrICogayAqIGsgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAwLjUgKiBrICogayAqIGsgKiBrICogaztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDAuNSAqICgoayAtPSAyKSAqIGsgKiBrICogayAqIGsgKyAyKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFNpbnVzb2lkYWw6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gMSAtIE1hdGguY29zKGsgKiBNYXRoLlBJIC8gMik7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5zaW4oayAqIE1hdGguUEkgLyAyKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdEV4cG9uZW50aWFsOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGsgPT09IDAgPyAwIDogTWF0aC5wb3coMTAyNCwgayAtIDEpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGsgPT09IDEgPyAxIDogMSAtIE1hdGgucG93KDIsIC0gMTAgKiBrKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKGsgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAwLjUgKiBNYXRoLnBvdygxMDI0LCBrIC0gMSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoLSBNYXRoLnBvdygyLCAtIDEwICogKGsgLSAxKSkgKyAyKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdENpcmN1bGFyOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIGsgKiBrKTtcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLnNxcnQoMSAtICgtLWsgKiBrKSk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIC0gMC41ICogKE1hdGguc3FydCgxIC0gayAqIGspIC0gMSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAoayAtPSAyKSAqIGspICsgMSk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRFbGFzdGljOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKGsgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gLU1hdGgucG93KDIsIDEwICogKGsgLSAxKSkgKiBNYXRoLnNpbigoayAtIDEuMSkgKiA1ICogTWF0aC5QSSk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGsgPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBNYXRoLnBvdygyLCAtMTAgKiBrKSAqIE1hdGguc2luKChrIC0gMC4xKSAqIDUgKiBNYXRoLlBJKSArIDE7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoayA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0ayAqPSAyO1xuXG5cdFx0XHRpZiAoayA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIC0wLjUgKiBNYXRoLnBvdygyLCAxMCAqIChrIC0gMSkpICogTWF0aC5zaW4oKGsgLSAxLjEpICogNSAqIE1hdGguUEkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogTWF0aC5wb3coMiwgLTEwICogKGsgLSAxKSkgKiBNYXRoLnNpbigoayAtIDEuMSkgKiA1ICogTWF0aC5QSSkgKyAxO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0QmFjazoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHZhciBzID0gMS43MDE1ODtcblxuXHRcdFx0cmV0dXJuIGsgKiBrICogKChzICsgMSkgKiBrIC0gcyk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cblx0XHRcdHJldHVybiAtLWsgKiBrICogKChzICsgMSkgKiBrICsgcykgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHR2YXIgcyA9IDEuNzAxNTggKiAxLjUyNTtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogKGsgKiBrICogKChzICsgMSkgKiBrIC0gcykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKChrIC09IDIpICogayAqICgocyArIDEpICogayArIHMpICsgMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRCb3VuY2U6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gMSAtIFRXRUVOLkVhc2luZy5Cb3VuY2UuT3V0KDEgLSBrKTtcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrIDwgKDEgLyAyLjc1KSkge1xuXHRcdFx0XHRyZXR1cm4gNy41NjI1ICogayAqIGs7XG5cdFx0XHR9IGVsc2UgaWYgKGsgPCAoMiAvIDIuNzUpKSB7XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAoayAtPSAoMS41IC8gMi43NSkpICogayArIDAuNzU7XG5cdFx0XHR9IGVsc2UgaWYgKGsgPCAoMi41IC8gMi43NSkpIHtcblx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIChrIC09ICgyLjI1IC8gMi43NSkpICogayArIDAuOTM3NTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAoayAtPSAoMi42MjUgLyAyLjc1KSkgKiBrICsgMC45ODQzNzU7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrIDwgMC41KSB7XG5cdFx0XHRcdHJldHVybiBUV0VFTi5FYXNpbmcuQm91bmNlLkluKGsgKiAyKSAqIDAuNTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFRXRUVOLkVhc2luZy5Cb3VuY2UuT3V0KGsgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG5cblx0XHR9XG5cblx0fVxuXG59O1xuXG5UV0VFTi5JbnRlcnBvbGF0aW9uID0ge1xuXG5cdExpbmVhcjogZnVuY3Rpb24gKHYsIGspIHtcblxuXHRcdHZhciBtID0gdi5sZW5ndGggLSAxO1xuXHRcdHZhciBmID0gbSAqIGs7XG5cdFx0dmFyIGkgPSBNYXRoLmZsb29yKGYpO1xuXHRcdHZhciBmbiA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuTGluZWFyO1xuXG5cdFx0aWYgKGsgPCAwKSB7XG5cdFx0XHRyZXR1cm4gZm4odlswXSwgdlsxXSwgZik7XG5cdFx0fVxuXG5cdFx0aWYgKGsgPiAxKSB7XG5cdFx0XHRyZXR1cm4gZm4odlttXSwgdlttIC0gMV0sIG0gLSBmKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZm4odltpXSwgdltpICsgMSA+IG0gPyBtIDogaSArIDFdLCBmIC0gaSk7XG5cblx0fSxcblxuXHRCZXppZXI6IGZ1bmN0aW9uICh2LCBrKSB7XG5cblx0XHR2YXIgYiA9IDA7XG5cdFx0dmFyIG4gPSB2Lmxlbmd0aCAtIDE7XG5cdFx0dmFyIHB3ID0gTWF0aC5wb3c7XG5cdFx0dmFyIGJuID0gVFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5CZXJuc3RlaW47XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBuOyBpKyspIHtcblx0XHRcdGIgKz0gcHcoMSAtIGssIG4gLSBpKSAqIHB3KGssIGkpICogdltpXSAqIGJuKG4sIGkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBiO1xuXG5cdH0sXG5cblx0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKHYsIGspIHtcblxuXHRcdHZhciBtID0gdi5sZW5ndGggLSAxO1xuXHRcdHZhciBmID0gbSAqIGs7XG5cdFx0dmFyIGkgPSBNYXRoLmZsb29yKGYpO1xuXHRcdHZhciBmbiA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuQ2F0bXVsbFJvbTtcblxuXHRcdGlmICh2WzBdID09PSB2W21dKSB7XG5cblx0XHRcdGlmIChrIDwgMCkge1xuXHRcdFx0XHRpID0gTWF0aC5mbG9vcihmID0gbSAqICgxICsgaykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm4odlsoaSAtIDEgKyBtKSAlIG1dLCB2W2ldLCB2WyhpICsgMSkgJSBtXSwgdlsoaSArIDIpICUgbV0sIGYgLSBpKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmIChrIDwgMCkge1xuXHRcdFx0XHRyZXR1cm4gdlswXSAtIChmbih2WzBdLCB2WzBdLCB2WzFdLCB2WzFdLCAtZikgLSB2WzBdKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGsgPiAxKSB7XG5cdFx0XHRcdHJldHVybiB2W21dIC0gKGZuKHZbbV0sIHZbbV0sIHZbbSAtIDFdLCB2W20gLSAxXSwgZiAtIG0pIC0gdlttXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbih2W2kgPyBpIC0gMSA6IDBdLCB2W2ldLCB2W20gPCBpICsgMSA/IG0gOiBpICsgMV0sIHZbbSA8IGkgKyAyID8gbSA6IGkgKyAyXSwgZiAtIGkpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0VXRpbHM6IHtcblxuXHRcdExpbmVhcjogZnVuY3Rpb24gKHAwLCBwMSwgdCkge1xuXG5cdFx0XHRyZXR1cm4gKHAxIC0gcDApICogdCArIHAwO1xuXG5cdFx0fSxcblxuXHRcdEJlcm5zdGVpbjogZnVuY3Rpb24gKG4sIGkpIHtcblxuXHRcdFx0dmFyIGZjID0gVFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5GYWN0b3JpYWw7XG5cblx0XHRcdHJldHVybiBmYyhuKSAvIGZjKGkpIC8gZmMobiAtIGkpO1xuXG5cdFx0fSxcblxuXHRcdEZhY3RvcmlhbDogKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIGEgPSBbMV07XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiAobikge1xuXG5cdFx0XHRcdHZhciBzID0gMTtcblxuXHRcdFx0XHRpZiAoYVtuXSkge1xuXHRcdFx0XHRcdHJldHVybiBhW25dO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IG47IGkgPiAxOyBpLS0pIHtcblx0XHRcdFx0XHRzICo9IGk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhW25dID0gcztcblx0XHRcdFx0cmV0dXJuIHM7XG5cblx0XHRcdH07XG5cblx0XHR9KSgpLFxuXG5cdFx0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKHAwLCBwMSwgcDIsIHAzLCB0KSB7XG5cblx0XHRcdHZhciB2MCA9IChwMiAtIHAwKSAqIDAuNTtcblx0XHRcdHZhciB2MSA9IChwMyAtIHAxKSAqIDAuNTtcblx0XHRcdHZhciB0MiA9IHQgKiB0O1xuXHRcdFx0dmFyIHQzID0gdCAqIHQyO1xuXG5cdFx0XHRyZXR1cm4gKDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEpICogdDMgKyAoLSAzICogcDEgKyAzICogcDIgLSAyICogdjAgLSB2MSkgKiB0MiArIHYwICogdCArIHAxO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLy8gVU1EIChVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24pXG4oZnVuY3Rpb24gKHJvb3QpIHtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBUV0VFTjtcblx0XHR9KTtcblxuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXG5cdFx0Ly8gTm9kZS5qc1xuXHRcdG1vZHVsZS5leHBvcnRzID0gVFdFRU47XG5cblx0fSBlbHNlIGlmIChyb290ICE9PSB1bmRlZmluZWQpIHtcblxuXHRcdC8vIEdsb2JhbCB2YXJpYWJsZVxuXHRcdHJvb3QuVFdFRU4gPSBUV0VFTjtcblxuXHR9XG5cbn0pKHRoaXMpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8vIFRoYW5rcyB0byBodHRwczovL2Jsb2cuZ21vcmsuaW4vZW50cnkvMjAxNy8xMi8xNi8wMTMxMjFcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmxldCBub2RlO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBEVVJBVElPTiA9IDkwO1xyXG4gICAgY29uc3QgV0lEVEggPSA1MTI7XHJcbiAgICBjb25zdCBIRUlHSFQgPSA1MTI7XHJcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IHJlcXVpcmUoJ3dlYnBhY2stZ2xzbC1sb2FkZXIhLi9nbHNsL3NvdW5kU2hhZGVyLmZyYWcnKTtcclxuXHJcbiAgICBjb25zdCBjdHggPSBuZXcgd2luZG93LkF1ZGlvQ29udGV4dCgpO1xyXG4gICAgbm9kZSA9IGN0eC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgIG5vZGUuY29ubmVjdChjdHguZGVzdGluYXRpb24pO1xyXG4gICAgbm9kZS5sb29wID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCB1bmlmb3JtcyA9IHtcclxuICAgICAgICBibG9ja09mZnNldDoge1xyXG4gICAgICAgICAgICB0eXBlOiAnZicsXHJcbiAgICAgICAgICAgIHZhbHVlOiAwLjBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNhbXBsZVJhdGU6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2YnLFxyXG4gICAgICAgICAgICB2YWx1ZTogY3R4LnNhbXBsZVJhdGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRleHR1cmU6IHtcclxuICAgICAgICAgICAgdHlwZTogJ3QnLFxyXG4gICAgICAgICAgICB2YWx1ZTogbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL2kuaW1ndXIuY29tL3VYTExIOUcuanBnJykgIC8vIFRPRE86IHRleHR1cmUgY2FuIG5vdCBiZSBhcHBsaWVkLlxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGF1ZGlvQnVmZmVyID0gY3R4LmNyZWF0ZUJ1ZmZlcigyLCBjdHguc2FtcGxlUmF0ZSAqIERVUkFUSU9OLCBjdHguc2FtcGxlUmF0ZSk7XHJcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XHJcbiAgICBjb25zdCB3Y3R4ID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xyXG5cclxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMiwgMik7XHJcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XHJcbiAgICAgICAgdW5pZm9ybXMsXHJcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxuICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoLTEsIDEsIDEsIC0xLCAwLjEsIDEwKTtcclxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgMSk7XHJcblxyXG4gICAgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuICAgIHNjZW5lLmFkZChtZXNoKTtcclxuXHJcbiAgICBjb25zdCBzYW1wbGVzID0gV0lEVEggKiBIRUlHSFQ7XHJcbiAgICBjb25zdCBudW1CbG9ja3MgPSAoY3R4LnNhbXBsZVJhdGUgKiBEVVJBVElPTikgLyBzYW1wbGVzO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldCA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChXSURUSCwgSEVJR0hUKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJsb2NrczsgaSsrKSB7XHJcbiAgICAgICAgdW5pZm9ybXMuYmxvY2tPZmZzZXQudmFsdWUgPSBpICogc2FtcGxlcyAvIGN0eC5zYW1wbGVSYXRlO1xyXG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhLCB0YXJnZXQsIHRydWUpO1xyXG5cclxuICAgICAgICBjb25zdCBwaXhlbHMgPSBuZXcgVWludDhBcnJheShXSURUSCAqIEhFSUdIVCAqIDQpO1xyXG4gICAgICAgIHdjdHgucmVhZFBpeGVscygwLCAwLCBXSURUSCwgSEVJR0hULCB3Y3R4LlJHQkEsIHdjdHguVU5TSUdORURfQllURSwgcGl4ZWxzKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb3V0cHV0RGF0YUwgPSBhdWRpb0J1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcclxuICAgICAgICBjb25zdCBvdXRwdXREYXRhUiA9IGF1ZGlvQnVmZmVyLmdldENoYW5uZWxEYXRhKDEpO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2FtcGxlczsgaisrKSB7XHJcbiAgICAgICAgICAgIG91dHB1dERhdGFMW2kgKiBzYW1wbGVzICsgal0gPSAocGl4ZWxzW2ogKiA0ICsgMF0gKyAyNTYgKiBwaXhlbHNbaiAqIDQgKyAxXSkgLyA2NTUzNSAqIDIgLSAxO1xyXG4gICAgICAgICAgICBvdXRwdXREYXRhUltpICogc2FtcGxlcyArIGpdID0gKHBpeGVsc1tqICogNCArIDJdICsgMjU2ICogcGl4ZWxzW2ogKiA0ICsgM10pIC8gNjU1MzUgKiAyIC0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgIG5vZGUuc3RhcnQoMCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3RvcCA9ICgpID0+IHtcclxuICAgIG5vZGUuc3RvcCgpO1xyXG59OyIsIm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXHJcXG51bmlmb3JtIGZsb2F0IHNhbXBsZVJhdGU7XFxyXFxudW5pZm9ybSBmbG9hdCBibG9ja09mZnNldDtcXHJcXG51bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlO1xcclxcblxcclxcbiNkZWZpbmUgQlBNIDE4MC4wXFxyXFxuI2RlZmluZSBQSSAzLjE0MTU5MjY1NFxcclxcblxcclxcbmZsb2F0IHRpbWVUb0JlYXQoZmxvYXQgdCkge1xcclxcbiAgICByZXR1cm4gdCAvIDYwLjAgKiBCUE07XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGJlYXRUb1RpbWUoZmxvYXQgYikge1xcclxcbiAgICByZXR1cm4gYiAvIEJQTSAqIDYwLjA7XFxyXFxufVxcclxcblxcclxcbi8vIFRPRE86IHRleHR1cmUgY2FuIG5vdCBiZSBsb2FkZWQuXFxyXFxudmVjNCBub2lzZShmbG9hdCBwaGFzZSkge1xcclxcbiAgICB2ZWMyIHV2ID0gcGhhc2UgLyB2ZWMyKDAuNTEyLCAwLjQ4Nyk7XFxyXFxuICAgIHJldHVybiAyLjAgKiB0ZXh0dXJlMkQodGV4dHVyZSwgdXYpIC0gMS4wO1xcclxcbn1cXHJcXG5cXHJcXG5mbG9hdCBzaW5lKGZsb2F0IHBoYXNlKSB7XFxyXFxuICAgIHJldHVybiBzaW4oUEkgKiAyLjAgKiBwaGFzZSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGtpY2soZmxvYXQgdGltZSkge1xcclxcbiAgICBmbG9hdCBhbXAgPSBleHAoLTUuMCAqIHRpbWUpO1xcclxcbiAgICBmbG9hdCBwaGFzZSA9IDMwLjAgKiB0aW1lIC0gMTAuMCAqIGV4cCgtMzAuMCAqIHRpbWUpO1xcclxcbiAgICByZXR1cm4gYW1wICogc2luZShwaGFzZSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IGNob3JkKGZsb2F0IG4pIHtcXHJcXG4gICAgcmV0dXJuIChcXHJcXG4gICAgICAgIG4gPCAxLjAgPyA1NS4wIDpcXHJcXG4gICAgICAgIG4gPCAyLjAgPyA1OC4wIDpcXHJcXG4gICAgICAgIG4gPCAzLjAgPyA2Mi4wIDpcXHJcXG4gICAgICAgICAgICAgICAgICA2NS4wXFxyXFxuICAgICk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IG5vdGVUb0ZyZXEoZmxvYXQgbikge1xcclxcbiAgICByZXR1cm4gNDQwLjAgKiBwb3coMi4wLCAobiAtIDY5LjApIC8gMTIuMCk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IHNhdyhmbG9hdCBwaGFzZSkge1xcclxcbiAgICByZXR1cm4gMi4wICogZnJhY3QocGhhc2UpIC0gMS4wO1xcclxcbn1cXHJcXG5cXHJcXG52ZWMyIHBhZChmbG9hdCBub3RlLCBmbG9hdCB0aW1lKSB7XFxyXFxuICAgIGZsb2F0IGZyZXEgPSBub3RlVG9GcmVxKG5vdGUpO1xcclxcbiAgICBmbG9hdCB2aWIgPSAwLjIgKiBzaW5lKDMuMCAqIHRpbWUpO1xcclxcbiAgICByZXR1cm4gdmVjMihcXHJcXG4gICAgICAgIHNhdyhmcmVxICogMC45OSAqIHRpbWUgKyB2aWIpLFxcclxcbiAgICAgICAgc2F3KGZyZXEgKiAxLjAxICogdGltZSArIHZpYilcXHJcXG4gICAgKTtcXHJcXG59XFxyXFxuXFxyXFxudmVjMiBtYWluU291bmQoZmxvYXQgdGltZSkge1xcclxcbiAgICB2ZWMyIHJldCA9IHZlYzIoMC4wKTtcXHJcXG4gICAgZmxvYXQgYmVhdCA9IHRpbWVUb0JlYXQodGltZSk7XFxyXFxuICAgIGZsb2F0IGtpY2tUaW1lID0gYmVhdFRvVGltZShtb2QoYmVhdCwgMS4zKSk7XFxyXFxuXFxyXFxuICAgIHJldCArPSBraWNrKGtpY2tUaW1lKTtcXHJcXG5cXHJcXG4gICAgZmxvYXQgc2lkZWNoYWluID0gc21vb3Roc3RlcCgwLjAsIDAuOCwga2lja1RpbWUpO1xcclxcbiAgICByZXQgKz0gc2lkZWNoYWluICogMC42ICogdmVjMihcXHJcXG4gICAgICAgICAgICBwYWQoY2hvcmQoMC4wKSwgdGltZSlcXHJcXG4gICAgICAgICAgKyBwYWQoY2hvcmQoMS4wKSwgdGltZSlcXHJcXG4gICAgICAgICAgKyBwYWQoY2hvcmQoMi4wKSwgdGltZSlcXHJcXG4gICAgICAgICAgKyBwYWQoY2hvcmQoMy4wKSwgdGltZSlcXHJcXG4gICAgICAgICkgLyA0LjA7XFxyXFxuXFxyXFxuICAgIGlmICh0aW1lID4gMi4wKSB7XFxyXFxuXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgcmV0dXJuIGNsYW1wKHJldCwgLTEuMCwgMS4wKTtcXHJcXG59XFxyXFxuXFxyXFxudm9pZCBtYWluKCkge1xcclxcbiAgICBmbG9hdCB0ID0gYmxvY2tPZmZzZXQgKyAoKGdsX0ZyYWdDb29yZC54IC0gMC41KSArIChnbF9GcmFnQ29vcmQueSAtIDAuNSkgKiA1MTIuMCkgLyBzYW1wbGVSYXRlO1xcclxcbiAgICB2ZWMyIHkgPSBtYWluU291bmQodCk7XFxyXFxuICAgIHZlYzIgdiAgPSBmbG9vcigoMC41ICsgMC41ICogeSkgKiA2NTUzNi4wKTtcXHJcXG4gICAgdmVjMiB2bCA9IG1vZCh2LCAyNTYuMCkgLyAyNTUuMDtcXHJcXG4gICAgdmVjMiB2aCA9IGZsb29yKHYgLyAyNTYuMCkgLyAyNTUuMDtcXHJcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCh2bC54LCB2aC54LCB2bC55LCB2aC55KTtcXHJcXG59XCIiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcclxuXHJcbmxldCBjb2xvcnNQZXJGYWNlID0gW1xyXG4gICAgMHgyMEQ4RDYsIDB4MzFBM0EyLCAweDUzQjlCOCwgMHg3MUJDQkIsIDB4QTNEQUQ5XHJcbl07XHJcblxyXG5leHBvcnQgY29uc3Qgb3JpZ2luYWxWZXJ0aWNlc0FycmF5ID0gW107XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlT2JqZWN0ID0gKHJhZGl1cywgcG9zaXRpb24pID0+IHtcclxuICAgIGxldCBvcmlnaW5hbFZlcnRpY2VzID0gW107XHJcbiAgICBsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuSWNvc2FoZWRyb25HZW9tZXRyeShyYWRpdXMpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGxldCBmYWNlID0gZ2VvbWV0cnkuZmFjZXNbaV07XHJcbiAgICAgICAgZmFjZS5jb2xvci5zZXRIZXgoY29sb3JzUGVyRmFjZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xvcnNQZXJGYWNlLmxlbmd0aCldKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBsZXQgdmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbaV07XHJcblxyXG4gICAgICAgIG9yaWdpbmFsVmVydGljZXMucHVzaCh7XHJcbiAgICAgICAgICAgIHg6IHZlcnRleC54LFxyXG4gICAgICAgICAgICB5OiB2ZXJ0ZXgueVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgdmVydGV4Q29sb3JzOiBUSFJFRS5GYWNlQ29sb3JzXHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgb2JqID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIG9iai5wb3NpdGlvbi54ID0gcG9zaXRpb24ueDtcclxuICAgIG9iai5wb3NpdGlvbi55ID0gcG9zaXRpb24ueTtcclxuICAgIG9iai5wb3NpdGlvbi56ID0gcG9zaXRpb24uejtcclxuICAgIG9iai5jYXN0U2hhZG93ID0gdHJ1ZTtcclxuXHJcbiAgICBvcmlnaW5hbFZlcnRpY2VzQXJyYXkucHVzaChvcmlnaW5hbFZlcnRpY2VzKTtcclxuXHJcbiAgICByZXR1cm4gb2JqO1xyXG59OyIsIm1vZHVsZS5leHBvcnRzID0gXCJ2YXJ5aW5nIHZlYzIgdlV2O1xcclxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcclxcblxcclxcbnZvaWQgbWFpbigpIHtcXHJcXG4gICAgdlV2ID0gdXY7XFxyXFxuXFxyXFxuICAgIHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxyXFxuXFxyXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxyXFxuICAgIHZOb3JtYWwgPSBub3JtYWxpemUobm9ybWFsTWF0cml4ICogbm9ybWFsKTtcXHJcXG59XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiI2lmZGVmIEdMX0VTXFxyXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxyXFxuI2VuZGlmXFxyXFxuXFxyXFxuI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxyXFxuXFxyXFxudW5pZm9ybSBmbG9hdCB0aW1lO1xcclxcbnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uO1xcclxcblxcclxcbnVuaWZvcm0gdmVjMyBkaXJMaWdodFBvcztcXHJcXG51bmlmb3JtIHZlYzMgZGlyTGlnaHRDb2xvcjtcXHJcXG51bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxyXFxuXFxyXFxudmFyeWluZyB2ZWMyIHZVdjtcXHJcXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXHJcXG5cXHJcXG5mbG9hdCBtYXAoZmxvYXQgdmFsdWUsIGZsb2F0IGJlZm9yZU1pbiwgZmxvYXQgYmVmb3JlTWF4LCBmbG9hdCBhZnRlck1pbiwgZmxvYXQgYWZ0ZXJNYXgpIHtcXHJcXG4gICAgcmV0dXJuIGFmdGVyTWluICsgKGFmdGVyTWF4IC0gYWZ0ZXJNaW4pICogKCh2YWx1ZSAtIGJlZm9yZU1pbikgLyAoYmVmb3JlTWF4IC0gYmVmb3JlTWluKSk7XFxyXFxufVxcclxcblxcclxcbnZvaWQgbWFpbiggdm9pZCApIHtcXHJcXG4gICAgdmVjMiB1diA9IDIuMCAqIHZVdiAtIDEuMDtcXHJcXG5cXHJcXG4gICAgZmxvYXQgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyA9IG1heChkb3Qobm9ybWFsaXplKHZOb3JtYWwpLCBkaXJMaWdodFBvcyksIDAuMCk7XFxyXFxuICAgIHZlYzMgbGlnaHRXZWlnaHRpbmcgPSBhbWJpZW50TGlnaHRDb2xvciArIGRpckxpZ2h0Q29sb3IgKiBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nO1xcclxcbi8vICAgIGZsb2F0IGludGVuc2l0eSA9IHNtb290aHN0ZXAoMC4wLCAxLjAsIHBvdyhsZW5ndGgobGlnaHRXZWlnaHRpbmcpLCAyMC4wKSk7XFxyXFxuXFxyXFxuICAgIHV2ICo9IDYuMDtcXHJcXG4gICAgdXYgPSBmcmFjdCh1dik7XFxyXFxuICAgIHV2IC09IDAuNTtcXHJcXG5cXHJcXG4gICAgdmVjMyBiYWxsQ29sb3IgPSB2ZWMzKDEuMCwgMC4wLCAwLjUpO1xcclxcbiAgICB2ZWMzIHNoYWRvd0NvbG9yID0gdmVjMygwLjAsIDEuMCwgMS4wKTtcXHJcXG4gICAgdmVjMyBjb2xvciA9IG1peChiYWxsQ29sb3IsIHNoYWRvd0NvbG9yLCBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nKTtcXHJcXG5cXHJcXG4gICAgY29sb3IgKz0gMC4xICsgMC4xICogYWJzKHNpbih0aW1lICogMi4wKSkgLyBsZW5ndGgodXYpO1xcclxcblxcclxcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLCAxLjApO1xcclxcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjaWZkZWYgR0xfRVNcXHJcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXHJcXG4jZW5kaWZcXHJcXG5cXHJcXG4jZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTlcXHJcXG5cXHJcXG51bmlmb3JtIGZsb2F0IHRpbWU7XFxyXFxudW5pZm9ybSB2ZWMyIHJlc29sdXRpb247XFxyXFxuXFxyXFxudW5pZm9ybSB2ZWMzIGRpckxpZ2h0UG9zO1xcclxcbnVuaWZvcm0gdmVjMyBkaXJMaWdodENvbG9yO1xcclxcbnVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXHJcXG5cXHJcXG52YXJ5aW5nIHZlYzIgdlV2O1xcclxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcclxcblxcclxcbmZsb2F0IG1hcChmbG9hdCB2YWx1ZSwgZmxvYXQgYmVmb3JlTWluLCBmbG9hdCBiZWZvcmVNYXgsIGZsb2F0IGFmdGVyTWluLCBmbG9hdCBhZnRlck1heCkge1xcclxcbiAgICByZXR1cm4gYWZ0ZXJNaW4gKyAoYWZ0ZXJNYXggLSBhZnRlck1pbikgKiAoKHZhbHVlIC0gYmVmb3JlTWluKSAvIChiZWZvcmVNYXggLSBiZWZvcmVNaW4pKTtcXHJcXG59XFxyXFxuXFxyXFxubWF0MiByb3RhdGUyZChmbG9hdCBhbmdsZSl7XFxyXFxuICAgIHJldHVybiBtYXQyKGNvcyhhbmdsZSksIC1zaW4oYW5nbGUpLCAgc2luKGFuZ2xlKSwgY29zKGFuZ2xlKSk7XFxyXFxufVxcclxcblxcclxcbmZsb2F0IG9ibGlxdWVMaW5lKHZlYzIgdXYpe1xcclxcbiAgICByZXR1cm4gc3RlcCgwLjYsIGZyYWN0KCh1di54ICsgdXYueSArIHRpbWUgKiAwLjgpICogMi4wKSk7XFxyXFxufVxcclxcblxcclxcbnZvaWQgbWFpbiggdm9pZCApIHtcXHJcXG4gICAgdmVjMiB1diA9IDIuMCAqIHZVdiAtIDEuMDtcXHJcXG5cXHJcXG4gICAgZmxvYXQgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyA9IG1heChkb3Qobm9ybWFsaXplKHZOb3JtYWwpLCBkaXJMaWdodFBvcyksIDAuMCk7XFxyXFxuICAgIHZlYzMgbGlnaHRXZWlnaHRpbmcgPSBhbWJpZW50TGlnaHRDb2xvciArIGRpckxpZ2h0Q29sb3IgKiBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nO1xcclxcblxcclxcbiAgICB2ZWMzIGJhbGxDb2xvciA9IHZlYzMoMC4xMzksMC4wMDAsMC40MjYpO1xcclxcbiAgICB2ZWMzIHNoYWRvd0NvbG9yID0gdmVjMygwLjAsIDEuMCwgMS4wKTtcXHJcXG4gICAgdmVjMyBjb2xvciA9IG1peChiYWxsQ29sb3IsIHNoYWRvd0NvbG9yLCBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nKTtcXHJcXG4gICAgY29sb3IgKz0gb2JsaXF1ZUxpbmUodXYgKiA0LjApO1xcclxcblxcclxcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLCAxLjApO1xcclxcbn1cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIjaWZkZWYgR0xfRVNcXHJcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXHJcXG4jZW5kaWZcXHJcXG5cXHJcXG4jZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTg5NzkzXFxyXFxuI2RlZmluZSBUV09fUEkgNi4yODNcXHJcXG5cXHJcXG51bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjtcXHJcXG51bmlmb3JtIGZsb2F0IHRpbWU7XFxyXFxuXFxyXFxudW5pZm9ybSB2ZWMzIGRpckxpZ2h0UG9zO1xcclxcbnVuaWZvcm0gdmVjMyBkaXJMaWdodENvbG9yO1xcclxcbnVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXHJcXG5cXHJcXG52YXJ5aW5nIHZlYzIgdlV2O1xcclxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcclxcblxcclxcbnZlYzIgZGlyZWN0aW9uYWxXYXZlTm9ybWFsKHZlYzIgdXYsIGZsb2F0IGFtcCwgdmVjMiBkaXIsIGZsb2F0IGZyZXEsIGZsb2F0IHNwZWVkLCBmbG9hdCBrKSB7XFxyXFxuICAgIGZsb2F0IGEgPSBkb3QodXYsIGRpcikgKiBmcmVxICsgdGltZSAqIHNwZWVkO1xcclxcbiAgICBmbG9hdCBiID0gNy41ICogayAqIGZyZXEgKiBhbXAgKiBwb3coKHNpbihhKSArIDEuMCkgKiAwLjUsIGsgLSAxLjApICogY29zKGEpO1xcclxcbiAgICByZXR1cm4gdmVjMihkaXIueCAqIGIsIGRpci55ICogYik7XFxyXFxufVxcclxcblxcclxcbnZlYzMgc3VtbWVkV2F2ZU5vcm1hbCh2ZWMyIHV2KSB7XFxyXFxuICAgIHZlYzIgc3VtID0gdmVjMigwLjApO1xcclxcbiAgICBzdW0gKz0gZGlyZWN0aW9uYWxXYXZlTm9ybWFsKHV2LCAwLjUsIG5vcm1hbGl6ZSh2ZWMyKDEuMCwgMS4wKSksIDUuMCwgMS41LCAxLjApO1xcclxcbiAgICBzdW0gKz0gZGlyZWN0aW9uYWxXYXZlTm9ybWFsKHV2LCAwLjI1LG5vcm1hbGl6ZSh2ZWMyKDEuNCwgMS4wKSksIDExLjAsIDIuNSwgMS41KTtcXHJcXG4gICAgc3VtICs9IGRpcmVjdGlvbmFsV2F2ZU5vcm1hbCh1diwgMC4xMjUsIG5vcm1hbGl6ZSh2ZWMyKC0wLjgsIC0xLjApKSwgMTAuMCwgMy4wLCAyLjApO1xcclxcbiAgICBzdW0gKz0gZGlyZWN0aW9uYWxXYXZlTm9ybWFsKHV2LCAwLjA2MjUsIG5vcm1hbGl6ZSh2ZWMyKDEuMywgMS4wKSksIDE1LjAsIDQuMCwgMi4wKTtcXHJcXG4gICAgc3VtICs9IGRpcmVjdGlvbmFsV2F2ZU5vcm1hbCh1diwgMC4wMzEyNSwgbm9ybWFsaXplKHZlYzIoLTEuNywgLTEuMCkpLCA1LjAsIDEuMCwgMy4wKTtcXHJcXG4gICAgcmV0dXJuIG5vcm1hbGl6ZSh2ZWMzKC1zdW0ueCwgLXN1bS55LCAxLjApKTtcXHJcXG59XFxyXFxuXFxyXFxudm9pZCBtYWluKCB2b2lkICkge1xcclxcbiAgICB2ZWMyIHV2ID0gMi4wICogdlV2IC0gMS4wO1xcclxcblxcclxcbiAgICBmbG9hdCBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nID0gbWF4KGRvdChub3JtYWxpemUodk5vcm1hbCksIGRpckxpZ2h0UG9zKSwgMC4wKTtcXHJcXG4gICAgdmVjMyBsaWdodFdlaWdodGluZyA9IGFtYmllbnRMaWdodENvbG9yICsgZGlyTGlnaHRDb2xvciAqIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmc7XFxyXFxuXFxyXFxuICAgIHZlYzMgbm9ybWFsID0gc3VtbWVkV2F2ZU5vcm1hbCh1diAqIDUuMCk7XFxyXFxuXFxyXFxuICAgIHZlYzMgY29sb3IgPSBtaXgodmVjMygwLjAsIDUuMCwgNS4wKSwgdmVjMygwLjIsIDEuMCwgMS4wKSwgZG90KG5vcm1hbCwgbm9ybWFsaXplKHZlYzMoMC4yLCAwLjIsIDAuNSkpKSAqIDAuNSk7XFxyXFxuICAgIGNvbG9yID0gbWl4KGNvbG9yLCB2ZWMzKDAuOSwgMC45LCAyLjApLCBwb3coZG90KG5vcm1hbCwgbm9ybWFsaXplKHZlYzMoLTIuMCwgLTkuMCwgMC41KSkpICogMS41ICsgMC41LCAxLjApKTtcXHJcXG5cXHJcXG4gICAgdmVjMyBzaGFkb3dDb2xvciA9IHZlYzMoMC4wLCAxLjAsIDEuMCk7XFxyXFxuICAgIGNvbG9yID0gbWl4KGNvbG9yLCBzaGFkb3dDb2xvciwgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZyk7XFxyXFxuXFxyXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IsIDEuMCk7XFxyXFxufVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImF0dHJpYnV0ZSB2ZWMzIGNvbG9yO1xcclxcblxcclxcbnVuaWZvcm0gZmxvYXQgdGltZTtcXHJcXG51bmlmb3JtIGZsb2F0IHNpemU7XFxyXFxuXFxyXFxudmFyeWluZyB2ZWM0IHZNdlBvc2l0aW9uO1xcclxcbnZhcnlpbmcgdmVjMyB2Q29sb3I7XFxyXFxuXFxyXFxuZmxvYXQgbWFwKGZsb2F0IHZhbHVlLCBmbG9hdCBiZWZvcmVNaW4sIGZsb2F0IGJlZm9yZU1heCwgZmxvYXQgYWZ0ZXJNaW4sIGZsb2F0IGFmdGVyTWF4KSB7XFxyXFxuICAgIHJldHVybiBhZnRlck1pbiArIChhZnRlck1heCAtIGFmdGVyTWluKSAqICgodmFsdWUgLSBiZWZvcmVNaW4pIC8gKGJlZm9yZU1heCAtIGJlZm9yZU1pbikpO1xcclxcbn1cXHJcXG5cXHJcXG52b2lkIG1haW4oKSB7XFxyXFxuICAgIHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxyXFxuICAgIHZNdlBvc2l0aW9uID0gbXZQb3NpdGlvbjtcXHJcXG4gICAgdkNvbG9yID0gY29sb3I7XFxyXFxuXFxyXFxuICAgIGdsX1BvaW50U2l6ZSA9IChzaXplICsgbWFwKHNpbih0aW1lICogMC4wNSksIC0xLjAsIDEuMCwgMC4wLCAxMDAuMCkpICogKDEwMC4wIC8gbGVuZ3RoKG12UG9zaXRpb24ueHl6KSk7XFxyXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxyXFxufVxcclxcblwiIiwibW9kdWxlLmV4cG9ydHMgPSBcInVuaWZvcm0gc2FtcGxlcjJEIHRleHR1cmU7XFxyXFxudW5pZm9ybSBmbG9hdCB0aW1lO1xcclxcblxcclxcbnZhcnlpbmcgdmVjNCB2TXZQb3NpdGlvbjtcXHJcXG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xcclxcblxcclxcbnZvaWQgbWFpbigpIHtcXHJcXG4gICAgZmxvYXQgb3BhY2l0eSA9IDIwMC4wIC8gbGVuZ3RoKHZNdlBvc2l0aW9uLnh5eik7XFxyXFxuXFxyXFxuICAgIHZlYzIgdXYgPSBnbF9Qb2ludENvb3JkLnh5ICogMi4wIC0gMS4wO1xcclxcblxcclxcbiAgICBmbG9hdCBvcmIgPSAwLjEgLyBsZW5ndGgodmVjMigwLjApIC0gdXYpICogc3RlcCgwLjUsIDEuMCAtIGxlbmd0aCh1dikpO1xcclxcbiAgICBvcmIgPSBzbW9vdGhzdGVwKDAuMCwgMS4wLCBvcmIpO1xcclxcblxcclxcbiAgICB2ZWMzIGNvbG9yID0gdmVjMyhvcmIpICogdkNvbG9yO1xcclxcblxcclxcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLCAxLjApO1xcclxcbn1cXHJcXG5cIiJdLCJzb3VyY2VSb290IjoiIn0=